<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reimu&#39;s blog</title>
  <icon>https://blog.k8s.li/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.k8s.li/"/>
  <updated>2022-02-27T16:00:00.000Z</updated>
  <id>https://blog.k8s.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 kubectl 自动归档 argo workflow 日志</title>
    <link href="https://blog.k8s.li/archive-argo-workflow-log-by-kubectl.html"/>
    <id>https://blog.k8s.li/archive-argo-workflow-log-by-kubectl.html</id>
    <published>2022-02-27T16:00:00.000Z</published>
    <updated>2022-02-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目上使用到 <a href="https://github.com/argoproj/argo-workflows" target="_blank" rel="noopener">argo-workflow</a> 作为工作流引擎来编排运行一些 <a href="https://www.smartx.com/solution/virtualization/" target="_blank" rel="noopener">超融合</a> 集群部署相关的任务，整套环境运行在一个单节点的 K3s 上。之所以选择 argo-workflow + K3s 的搭配主要是想尽可能少地占用系统资源，因为这套环境将来会运行在各种硬件配置不同的笔记本电脑上 😂。综合调研了一些常见的 K8s 部署工具最终就选择了系统资源占用较少的 K3s。</p><p>现在项目的一个需求就是在集群部署完成或失败之后需要将 workflow 的日志归档保存下来。虽然可以在 workflow 的 spec 字段中使用 <code>archiveLogs: true</code> 来让 argo 帮我们自动归档日志，但这个特性依赖于一个 S3 对象存储 <a href="https://argoproj.github.io/argo-workflows/configure-artifact-repository/" target="_blank" rel="noopener">Artifact Repository</a> 。这就意味着还要再部署一个支持 S3 对象存储的组件比如 <a href="https://min.io/" target="_blank" rel="noopener">Minio</a> ，直接把我给整不会了 🌚</p><p><img src="https://p.k8s.li/2021-08-31-pass-tob-k8s-offline-deploy-2.jpeg" alt=""></p><p>其实嘛这个需求很简单的，我就想保存一个日志文件而已，你还再让我安装一个 <a href="https://min.io/" target="_blank" rel="noopener">Minio</a>，实在是太过分了！本来系统的资源十分有限，需要尽可能减少安装一些不必要依赖，为的就是将资源利用率将到最低。但现在为了归档存储一个日志文件储而大动干戈装一个 minio 实在是不划算。这就好比你费了好大功夫部署一套 3 节点的 kubernetes 集群，然而就为了运行一个静态博客那样滑稽 😂</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Deployed my blog on Kubernetes <a href="https://t.co/XHXWLrmYO4" target="_blank" rel="noopener">pic.twitter.com/XHXWLrmYO4</a></p>&mdash; For DevOps Eyes Only (@dexhorthy) <a href="https://twitter.com/dexhorthy/status/856639005462417409?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 24, 2017</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>对于咱这种 <code>用不起</code> S3 对象存储的穷人家孩子，还是想一些其他办法吧，毕竟自己动手丰衣足食。</p><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><p>实现起来也比较简单，对于咱这种 YAML 工程师来说，kubectl 自然再熟悉不过了。想要获取 workflow 的日志，只需要通过 kubectl logs 命令获取出 workflow 所创的 pod 日志就行了呀，要什么 S3 对象存储 😖</p><h3 id="筛选-pod"><a href="#筛选-pod" class="headerlink" title="筛选 pod"></a>筛选 pod</h3><p>对于同一个 workflow 来将，每个 stage 所创建出来的 pod name 有一定的规律。在定义 workflow 的时候，<a href="https://argoproj.github.io/argo-workflows/fields/#objectmeta" target="_blank" rel="noopener">generateName</a> 参数通常使用 <code>${name}-</code> 格式。以 <code>-</code> 作为分隔符，最后一个字段是随机生成的一个数字 ID，倒数第二个字段则是 argo 随机生成的 workflow ID，剩余前面的字符则是我们定义的 generateName。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generateName:</span> <span class="string">archive-log-test-</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">archive-log-test-jzt8n-3498199655                          0/2     Completed   0               4m18s</span><br><span class="line">archive-log-test-jzt8n-3618624526                          0/2     Completed   0               4m8s</span><br><span class="line">archive-log-test-jzt8n-2123203324                          0/2     Completed   0               3m58s</span><br></pre></td></tr></table></figure><p>在 pod 的 labels 中同样也包含着该 workflow 所对应的 ID，因此我们可以根据此 labels 过滤出该 workflow 所创建出来的 pod。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">workflows.argoproj.io/node-id:</span> <span class="string">archive-log-test-jzt8n-3498199655</span></span><br><span class="line">    <span class="attr">workflows.argoproj.io/node-name:</span> <span class="string">archive-log-test-jzt8n[0].list-default-running-pods</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">"2022-02-28T12:53:32Z"</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">workflows.argoproj.io/completed:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">workflows.argoproj.io/workflow:</span> <span class="string">archive-log-test-jzt8n</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">archive-log-test-jzt8n-3498199655</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">ownerReferences:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line">    <span class="attr">blockOwnerDeletion:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">archive-log-test-jzt8n</span></span><br><span class="line">    <span class="attr">uid:</span> <span class="string">e91df2cb-b567-4cf0-9be5-3dd6c72854cd</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">"1251330"</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">ce37a709-8236-445b-8d00-a7926fa18ed0</span></span><br></pre></td></tr></table></figure><p>通过 <code>-l lables</code> 过滤出一个 workflow 所创建的 pod；通过 <code>--sort-by</code> 以创建时间进行排序；通过 <code>-o name</code> 只输出 pod 的 name：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -l workflows.argoproj.io/workflow=archive-log-test-jzt8n --sort-by=<span class="string">'.metadata.creationTimestamp'</span> -o name</span><br><span class="line">pod/archive-log-test-jzt8n-3498199655</span><br><span class="line">pod/archive-log-test-jzt8n-3618624526</span><br><span class="line">pod/archive-log-test-jzt8n-2123203324</span><br></pre></td></tr></table></figure><h3 id="获取日志"><a href="#获取日志" class="headerlink" title="获取日志"></a>获取日志</h3><p>通过上面的步骤我们就可以获取到一个 workflow 所创建的 pod 列表。然后再通过 kubectl logs 命令获取 pod 中 main 容器的日志，为方便区分日志的所对应的 workflow ，我们就以 workflow 的 ID 为前缀名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs archive-log-test-jzt8n-3618624526 -c main</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOG_PATH=/var/<span class="built_in">log</span></span><br><span class="line">NAME=archive-log-test-jzt8n</span><br><span class="line">kubectl get pods -l workflows.argoproj.io/workflow=<span class="variable">$&#123;NAME&#125;</span> \</span><br><span class="line">--sort-by=<span class="string">'.metadata.creationTimestamp'</span> -o name \</span><br><span class="line">| xargs -I &#123;&#125; -t kubectl logs &#123;&#125; -c main &gt;&gt; <span class="variable">$&#123;LOG_PATH&#125;</span>/<span class="variable">$&#123;NAME&#125;</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><p>根据 argo-workflow 官方提供的 <a href="https://github.com/argoproj/argo-workflows/blob/master/examples/exit-handlers.yaml" target="_blank" rel="noopener"><strong>exit-handlers.yaml</strong></a> example，我们就照葫芦画瓢搓一个 workflow 退出后自动调用使用 kubectl 获取 workflow 日志的一个 step，定义的 exit-handler 内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">exit-handler</span></span><br><span class="line">    <span class="attr">container:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">"kubectl"</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">lachlanevenson/k8s-kubectl:v1.23.2</span></span><br><span class="line">      <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">          <span class="string">kubectl</span> <span class="string">get</span> <span class="string">pods</span> <span class="string">-l</span> <span class="string">workflows.argoproj.io/workflow=$&#123;POD_NAME%-*&#125;</span> <span class="string">\</span></span><br><span class="line">          <span class="string">--sort-by=".metadata.creationTimestamp"</span> <span class="string">-o</span> <span class="string">name</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-v</span> <span class="string">$&#123;POD_NAME&#125;</span> <span class="string">\</span></span><br><span class="line">          <span class="string">|</span> <span class="string">xargs</span> <span class="string">-I</span> <span class="string">&#123;&#125;</span> <span class="string">-t</span> <span class="string">kubectl</span> <span class="string">logs</span> <span class="string">&#123;&#125;</span> <span class="string">-c</span> <span class="string">main</span> <span class="string">&gt;&gt;</span> <span class="string">$&#123;LOG_PATH&#125;/$&#123;POD_NAME%-*&#125;.log</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LOG_PATH</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">/var/log/workflow</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-datastore</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/log/workflow</span></span><br><span class="line">    <span class="attr">retryStrategy:</span></span><br><span class="line">      <span class="attr">limit:</span> <span class="string">"5"</span></span><br><span class="line">      <span class="attr">retryPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line"><span class="attr">entrypoint:</span> <span class="string">archive-log-test</span></span><br><span class="line"><span class="attr">serviceAccountName:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-datastore</span></span><br><span class="line">    <span class="attr">nfs:</span></span><br><span class="line">      <span class="attr">server:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data/workflow/log</span></span><br><span class="line"><span class="attr">onExit:</span> <span class="string">exit-handler</span></span><br></pre></td></tr></table></figure><p>将上述定义的 <code>exit-handler</code> 内容复制粘贴到你的 workflow spec 配置中就可以。由于日志需要持久化存储，我这里使用的是 NFS 存储，也可以根据自己的需要换成其他存储，只需要修改一下 <code>volumes</code> 配置即可。</p><p>完整的 <a href="https://gist.github.com/muzi502/9b26c6854c509c42ecd7f7004436ca23" target="_blank" rel="noopener">workflow example</a> 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">argoproj.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Workflow</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">generateName:</span> <span class="string">archive-log-test-</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">templates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">archive-log-test</span></span><br><span class="line">      <span class="attr">steps:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">list-default-running-pods</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">kubectl</span></span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">namespace</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">default</span></span><br><span class="line">        <span class="bullet">-</span> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">list-kube-system-running-pods</span></span><br><span class="line">            <span class="attr">template:</span> <span class="string">kubectl</span></span><br><span class="line">            <span class="attr">arguments:</span></span><br><span class="line">              <span class="attr">parameters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">namespace</span></span><br><span class="line">                  <span class="attr">value:</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubectl</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">        <span class="attr">parameters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">namespace</span></span><br><span class="line">      <span class="attr">container:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"kubectl"</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">lachlanevenson/k8s-kubectl:v1.23.2</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">            <span class="string">kubectl</span> <span class="string">get</span> <span class="string">pods</span> <span class="string">--field-selector=status.phase=Running</span> <span class="string">-n</span> <span class="string">&#123;&#123;inputs.parameters.namespace&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">exit-handler</span></span><br><span class="line">      <span class="attr">container:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"kubectl"</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">lachlanevenson/k8s-kubectl:v1.23.2</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">            <span class="string">kubectl</span> <span class="string">get</span> <span class="string">pods</span> <span class="string">-l</span> <span class="string">workflows.argoproj.io/workflow=$&#123;POD_NAME%-*&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">--sort-by=".metadata.creationTimestamp"</span> <span class="string">-o</span> <span class="string">name</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-v</span> <span class="string">$&#123;POD_NAME&#125;</span> <span class="string">\</span></span><br><span class="line">            <span class="string">|</span> <span class="string">xargs</span> <span class="string">-I</span> <span class="string">&#123;&#125;</span> <span class="string">-t</span> <span class="string">kubectl</span> <span class="string">logs</span> <span class="string">&#123;&#125;</span> <span class="string">-c</span> <span class="string">main</span> <span class="string">&gt;&gt;</span> <span class="string">$&#123;LOG_PATH&#125;/$&#123;POD_NAME%-*&#125;.log</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">fieldRef:</span></span><br><span class="line">                <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LOG_PATH</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">/var/log/workflow</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-datastore</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/var/log/workflow</span></span><br><span class="line">      <span class="attr">retryStrategy:</span></span><br><span class="line">        <span class="attr">limit:</span> <span class="string">"5"</span></span><br><span class="line">        <span class="attr">retryPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">  <span class="attr">entrypoint:</span> <span class="string">archive-log-test</span></span><br><span class="line">  <span class="attr">serviceAccountName:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-datastore</span></span><br><span class="line">      <span class="attr">nfs:</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/data/workflow/log</span></span><br><span class="line">  <span class="attr">onExit:</span> <span class="string">exit-handler</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;项目上使用到 &lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubectl" scheme="https://blog.k8s.li/tags/kubectl/"/>
    
      <category term="argo-workflow" scheme="https://blog.k8s.li/tags/argo-workflow/"/>
    
  </entry>
  
  <entry>
    <title>VMware Tanzu kubernetes 发行版部署尝鲜</title>
    <link href="https://blog.k8s.li/deploy-tanzu-k8s-cluster.html"/>
    <id>https://blog.k8s.li/deploy-tanzu-k8s-cluster.html</id>
    <published>2022-02-05T16:00:00.000Z</published>
    <updated>2022-02-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前接触的 Kubernetes 集群部署工具大多数都是依赖于 ssh 连接到待部署的节点上进行部署操作，这样就要求部署前需要提前准备好集群节点，且要保证这些节点的网络互通以及时钟同步等问题。类似于 kubespray 或者 kubekey 这些部署工具是不会去管这些底层的 IaaS 资源的创建，是要自己提前准备好。但是在一些企业私有云环境中，使用了如 <a href="https://docs.vmware.com/cn/VMware-vSphere/index.html" target="_blank" rel="noopener">VMware vShpere</a> 或 <a href="https://www.openstack.org/" target="_blank" rel="noopener">OpenStack</a> 这些虚拟化平台，是可以将 K8s 集群部署与 IaaS 资源创建这两步统一起来的，这样就可以避免手动创建和配置虚拟机这些繁琐的步骤。</p><p>目前将 IaaS 资源创建与 K8s 集群部署结合起来也有比较成熟的方案，比如基于 <a href="https://github.com/kubernetes-sigs/cluster-api" target="_blank" rel="noopener">cluster-api</a> 项目的 <a href="https://github.com/vmware-tanzu" target="_blank" rel="noopener">tanzu</a> 。本文就以 <a href="https://github.com/vmware-tanzu/community-edition" target="_blank" rel="noopener">VMware Tanzu 社区版</a> 为例在一台物理服务器上，从安装 ESXi OS 到部署完成 Tanzu Workload 集群，来体验一下这种部署方案的与众不同之处。</p><h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><ul><li>下载依赖文件</li><li>安装 govc 依赖</li><li>安装 ESXi OS</li><li>安装 vCenter</li><li>配置 vCenter</li><li>创建 bootstrap 虚拟机</li><li>初始化 bootstrap 节点</li><li>部署 Tanzu Manager 集群</li><li>部署 Tanzu Workload 集群</li></ul><h3 id="劝退三连-😂"><a href="#劝退三连-😂" class="headerlink" title="劝退三连 😂"></a>劝退三连 😂</h3><ul><li>需要有一个 <a href="https://customerconnect.vmware.com/login" target="_blank" rel="noopener">VMware 的账户</a> 用于下载一些 ISO 镜像和虚拟机模版;</li><li>需要有一台物理服务器，推荐最低配置 8C 32G，至少 256GB 存储；</li><li>需要一台 DHCP 服务器，由于默认是使用 DHCP 获取 IP 来分配给虚拟机的，因此 ESXi 所在的 VM Network  网络中必须有一台 DHCP 服务器用于给虚拟机分配 IP；</li></ul><h3 id="下载依赖文件"><a href="#下载依赖文件" class="headerlink" title="下载依赖文件"></a>下载依赖文件</h3><p>整个部署流程所需要的依文件赖如下，可以先将这些依赖下载到本地的机器上，方便后续使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@devbox:/root/tanzu <span class="comment"># tree -sh</span></span><br><span class="line">.</span><br><span class="line">├── [  12M]  govc_Linux_x86_64.tar.gz</span><br><span class="line">├── [ 895M]  photon-3-kube-v1.21.2+vmware.1-tkg.2-12816990095845873721.ova</span><br><span class="line">├── [ 225M]  photon-ova-4.0-c001795b80.ova</span><br><span class="line">├── [ 170M]  tce-linux-amd64-v0.9.1.tar.gz</span><br><span class="line">├── [ 9.0G]  VMware-VCSA-all-7.0.3-18778458.iso</span><br><span class="line">└── [ 390M]  VMware-VMvisor-Installer-7.0U2a-17867351.x86_64.iso</span><br></pre></td></tr></table></figure><table><thead><tr><th>文件</th><th>用途</th><th>下载方式</th></tr></thead><tbody><tr><td><a href="https://customerconnect.vmware.com/downloads/details?downloadGroup=ESXI70U2A&productId=974&rPId=46384" target="_blank" rel="noopener">VMware-VMvisor-Installer-7.0U2a-17867351.x86_64.iso</a></td><td>安装 ESXi OS</td><td>VMware 需账户</td></tr><tr><td><a href="https://customerconnect.vmware.com/downloads/details?downloadGroup=VC70U3C&productId=974&rPId=83853" target="_blank" rel="noopener">VMware-VCSA-all-7.0.3-19234570.iso</a></td><td>安装 vCenter</td><td>VMware 需账户</td></tr><tr><td><a href="https://packages.vmware.com/photon/4.0/Rev2/ova/photon-ova-4.0-c001795b80.ova" target="_blank" rel="noopener">photon-ova-4.0-c001795b80.ova</a></td><td>bootstrap 节点</td><td>VMware</td></tr><tr><td><a href="https://customerconnect.vmware.com/downloads/get-download?downloadGroup=TCE-090" target="_blank" rel="noopener">photon-3-kube-v1.21.2+vmware.1-tkg.2-12816990095845873721.ova</a></td><td>tanzu 集群节点</td><td>VMware 需账户</td></tr><tr><td><a href="https://github.com/vmware-tanzu/community-edition/releases/download/v0.9.1/tce-linux-amd64-v0.9.1.tar.gz" target="_blank" rel="noopener">tce-linux-amd64-v0.9.1.tar.gz</a></td><td>tanzu 社区版</td><td>GitHub release</td></tr><tr><td><a href="https://github.com/vmware/govmomi/releases/download/v0.27.3/govc_Linux_x86_64.tar.gz" target="_blank" rel="noopener">govc_Linux_x86_64.tar.gz</a></td><td>安装/配置 vCenter</td><td>GitHub release</td></tr></tbody></table><p>注意 ESXi 和 vCenter 的版本最好是 7.0 及以上，我只在 ESXi 7.0.2 和 vCenter 7.0.3 上测试过，其他版本可能会有些差异；另外 ESXi 的版本不建议使用最新的 7.0.3，因为有比较严重的 bug，官方也建议用户生产环境不要使用该版本了 <a href="https://kb.vmware.com/s/article/86287" target="_blank" rel="noopener">vSphere 7.0 Update 3 Critical Known Issues - Workarounds &amp; Fix (86287)</a> 。</p><h3 id="安装-govc-及依赖"><a href="#安装-govc-及依赖" class="headerlink" title="安装 govc 及依赖"></a>安装 govc 及依赖</h3><p>在本地机器上安装好 govc 和 jq，这两个工具后面在配置 vCenter 的时候会用到。</p><ul><li>macOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install govc jq</span><br></pre></td></tr></table></figure><ul><li>Debian/Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xf govc_Linux_x86_64.tar.gz -C /usr/<span class="built_in">local</span>/bin</span><br><span class="line">$ apt install jq -y</span><br></pre></td></tr></table></figure><ul><li>其他 Linux 可以在 govc 和 jq 的 GitHub 上下载对应的安装文件进行安装。</li></ul><h3 id="安装-ESXi-OS"><a href="#安装-ESXi-OS" class="headerlink" title="安装 ESXi OS"></a>安装 ESXi OS</h3><p>ESXi OS 的安装网上有很多教程，没有太多值得讲解的地方，因此就参照一下其他大佬写的博客或者官方的安装文档 <a href="https://docs.vmware.com/cn/VMware-vSphere/7.0/vsphere-esxi-701-installation-setup-guide.pdf" target="_blank" rel="noopener">VMware ESXi 安装和设置</a> 来就行；需要注意一点，ESXi OS 安装时 VMFSL 分区将会占用大量的存储空间，这将会使得 ESXi OS 安装所在的磁盘最终创建出来的 datastore 比预期小很多，而且这个 VMFSL 分区在安装好之后就很难再做调整了。因此如果磁盘存储空间比较紧张，在安装 ESXi OS 之前可以考虑下如何去掉这个分区；或者和我一样将 ESXI OS 安装在了一个 16G 的 USB Dom 盘上，不过生产环境不建议采用这种方案 😂（其实个人觉着安装在 U 盘上问题不大，ESXi OS 启动之后是加载到内存中运行的，不会对 U 盘有大量的读写操作，只不过在机房中 U 盘被人不小心拔走就凉了。</p><ul><li>设置 govc 环境变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ESXi 节点的 IP</span></span><br><span class="line"><span class="built_in">export</span> ESXI_IP=<span class="string">"192.168.18.47"</span></span><br><span class="line"><span class="comment"># ESXi 登录的用户名，初次安装后默认为 root</span></span><br><span class="line"><span class="built_in">export</span> GOVC_USERNAME=<span class="string">"root"</span></span><br><span class="line"><span class="comment"># 在 ESXi 安装时设置的 root 密码</span></span><br><span class="line"><span class="built_in">export</span> GOVC_PASSWORD=<span class="string">"admin@2022"</span></span><br><span class="line"><span class="comment"># 允许不安全的 SSL 连接</span></span><br><span class="line"><span class="built_in">export</span> GOVC_INSECURE=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> GOVC_URL=<span class="string">"https://<span class="variable">$&#123;ESXI_IP&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> GOVC_DATASTORE=datastore1</span><br></pre></td></tr></table></figure><ul><li>测试 govc 是否能正常连接 ESXi 主机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Name:              localhost.local</span><br><span class="line">  Path:            /ha-datacenter/host/localhost/localhost</span><br><span class="line">  Manufacturer:    Dell</span><br><span class="line">  Logical CPUs:    20 CPUs @ 2394MHz</span><br><span class="line">  Processor <span class="built_in">type</span>:  Intel(R) Xeon(R) Silver 4210R CPU @ 2.40GHz</span><br><span class="line">  CPU usage:       579 MHz (1.2%)</span><br><span class="line">  Memory:          261765MB</span><br><span class="line">  Memory usage:    16457 MB (6.3%)</span><br><span class="line">  Boot time:       2022-02-02 11:53:59.630124 +0000 UTC</span><br><span class="line">  State:           connected</span><br></pre></td></tr></table></figure><h3 id="安装-vCenter"><a href="#安装-vCenter" class="headerlink" title="安装 vCenter"></a>安装 vCenter</h3><p>按照 VMware 官方的 vCenter 安装文档 <a href="https://docs.vmware.com/cn/VMware-vSphere/7.0/com.vmware.vcenter.install.doc/GUID-8DC3866D-5087-40A2-8067-1361A2AF95BD.html" target="_blank" rel="noopener">关于 vCenter Server 安装和设置</a> 来安装实在是过于繁琐，其实官方的 ISO 安装方式无非是运行一个 installer web 服务，然后在浏览器上配置好 vCenter 虚拟机的参数，再将填写的配置信息在部署 vcsa 虚拟机的时候注入到 ova 的配置参数中。</p><p>知道这个安装过程的原理之后我们也可以自己配置 vCenter 的参数信息，然后通过 govc 来部署 ova；这比使用 UI 的方式简单方便很多，最终只需要填写一个配置文件，一条命令就可以部署完成啦。</p><ul><li>首先是挂载 vCenter 的 ISO，找到 vcsa ova 文件，它是 vCenter 虚拟机的模版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mount -o loop VMware-VCSA-all-7.0.3-18778458.iso /mnt</span><br><span class="line">$ ls /mnt/vcsa/VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10.ova</span><br><span class="line">/mnt/vcsa/VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10.ova</span><br></pre></td></tr></table></figure><ul><li>根据自己的环境信息修改下面安装脚本中的相关配置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">VCSA_OVA_FILE=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"></span><br><span class="line"><span class="comment"># ESXi 的 IP 地址</span></span><br><span class="line"><span class="built_in">export</span> ESXI_IP=<span class="string">"192.168.18.47"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ESXi 的用户名</span></span><br><span class="line"><span class="built_in">export</span> GOVC_USERNAME=<span class="string">"root"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ESXI 的密码</span></span><br><span class="line"><span class="built_in">export</span> GOVC_PASSWORD=<span class="string">"admin@2020"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 vCenter 虚拟机使用的 datastore 名称</span></span><br><span class="line"><span class="built_in">export</span> GOVC_DATASTORE=datastore1</span><br><span class="line"><span class="built_in">export</span> GOVC_INSECURE=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> GOVC_URL=<span class="string">"https://<span class="variable">$&#123;ESXI_IP&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vCenter 的登录密码</span></span><br><span class="line">VM_PASSWORD=<span class="string">"admin@2020"</span></span><br><span class="line"><span class="comment"># vCenter 的 IP 地址</span></span><br><span class="line">VM_IP=192.168.20.92</span><br><span class="line"><span class="comment"># vCenter 虚拟机的名称</span></span><br><span class="line">VM_NAME=vCenter-Server-Appliance</span><br><span class="line"><span class="comment"># vCenter 虚拟机使用的网络</span></span><br><span class="line">VM_NETWORK=<span class="string">"VM Network"</span></span><br><span class="line"><span class="comment"># DNS 服务器</span></span><br><span class="line">VM_DNS=<span class="string">"223.6.6.6"</span></span><br><span class="line"><span class="comment"># NTP 服务器</span></span><br><span class="line">VM_NTP=<span class="string">"0.pool.ntp.org"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">deploy_vcsa_vm</span></span>()&#123;</span><br><span class="line">    config=$(govc host.info -k -json | jq -r <span class="string">'.HostSystems[].Config'</span>)</span><br><span class="line">    gateway=$(jq -r <span class="string">'.Network.IpRouteConfig.DefaultGateway'</span> &lt;&lt;&lt;<span class="string">"<span class="variable">$config</span>"</span>)</span><br><span class="line">    route=$(jq -r <span class="string">'.Network.RouteTableInfo.IpRoute[] | select(.DeviceName == "vmk0") | select(.Gateway == "0.0.0.0")'</span> &lt;&lt;&lt;<span class="string">"<span class="variable">$config</span>"</span>)</span><br><span class="line">    prefix=$(jq -r <span class="string">'.PrefixLength'</span> &lt;&lt;&lt;<span class="string">"<span class="variable">$route</span>"</span>)</span><br><span class="line">    opts=(</span><br><span class="line">        cis.vmdir.password=<span class="variable">$&#123;VM_PASSWORD&#125;</span></span><br><span class="line">        cis.appliance.root.passwd=<span class="variable">$&#123;VM_PASSWORD&#125;</span></span><br><span class="line">        cis.appliance.root.shell=/bin/bash</span><br><span class="line">        cis.deployment.node.type=embedded</span><br><span class="line">        cis.vmdir.domain-name=vsphere.local</span><br><span class="line">        cis.vmdir.site-name=VCSA</span><br><span class="line">        cis.appliance.net.addr.family=ipv4</span><br><span class="line">        cis.appliance.ssh.enabled=True</span><br><span class="line">        cis.ceip_enabled=False</span><br><span class="line">        cis.deployment.autoconfig=True</span><br><span class="line">        cis.appliance.net.addr=<span class="variable">$&#123;VM_IP&#125;</span></span><br><span class="line">        cis.appliance.net.prefix=<span class="variable">$&#123;prefix&#125;</span></span><br><span class="line">        cis.appliance.net.dns.servers=<span class="variable">$&#123;VM_DNS&#125;</span></span><br><span class="line">        cis.appliance.net.gateway=<span class="variable">$gateway</span></span><br><span class="line">        cis.appliance.ntp.servers=<span class="string">"<span class="variable">$&#123;VM_NTP&#125;</span>"</span></span><br><span class="line">        cis.appliance.net.mode=static</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    props=$(<span class="built_in">printf</span> -- <span class="string">"guestinfo.%s\n"</span> <span class="string">"<span class="variable">$&#123;opts[@]&#125;</span>"</span> | jq --slurp -R <span class="string">'split("\n") | map(select(. != "")) | map(split("=")) | map(&#123;"Key": .[0], "Value": .[1]&#125;)'</span>)</span><br><span class="line"></span><br><span class="line">    cat &lt;&lt;EOF | govc import.<span class="variable">$&#123;VCSA_OVA_FILE##*.&#125;</span> -options - <span class="string">"<span class="variable">$&#123;VCSA_OVA_FILE&#125;</span>"</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">"Name"</span>: <span class="string">"<span class="variable">$&#123;VM_NAME&#125;</span>"</span>,</span><br><span class="line">    <span class="string">"Deployment"</span>: <span class="string">"tiny"</span>,</span><br><span class="line">    <span class="string">"DiskProvisioning"</span>: <span class="string">"thin"</span>,</span><br><span class="line">    <span class="string">"IPProtocol"</span>: <span class="string">"IPv4"</span>,</span><br><span class="line">    <span class="string">"Annotation"</span>: <span class="string">"VMware vCenter Server Appliance"</span>,</span><br><span class="line">    <span class="string">"PowerOn"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"WaitForIP"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"InjectOvfEnv"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"NetworkMapping"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"Network 1"</span>,</span><br><span class="line">        <span class="string">"Network"</span>: <span class="string">"<span class="variable">$&#123;VM_NETWORK&#125;</span>"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"PropertyMapping"</span>: <span class="variable">$&#123;props&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deploy_vcsa_vm</span><br><span class="line">govc vm.change -vm <span class="string">"<span class="variable">$&#123;VM_NAME&#125;</span>"</span> -g vmwarePhoton64Guest</span><br><span class="line">govc vm.power -on <span class="string">"<span class="variable">$&#123;VM_NAME&#125;</span>"</span></span><br><span class="line">govc vm.ip -a <span class="string">"<span class="variable">$&#123;VM_NAME&#125;</span>"</span></span><br></pre></td></tr></table></figure><ul><li>通过脚本安装 vCenter，指定第一参数为 OVA 的绝对路径。运行完后将会自动将 ova 导入到 vCenter，并启动虚拟机；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行该脚本，第一个参数传入 vCenter ISO 中 vcsa ova 文件的绝对路径</span></span><br><span class="line">$ bash install-vcsa.sh /mnt/vcsa/VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10.ova</span><br><span class="line"></span><br><span class="line">[03-02-22 18:40:19] Uploading VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10-disk1.vmdk... OK</span><br><span class="line">[03-02-22 18:41:09] Uploading VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10-disk2.vmdk... (29%, 52.5MiB/s)</span><br><span class="line">[03-02-22 18:43:08] Uploading VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10-disk2.vmdk... OK</span><br><span class="line">[03-02-22 18:43:08] Injecting OVF environment...</span><br><span class="line">Powering on VirtualMachine:3... OK</span><br><span class="line">fe80::20c:29ff:fe03:2f80</span><br></pre></td></tr></table></figure><ul><li>设置 vCenter 登录的环境变量，我们使用 govc 来配置 vCenter，通过浏览器 Web UI 的方式配置起来效率有点低，不如 govc 命令一把梭方便 😂</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOVC_URL=<span class="string">"https://192.168.20.92"</span></span><br><span class="line"><span class="built_in">export</span> GOVC_USERNAME=<span class="string">"administrator@vsphere.local"</span></span><br><span class="line"><span class="built_in">export</span> GOVC_PASSWORD=<span class="string">"admin@2022"</span></span><br><span class="line"><span class="built_in">export</span> GOVC_INSECURE=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> GOVC_DATASTORE=datastore1</span><br></pre></td></tr></table></figure><ul><li>虚拟机启动后将自动进行 vCenter 的安装配置，等待一段时间 vCenter 安装好之后，使用 govc about 查看 vCenter 的信息，如果能正确或渠道说明 vCenter 就安装好了；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ govc about</span><br><span class="line">FullName:     VMware vCenter Server 7.0.3 build-18778458</span><br><span class="line">Name:         VMware vCenter Server</span><br><span class="line">Vendor:       VMware, Inc.</span><br><span class="line">Version:      7.0.3</span><br><span class="line">Build:        18778458</span><br><span class="line">OS <span class="built_in">type</span>:      linux-x64</span><br><span class="line">API <span class="built_in">type</span>:     VirtualCenter</span><br><span class="line">API version:  7.0.3.0</span><br><span class="line">Product ID:   vpx</span><br><span class="line">UUID:         0b49e119-e38f-4fbc-84a8-d7a0e548027d</span><br></pre></td></tr></table></figure><h3 id="配置-vCenter"><a href="#配置-vCenter" class="headerlink" title="配置 vCenter"></a>配置 vCenter</h3><p>这一步骤主要是配置 vCenter：创建 Datacenter、cluster、folder 等资源，并将 ESXi 主机添加到 cluster 中；</p><ul><li>配置 vCenter</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 Datacenter 数据中心</span></span><br><span class="line">$ govc datacenter.create SH-IDC</span><br><span class="line"><span class="comment"># 创建 Cluster 集群</span></span><br><span class="line">$ govc cluster.create -dc=SH-IDC Tanzu-Cluster</span><br><span class="line"><span class="comment"># 将 ESXi 主机添加到 Cluster 当中</span></span><br><span class="line">$ govc cluster.add -dc=SH-IDC -cluster=Tanzu-Cluster -hostname=192.168.18.47 --username=root -password=<span class="string">'admin@2020'</span> -noverify</span><br><span class="line"><span class="comment"># 创建 folder，用于将 Tanzu 的节点虚拟机存放到该文件夹下</span></span><br><span class="line">$ govc folder.create /SH-IDC/vm/Tanzu-node</span><br><span class="line"><span class="comment"># 导入 tanzu 汲取节点的虚拟机 ova 模版</span></span><br><span class="line">$ govc import.ova -dc=<span class="string">'SH-IDC'</span> -ds=<span class="string">'datastore1'</span> photon-3-kube-v1.21.2+vmware.1-tkg.2-12816990095845873721.ova</span><br><span class="line"><span class="comment"># 将虚拟机转换为模版，后续 tanzu 集群将以该模版创建虚拟机</span></span><br><span class="line">$ govc vm.markastemplate photon-3-kube-v1.21.2</span><br></pre></td></tr></table></figure><h3 id="初始化-bootstrap-节点"><a href="#初始化-bootstrap-节点" class="headerlink" title="初始化 bootstrap 节点"></a>初始化 bootstrap 节点</h3><p>bootstrap 节点节点是用于运行 tanzu 部署工具的节点，官方是支持 Linux/macOS/Windows 三种操作系统的，但有一些比较严格的要求：</p><table><thead><tr><th>Arch: x86; ARM is currently unsupported</th></tr></thead><tbody><tr><td>RAM: 6 GB</td></tr><tr><td>CPU: 2</td></tr><tr><td><a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener">Docker</a> Add your non-root user account to the docker user group. Create the group if it does not already exist. This lets the Tanzu CLI access the Docker socket, which is owned by the root user. For more information, see steps 1 to 4 in the <a href="https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noopener">Manage Docker as a non-root user</a> procedure in the Docker documentation.</td></tr><tr><td><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/" target="_blank" rel="noopener">Kubectl</a></td></tr><tr><td>Latest version of Chrome, Firefox, Safari, Internet Explorer, or Edge</td></tr><tr><td>System time is synchronized with a Network Time Protocol (NTP) server.</td></tr><tr><td>Ensure your bootstrap machine is using <a href="https://man7.org/linux/man-pages/man7/cgroups.7.html" target="_blank" rel="noopener">cgroup v1</a>. For more information, see <a href="https://tanzucommunityedition.io/docs/latest/support-matrix/#check-and-set-the-cgroup" target="_blank" rel="noopener">Check and set the cgroup</a>.</td></tr></tbody></table><p>在这里为了避免这些麻烦的配置，我就直接使用的 VMware 官方的 <a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS#photon-os-40-rev2-binaries" target="_blank" rel="noopener">Photon OS 4.0 Rev2</a> ，下载 OVA 格式的镜像直接导入到 ESXi 主机启动一台虚拟机即可，能节省不少麻烦的配置；还有一个好处就是在一台单独的虚拟机上运行 tanzu 部署工具不会污染本地的开发环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://packages.vmware.com/photon/4.0/Rev2/ova/photon-ova-4.0-c001795b80.ova</span><br><span class="line"><span class="comment"># 导入 OVA 虚拟机模版</span></span><br><span class="line">$ govc import.ova -ds=<span class="string">'datastore1'</span> -name bootstrap-node photon-ova-4.0-c001795b80.ova</span><br><span class="line"><span class="comment"># 修改一下虚拟机的配置，调整为 4C8G</span></span><br><span class="line">$ govc vm.change -c 4 -m 8192 -vm bootstrap-node</span><br><span class="line"><span class="comment"># 开启虚拟机</span></span><br><span class="line">$ govc vm.power -on bootstrap-node</span><br><span class="line"><span class="comment"># 查看虚拟机获取到的 IPv4 地址</span></span><br><span class="line">$ govc vm.ip -a -<span class="built_in">wait</span> 1m bootstrap-node</span><br><span class="line">$ ssh root@192.168.74.10</span><br><span class="line"><span class="comment"># 密码默认为 changeme，输入完密码之后提示在输入一遍 changeme，然后再修改新的密码</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">"VMware Photon OS"</span></span><br><span class="line">VERSION=<span class="string">"4.0"</span></span><br><span class="line">ID=photon</span><br><span class="line">VERSION_ID=4.0</span><br><span class="line">PRETTY_NAME=<span class="string">"VMware Photon OS/Linux"</span></span><br><span class="line">ANSI_COLOR=<span class="string">"1;34"</span></span><br><span class="line">HOME_URL=<span class="string">"https://vmware.github.io/photon/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://github.com/vmware/photon/issues"</span></span><br></pre></td></tr></table></figure><ul><li>安装部署时需要的一些工具（切，Photon OS 里竟然连个 tar 命令都没有 😠</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># tdnf install sudo tar -y</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># curl -LO https://dl.k8s.io/release/v1.21.2/bin/linux/amd64/kubectl</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</span></span><br></pre></td></tr></table></figure><ul><li>启动 docker，bootstrap 节点会以 kind 的方式运行一个 K8s 集群，需要用到 docker。虽然可以使用外部的 k8s 集群，但不是很推荐，因为 cluster-api 依赖 k8s 的版本，不能太高也不能太低；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># systemctl enable docker --now</span></span><br></pre></td></tr></table></figure><ul><li>从 <a href="https://github.com/vmware-tanzu/community-edition/releases/tag/v0.9.1" target="_blank" rel="noopener">vmware-tanzu/community-edition</a> 下载 tanzu 社区版的安装包，然后解压后安装；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># curl -LO  https://github.com/vmware-tanzu/community-edition/releases/download/v0.9.1/tce-linux-amd64-v0.9.1.tar.gz</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># tar -xf tce-linux-amd64-v0.9.1.tar.gz</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># cd tce-linux-amd64-v0.9.1/</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># bash install.sh</span></span><br></pre></td></tr></table></figure><p>然而不幸地翻车了， install.sh 脚本中禁止 root 用户运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ ALLOW_INSTALL_AS_ROOT=</span><br><span class="line">+ [[ 0 -eq 0 ]]</span><br><span class="line">+ [[ <span class="string">''</span> != \t\r\u\e ]]</span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'Do not run this script as root'</span></span><br><span class="line">Do not run this script as root</span><br><span class="line">+ <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>我就偏偏要以 root 用户来运行怎么惹 😡</p><p><img src="https://p.k8s.li/2022-01-22-deploy-tanzu-k8s-cluster-01.jpg" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed 去掉第一个 exit 1 就可以了</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># sed -i.bak "s/exit 1//" install.sh</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># bash install.sh</span></span><br></pre></td></tr></table></figure><p>安装好之后会输出 <code>Installation complete!</code>（讲真官方的 install.sh 脚本输出很不友好，污染我的 terminal</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+ tanzu init</span><br><span class="line">| initializing ✔  successfully initialized CLI</span><br><span class="line">++ tanzu plugin repo list</span><br><span class="line">++ grep tce</span><br><span class="line">+ TCE_REPO=</span><br><span class="line">+ [[ -z <span class="string">''</span> ]]</span><br><span class="line">+ tanzu plugin repo add --name tce --gcp-bucket-name tce-tanzu-cli-plugins --gcp-root-path artifacts</span><br><span class="line">++ tanzu plugin repo list</span><br><span class="line">++ grep core-admin</span><br><span class="line">+ TCE_REPO=</span><br><span class="line">+ [[ -z <span class="string">''</span> ]]</span><br><span class="line">+ tanzu plugin repo add --name core-admin --gcp-bucket-name tce-tanzu-cli-framework-admin --gcp-root-path artifacts-admin</span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'Installation complete!'</span></span><br><span class="line">Installation complete!</span><br></pre></td></tr></table></figure><h3 id="部署管理集群"><a href="#部署管理集群" class="headerlink" title="部署管理集群"></a>部署管理集群</h3><p>先是部署一个 tanzu 的管理集群，有两种方式，一种是通过 <a href="https://tanzucommunityedition.io/docs/latest/getting-started/" target="_blank" rel="noopener">官方文档</a> 提到的通过 Web UI 的方式。目前这个 UI 界面比较拉垮，它主要是用来让用户填写一些配置参数，然后调用后台的 tanzu 命令来部署集群。并把集群部署的日志和进度展示出来；部署完成之后，这个 UI 又不能管理这些集群，又不支持部署 workload 集群（</p><p>另一种就是通过 tanzu 命令指定配置文件来部署，这种方式不需要通过浏览器在 web 页面上傻乎乎地点来点去填一些参数，只需要提前填写好一个 yaml 格式的配置文件即可。下面我们就采用 tanzu 命令来部署集群，管理集群的配置文件模版如下：</p><ul><li>tanzu-mgt-cluster.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Cluster Pod IP 的 CIDR</span></span><br><span class="line"><span class="attr">CLUSTER_CIDR:</span> <span class="number">100.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/11</span></span><br><span class="line"><span class="comment"># Service 的 CIDR</span></span><br><span class="line"><span class="attr">SERVICE_CIDR:</span> <span class="number">100.64</span><span class="number">.0</span><span class="number">.0</span><span class="string">/13</span></span><br><span class="line"><span class="comment"># 集群的名称</span></span><br><span class="line"><span class="attr">CLUSTER_NAME:</span> <span class="string">tanzu-control-plan</span></span><br><span class="line"><span class="comment"># 集群的类型</span></span><br><span class="line"><span class="attr">CLUSTER_PLAN:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment"># 集群节点的 arch</span></span><br><span class="line"><span class="attr">OS_ARCH:</span> <span class="string">amd64</span></span><br><span class="line"><span class="comment"># 集群节点的 OS 名称</span></span><br><span class="line"><span class="attr">OS_NAME:</span> <span class="string">photon</span></span><br><span class="line"><span class="comment"># 集群节点 OS 版本</span></span><br><span class="line"><span class="attr">OS_VERSION:</span> <span class="string">"3"</span></span><br><span class="line"><span class="comment"># 基础设施资源的提供方</span></span><br><span class="line"><span class="attr">INFRASTRUCTURE_PROVIDER:</span> <span class="string">vsphere</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群的 VIP</span></span><br><span class="line"><span class="attr">VSPHERE_CONTROL_PLANE_ENDPOINT:</span> <span class="number">192.168</span><span class="number">.75</span><span class="number">.194</span></span><br><span class="line"><span class="comment"># control-plan 节点的磁盘大小</span></span><br><span class="line"><span class="attr">VSPHERE_CONTROL_PLANE_DISK_GIB:</span> <span class="string">"20"</span></span><br><span class="line"><span class="comment"># control-plan 节点的内存大小</span></span><br><span class="line"><span class="attr">VSPHERE_CONTROL_PLANE_MEM_MIB:</span> <span class="string">"8192"</span></span><br><span class="line"><span class="comment"># control-plan 节点的 CPU 核心数量</span></span><br><span class="line"><span class="attr">VSPHERE_CONTROL_PLANE_NUM_CPUS:</span> <span class="string">"4"</span></span><br><span class="line"><span class="comment"># work 节点的磁盘大小</span></span><br><span class="line"><span class="attr">VSPHERE_WORKER_DISK_GIB:</span> <span class="string">"20"</span></span><br><span class="line"><span class="comment"># work 节点的内存大小</span></span><br><span class="line"><span class="attr">VSPHERE_WORKER_MEM_MIB:</span> <span class="string">"4096"</span></span><br><span class="line"><span class="comment"># work 节点的 CPU 核心数量</span></span><br><span class="line"><span class="attr">VSPHERE_WORKER_NUM_CPUS:</span> <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vCenter 的 Datacenter 路径</span></span><br><span class="line"><span class="attr">VSPHERE_DATACENTER:</span> <span class="string">/SH-IDC</span></span><br><span class="line"><span class="comment"># 虚拟机创建的 Datastore 路径</span></span><br><span class="line"><span class="attr">VSPHERE_DATASTORE:</span> <span class="string">/SH-IDC/datastore/datastore1</span></span><br><span class="line"><span class="comment"># 虚拟机创建的文件夹</span></span><br><span class="line"><span class="attr">VSPHERE_FOLDER:</span> <span class="string">/SH-IDC/vm/Tanzu-node</span></span><br><span class="line"><span class="comment"># 虚拟机使用的网络</span></span><br><span class="line"><span class="attr">VSPHERE_NETWORK:</span> <span class="string">/SH-IDC/network/VM</span> <span class="string">Network</span></span><br><span class="line"><span class="comment"># 虚拟机关联的资源池</span></span><br><span class="line"><span class="attr">VSPHERE_RESOURCE_POOL:</span> <span class="string">/SH-IDC/host/Tanzu-Cluster/Resources</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vCenter 的 IP</span></span><br><span class="line"><span class="attr">VSPHERE_SERVER:</span> <span class="number">192.168</span><span class="number">.75</span><span class="number">.110</span></span><br><span class="line"><span class="comment"># vCenter 的用户名</span></span><br><span class="line"><span class="attr">VSPHERE_USERNAME:</span> <span class="string">administrator@vsphere.local</span></span><br><span class="line"><span class="comment"># vCenter 的密码，以 base64 编码</span></span><br><span class="line"><span class="attr">VSPHERE_PASSWORD:</span> <span class="string">&lt;encoded:base64password&gt;</span></span><br><span class="line"><span class="comment"># vCenter 的证书指纹，可以通过 govc about.cert -json | jq -r '.ThumbprintSHA1' 获取</span></span><br><span class="line"><span class="attr">VSPHERE_TLS_THUMBPRINT:</span> <span class="string">EB:F3:D8:7A:E8:3D:1A:59:B0:DE:73:96:DC:B9:5F:13:86:EF:B6:27</span></span><br><span class="line"><span class="comment"># 虚拟机注入的 ssh 公钥，需要用它来 ssh 登录集群节点</span></span><br><span class="line"><span class="attr">VSPHERE_SSH_AUTHORIZED_KEY:</span> <span class="string">ssh-rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些默认参数</span></span><br><span class="line"><span class="attr">AVI_ENABLE:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">IDENTITY_MANAGEMENT_TYPE:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">ENABLE_AUDIT_LOGGING:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">ENABLE_CEIP_PARTICIPATION:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">TKG_HTTP_PROXY_ENABLED:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">DEPLOY_TKG_ON_VSPHERE7:</span> <span class="string">"true"</span></span><br></pre></td></tr></table></figure><ul><li>通过 tanzu CLI 部署管理集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tanzu management-cluster create --file tanzu-mgt-cluster.yaml -v6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有配置 VSPHERE_TLS_THUMBPRINT 会有一个确认 vSphere thumbprint 的交互，输入 Y 就可以</span></span><br><span class="line">Validating the pre-requisites...</span><br><span class="line">Do you want to <span class="built_in">continue</span> with the vSphere thumbprint EB:F3:D8:7A:E8:3D:1A:59:B0:DE:73:96:DC:B9:5F:13:86:EF:B6:27 [y/N]: y</span><br></pre></td></tr></table></figure><h3 id="部署日志"><a href="#部署日志" class="headerlink" title="部署日志"></a>部署日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># tanzu management-cluster create --file tanzu-mgt-cluster.yaml -v 6</span></span><br><span class="line">compatibility file (/root/.config/tanzu/tkg/compatibility/tkg-compatibility.yaml) already exists, skipping download</span><br><span class="line">BOM files inside /root/.config/tanzu/tkg/bom already exists, skipping download</span><br><span class="line">CEIP Opt-in status: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Validating the pre-requisites...</span><br><span class="line"></span><br><span class="line">vSphere 7.0 Environment Detected.</span><br><span class="line"></span><br><span class="line">You have connected to a vSphere 7.0 environment <span class="built_in">which</span> does not have vSphere with Tanzu enabled. vSphere with Tanzu includes</span><br><span class="line">an integrated Tanzu Kubernetes Grid Service <span class="built_in">which</span> turns a vSphere cluster into a platform <span class="keyword">for</span> running Kubernetes workloads <span class="keyword">in</span> dedicated</span><br><span class="line">resource pools. Configuring Tanzu Kubernetes Grid Service is <span class="keyword">done</span> through vSphere HTML5 client.</span><br><span class="line"></span><br><span class="line">Tanzu Kubernetes Grid Service is the preferred way to consume Tanzu Kubernetes Grid <span class="keyword">in</span> vSphere 7.0 environments. Alternatively you may</span><br><span class="line">deploy a non-integrated Tanzu Kubernetes Grid instance on vSphere 7.0.</span><br><span class="line">Deploying TKG management cluster on vSphere 7.0 ...</span><br><span class="line">Identity Provider not configured. Some authentication features won<span class="string">'t work.</span></span><br><span class="line"><span class="string">Checking if VSPHERE_CONTROL_PLANE_ENDPOINT 192.168.20.94 is already in use</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Setting up management cluster...</span></span><br><span class="line"><span class="string">Validating configuration...</span></span><br><span class="line"><span class="string">Using infrastructure provider vsphere:v0.7.10</span></span><br><span class="line"><span class="string">Generating cluster configuration...</span></span><br><span class="line"><span class="string">Setting up bootstrapper...</span></span><br><span class="line"><span class="string">Fetching configuration for kind node image...</span></span><br><span class="line"><span class="string">kindConfig:</span></span><br><span class="line"><span class="string"> &amp;&#123;&#123;Cluster kind.x-k8s.io/v1alpha4&#125;  [&#123;  map[] [&#123;/var/run/docker.sock /var/run/docker.sock false false &#125;] [] [] []&#125;] &#123; 0  100.96.0.0/11 100.64.0.0/13 false &#125; map[] map[] [apiVersion: kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="string">kind: ClusterConfiguration</span></span><br><span class="line"><span class="string">imageRepository: projects.registry.vmware.com/tkg</span></span><br><span class="line"><span class="string">etcd:</span></span><br><span class="line"><span class="string">  local:</span></span><br><span class="line"><span class="string">    imageRepository: projects.registry.vmware.com/tkg</span></span><br><span class="line"><span class="string">    imageTag: v3.4.13_vmware.15</span></span><br><span class="line"><span class="string">dns:</span></span><br><span class="line"><span class="string">  type: CoreDNS</span></span><br><span class="line"><span class="string">  imageRepository: projects.registry.vmware.com/tkg</span></span><br><span class="line"><span class="string">  imageTag: v1.8.0_vmware.5] [] [] []&#125;</span></span><br><span class="line"><span class="string">Creating kind cluster: tkg-kind-c7vj6kds0a6sf43e6210</span></span><br><span class="line"><span class="string">Creating cluster "tkg-kind-c7vj6kds0a6sf43e6210" ...</span></span><br><span class="line"><span class="string">Ensuring node image (projects.registry.vmware.com/tkg/kind/node:v1.21.2_vmware.1) ...</span></span><br><span class="line"><span class="string">Pulling image: projects.registry.vmware.com/tkg/kind/node:v1.21.2_vmware.1 ...</span></span><br><span class="line"><span class="string">Preparing nodes ...</span></span><br><span class="line"><span class="string">Writing configuration ...</span></span><br><span class="line"><span class="string">Starting control-plane ...</span></span><br><span class="line"><span class="string">Installing CNI ...</span></span><br><span class="line"><span class="string">Installing StorageClass ...</span></span><br><span class="line"><span class="string">Waiting 2m0s for control-plane = Ready ...</span></span><br><span class="line"><span class="string">Ready after 19s</span></span><br><span class="line"><span class="string">Bootstrapper created. Kubeconfig: /root/.kube-tkg/tmp/config_3fkzTCOL</span></span><br><span class="line"><span class="string">Installing providers on bootstrapper...</span></span><br><span class="line"><span class="string">Fetching providers</span></span><br><span class="line"><span class="string">Installing cert-manager Version="v1.1.0"</span></span><br><span class="line"><span class="string">Waiting for cert-manager to be available...</span></span><br><span class="line"><span class="string">Installing Provider="cluster-api" Version="v0.3.23" TargetNamespace="capi-system"</span></span><br><span class="line"><span class="string">Installing Provider="bootstrap-kubeadm" Version="v0.3.23" TargetNamespace="capi-kubeadm-bootstrap-system"</span></span><br><span class="line"><span class="string">Installing Provider="control-plane-kubeadm" Version="v0.3.23" TargetNamespace="capi-kubeadm-control-plane-system"</span></span><br><span class="line"><span class="string">Installing Provider="infrastructure-vsphere" Version="v0.7.10" TargetNamespace="capv-system"</span></span><br><span class="line"><span class="string">installed  Component=="cluster-api"  Type=="CoreProvider"  Version=="v0.3.23"</span></span><br><span class="line"><span class="string">installed  Component=="kubeadm"  Type=="BootstrapProvider"  Version=="v0.3.23"</span></span><br><span class="line"><span class="string">installed  Component=="kubeadm"  Type=="ControlPlaneProvider"  Version=="v0.3.23"</span></span><br><span class="line"><span class="string">installed  Component=="vsphere"  Type=="InfrastructureProvider"  Version=="v0.7.10"</span></span><br><span class="line"><span class="string">Waiting for provider infrastructure-vsphere</span></span><br><span class="line"><span class="string">Waiting for provider control-plane-kubeadm</span></span><br><span class="line"><span class="string">Waiting for provider cluster-api</span></span><br><span class="line"><span class="string">Waiting for provider bootstrap-kubeadm</span></span><br><span class="line"><span class="string">Waiting for resource capi-kubeadm-control-plane-controller-manager of type *v1.Deployment to be up and running</span></span><br><span class="line"><span class="string">pods are not yet running for deployment '</span>capi-kubeadm-control-plane-controller-manager<span class="string">' in namespace '</span>capi-kubeadm-control-plane-system<span class="string">', retrying</span></span><br><span class="line"><span class="string">Passed waiting on provider bootstrap-kubeadm after 25.205820854s</span></span><br><span class="line"><span class="string">pods are not yet running for deployment '</span>capi-controller-manager<span class="string">' in namespace '</span>capi-webhook-system<span class="string">', retrying</span></span><br><span class="line"><span class="string">Passed waiting on provider infrastructure-vsphere after 30.185406332s</span></span><br><span class="line"><span class="string">Passed waiting on provider cluster-api after 30.213216243s</span></span><br><span class="line"><span class="string">Success waiting on all providers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Start creating management cluster...</span></span><br><span class="line"><span class="string">patch cluster object with operation status:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"metadata": &#123;</span></span><br><span class="line"><span class="string">"annotations": &#123;</span></span><br><span class="line"><span class="string">"TKGOperationInfo" : "&#123;\"Operation\":\"Create\",\"OperationStartTimestamp\":\"2022-02-06 02:35:34.30219421 +0000 UTC\",\"OperationTimeout\":1800&#125;",</span></span><br><span class="line"><span class="string">"TKGOperationLastObservedTimestamp" : "2022-02-06 02:35:34.30219421 +0000 UTC"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">cluster control plane is still being initialized, retrying</span></span><br><span class="line"><span class="string">Getting secret for cluster</span></span><br><span class="line"><span class="string">Waiting for resource tanzu-control-plan-kubeconfig of type *v1.Secret to be up and running</span></span><br><span class="line"><span class="string">Saving management cluster kubeconfig into /root/.kube/config</span></span><br><span class="line"><span class="string">Installing providers on management cluster...</span></span><br><span class="line"><span class="string">Fetching providers</span></span><br><span class="line"><span class="string">Installing cert-manager Version="v1.1.0"</span></span><br><span class="line"><span class="string">Waiting for cert-manager to be available...</span></span><br><span class="line"><span class="string">Installing Provider="cluster-api" Version="v0.3.23" TargetNamespace="capi-system"</span></span><br><span class="line"><span class="string">Installing Provider="bootstrap-kubeadm" Version="v0.3.23" TargetNamespace="capi-kubeadm-bootstrap-system"</span></span><br><span class="line"><span class="string">Installing Provider="control-plane-kubeadm" Version="v0.3.23" TargetNamespace="capi-kubeadm-control-plane-system"</span></span><br><span class="line"><span class="string">Installing Provider="infrastructure-vsphere" Version="v0.7.10" TargetNamespace="capv-system"</span></span><br><span class="line"><span class="string">installed  Component=="cluster-api"  Type=="CoreProvider"  Version=="v0.3.23"</span></span><br><span class="line"><span class="string">installed  Component=="kubeadm"  Type=="BootstrapProvider"  Version=="v0.3.23"</span></span><br><span class="line"><span class="string">installed  Component=="kubeadm"  Type=="ControlPlaneProvider"  Version=="v0.3.23"</span></span><br><span class="line"><span class="string">installed  Component=="vsphere"  Type=="InfrastructureProvider"  Version=="v0.7.10"</span></span><br><span class="line"><span class="string">Waiting for provider control-plane-kubeadm</span></span><br><span class="line"><span class="string">Waiting for provider bootstrap-kubeadm</span></span><br><span class="line"><span class="string">Waiting for provider infrastructure-vsphere</span></span><br><span class="line"><span class="string">Waiting for provider cluster-api</span></span><br><span class="line"><span class="string">Waiting for resource capi-kubeadm-control-plane-controller-manager of type *v1.Deployment to be up and running</span></span><br><span class="line"><span class="string">Passed waiting on provider control-plane-kubeadm after 10.046865402s</span></span><br><span class="line"><span class="string">Waiting for resource antrea-controller of type *v1.Deployment to be up and running</span></span><br><span class="line"><span class="string">Moving all Cluster API objects from bootstrap cluster to management cluster...</span></span><br><span class="line"><span class="string">Performing move...</span></span><br><span class="line"><span class="string">Discovering Cluster API objects</span></span><br><span class="line"><span class="string">Moving Cluster API objects Clusters=1</span></span><br><span class="line"><span class="string">Creating objects in the target cluster</span></span><br><span class="line"><span class="string">Deleting objects from the source cluster</span></span><br><span class="line"><span class="string">Waiting for additional components to be up and running...</span></span><br><span class="line"><span class="string">Waiting for packages to be up and running...</span></span><br><span class="line"><span class="string">Waiting for package: antrea</span></span><br><span class="line"><span class="string">Waiting for package: metrics-server</span></span><br><span class="line"><span class="string">Waiting for package: tanzu-addons-manager</span></span><br><span class="line"><span class="string">Waiting for package: vsphere-cpi</span></span><br><span class="line"><span class="string">Waiting for package: vsphere-csi</span></span><br><span class="line"><span class="string">Waiting for resource antrea of type *v1alpha1.PackageInstall to be up and running</span></span><br><span class="line"><span class="string">Waiting for resource vsphere-cpi of type *v1alpha1.PackageInstall to be up and running</span></span><br><span class="line"><span class="string">Waiting for resource vsphere-csi of type *v1alpha1.PackageInstall to be up and running</span></span><br><span class="line"><span class="string">Waiting for resource metrics-server of type *v1alpha1.PackageInstall to be up and running</span></span><br><span class="line"><span class="string">Waiting for resource tanzu-addons-manager of type *v1alpha1.PackageInstall to be up and running</span></span><br><span class="line"><span class="string">Successfully reconciled package: antrea</span></span><br><span class="line"><span class="string">Successfully reconciled package: vsphere-csi</span></span><br><span class="line"><span class="string">Successfully reconciled package: metrics-server</span></span><br><span class="line"><span class="string">Context set for management cluster tanzu-control-plan as '</span>tanzu-control-plan-admin@tanzu-control-plan<span class="string">'.</span></span><br><span class="line"><span class="string">Deleting kind cluster: tkg-kind-c7vj6kds0a6sf43e6210</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Management cluster created!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You can now create your first workload cluster by running the following:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  tanzu cluster create [name] -f [file]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Some addons might be getting installed! Check their status by running the following:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  kubectl get apps -A</span></span><br></pre></td></tr></table></figure><ul><li>部署完成之后，将管理集群的 kubeconfig 文件复制到 kubectl 默认的目录下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># cp $&#123;HOME&#125;/.kube-tkg/config $&#123;HOME&#125;/.kube/config</span></span><br></pre></td></tr></table></figure><ul><li>查看集群状态信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管理集群的 cluster 资源信息，管理集群的 CR 默认保存在了 tkg-system namespace 下</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># kubectl get cluster -A</span></span><br><span class="line">NAMESPACE    NAME                 PHASE</span><br><span class="line">tkg-system   tanzu-control-plan   Provisioned</span><br><span class="line"><span class="comment"># 管理集群的 machine 资源信息</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># kubectl get machine -A</span></span><br><span class="line">NAMESPACE    NAME                                       PROVIDERID                                       PHASE         VERSION</span><br><span class="line">tkg-system   tanzu-control-plan-control-plane-gs4bl     vsphere://4239c450-f621-d78e-3c44-4ac8890c0cd3   Running       v1.21.2+vmware.1</span><br><span class="line">tkg-system   tanzu-control-plan-md-0-7cdc97c7c6-kxcnx   vsphere://4239d776-c04c-aacc-db12-3380542a6d03   Provisioned   v1.21.2+vmware.1</span><br><span class="line"><span class="comment"># 运行的组件状态</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># kubectl get pod -A</span></span><br><span class="line">NAMESPACE                           NAME                                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">capi-kubeadm-bootstrap-system       capi-kubeadm-bootstrap-controller-manager-6494884869-wlzhx       2/2     Running   0          8m37s</span><br><span class="line">capi-kubeadm-control-plane-system   capi-kubeadm-control-plane-controller-manager-857d687b9d-tpznv   2/2     Running   0          8m35s</span><br><span class="line">capi-system                         capi-controller-manager-778bd4dfb9-tkvwg                         2/2     Running   0          8m41s</span><br><span class="line">capi-webhook-system                 capi-controller-manager-9995bdc94-svjm2                          2/2     Running   0          8m41s</span><br><span class="line">capi-webhook-system                 capi-kubeadm-bootstrap-controller-manager-68845b65f8-sllgv       2/2     Running   0          8m38s</span><br><span class="line">capi-webhook-system                 capi-kubeadm-control-plane-controller-manager-9847c6747-vvz6g    2/2     Running   0          8m35s</span><br><span class="line">capi-webhook-system                 capv-controller-manager-55bf67fbd5-4t46v                         2/2     Running   0          8m31s</span><br><span class="line">capv-system                         capv-controller-manager-587fbf697f-bbzs9                         2/2     Running   0          8m31s</span><br><span class="line">cert-manager                        cert-manager-77f6fb8fd5-8tq6n                                    1/1     Running   0          11m</span><br><span class="line">cert-manager                        cert-manager-cainjector-6bd4cff7bb-6vlzx                         1/1     Running   0          11m</span><br><span class="line">cert-manager                        cert-manager-webhook-fbfcb9d6c-qpkbc                             1/1     Running   0          11m</span><br><span class="line">kube-system                         antrea-agent-5m9d4                                               2/2     Running   0          6m</span><br><span class="line">kube-system                         antrea-agent-8mpr7                                               2/2     Running   0          5m40s</span><br><span class="line">kube-system                         antrea-controller-5bbcb98667-hklss                               1/1     Running   0          5m50s</span><br><span class="line">kube-system                         coredns-8dcb5c56b-ckvb7                                          1/1     Running   0          12m</span><br><span class="line">kube-system                         coredns-8dcb5c56b-d98hf                                          1/1     Running   0          12m</span><br><span class="line">kube-system                         etcd-tanzu-control-plan-control-plane-gs4bl                      1/1     Running   0          12m</span><br><span class="line">kube-system                         kube-apiserver-tanzu-control-plan-control-plane-gs4bl            1/1     Running   0          12m</span><br><span class="line">kube-system                         kube-controller-manager-tanzu-control-plan-control-plane-gs4bl   1/1     Running   0          12m</span><br><span class="line">kube-system                         kube-proxy-d4wq4                                                 1/1     Running   0          12m</span><br><span class="line">kube-system                         kube-proxy-nhkgg                                                 1/1     Running   0          11m</span><br><span class="line">kube-system                         kube-scheduler-tanzu-control-plan-control-plane-gs4bl            1/1     Running   0          12m</span><br><span class="line">kube-system                         kube-vip-tanzu-control-plan-control-plane-gs4bl                  1/1     Running   0          12m</span><br><span class="line">kube-system                         metrics-server-59fcb9fcf-xjznj                                   1/1     Running   0          6m29s</span><br><span class="line">kube-system                         vsphere-cloud-controller-manager-kzffm                           1/1     Running   0          5m50s</span><br><span class="line">kube-system                         vsphere-csi-controller-74675c9488-q9h5c                          6/6     Running   0          6m31s</span><br><span class="line">kube-system                         vsphere-csi-node-dmvvr                                           3/3     Running   0          6m31s</span><br><span class="line">kube-system                         vsphere-csi-node-k6x98                                           3/3     Running   0          6m31s</span><br><span class="line">tkg-system                          kapp-controller-6499b8866-xnql7                                  1/1     Running   0          10m</span><br><span class="line">tkg-system                          tanzu-addons-controller-manager-657c587556-rpbjm                 1/1     Running   0          7m58s</span><br><span class="line">tkg-system                          tanzu-capabilities-controller-manager-6ff97656b8-cq7m7           1/1     Running   0          11m</span><br><span class="line">tkr-system                          tkr-controller-manager-6bc455b5d4-wm98s                          1/1     Running   0          10m</span><br></pre></td></tr></table></figure><h3 id="部署流程-1"><a href="#部署流程-1" class="headerlink" title="部署流程"></a>部署流程</h3><p>结合 <a href="https://github.com/vmware-tanzu/tanzu-framework/blob/main/pkg/v1/tkg/client/init.go" target="_blank" rel="noopener">tanzu 的源码</a> 和部署输出的日志我们大体可以得知，tanzu 管理集群部署大致分为如下几步：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/vmware-tanzu/tanzu-framework/blob/main/pkg/v1/tkg/client/init.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// management cluster init step constants</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">StepConfigPrerequisite                 = <span class="string">"Configure prerequisite"</span></span><br><span class="line">StepValidateConfiguration              = <span class="string">"Validate configuration"</span></span><br><span class="line">StepGenerateClusterConfiguration       = <span class="string">"Generate cluster configuration"</span></span><br><span class="line">StepSetupBootstrapCluster              = <span class="string">"Setup bootstrap cluster"</span></span><br><span class="line">StepInstallProvidersOnBootstrapCluster = <span class="string">"Install providers on bootstrap cluster"</span></span><br><span class="line">StepCreateManagementCluster            = <span class="string">"Create management cluster"</span></span><br><span class="line">StepInstallProvidersOnRegionalCluster  = <span class="string">"Install providers on management cluster"</span></span><br><span class="line">StepMoveClusterAPIObjects              = <span class="string">"Move cluster-api objects from bootstrap cluster to management cluster"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitRegionSteps management cluster init step sequence</span></span><br><span class="line"><span class="keyword">var</span> InitRegionSteps = []<span class="keyword">string</span>&#123;</span><br><span class="line">StepConfigPrerequisite,</span><br><span class="line">StepValidateConfiguration,</span><br><span class="line">StepGenerateClusterConfiguration,</span><br><span class="line">StepSetupBootstrapCluster,</span><br><span class="line">StepInstallProvidersOnBootstrapCluster,</span><br><span class="line">StepCreateManagementCluster,</span><br><span class="line">StepInstallProvidersOnRegionalCluster,</span><br><span class="line">StepMoveClusterAPIObjects,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConfigPrerequisite 准备阶段，会下载 <code>tkg-compatibility</code> 和 <code>tkg-bom</code> 镜像，用于检查环境的兼容性；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Downloading TKG compatibility file from <span class="string">'projects.registry.vmware.com/tkg/framework-zshippable/tkg-compatibility'</span></span><br><span class="line">Downloading the TKG Bill of Materials (BOM) file from <span class="string">'projects.registry.vmware.com/tkg/tkg-bom:v1.4.0'</span></span><br><span class="line">Downloading the TKr Bill of Materials (BOM) file from <span class="string">'projects.registry.vmware.com/tkg/tkr-bom:v1.21.2_vmware.1-tkg.1'</span></span><br><span class="line">ERROR 2022/02/06 02:24:46 svType != tvType; key=release, st=map[string]interface &#123;&#125;, tt=&lt;nil&gt;, sv=map[version:], tv=&lt;nil&gt;</span><br><span class="line">CEIP Opt-in status: <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>ValidateConfiguration 配置文件校验，根据填写的参数校验配置是否正确，以及检查 vCenter 当中有无匹配的虚拟机模版；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Validating the pre-requisites...</span><br><span class="line"></span><br><span class="line">vSphere 7.0 Environment Detected.</span><br><span class="line"></span><br><span class="line">You have connected to a vSphere 7.0 environment <span class="built_in">which</span> does not have vSphere with Tanzu enabled. vSphere with Tanzu includes</span><br><span class="line">an integrated Tanzu Kubernetes Grid Service <span class="built_in">which</span> turns a vSphere cluster into a platform <span class="keyword">for</span> running Kubernetes workloads <span class="keyword">in</span> dedicated</span><br><span class="line">resource pools. Configuring Tanzu Kubernetes Grid Service is <span class="keyword">done</span> through vSphere HTML5 client.</span><br><span class="line"></span><br><span class="line">Tanzu Kubernetes Grid Service is the preferred way to consume Tanzu Kubernetes Grid <span class="keyword">in</span> vSphere 7.0 environments. Alternatively you may</span><br><span class="line">deploy a non-integrated Tanzu Kubernetes Grid instance on vSphere 7.0.</span><br><span class="line">Deploying TKG management cluster on vSphere 7.0 ...</span><br><span class="line">Identity Provider not configured. Some authentication features won<span class="string">'t work.</span></span><br><span class="line"><span class="string">Checking if VSPHERE_CONTROL_PLANE_ENDPOINT 192.168.20.94 is already in use</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Setting up management cluster...</span></span><br><span class="line"><span class="string">Validating configuration...</span></span><br><span class="line"><span class="string">Using infrastructure provider vsphere:v0.7.10</span></span><br></pre></td></tr></table></figure><ul><li>GenerateClusterConfiguration 生成集群配置文件信息；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generating cluster configuration...</span><br></pre></td></tr></table></figure><ul><li>SetupBootstrapCluster 设置 bootstrap 集群，目前默认为 kind。会运行一个 docker 容器，里面套娃运行着一个 k8s 集群；这个 bootstrap k8s 集群只是临时运行 cluster-api 来部署管理集群用的，部署完成之后 bootstrap 集群也就没用了，会自动删掉；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Setting up bootstrapper...</span><br><span class="line">Fetching configuration <span class="keyword">for</span> kind node image...</span><br><span class="line">kindConfig:</span><br><span class="line"> &amp;&#123;&#123;Cluster kind.x-k8s.io/v1alpha4&#125;  [&#123;  map[] [&#123;/var/run/docker.sock /var/run/docker.sock <span class="literal">false</span> <span class="literal">false</span> &#125;] [] [] []&#125;] &#123; 0  100.96.0.0/11 100.64.0.0/13 <span class="literal">false</span> &#125; map[] map[] [apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">imageRepository: projects.registry.vmware.com/tkg</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    imageRepository: projects.registry.vmware.com/tkg</span><br><span class="line">    imageTag: v3.4.13_vmware.15</span><br><span class="line">dns:</span><br><span class="line">  <span class="built_in">type</span>: CoreDNS</span><br><span class="line">  imageRepository: projects.registry.vmware.com/tkg</span><br><span class="line">  imageTag: v1.8.0_vmware.5] [] [] []&#125;</span><br><span class="line">Creating kind cluster: tkg-kind-c7vj6kds0a6sf43e6210</span><br><span class="line">Creating cluster <span class="string">"tkg-kind-c7vj6kds0a6sf43e6210"</span> ...</span><br><span class="line">Ensuring node image (projects.registry.vmware.com/tkg/kind/node:v1.21.2_vmware.1) ...</span><br><span class="line">Pulling image: projects.registry.vmware.com/tkg/kind/node:v1.21.2_vmware.1 ...</span><br><span class="line">Preparing nodes ...</span><br><span class="line">Writing configuration ...</span><br><span class="line">Starting control-plane ...</span><br><span class="line">Installing CNI ...</span><br><span class="line">Installing StorageClass ...</span><br><span class="line">Waiting 2m0s <span class="keyword">for</span> control-plane = Ready ...</span><br><span class="line">Ready after 19s</span><br><span class="line">Bootstrapper created. Kubeconfig: /root/.kube-tkg/tmp/config_3fkzTCOL</span><br></pre></td></tr></table></figure><ul><li>InstallProvidersOnBootstrapCluster 在 bootstrap 集群上安装 cluste-api 相关组件；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Installing providers on bootstrapper...</span><br><span class="line">Fetching providers</span><br><span class="line"><span class="comment"># 安装 cert-manager 主要是为了生成 k8s 集群部署所依赖的那一堆证书</span></span><br><span class="line">Installing cert-manager Version=<span class="string">"v1.1.0"</span></span><br><span class="line">Waiting <span class="keyword">for</span> cert-manager to be available...</span><br><span class="line">Installing Provider=<span class="string">"cluster-api"</span> Version=<span class="string">"v0.3.23"</span> TargetNamespace=<span class="string">"capi-system"</span></span><br><span class="line">Installing Provider=<span class="string">"bootstrap-kubeadm"</span> Version=<span class="string">"v0.3.23"</span> TargetNamespace=<span class="string">"capi-kubeadm-bootstrap-system"</span></span><br><span class="line">Installing Provider=<span class="string">"control-plane-kubeadm"</span> Version=<span class="string">"v0.3.23"</span> TargetNamespace=<span class="string">"capi-kubeadm-control-plane-system"</span></span><br><span class="line">Installing Provider=<span class="string">"infrastructure-vsphere"</span> Version=<span class="string">"v0.7.10"</span> TargetNamespace=<span class="string">"capv-system"</span></span><br><span class="line">installed  Component==<span class="string">"cluster-api"</span>  Type==<span class="string">"CoreProvider"</span>  Version==<span class="string">"v0.3.23"</span></span><br><span class="line">installed  Component==<span class="string">"kubeadm"</span>  Type==<span class="string">"BootstrapProvider"</span>  Version==<span class="string">"v0.3.23"</span></span><br><span class="line">installed  Component==<span class="string">"kubeadm"</span>  Type==<span class="string">"ControlPlaneProvider"</span>  Version==<span class="string">"v0.3.23"</span></span><br><span class="line">installed  Component==<span class="string">"vsphere"</span>  Type==<span class="string">"InfrastructureProvider"</span>  Version==<span class="string">"v0.7.10"</span></span><br><span class="line">Waiting <span class="keyword">for</span> provider infrastructure-vsphere</span><br><span class="line">Waiting <span class="keyword">for</span> provider control-plane-kubeadm</span><br><span class="line">Waiting <span class="keyword">for</span> provider cluster-api</span><br><span class="line">Waiting <span class="keyword">for</span> provider bootstrap-kubeadm</span><br><span class="line">Passed waiting on provider infrastructure-vsphere after 30.185406332s</span><br><span class="line">Passed waiting on provider cluster-api after 30.213216243s</span><br><span class="line">Success waiting on all providers.</span><br></pre></td></tr></table></figure><ul><li>CreateManagementCluster 创建管理集群，这一步主要是创建虚拟机、初始化节点、运行 kubeadm 部署 k8s 集群；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Start creating management cluster...</span><br><span class="line">patch cluster object with operation status:</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"metadata"</span>: &#123;</span><br><span class="line"><span class="string">"annotations"</span>: &#123;</span><br><span class="line"><span class="string">"TKGOperationInfo"</span> : <span class="string">"&#123;\"Operation\":\"Create\",\"OperationStartTimestamp\":\"2022-02-06 02:35:34.30219421 +0000 UTC\",\"OperationTimeout\":1800&#125;"</span>,</span><br><span class="line"><span class="string">"TKGOperationLastObservedTimestamp"</span> : <span class="string">"2022-02-06 02:35:34.30219421 +0000 UTC"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cluster control plane is still being initialized, retrying</span><br><span class="line">Getting secret <span class="keyword">for</span> cluster</span><br><span class="line">Waiting <span class="keyword">for</span> resource tanzu-control-plan-kubeconfig of <span class="built_in">type</span> *v1.Secret to be up and running</span><br><span class="line">Saving management cluster kubeconfig into /root/.kube/config</span><br></pre></td></tr></table></figure><ul><li>InstallProvidersOnRegionalCluster 在管理集群上安装 cluster-api 相关组件；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Installing providers on management cluster...</span><br><span class="line">Fetching providers</span><br><span class="line">Installing cert-manager Version=<span class="string">"v1.1.0"</span></span><br><span class="line">Waiting <span class="keyword">for</span> cert-manager to be available...</span><br><span class="line">Installing Provider=<span class="string">"cluster-api"</span> Version=<span class="string">"v0.3.23"</span> TargetNamespace=<span class="string">"capi-system"</span></span><br><span class="line">Installing Provider=<span class="string">"bootstrap-kubeadm"</span> Version=<span class="string">"v0.3.23"</span> TargetNamespace=<span class="string">"capi-kubeadm-bootstrap-system"</span></span><br><span class="line">Installing Provider=<span class="string">"control-plane-kubeadm"</span> Version=<span class="string">"v0.3.23"</span> TargetNamespace=<span class="string">"capi-kubeadm-control-plane-system"</span></span><br><span class="line">Installing Provider=<span class="string">"infrastructure-vsphere"</span> Version=<span class="string">"v0.7.10"</span> TargetNamespace=<span class="string">"capv-system"</span></span><br><span class="line">installed  Component==<span class="string">"cluster-api"</span>  Type==<span class="string">"CoreProvider"</span>  Version==<span class="string">"v0.3.23"</span></span><br><span class="line">installed  Component==<span class="string">"kubeadm"</span>  Type==<span class="string">"BootstrapProvider"</span>  Version==<span class="string">"v0.3.23"</span></span><br><span class="line">installed  Component==<span class="string">"kubeadm"</span>  Type==<span class="string">"ControlPlaneProvider"</span>  Version==<span class="string">"v0.3.23"</span></span><br><span class="line">installed  Component==<span class="string">"vsphere"</span>  Type==<span class="string">"InfrastructureProvider"</span>  Version==<span class="string">"v0.7.10"</span></span><br><span class="line">Waiting <span class="keyword">for</span> provider control-plane-kubeadm</span><br><span class="line">Waiting <span class="keyword">for</span> provider bootstrap-kubeadm</span><br><span class="line">Waiting <span class="keyword">for</span> provider infrastructure-vsphere</span><br><span class="line">Waiting <span class="keyword">for</span> provider cluster-api</span><br><span class="line">Waiting <span class="keyword">for</span> resource capv-controller-manager of <span class="built_in">type</span> *v1.Deployment to be up and running</span><br><span class="line">Passed waiting on provider infrastructure-vsphere after 20.091935635s</span><br><span class="line">Passed waiting on provider cluster-api after 20.109419304s</span><br><span class="line">Success waiting on all providers.</span><br><span class="line">Waiting <span class="keyword">for</span> the management cluster to get ready <span class="keyword">for</span> move...</span><br><span class="line">Waiting <span class="keyword">for</span> resource tanzu-control-plan of <span class="built_in">type</span> *v1alpha3.Cluster to be up and running</span><br><span class="line">Waiting <span class="keyword">for</span> resources <span class="built_in">type</span> *v1alpha3.MachineDeploymentList to be up and running</span><br><span class="line">Waiting <span class="keyword">for</span> resources <span class="built_in">type</span> *v1alpha3.MachineList to be up and running</span><br><span class="line">Waiting <span class="keyword">for</span> addons installation...</span><br><span class="line">Waiting <span class="keyword">for</span> resources <span class="built_in">type</span> *v1alpha3.ClusterResourceSetList to be up and running</span><br><span class="line">Waiting <span class="keyword">for</span> resource antrea-controller of <span class="built_in">type</span> *v1.Deployment to be up and running</span><br></pre></td></tr></table></figure><ul><li>MoveClusterAPIObjects 将 bootstrap 集群上 cluster-api 相关的资源转移到管理集群上。这一步的目的是为了达到 self-hosted 自托管的功能：即管理集群自身的扩缩容也是通过 cluster-api 来完成，这样就不用再依赖先前的那个 bootstrap 集群了；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Moving all Cluster API objects from bootstrap cluster to management cluster...</span><br><span class="line">Performing move...</span><br><span class="line">Discovering Cluster API objects</span><br><span class="line">Moving Cluster API objects Clusters=1</span><br><span class="line">Creating objects <span class="keyword">in</span> the target cluster</span><br><span class="line">Deleting objects from the <span class="built_in">source</span> cluster</span><br><span class="line">Context <span class="built_in">set</span> <span class="keyword">for</span> management cluster tanzu-control-plan as <span class="string">'tanzu-control-plan-admin@tanzu-control-plan'</span>.</span><br><span class="line">Deleting kind cluster: tkg-kind-c7vj6kds0a6sf43e6210</span><br><span class="line"></span><br><span class="line">Management cluster created!</span><br><span class="line"></span><br><span class="line">You can now create your first workload cluster by running the following:</span><br><span class="line"></span><br><span class="line">  tanzu cluster create [name] -f [file]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Some addons might be getting installed! Check their status by running the following:</span><br><span class="line"></span><br><span class="line">  kubectl get apps -A</span><br></pre></td></tr></table></figure><p>部署完成后会删除 bootstrap 集群，因为 bootstrap 集群中的资源已经转移到了管理集群中，它继续存在的意义不大。</p><h2 id="部署-workload-集群"><a href="#部署-workload-集群" class="headerlink" title="部署 workload 集群"></a>部署 workload 集群</h2><p>上面我们只是部署好了一个 tanzu 管理集群，我们真正的工作负载并不适合运行在这个集群上，因此我们还需要再部署一个 workload 集群，类似于 k8s 集群中的 worker 节点。部署 workload 集群的时候不再依赖 bootstrap 集群，而是使用管理集群。</p><p>根据官方文档 <a href="https://tanzucommunityedition.io/docs/latest/vsphere-wl-template/" target="_blank" rel="noopener">vSphere Workload Cluster Template</a> 中给出的模版创建一个配置文件，然后再通过 tanzu 命令来部署即可。配置文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Cluster Pod IP 的 CIDR</span></span><br><span class="line"><span class="attr">CLUSTER_CIDR:</span> <span class="number">100.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/11</span></span><br><span class="line"><span class="comment"># Service 的 CIDR</span></span><br><span class="line"><span class="attr">SERVICE_CIDR:</span> <span class="number">100.64</span><span class="number">.0</span><span class="number">.0</span><span class="string">/13</span></span><br><span class="line"><span class="comment"># 集群的名称</span></span><br><span class="line"><span class="attr">CLUSTER_NAME:</span> <span class="string">tanzu-workload-cluster</span></span><br><span class="line"><span class="comment"># 集群的类型</span></span><br><span class="line"><span class="attr">CLUSTER_PLAN:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment"># 集群节点的 arch</span></span><br><span class="line"><span class="attr">OS_ARCH:</span> <span class="string">amd64</span></span><br><span class="line"><span class="comment"># 集群节点的 OS 名称</span></span><br><span class="line"><span class="attr">OS_NAME:</span> <span class="string">photon</span></span><br><span class="line"><span class="comment"># 集群节点 OS 版本</span></span><br><span class="line"><span class="attr">OS_VERSION:</span> <span class="string">"3"</span></span><br><span class="line"><span class="comment"># 基础设施资源的提供方</span></span><br><span class="line"><span class="attr">INFRASTRUCTURE_PROVIDER:</span> <span class="string">vsphere</span></span><br><span class="line"><span class="comment"># cluster, machine 等自定义资源创建的 namespace</span></span><br><span class="line"><span class="attr">NAMESPACE:</span> <span class="string">default</span></span><br><span class="line"><span class="comment"># CNI 选用类型，目前应该只支持 VMware 自家的 antrea</span></span><br><span class="line"><span class="attr">CNI:</span> <span class="string">antrea</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群的 VIP</span></span><br><span class="line"><span class="attr">VSPHERE_CONTROL_PLANE_ENDPOINT:</span> <span class="number">192.168</span><span class="number">.20</span><span class="number">.95</span></span><br><span class="line"><span class="comment"># control-plan 节点的磁盘大小</span></span><br><span class="line"><span class="attr">VSPHERE_CONTROL_PLANE_DISK_GIB:</span> <span class="string">"20"</span></span><br><span class="line"><span class="comment"># control-plan 节点的内存大小</span></span><br><span class="line"><span class="attr">VSPHERE_CONTROL_PLANE_MEM_MIB:</span> <span class="string">"8192"</span></span><br><span class="line"><span class="comment"># control-plan 节点的 CPU 核心数量</span></span><br><span class="line"><span class="attr">VSPHERE_CONTROL_PLANE_NUM_CPUS:</span> <span class="string">"4"</span></span><br><span class="line"><span class="comment"># work 节点的磁盘大小</span></span><br><span class="line"><span class="attr">VSPHERE_WORKER_DISK_GIB:</span> <span class="string">"20"</span></span><br><span class="line"><span class="comment"># work 节点的内存大小</span></span><br><span class="line"><span class="attr">VSPHERE_WORKER_MEM_MIB:</span> <span class="string">"4096"</span></span><br><span class="line"><span class="comment"># work 节点的 CPU 核心数量</span></span><br><span class="line"><span class="attr">VSPHERE_WORKER_NUM_CPUS:</span> <span class="string">"2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vCenter 的 Datacenter 路径</span></span><br><span class="line"><span class="attr">VSPHERE_DATACENTER:</span> <span class="string">/SH-IDC</span></span><br><span class="line"><span class="comment"># 虚拟机创建的 Datastore 路径</span></span><br><span class="line"><span class="attr">VSPHERE_DATASTORE:</span> <span class="string">/SH-IDC/datastore/datastore1</span></span><br><span class="line"><span class="comment"># 虚拟机创建的文件夹</span></span><br><span class="line"><span class="attr">VSPHERE_FOLDER:</span> <span class="string">/SH-IDC/vm/Tanzu-node</span></span><br><span class="line"><span class="comment"># 虚拟机使用的网络</span></span><br><span class="line"><span class="attr">VSPHERE_NETWORK:</span> <span class="string">/SH-IDC/network/VM</span> <span class="string">Network</span></span><br><span class="line"><span class="comment"># 虚拟机关联的资源池</span></span><br><span class="line"><span class="attr">VSPHERE_RESOURCE_POOL:</span> <span class="string">/SH-IDC/host/Tanzu-Cluster/Resources</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vCenter 的 IP</span></span><br><span class="line"><span class="attr">VSPHERE_SERVER:</span> <span class="number">192.168</span><span class="number">.20</span><span class="number">.92</span></span><br><span class="line"><span class="comment"># vCenter 的用户名</span></span><br><span class="line"><span class="attr">VSPHERE_USERNAME:</span> <span class="string">administrator@vsphere.local</span></span><br><span class="line"><span class="comment"># vCenter 的密码，以 base64 编码</span></span><br><span class="line"><span class="attr">VSPHERE_PASSWORD:</span> <span class="string">&lt;encoded:YWRtaW5AMjAyMA==&gt;</span></span><br><span class="line"><span class="comment"># vCenter 的证书指纹，可以通过 govc about.cert -json | jq -r '.ThumbprintSHA1' 获取</span></span><br><span class="line"><span class="attr">VSPHERE_TLS_THUMBPRINT:</span> <span class="string">CB:23:48:E8:93:34:AD:27:D8:FD:88:1C:D7:08:4B:47:9B:12:F4:E0</span></span><br><span class="line"><span class="comment"># 虚拟机注入的 ssh 公钥，需要用它来 ssh 登录集群节点</span></span><br><span class="line"><span class="attr">VSPHERE_SSH_AUTHORIZED_KEY:</span> <span class="string">ssh-rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些默认参数</span></span><br><span class="line"><span class="attr">AVI_ENABLE:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">IDENTITY_MANAGEMENT_TYPE:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">ENABLE_AUDIT_LOGGING:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">ENABLE_CEIP_PARTICIPATION:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">TKG_HTTP_PROXY_ENABLED:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">DEPLOY_TKG_ON_VSPHERE7:</span> <span class="string">"true"</span></span><br><span class="line"><span class="comment"># 是否开启虚拟机健康检查</span></span><br><span class="line"><span class="attr">ENABLE_MHC:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">MHC_UNKNOWN_STATUS_TIMEOUT:</span> <span class="string">5m</span></span><br><span class="line"><span class="attr">MHC_FALSE_STATUS_TIMEOUT:</span> <span class="string">12m</span></span><br><span class="line"><span class="comment"># 是否部署 vsphere cis 组件</span></span><br><span class="line"><span class="attr">ENABLE_DEFAULT_STORAGE_CLASS:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否开启集群自动扩缩容</span></span><br><span class="line"><span class="attr">ENABLE_AUTOSCALER:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>通过 tanzu 命令来部署 workload 集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># tanzu cluster create tanzu-workload-cluster --file tanzu-workload-cluster.yaml</span></span><br><span class="line">Validating configuration...</span><br><span class="line">Warning: Pinniped configuration not found. Skipping pinniped configuration <span class="keyword">in</span> workload cluster. Please refer to the documentation to check <span class="keyword">if</span> you can configure pinniped on workload cluster manually</span><br><span class="line">Creating workload cluster <span class="string">'tanzu-workload-cluster'</span>...</span><br><span class="line">Waiting <span class="keyword">for</span> cluster to be initialized...</span><br><span class="line">Waiting <span class="keyword">for</span> cluster nodes to be available...</span><br><span class="line">Waiting <span class="keyword">for</span> cluster autoscaler to be available...</span><br><span class="line">Unable to <span class="built_in">wait</span> <span class="keyword">for</span> autoscaler deployment to be ready. reason: deployments.apps <span class="string">"tanzu-workload-cluster-cluster-autoscaler"</span> not found</span><br><span class="line">Waiting <span class="keyword">for</span> addons installation...</span><br><span class="line">Waiting <span class="keyword">for</span> packages to be up and running...</span><br><span class="line">Workload cluster <span class="string">'tanzu-workload-cluster'</span> created</span><br></pre></td></tr></table></figure><ul><li>部署完成之后查看一下集群的 CR 信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># kubectl get cluster</span></span><br><span class="line">NAME                     PHASE</span><br><span class="line">tanzu-workload-cluster   Provisioned</span><br><span class="line"><span class="comment"># machine 状态处于 Running 说明节点已经正常运行了</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># kubectl get machine</span></span><br><span class="line">NAME                                          PROVIDERID                                       PHASE     VERSION</span><br><span class="line">tanzu-workload-cluster-control-plane-4tdwq    vsphere://423950ac-1c6d-e5ef-3132-77b6a53cf626   Running   v1.21.2+vmware.1</span><br><span class="line">tanzu-workload-cluster-md-0-8555bbbfc-74vdg   vsphere://4239b83b-6003-d990-4555-a72ac4dec484   Running   v1.21.2+vmware.1</span><br></pre></td></tr></table></figure><h2 id="扩容集群"><a href="#扩容集群" class="headerlink" title="扩容集群"></a>扩容集群</h2><p>集群部署好之后，如果想对集群节点进行扩缩容，我们可以像 deployment 的一样，只需要修改一些 CR 的信息即可。cluster-api 相关组件会 watch 到这些 CR 的变化，并根据它的 spec 信息进行一系列调谐操作。如果当前集群节点数量低于所定义的节点副本数量，则会自动调用对应的 Provider 创建虚拟机，并对虚拟机进行初始化操作，将它转换为 k8s 里的一个 node 资源；</p><h3 id="扩容-control-plan-节点"><a href="#扩容-control-plan-节点" class="headerlink" title="扩容 control-plan 节点"></a>扩容 control-plan 节点</h3><p>即扩容 master 节点，通过修改 <code>KubeadmControlPlane</code> 这个 CR 中的 <code>replicas</code> 副本数即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># kubectl scale kcp tanzu-workload-cluster-control-plane --replicas=3</span></span><br><span class="line"><span class="comment"># 可以看到 machine 已经处于 Provisioning 状态，说明集群节点对应的虚拟机正在创建中</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># kubectl get machine</span></span><br><span class="line">NAME                                          PROVIDERID                                       PHASE          VERSION</span><br><span class="line">tanzu-workload-cluster-control-plane-4tdwq    vsphere://423950ac-1c6d-e5ef-3132-77b6a53cf626   Running        v1.21.2+vmware.1</span><br><span class="line">tanzu-workload-cluster-control-plane-mkmd2                                                     Provisioning   v1.21.2+vmware.1</span><br><span class="line">tanzu-workload-cluster-md-0-8555bbbfc-74vdg   vsphere://4239b83b-6003-d990-4555-a72ac4dec484   Running        v1.21.2+vmware.1</span><br></pre></td></tr></table></figure><h3 id="扩容-work-节点"><a href="#扩容-work-节点" class="headerlink" title="扩容 work 节点"></a>扩容 work 节点</h3><p>扩容 worker 节点，通过修改 <code>MachineDeployment</code> 这个 CR 中的 <code>replicas</code> 副本数即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]<span class="comment"># kubectl scale md tanzu-workload-cluster-md-0 --replicas=3</span></span><br><span class="line">root@photon-machine [ ~ ]<span class="comment"># kubectl get machine</span></span><br><span class="line">NAME                                          PROVIDERID                                       PHASE     VERSION</span><br><span class="line">tanzu-workload-cluster-control-plane-4tdwq    vsphere://423950ac-1c6d-e5ef-3132-77b6a53cf626   Running   v1.21.2+vmware.1</span><br><span class="line">tanzu-workload-cluster-control-plane-mkmd2    vsphere://4239278c-0503-f03a-08b8-df92286bcdd7   Running   v1.21.2+vmware.1</span><br><span class="line">tanzu-workload-cluster-control-plane-rt5mb    vsphere://4239c882-2fe5-a394-60c0-616941a6363e   Running   v1.21.2+vmware.1</span><br><span class="line">tanzu-workload-cluster-md-0-8555bbbfc-4hlqk   vsphere://42395deb-e706-8b4b-a44f-c755c222575c   Running   v1.21.2+vmware.1</span><br><span class="line">tanzu-workload-cluster-md-0-8555bbbfc-74vdg   vsphere://4239b83b-6003-d990-4555-a72ac4dec484   Running   v1.21.2+vmware.1</span><br><span class="line">tanzu-workload-cluster-md-0-8555bbbfc-ftmlp   vsphere://42399640-8e94-85e5-c4bd-8436d84966e0   Running   v1.21.2+vmware.1</span><br></pre></td></tr></table></figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>本文只是介绍了 tanzu 集群部署的大体流程，里面包含了 cluster-api 相关的概念在本文并没有做深入的分析，因为实在是太复杂了 😂，到现在我还是没太理解其中的一些原理，因此后续我再单独写一篇博客来讲解一些 cluster-api 相关的内容，到那时候在结合本文来看就容易理解很多。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/vmware-tanzu/community-edition" target="_blank" rel="noopener">community-edition</a></li><li><a href="https://github.com/vmware/photon" target="_blank" rel="noopener">vmware/photon</a></li><li><a href="https://github.com/vmware-tanzu/tanzu-framework/blob/main/pkg/v1/tkg/client/init.go" target="_blank" rel="noopener">tanzu-framework</a></li><li><a href="https://github.com/kubernetes-sigs/cluster-api-provider-vsphere" target="_blank" rel="noopener">cluster-api-provider-vsphere</a></li><li><a href="https://tanzucommunityedition.io/docs/latest/workload-clusters/" target="_blank" rel="noopener">Deploying a workload cluster</a></li><li><a href="https://tanzucommunityedition.io/docs/latest/verify-deployment/" target="_blank" rel="noopener">Examine the Management Cluster Deployment</a></li><li><a href="https://tanzucommunityedition.io/docs/latest/vsphere/" target="_blank" rel="noopener">Prepare to Deploy a Management or Standalone Clusters to vSphere</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;之前接触的 Kubernetes
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ESXi" scheme="https://blog.k8s.li/tags/ESXi/"/>
    
      <category term="Tanzu" scheme="https://blog.k8s.li/tags/Tanzu/"/>
    
      <category term="Kubernetes" scheme="https://blog.k8s.li/tags/Kubernetes/"/>
    
      <category term="Cluster-api" scheme="https://blog.k8s.li/tags/Cluster-api/"/>
    
  </entry>
  
  <entry>
    <title>使用 overlay2 或 bind 重新构建 ISO 镜像</title>
    <link href="https://blog.k8s.li/rebuild-iso-image.html"/>
    <id>https://blog.k8s.li/rebuild-iso-image.html</id>
    <published>2022-01-24T16:00:00.000Z</published>
    <updated>2022-01-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔者之前在字节跳动的时候是负责 PaaS 容器云平台的私有化部署相关的工作，所以经常会和一些容器镜像打交道，对容器镜像也有一些研究，之前还写过不少博客文章。比如 <a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生 🤔</a>、<a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a> 等等。</p><p>自从换了新工作之后，则开始负责 <a href="https://www.smartx.com/smartx-hci/" target="_blank" rel="noopener">超融合产品</a> 集群部署相关工作，因此也会接触很多 <code>镜像</code>，不过这个镜像是操作系统的 ISO 镜像而不是容器镜像 😂。虽然两者都统称为镜像，但两者有着本质的区别。</p><p>首先两者构建的方式有本质的很大的区别，ISO 镜像一般使用 <code>mkisofs</code> 或者 <code>genisoimage</code> 等命令将一个包含操作系统安装所有文件目录构建为一个 ISO 镜像；而容器镜像构建则是根据 <code>Dockerfile</code> 文件使用相应的容器镜像构建工具来一层一层构建；</p><p>另外 ISO 镜像挂载后是只读的，这就意味着如果想要修改 ISO 镜像中的一个文件（比如 kickstart 文件），则需要先将 ISO 镜像中的所有内容负责到一个可以读写的目录中，在这个读写的目录中进行修改和重新构建 ISO 操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox ~/build</span><br><span class="line">╰─<span class="comment"># mount -o loop CentOS-7-x86_64-Minimal-2009.iso /mnt/iso</span></span><br><span class="line">mount: /mnt/iso: WARNING: device write-protected, mounted <span class="built_in">read</span>-only.</span><br><span class="line">╭─root@esxi-debian-devbox ~/build</span><br><span class="line">╰─<span class="comment"># touch /mnt/iso/kickstart.cfg</span></span><br><span class="line">touch: cannot touch <span class="string">'/mnt/iso/kickstart.cfg'</span>: Read-only file system</span><br></pre></td></tr></table></figure><p>在日常工作中经常会对一些已有的 ISO 镜像进行重新构建，重新构建 ISO 的效率根据不同的方式也会有所不同，本文就整理了三种不同重新构建 ISO 镜像的方案供大家参考。</p><h2 id="常规方式"><a href="#常规方式" class="headerlink" title="常规方式"></a>常规方式</h2><p>以下是按照 RedHat 官方文档 <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/anaconda_customization_guide/sect-iso-images" target="_blank" rel="noopener"> WORKING WITH ISO IMAGES</a> 中的操作步骤进行 ISO 重新构建。</p><ul><li>首先我们下载一个 ISO 文件，这里以 <a href="https://mirrors.tuna.tsinghua.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso" target="_blank" rel="noopener">CentOS-7-x86_64-Minimal-2009.iso</a> 为例，下载好之后将它挂载到本地 <code>/mn/iso</code> 目录下；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox ~/build</span><br><span class="line">╰─<span class="comment"># mount -o loop CentOS-7-x86_64-Minimal-2009.iso /mnt/iso</span></span><br><span class="line">mount: /mnt/iso: WARNING: device write-protected, mounted <span class="built_in">read</span>-only.</span><br></pre></td></tr></table></figure><ul><li>将 ISO 里的所有文件复制到另一个目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox ~/build</span><br><span class="line">╰─<span class="comment"># rsync -avrut --force /mnt/iso/ /mnt/build/</span></span><br></pre></td></tr></table></figure><ul><li>进入到该目录下修改或新增文件，然后重新构建 ISO 镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 genisoimage 命令构建 ISO 镜像，在 CentOS 上可以使用 mkisofs 命令，参数上会有一些差异</span></span><br><span class="line">╭─root@esxi-debian-devbox ~/build</span><br><span class="line">╰─<span class="comment"># genisoimage -U -r -v -T -J -joliet-long -V "CentOS 7 x86_64" -volset "CentOS 7 x86_64" -A "CentOS 7 x86_64" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -no-emul-boot -o /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso .</span></span><br><span class="line">Total translation table size: 124658</span><br><span class="line">Total rockridge attributes bytes: 55187</span><br><span class="line">Total directory bytes: 100352</span><br><span class="line">Path table size(bytes): 140</span><br><span class="line">Done with: The File(s)                             Block(s)    527985</span><br><span class="line">Writing:   Ending Padblock                         Start Block 528101</span><br><span class="line">Done with: Ending Padblock                         Block(s)    150</span><br><span class="line">Max brk space used a4000</span><br><span class="line">528251 extents written (1031 MB)</span><br><span class="line"><span class="comment"># 给 ISO 镜像生成 md5 校验</span></span><br><span class="line">╭─root@esxi-debian-devbox ~/build</span><br><span class="line">╰─<span class="comment"># implantisomd5 /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso</span></span><br><span class="line">Inserting md5sum into iso image...</span><br><span class="line">md5 = 9ddf5277bcb1d8679c367dfa93f9b162</span><br><span class="line">Inserting fragment md5sums into iso image...</span><br><span class="line">fragmd5 = f39e2822ec1ae832a69ae399ea4bd3e891eeb31e9deb9c536f529c15bbeb</span><br><span class="line">frags = 20</span><br><span class="line">Setting supported flag to 0</span><br></pre></td></tr></table></figure><p>对于 ISO 镜像比较小或者该操作不是很频繁的情况下按照这种方式是最省事儿的，但如果是 ISO 镜像比较大，或者是在 CI/CD 流水线中频繁地重新构建镜像，每次都要 cp 复制原 ISO 镜像的内容确实比较浪费时间。那有没有一个更加高效的方法呢 🤔️</p><p>经过一番摸索，折腾出来两种可以避免使用 cp 复制这种占用大量 IO 操作的构建方案，可以根据不同的场景进行选择。</p><h2 id="overlay2"><a href="#overlay2" class="headerlink" title="overlay2"></a>overlay2</h2><p>熟悉 docker 镜像的应该都知道镜像是只读的，使用镜像的时候则是通过联合挂载的方式将镜像的每一层 layer 挂载为只读层，将容器实际运行的目录挂载为读写层，而容器运行期间在读写层的所有操作不会影响到镜像原有的内容。容器镜像挂载的方式使用最多的是 overlay2 技术，在 <a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a> 和 <a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生 🤔</a> 中咱曾对它进行过比较深入的研究和使用，对 overlay2 技术感兴趣的可以翻看一下这两篇博客，本文就不再详解其中的技术原理了，只对使用 overlay2 技术重新构建 ISO 镜像的可行性进行一下分析。</p><ul><li>首先是创建 overlay2 挂载所需要的几个目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox ~</span><br><span class="line">╰─<span class="comment"># mkdir -p /mnt/overlay2/&#123;lower,upper,work,merged&#125;</span></span><br><span class="line">╭─root@esxi-debian-devbox ~</span><br><span class="line">╰─<span class="comment"># cd /mnt/overlay2</span></span><br></pre></td></tr></table></figure><ul><li>接着将 ISO 镜像挂载到 overlay2 的只读层 <code>lower</code> 目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox /mnt/overlay2</span><br><span class="line">╰─<span class="comment"># mount -o loop  /root/build/CentOS-7-x86_64-Minimal-2009.iso lower</span></span><br><span class="line">mount: /mnt/overlay2/lower: WARNING: device write-protected, mounted <span class="built_in">read</span>-only.</span><br></pre></td></tr></table></figure><ul><li>使用 mount 命令挂载 overlay2 文件系统，挂载点为 <code>merged</code> 目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox /mnt/overlay2</span><br><span class="line">╰─<span class="comment"># mount -t overlay overlay -o lowerdir=lower,upperdir=upper,workdir=work merged</span></span><br><span class="line">╭─root@esxi-debian-devbox /mnt/overlay2</span><br><span class="line">╰─<span class="comment"># cd merged</span></span><br></pre></td></tr></table></figure><ul><li>新增一个 kickstart.cfg 文件，然后重新构建 ISO 镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox /mnt/overlay2/merged</span><br><span class="line">╰─<span class="comment"># echo '# this is a kickstart config file' &gt; kickstart.cfg</span></span><br><span class="line">╭─root@esxi-debian-devbox /mnt/overlay2/merged</span><br><span class="line">╰─<span class="comment"># genisoimage -U -r -v -T -J -joliet-long -V "CentOS 7 x86_64" -volset "CentOS 7 x86_64" -A "CentOS 7 x86_64" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -no-emul-boot -o /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso .</span></span><br><span class="line">Total translation table size: 124658</span><br><span class="line">Total rockridge attributes bytes: 55187</span><br><span class="line">Total directory bytes: 100352</span><br><span class="line">Path table size(bytes): 140</span><br><span class="line">Done with: The File(s)                             Block(s)    527985</span><br><span class="line">Writing:   Ending Padblock                         Start Block 528101</span><br><span class="line">Done with: Ending Padblock                         Block(s)    150</span><br><span class="line">Max brk space used a4000</span><br><span class="line">528251 extents written (1031 MB)</span><br></pre></td></tr></table></figure><ul><li>挂载新的 ISO 镜像验证后发现确实可行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox /mnt/overlay2/merged</span><br><span class="line">╰─<span class="comment"># mount -o loop /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso /mnt/newiso</span></span><br><span class="line">mount: /mnt/newiso: WARNING: device write-protected, mounted <span class="built_in">read</span>-only.</span><br><span class="line">╭─root@esxi-debian-devbox /mnt/overlay2/merged</span><br><span class="line">╰─<span class="comment"># cat /mnt/newiso/kickstart.cfg</span></span><br><span class="line"><span class="comment"># this is a kickstart config file</span></span><br></pre></td></tr></table></figure><h2 id="mount-–bind"><a href="#mount-–bind" class="headerlink" title="mount –bind"></a>mount –bind</h2><p>前面讲到了使用 overlay2 的方式避免复制原镜像内容进行重新构建镜像的方案，但是 overlay2 对于不是很熟悉的人来讲还是比较复杂，光 lowerdir、upperdir、workdir、mergeddir 这四个文件夹的作用和原理就把人直接给整不会了。那么还有没有更为简单一点的方式呢？</p><p>别说还真有，只不过这种方式的用途比较局限。如果仅仅是用于修改 ISO 中的一个文件或者目录，可以将该文件或目录以 <code>bind</code> 挂载的方式将它挂载到 ISO 目录目录对应的文件上。</p><p>原理就是虽然 ISO 目录本身是只读的，但它里面的文件和目录是可以作为一个挂载点的。也就是说我把文件 A 挂载到文件 B，并不是在修改文件 B，这就是 Unix/Linux 文件系统十分奇妙的地方。同样运用 bind 挂载的还有 docker 的 volume 以及 pod 的 volume 也是运用同样的原理，以 bind 的方式将宿主机上的目录或文件挂载到容器运行对应的目录上。对于修改只读 ISO 里的文件/目录我们当然也可以这样做。废话不多说来实践验证一下：</p><ul><li>首先依旧是将 ISO 镜像挂载到 <code>/mn/iso</code> 目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox ~/build</span><br><span class="line">╰─<span class="comment"># mount -o loop CentOS-7-x86_64-Minimal-2009.iso /mnt/iso</span></span><br><span class="line">mount: /mnt/iso: WARNING: device write-protected, mounted <span class="built_in">read</span>-only.</span><br></pre></td></tr></table></figure><ul><li>接着创建一个 <code>/mnt/files/ks.cfg</code> 文件，并写入我们需要的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox ~/build</span><br><span class="line">╰─<span class="comment"># mkdir -p /mnt/files</span></span><br><span class="line">╭─root@esxi-debian-devbox ~/build</span><br><span class="line">╰─<span class="comment"># echo '# this is a kickstart config file' &gt; /mnt/files/ks.cfg</span></span><br></pre></td></tr></table></figure><ul><li>接着以 mount –bind 的方式挂载新建的文件到 ISO 的 EULA 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox /mnt/build</span><br><span class="line">╰─<span class="comment"># mount --bind /mnt/files/ks.cfg /mnt/iso/EULA</span></span><br><span class="line">╭─root@esxi-debian-devbox /mnt/build</span><br><span class="line">╰─<span class="comment"># cat /mnt/iso/EULA</span></span><br><span class="line"><span class="comment"># this is a kickstart config file</span></span><br></pre></td></tr></table></figure><ul><li>可以看到原来 ISO 文件中的 EULA 文件已经被成功替换成了我们修改的文件，然后再重新构建一下该 ISO 镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox /mnt/iso</span><br><span class="line">╰─<span class="comment"># genisoimage -U -r -v -T -J -joliet-long -V "CentOS 7 x86_64" -volset "CentOS 7 x86_64" -A "CentOS 7 x86_64" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -no-emul-boot -o /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso .</span></span><br></pre></td></tr></table></figure><ul><li>然后我们再重新挂载新的 ISO 文件验证一下是否可以</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox /mnt/iso</span><br><span class="line">╰─<span class="comment"># mkdir /mnt/newiso</span></span><br><span class="line">╭─root@esxi-debian-devbox /mnt/iso</span><br><span class="line">╰─<span class="comment"># mount -o loop /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso /mnt/newiso</span></span><br><span class="line">mount: /mnt/newiso: WARNING: device write-protected, mounted <span class="built_in">read</span>-only.</span><br><span class="line">╭─root@esxi-debian-devbox /mnt/iso</span><br><span class="line">╰─<span class="comment"># cat /mnt/newiso/EULA</span></span><br><span class="line"><span class="comment"># this is a kickstart config file</span></span><br></pre></td></tr></table></figure><p>验证通过，确实可以！不过这种方式很局限，比较适用于修改单个文件如 <code>kickstart.cfg</code>，如果是要新增文件那还是使用上文提到的 overlay2 的方式更为方便一些。</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>虽然 ISO 镜像和容器镜像二者有着本质的差别，但对于只读和联合挂载的这些特性二者可以相互借鉴滴。</p><p>不止如此 overlay2 这种联合挂载的特性，还可以用在其他地方。比如我有一个公共的 NFS 共享服务器，共享着一些目录，所有人都可以以 root 用户并以读写的权限进行 NFS 挂载。这种情况下很难保障一些重要的文件和数据被误删。这时候就可以使用 overlay2 的方式将一些重要的文件数据挂载为 overlay2 的 lowerdir 只读层，保证这些数据就如容器镜像一样，每次挂载使用的时候都作为一个只读层。所有的读写操作都在 overlay2 的 merged 那一层，不会真正影响到只读层的内容。</p><p>草草地水了一篇博客，是不是没有用的知识又增加了 😂</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt" target="_blank" rel="noopener">overlayfs.txt</a></li><li><a href="https://arkingc.github.io/2017/05/05/2017-05-05-docker-filesystem-overlay/" target="_blank" rel="noopener">Docker 存储驱动—Overlay/Overlay2「译」</a></li><li><a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生 🤔</a></li><li><a href="https://zdyxry.github.io/2019/01/12/%E8%81%8A%E4%B8%80%E8%81%8A-ISO-9660/" target="_blank" rel="noopener">聊一聊 ISO 9660</a></li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/anaconda_customization_guide/sect-iso-images" target="_blank" rel="noopener">WORKING WITH ISO IMAGES</a></li><li><a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a></li><li><a href="https://blog.k8s.li/mount-bind.html">mount 命令之 –bind 挂载参数</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;笔者之前在字节跳动的时候是负责 PaaS
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="overlay2" scheme="https://blog.k8s.li/tags/overlay2/"/>
    
      <category term="ISO" scheme="https://blog.k8s.li/tags/ISO/"/>
    
  </entry>
  
  <entry>
    <title>Kubespray 2.18 版本特性预览</title>
    <link href="https://blog.k8s.li/kubespray-2.18.html"/>
    <id>https://blog.k8s.li/kubespray-2.18.html</id>
    <published>2022-01-04T16:00:00.000Z</published>
    <updated>2022-03-15T00:55:12.747Z</updated>
    
    <content type="html"><![CDATA[<p>最近 kubernetes-sig 社区的 <a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">kubespray</a> 项目正式 release 了 <a href="https://github.com/kubernetes-sigs/kubespray/releases/tag/v2.18.0" target="_blank" rel="noopener">v2.18.0</a> 版本，同时对应 <a href="https://github.com/cncf/k8s-conformance" target="_blank" rel="noopener">k8s-conformance</a> 的 <a href="https://github.com/cncf/k8s-conformance/pull/1748" target="_blank" rel="noopener">v1.21</a> 和 <a href="https://github.com/cncf/k8s-conformance/pull/1760" target="_blank" rel="noopener">v1.22</a> 版本 kubespray 也都已经得到 CNCF 的一致性认证。于是今天就借这个新版本 release 的机会整理一下 2.18 版本的 kubespray 有哪些有趣的变化。</p><h2 id="组件版本"><a href="#组件版本" class="headerlink" title="组件版本"></a>组件版本</h2><p>以下是 v2.18.0 版本中 kubespray 部署组件的一些版本信息：</p><h3 id="K8s-核心组件"><a href="#K8s-核心组件" class="headerlink" title="K8s 核心组件"></a>K8s 核心组件</h3><ul><li>kubespray 支持的 Kubernetes 支持从 v1.22.0 到 v1.23.1 之间的所有正式版本，默认部署的版本为 v1.22.5，并且 <a href="https://github.com/cncf/k8s-conformance/pull/1760" target="_blank" rel="noopener">v1.22</a> 版本得到了 CNCF 官方的一致性认证；</li><li>etcd 从原来的 v3.4.13 升级到了 v3.5.0；</li><li>coredns 版本升级到了 v1.8.0，它的搭档 dnsautoscaler 则为 1.8.5；</li><li>pod_infra 即 pause 镜像的版本没有变化依旧为 3.3；</li></ul><table><thead><tr><th>Addon</th><th align="left">Version</th></tr></thead><tbody><tr><td>kube</td><td align="left">v1.22.5</td></tr><tr><td>pod_infra</td><td align="left">3.3</td></tr><tr><td>etcd</td><td align="left">v3.5.0</td></tr><tr><td>coredns</td><td align="left">v1.8.0</td></tr></tbody></table><h3 id="容器运行时"><a href="#容器运行时" class="headerlink" title="容器运行时"></a>容器运行时</h3><p>目前市面上所有的 Kubernetes 集群部署工具中，对容器运行时的支持 kubespray 无疑是最丰富的。部署能支持 docker、containerd、crun、kata、cri-o。默认的容器运行时已经从之前的 docker 切换到了 containerd，containerd 的版本是 v1.5.8。</p><table><thead><tr><th>Addon</th><th>Version</th></tr></thead><tbody><tr><td>containerd</td><td>1.5.8</td></tr><tr><td>docker</td><td>20.10</td></tr><tr><td>docker_containerd</td><td>1.4.12</td></tr><tr><td>crun</td><td>1.3</td></tr><tr><td>runc</td><td>v1.0.3</td></tr><tr><td>crio</td><td>1.22</td></tr><tr><td>kata_containers</td><td>2.2.3</td></tr><tr><td>gvisor</td><td>20210921</td></tr></tbody></table><h3 id="CNI"><a href="#CNI" class="headerlink" title="CNI"></a>CNI</h3><p>同样，目前市面上所有的 Kubernetes 集群部署工具中，对 CNI 的支持 kubespray 也无疑是最为丰富的，能支持 9 种 CNI 以及多种 CNI 组合部署的 <a href="https://github.com/intel/multus-cni" target="_blank" rel="noopener">multus</a> 。</p><table><thead><tr><th>Addon</th><th>Version</th></tr></thead><tbody><tr><td>calico</td><td>v3.20.3</td></tr><tr><td>flannel</td><td>v0.15.1</td></tr><tr><td>flannel_cni</td><td>v1.0.0</td></tr><tr><td>cni</td><td>v1.0.1</td></tr><tr><td>weave</td><td>2.8.1</td></tr><tr><td>cilium</td><td>v1.9.11</td></tr><tr><td>kube_ovn</td><td>v1.8.1</td></tr><tr><td>kube_router</td><td>v1.3.2</td></tr><tr><td>multus_cni</td><td>0.4.0</td></tr><tr><td>multus</td><td>v3.8</td></tr></tbody></table><h3 id="Kubernetes-app"><a href="#Kubernetes-app" class="headerlink" title="Kubernetes-app"></a>Kubernetes-app</h3><p>同时，kubespray 还支持一些 CLI 工具以及第三方应用的部署。</p><ul><li>CLI 工具</li></ul><p>一些 CLI 工具，比如 helm、nerdctl、krew、crictl。其中 nerdctl 的部署支持是咱在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/7500" target="_blank" rel="noopener">#7500</a> 中加入支持的，目的是为 containerd 用户提供一个相对友好的命令行操作体验，以替代 docker CLI。</p><table><thead><tr><th>addon</th><th>version</th></tr></thead><tbody><tr><td>helm</td><td>v3.7.1</td></tr><tr><td>nerdctl</td><td>0.15.0</td></tr><tr><td>krew</td><td>v0.4.2</td></tr><tr><td>crictl</td><td>v1.22.0</td></tr></tbody></table><ul><li>app</li></ul><p>个人感觉部署一些像 <code>dnsautoscaler</code>、 <code>argoCD</code> 这样的应用，还是使用 helm 比较好。因为基于 ansible 的 kubespray 维护这么多第三方组件，以及它们的升级管理都远不如 helm 方便。因此考虑到这些组件的升级维护成本，个人还是不太建议使用 kubespray 来部署这些组件。</p><table><thead><tr><th>Addon</th><th>Version</th></tr></thead><tbody><tr><td>dnsautoscaler</td><td>1.8.5</td></tr><tr><td>netcheck</td><td>v1.2.2</td></tr><tr><td>nodelocaldns</td><td>1.21.1</td></tr><tr><td>metrics_server</td><td>v0.5.0</td></tr><tr><td>cert_manager</td><td>v1.5.4</td></tr><tr><td>addon_resizer</td><td>1.8.11</td></tr><tr><td>cinder_blockstorage</td><td>v3</td></tr><tr><td>external_vsphere</td><td>6.7u3</td></tr><tr><td>nvidia_driver</td><td>390.87</td></tr><tr><td>oci_cloud_controller</td><td>0.7.0</td></tr><tr><td>metallb</td><td>v0.10.3</td></tr><tr><td>argocd</td><td>v2.1.6</td></tr></tbody></table><h2 id="支持的-OS"><a href="#支持的-OS" class="headerlink" title="支持的 OS"></a>支持的 OS</h2><table><thead><tr><th>distribution</th><th>version</th></tr></thead><tbody><tr><td>Amazon Linux</td><td>2</td></tr><tr><td>Fedora CoreOS</td><td>34.x/35.x</td></tr><tr><td>Flatcar Container Linux by Kinvolk</td><td></td></tr><tr><td>Alma Linux</td><td>8</td></tr><tr><td>Rocky Linux</td><td>8</td></tr><tr><td>CentOS/RHEL</td><td>7/8</td></tr><tr><td>Oracle Linux</td><td>7/8</td></tr><tr><td>Debian</td><td>8/9/10/11</td></tr><tr><td>Ubuntu</td><td>16.04/18.04/20.04</td></tr><tr><td>Fedora</td><td>34/35</td></tr><tr><td>openSUSE</td><td>Leap 15.x/Tumbleweed</td></tr></tbody></table><h2 id="主要变化"><a href="#主要变化" class="headerlink" title="主要变化"></a>主要变化</h2><h3 id="废除"><a href="#废除" class="headerlink" title="废除"></a>废除</h3><ul><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8086" target="_blank" rel="noopener">#8086</a> 中移除了对 Ambassador 的支持；</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8327" target="_blank" rel="noopener">#8327</a> 中移除了对 registry-proxy 的支持；</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8246" target="_blank" rel="noopener">#8246</a> 中移除了对 Fedora 33 的支持，因为  Fedora 33 在 2021-11-30 就已经 EOL 了，所以被废弃支持也理所当然；</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8265" target="_blank" rel="noopener">#8265</a> 中移除了对 Mitogen 的支持，Mitogen 的作用就是用来优化 Ansible 的性能，但 Mitogen 对于一些新的 Linux 发行版支持的额并不是很友好，在 Kubespray 中维护的成本也比较大，因此社区就废弃它了；</li></ul><h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><ul><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/7895" target="_blank" rel="noopener">#7895</a> 中新增了 ArgoCD 的部署支持，通过设置 <code>argocd_enabled</code> 即可在部署集群的时候安装 ArgoCD。不过个人认为，ArgoCD 这玩意儿不太适合放在 K8s 部署当中来，看看 <a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">ks-installer</a> 的代码你就能明白了 😂。</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8175" target="_blank" rel="noopener">#8175</a> 中默认使用 containerd 作为默认的容器运行时，替代掉了 docker。不过需要注意的是，当前版本的 kubespray 是使用 <a href="https://github.com/containerd/containerd" target="_blank" rel="noopener">containerd</a> 官方 repo release 的二进制安装包，但二进制安装包并没有 arm64 版本的。所以如果要部署的集群节点包含 arm64 的机器，最好还是使用 docker 作为容器运行时。</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8291" target="_blank" rel="noopener">#8291</a> 新增了 registry 部署支持多种 ServiceTypes 的支持；</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8229" target="_blank" rel="noopener">#8229</a> 中新增了支持 registry 认证的方式，私有化部署的时候使用带有认证的 registry 会用到；</li></ul><h3 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h3><ul><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8239" target="_blank" rel="noopener">#8239</a> 中 <a href="https://github.com/cristicalin" target="_blank" rel="noopener">cristicalin</a> 大佬引入了一个修改，如果是 containerd 运行时，则使用 nerdctl 下载镜像。这将会导致配置了 containerd registry mirrors 的参数将会失效。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近 kubernetes-sig 社区的 &lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>时光痕迹：2021 年总结</title>
    <link href="https://blog.k8s.li/2021.html"/>
    <id>https://blog.k8s.li/2021.html</id>
    <published>2022-01-02T16:00:00.000Z</published>
    <updated>2022-03-15T00:55:12.747Z</updated>
    
    <content type="html"><![CDATA[<p>2021 依旧是人类社会<strong>倒车和加速灭亡</strong>的一年，全球范围内新冠病毒依旧在肆虐，新的变异又接踵而来，疫情并没有多少消退的迹象。而现在国内西安疫情又爆发开来，无法预想未来究竟能变成什么样子。</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>2021 年 9 月份的时候将书单从原来的 Markdown 文本迁移到了 Notion 上，体验十分棒。Notion 的表格数据库功能十分强大，对书单来说简直就是一件神器。抽空整理了一下书单  <a href="https://reading.k8s.li" target="_blank" rel="noopener">reading.k8s.li</a>  ，2021 年大概读完了 97 本书。其中科普 27 本、漫画 17 本、历史 13 本、政治 11 本、轻小说 8 本、社科 7 本、心理学 5 本、技术 5 本、法律 2 本。之所以能读完这么多书大概是因为如下 😂：</p><ul><li>单身独居，自己一个人生活，没人打扰；</li><li>不喜欢社交，不喜欢群聊闲聊扯淡撕逼；</li><li>不玩游戏不刷短视频，没有其他爱好；</li><li>周末和节假日大多数宅在家里玩儿；</li></ul><p>其中我觉着单身独居是最主要的原因，比如 <a href="https://twitter.com/yihong0618" target="_blank" rel="noopener">伊洪</a> 老哥也是如此：</p><p><img src="https://p.k8s.li/image-20220103202406764.png" alt="image-20220103202406764"></p><p>根据个人的喜好，就分享以下 10 本我个人觉着十分有意思的书给大家：</p><p><img src="https://p.k8s.li/image-20220103202406766.png" alt="Snipaste_2021-12-31_19-28-11"></p><p>由于读书笔记的篇幅太长，后面有空的话我会和去年的《<a href="https://blog.k8s.li/2020-booklist.html">2020 年读书笔记和思考</a>》一样，再写一篇 2021 年的读书笔记来分享给大家（大概率是在春节期间写了）。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h3><p>今年最大的变化就是换了新工作，这也是第二次换工作。本来没有打算离职，但是被迫<del>字节</del>跳动了一年之后，感觉太累了，并没有想象中的那么快乐。</p><p>不得不吐槽一下字节的基础设施做的实在是太烂了，比如镜像仓库各种奇葩的问题。当时还因为这破玩意儿出过版本发布的错误，导致组件编译的 base 镜像出错，后来又不得不重新发布一个版本来擦屁股。</p><p>还有当时 PaaS 容器云平台私有化产品版本发布的时候，领导非得将打包发布的时间点定在临近晚上下班的时候。这就会导致我们组（苦命发版工具人）忙活到晚上十一二点，真的是十分不爽。就是因为一些公共事务没有做好，一些问题在组件自身的 CI/CD 流水线中并不能及时暴露，等到最终最后版本发布的时候，各种奇葩的问题突突突地冒出来。比如缺镜像、镜像错误、helm chart 错误、版本错误等。然后出了问题之后又要 @ 各个组件的 owner 去解决问题，它们修改好之后我们再重新打包部署新的环境来验证。每到发版日就十分痛苦，一些基础设施和公共事务没有做好，等到最后我们发版工具人来擦屁股。这让我想起了另一位推友分享的经历：</p><p><img src="https://p.k8s.li/image-20220104082135898.png" alt="image-20220104082135898"></p><h3 id="裸辞离职"><a href="#裸辞离职" class="headerlink" title="裸辞离职"></a>裸辞离职</h3><p>四月底和 leader 绩效沟通完后感觉不太满意于是内心就决定了要离职。不过因为当时一些组织架构的调整，我所做的工作没有一个合适的人来接盘。再加上新产品刚进入设计阶段，新产品平台底层的 K8s 部署以及私有化打包发布相关的工作没有其他人能够 take 起来，最尴尬的是这部分工作当时只有我一个人能完整地做出来。如果在五月底离职的话，可能会对新产品的开发带来一定影响。因此当时考虑了一下，还是等到新产品稳定发版以及把负责的工作交接给新人之后再离开吧。</p><p>就这样自己一个人又重新负责起了整个 PaaS 平台的私有化部署和打包发布相关的工作，这段时间也收获挺多的，顺便给 kubernetes-sig 社区的 kubespray 项目贡献了十几个 <a href="https://github.com/kubernetes-sigs/kubespray/pulls?q=is%3Apr+author%3Amuzi502+is%3Aclosed" target="_blank" rel="noopener">PR</a>。等到七月底的时候，新产品已经进入了稳定开发的阶段，在第一个 alpha.1 版本时就搞定了私有化部署和私有化打包的流水线，又经过三个 sprint 的迭代后，终于稳定了下来。之后就整理了一些平时积累的文档，交接给了其他同事，然后办理离职手续走人。</p><p>裸辞的原因也有很多：想走出心理舒适圈，换个环境能让自己成长起来；当时对工作也有了一点厌倦，想好好休息一下；当时的状态也不是很好，如果那时候准备面试的话，感觉效果不太好；很久没有回家了，想在家好好休息一段时间。当时也没有选择休假，而是将所有的假期都折算成双倍工资了，感觉这样更划算一些。如果是休假的话，保不准在休假的时候仍要在飞书上处理一些同事的问题。感觉这样就挺烦人的，所以干脆就直接走人，飞书都没了还怎么联系我。</p><p>离职的第二天就收拾行李回老家，因为老爸的生日快到了，也想尽快回家和家人团聚。</p><p>之后就一直在家划水摸鱼啦，期间花了两周左右的时间完成了两个开源项目：一个是用于构建 yum/apt/dnf 离线源的工具 <a href="https://github.com/k8sli/os-packages" target="_blank" rel="noopener">k8sli/os-packages</a> ，以及无网环境中离线部署 k8s 的工具  <a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">k8sli/kubeplay</a> 。</p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>正式开始准备面试是在 9 月初的时候，已经划水摸鱼一个月了，感觉休息的也差不多了。还是赶紧找工作面试吧，在起初的一周是通过一些心仪公司的官网上投递的简历，不幸的是收到的回复很少。当时心里有点慌，写了篇求职《<a href="https://blog.k8s.li/jobs.html">求职贴：运维开发 ｜SRE</a>》介绍了一下自己的现状，终于收到了一些小伙伴们的内推。</p><p><img src="https://p.k8s.li/image-20211231205927088.png" alt="image-20211231205927088"></p><p>在此还是十分感谢帮助我内推的小伙伴，在我即将走投无路的时候有你们的推荐才有了我现在的工作机会。大大小小的面试总共进行了 25 次吧，差不多通过了一半，拿到 4 个书面 offer，最终去了一家做 IaaS 虚拟化和分布式块存储产品的 toB 公司。</p><p>因为之前是在字节跳动做 PaaS toB 产品的集群部署和私有化交付相关工作，在新工作则是做 IaaS toB 产品的集群部署相关工作，都是“集群部署”相关的，因此和以往的经历比较匹配。对于像咱这种喜欢折腾的垃圾佬来说，还是硬件服务器、操作系统、虚拟化、分布式存储等方面的内容比较有意思，玩起来可开心惹 🤣。</p><p>更为重要的一点是新工作不再像以前那样运维技术为主了，而至以后端研发为主。其实我很早之前就想写一些 Go/Python 后端项目的代码了，只不过一直没找到一个合适的机会（其实是偷懒的借口 🌚）。在字节的时候也没有太多后端开发的经验，所以当初面试的时候因为开发能力较弱被刷掉了很多，也让一些面试官极其失望。</p><p>幸运的是面试的时候也遇到了一个非常 nice 的公司愿意花时间培养我这方面的能力，leader 也十分信任我的学习能力，让我从零开始承担一个项目的后端开发，给了我这么一个宝贵的机会来学习和弥补开发能力不足的短板。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>生活上依旧是单身独居，自己一个人生活实在是太爽了，越来越习惯这种生活，好想永远地就这样生活下去，没有催婚的烦恼 😖。独自一个人生活最重要的就是学会<strong>如何对抗虚无</strong>。只要找些有意义的事情来做（比如读书），就不会觉着生活无味或者有空虚感。回想起大学四年，基本上我也是的独自一人去图书馆看书、独自一人吃饭、独自一人去自习室，感觉和现在没有太多差别，只不过从上课学习换成了工作搬砖，其他时间的生活节奏基本上没有太大的变化。</p><p>还有一点就是尽量的远离社交媒体，不要过度地依赖它们，更不要放纵自己不停地刷推或者短视频来娱乐消遣。其实这些东西并不能给我们带来真正意义上的快乐，有一部纪录片《<a href="https://www.netflix.com/sg-zh/title/81254224" target="_blank" rel="noopener">监视资本主义：智能陷阱</a>》里面也谈到过过度依赖社交媒体的后果。</p><h3 id="杭州过年"><a href="#杭州过年" class="headerlink" title="杭州过年"></a>杭州过年</h3><p>因为疫情的原因 2021 年就没回家过年，再加上越是农村那种破地方防疫措施就是越离谱，看看现在西安的防疫措施你们就能明白了为什么不想回家。于是就懒得折腾，选择独自一人留在杭州过年，顺便还能领取杭州市政府的留杭补贴 1000 块钱。杭州市在这一块做的还真不错，去年还领了人才补贴的 1w 块钱，从老大哥手里薅羊毛，真鸡儿刺激。</p><h3 id="环太湖骑行"><a href="#环太湖骑行" class="headerlink" title="环太湖骑行"></a>环太湖骑行</h3><p>为了不让五一假期再像过年那样一直烂在家里，就独自一人从杭州骑行到湖州、常州、无锡、苏州、太湖一带游玩，真的是很久没有那么开心过了。回来之后还更新了一篇博客《<a href="https://blog.k8s.li/taihu.html">五一假期环太湖骑行之旅</a>》，旅程的风景真的不错，感兴趣的话可以去读一下。</p><h3 id="上海租房"><a href="#上海租房" class="headerlink" title="上海租房"></a>上海租房</h3><p>新工作的办公地点是在上海，因为不支持远程办公所以不得不从杭州搬家来到上海。在中介老哥的带领下找了一个月租 3100 元的卧室 + 独卫的房子（包水电费），整体感觉十分满意。房子比较特殊，是三室一厅。我住在其中的一个大卧室，房东他父母住在另一个卧室，剩余的一个卧室是空着的，除了我以外没有其他的租客。出于对老人安全的考虑，房东只允许我自己一个人住，不能带外人来。对我来说也没啥，独来独往的生活反正也不会有其他人来找我玩儿。</p><p>卧室面积 3.3 * 4.3m=14.19 平、玄关 1.1 * 1m=1.1 平、卫生间 2.3 * 2.1m=4.38 平。加起来总共差不多 20 平。感觉这个面积感觉比杭州那个带阳台的卧室大很多。一个 1.5 * 2m 的床、靠墙再放置两张 60* 120 cm 的宜家桌子、床的右侧又能放下一张 0.6 * 1.4m 米的书桌，还有一个 0.5 *2m 的衣柜。</p><p>现在终于住上了自己所期待的那种房子，回想起大学刚毕业那一年住的还是 300 块钱的上下铺青旅，就感觉当时十分寒酸 😭。</p><p><img src="https://p.k8s.li/image-20220103165850671.png" alt="image-20220103165850671"></p><p>房间里还有一个带书架的电脑桌，放下一个 27 寸的显示器刚刚好。另外把我那台 HPE Gen10 Plus 服务器安置在了书桌下面。虽然靠近床头，但 NAS 里硬盘的噪音还算能接受，不至于吵得睡不着觉。有时候在想要不要整个 12U 的机柜来着，但规划了一下感觉还是没有太大的必要，先这样凑活着用吧。</p><p><img src="https://p.k8s.li/image-20220103202406765.jpg" alt="IMG_2177"></p><p>搬进来之后的第二天在闲鱼上花了 300 块钱捡来了一个原价 1699 的米家扫地机器人，又花了 200 块钱捡了一个米家空气净化器（贫穷如我，只能靠捡和薅来提升生活幸福感了）。感觉这两个家用电器还是挺值的，扫地机器人省去了打扫卫生的麻烦事儿，生活幸福感 +++。</p><h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><p>就像作家方方所说的那样：<a href="http://fangfang.blog.caixin.com/archives/220746" target="_blank" rel="noopener">时代的一粒灰，落在个人头上就是一座山</a> 。外婆在 2020 年新冠疫情刚爆发的那段时间不幸离开了这个世界，而那段时间的经历也彻底改变了我看待生死的想法。仿佛一切都没有那么重要了，也让我深刻地明白了<strong>这个世界上没有什么东西无法不能失去的，也没有什么非得必须要得到的</strong>。即便是某一天我不幸去世，也没有太多遗憾和悔恨。所以去他的未来计划，和往常一样好好搬砖工作和看书学习，这样就够了。</p><p>另外祝大家新的一年快快乐乐 🥳</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;2021
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Tencent Cloud lighthouse Firewall tool</title>
    <link href="https://blog.k8s.li/cfwctl.html"/>
    <id>https://blog.k8s.li/cfwctl.html</id>
    <published>2021-12-14T16:00:00.000Z</published>
    <updated>2021-12-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次去北京出差，为了便捷地访问家里内网中的一些服务，就在腾讯云服务器上部署了一个 frps 服务，在本地内网的 Openwrt 路由器上安装 frpc 客户端，将内网中的一台 Windows 服务器穿透到腾讯云服务器上。然后通过 Windows RDP 远程连接到这台 Windows 机器上，来使用内网的一些服务。之前也尝试过 WireGuard，但是使用了一段时间体验下来感觉还是通过内网穿透的方式比较稳定和流畅。于是最终的方式还是选用 frp 内网穿透的方案。</p><p>本着方便省事儿的原则就放心大胆地开放了云服务器的安全组规则。不幸的是，由于这样的疏忽，某一天我的 Windows 虚拟机被弱口令（admin2020）给爆破了。巨大的损失就是挂载到 Windows 虚拟机上的 NAS 存储被勒索病毒进行了加密 😂。不过好在最最重要的数据全部存到了 OneDrive 上，NAS 上损失的都是一些下载的电影、书籍以及一些 ISO、虚拟机模版之类的文件。一下子损失了 8TB 的数据很心疼，毕竟是自己辛辛苦苦搜集的资源，但是仔细想一下，这些资源都不是自己的，基本上都是从下载下来的，还可以通过同样的方式找回来。或许是之前看过《断舍离》的缘故，也看的开了，难受了一小会儿之后就好过来了。毕竟这个世界上，没有无法不能失去的东西，也没有非得必须要得到的东西。</p><p>有了此次教训，就开始考虑对手上的云主机资源进行安全加固，将一些与内网互通的云主机安全组/防火墙的通用去除了允许所有，只添加本地公网 IP 的允许规则。但是对于家庭宽带用户来讲，公网 IP 并不是一个固定的 IP，而是会一直不断变化，总不能每次变化之后再登录到云主机控制台手动添加一下吧。于是就想着有没有自动化的方式来自动添加和更新安全组/防火墙规则呢？</p><h2 id="Terraform"><a href="#Terraform" class="headerlink" title="Terraform"></a>Terraform</h2><p>第一个想到的方案便是 terraform，主流的云厂商都有对应的 provider 支持，腾讯云应该也是能够支持的。不过看了官方的 <a href="https://github.com/tencentcloudstack/terraform-provider-tencentcloud" target="_blank" rel="noopener">terraform-provider-tencentcloud</a> repo 文档之后，并没有找到给 lighthouse 主机配置防火墙规则的支持，遂放弃。</p><h2 id="cfwctl"><a href="#cfwctl" class="headerlink" title="cfwctl"></a>cfwctl</h2><p>既然 terraform 不支持，那就自己造轮子写一个吧，就叫它 Cloud Firewall Control Tool，简称 <a href="https://github.com/muzi502/cfwctl" target="_blank" rel="noopener">cfwctl</a>。腾讯云官方的 API 文档还可以，还能在线生成代码，用起来也十分方便。考虑到会将该工具运行到运行到 arm64 的路由器上，因此跨平台运行 cfwctl 使用 golang 来实现无疑是个不错的选择，正好也能来练练手。</p><p>执行的操作其实很简单，先是通过某种方式获取本地机器的公网 IP，然后将该 IP 添加到对应实例的防火墙规则当中，并在规则描述中添加标识符来标记。目前自己只需要添加规则，先凑活着用一段时间，看下效果如何。目前只支持腾讯云的 lighthouse 实例，后续有机会再增加几个别的云厂商支持。</p><h3 id="获取公网-IP"><a href="#获取公网-IP" class="headerlink" title="获取公网 IP"></a>获取公网 IP</h3><p>首先要获取到我们本地网路的公网 IP，由于公网 IP 可能一直是变化的，所以我们每次更新防火墙规则之前都需要获取最新的公网 IP。以下是具体实现的代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 IPv4 的正则表达式，目的是从获取公网 IP 的  API 返回结果中过滤出 IPv4 地址</span></span><br><span class="line"><span class="keyword">const</span> ipv4_regex = <span class="string">`(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))&#123;3&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义几个几个提供获取公网 IPv4 地址的 API URL</span></span><br><span class="line"><span class="keyword">var</span> urlList = []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"https://ip.me"</span></span><br><span class="line"><span class="string">"http://ip.sb"</span>,</span><br><span class="line"><span class="string">"http://ip.cip.cc"</span>,</span><br><span class="line"><span class="string">"http://myip.ipip.net"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPublicIP</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, url := <span class="keyword">range</span> urlList &#123;</span><br><span class="line">    <span class="comment">// 创建一个 http client</span></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">    <span class="comment">// 设置 client 的请求方法为 GET 以及请求的 URL</span></span><br><span class="line">request, err := http.NewRequest(<span class="string">"GET"</span>, url, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 设置 Client 的 User-Agent 为 curl，不然一些 API 会返回 html 的结果</span></span><br><span class="line">request.Header.Set(<span class="string">"User-Agent"</span>, <span class="string">"curl/7.54.0"</span>)</span><br><span class="line">resp, err := client.Do(request)</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &amp;&amp; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">    <span class="comment">// 从 API 返回结果中用正则匹配出 IPv4 地址</span></span><br><span class="line">reg := regexp.MustCompile(ipv4_regex)</span><br><span class="line">ipList := reg.FindAllString(<span class="keyword">string</span>(body), <span class="number">-1</span>)</span><br><span class="line">    <span class="comment">// 如果匹配结果中有 IPv4 地址，则返回第一个元素即可</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ipList) &gt; <span class="number">0</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"my public ip is %s\n"</span>, ipList[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> ipList[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加-Firewall-规则"><a href="#添加-Firewall-规则" class="headerlink" title="添加 Firewall 规则"></a>添加 Firewall 规则</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"</span></span><br><span class="line"><span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"</span></span><br><span class="line"><span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"</span></span><br><span class="line">lighthouse <span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/lighthouse/v20200324"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 API 请求的 URL</span></span><br><span class="line"><span class="keyword">const</span> endpoint = <span class="string">"lighthouse.tencentcloudapi.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义请求 API 的 Client 结构体</span></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">SecretId  <span class="keyword">string</span></span><br><span class="line">SecretKey <span class="keyword">string</span></span><br><span class="line">InstaceId <span class="keyword">string</span></span><br><span class="line">Region    <span class="keyword">string</span></span><br><span class="line">Endpoint  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过该方法从环境变量中读取 Ck Sk 等信息，并返回一个 client 对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewClient</span><span class="params">()</span> <span class="title">Client</span></span> &#123;</span><br><span class="line">client := Client&#123;</span><br><span class="line">SecretId:  os.Getenv(<span class="string">"TENCENTCLOUD_SECRET_ID"</span>),</span><br><span class="line">SecretKey: os.Getenv(<span class="string">"TENCENTCLOUD_SECRET_KEY"</span>),</span><br><span class="line">InstaceId: os.Getenv(<span class="string">"TENCENTCLOUD_INSTANCE_ID"</span>),</span><br><span class="line">Region:    os.Getenv(<span class="string">"TENCENTCLOUD_REGION"</span>),</span><br><span class="line">Endpoint:  endpoint,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> client.SecretId == <span class="string">""</span> || client.SecretKey == <span class="string">""</span> || client.InstaceId == <span class="string">""</span> || client.Region == <span class="string">""</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"Please set TENCENTCLOUD_SECRET_ID, TENCENTCLOUD_SECRET_KEY, TENCENTCLOUD_INSTANCE_ID, TENCENTCLOUD_REGION"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义添加防火墙规则的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Client)</span> <span class="title">AddRules</span><span class="params">(firewallRules []*lighthouse.FirewallRule)</span></span> &#123;</span><br><span class="line">credential := common.NewCredential(c.SecretId, c.SecretKey)</span><br><span class="line">cpf := profile.NewClientProfile()</span><br><span class="line">cpf.HttpProfile.Endpoint = endpoint</span><br><span class="line">client, _ := lighthouse.NewClient(credential, c.Region, cpf)</span><br><span class="line"></span><br><span class="line">request := lighthouse.NewCreateFirewallRulesRequest()</span><br><span class="line">request.InstanceId = common.StringPtr(c.InstaceId)</span><br><span class="line">request.FirewallRules = firewallRules</span><br><span class="line"></span><br><span class="line">response, err := client.CreateFirewallRules(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s"</span>, response.ToJsonString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取防火墙规则"><a href="#获取防火墙规则" class="headerlink" title="获取防火墙规则"></a>获取防火墙规则</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Client)</span> <span class="title">GetRules</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">credential := common.NewCredential(c.SecretId, c.SecretKey)</span><br><span class="line">cpf := profile.NewClientProfile()</span><br><span class="line">cpf.HttpProfile.Endpoint = endpoint</span><br><span class="line">client, _ := lighthouse.NewClient(credential, c.Region, cpf)</span><br><span class="line"></span><br><span class="line">request := lighthouse.NewDescribeFirewallRulesRequest()</span><br><span class="line"></span><br><span class="line">request.InstanceId = common.StringPtr(c.InstaceId)</span><br><span class="line"></span><br><span class="line">response, err := client.DescribeFirewallRules(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> response.ToJsonString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>在本地的 <code>~/.bashrc</code> 或者 <code>~/.zshrc</code> 文件中设置一些 AKSK 信息、实例 ID、region 信息等参数；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> TENCENTCLOUD_SECRET_ID=<span class="string">"AKiiiplQntjJbcMp1"</span></span><br><span class="line"><span class="built_in">export</span> TENCENTCLOUD_SECRET_KEY=<span class="string">"SKkkkiiwwlwjmmG5"</span></span><br><span class="line"><span class="built_in">export</span> TENCENTCLOUD_INSTANCE_ID=<span class="string">"lhins-qjxazjaa"</span></span><br><span class="line"><span class="built_in">export</span> TENCENTCLOUD_REGION=<span class="string">"ap-beijing"</span></span><br></pre></td></tr></table></figure><ul><li>设置好环境变量之后，再编译运行看下能否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ go build -o cfwctl</span><br><span class="line">$ chmod +x cfwctl</span><br><span class="line">$ cfwctl add</span><br><span class="line"></span><br><span class="line">my public ip is 193.191.231.82</span><br><span class="line">&#123;<span class="string">"Response"</span>:&#123;<span class="string">"RequestId"</span>:<span class="string">"30e71243-1793-112e-9e41-b310ec599b90"</span>&#125;&#125;%</span><br></pre></td></tr></table></figure><ul><li>如果是 arm64 的 OpenWrt 环境，在本地开发机上进行跨平台编译，然后将编译好的 cfwctl 二进制文件 scp 到路由器上，再添加 cron job 定时任务即可，这样就能自动定时更新防火墙规则来。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ CGO_ENABLED=0  GOOS=linux  GOARCH=arm64 go build -o cfwctl</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上次去北京出差，为了便捷地访问家里内网中的一些服务，就在腾
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="云服务器" scheme="https://blog.k8s.li/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python 处理 kindle 标注文本</title>
    <link href="https://blog.k8s.li/python-kindle.html"/>
    <id>https://blog.k8s.li/python-kindle.html</id>
    <published>2021-11-29T16:00:00.000Z</published>
    <updated>2022-03-15T00:55:12.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kindle-标注"><a href="#kindle-标注" class="headerlink" title="kindle 标注"></a>kindle 标注</h2><p>大学毕业之后不再像在校时那样能随便去图书馆看书，就从传统纸质书的阅转换到了 kindle 上来。这两年就一直习惯使用 kindle 来看书，读书过程中遇到一些不错的句子或段落往往会标注记录下来。这样时间一长，现在的 Kindle 上就积累了 共 189 本书和 3522 条笔记 😂。本人有个习惯就是会进行笔记整理，通过这些标注来回忆当时读书时的一些想法，整理一下读书笔记。Kindle 标注的文本都是以 txt 格式方式存储在 Kindle 的 <code>/documents/My Clippings.txt</code> 文件中。由于 txt 格式的文本数据阅读起来实在是太费劲了，于是之前参考了 <a href="https://github.com/cyang812/kindleNote" target="_blank" rel="noopener">kindleNote</a> 和 <a href="https://bookfere.com/tools#ClippingsFere" target="_blank" rel="noopener">书伴网 Clippings Fere 工具</a> 缝合了一个工具 <strong><a href="https://github.com/muzi502/kindle" target="_blank" rel="noopener">muzi502/kindle</a></strong>。用它来将 txt 格式的标注文本渲染成 html 的格式。这样每一本书就能有一个单独的 html 页面来展示标注的内容，阅读起来就十分方便。最近花了点时间重构了一下该工具，并新增了 svg 日历图的生成方式，本文就介绍一下这个工具的实现思路和方法。</p><h2 id="分隔"><a href="#分隔" class="headerlink" title="分隔"></a>分隔</h2><p>由于 Kindle 的标注文本有一定的规律可循，实现起来还是比较方便滴。大致思路就是先读取 Kindle 的标注文件 <code>My Clippings.txt</code>，然后根据分隔符 <code>==========</code> 分割每一个标注；每个标注包含着书名、标注时间、标注内容等信息，规律如下：</p><ul><li>第一行：书籍的名称以及作者，可以以半角括号来拆分出书名和作者；</li><li>第二行：标注的位置和时间，以 <code>|</code> 拆分出标注位置和标注时间；</li><li>第三行：空行，可以将这一行去除掉，即取出标注文件中所有的空行；</li><li>第四行：标注文本内容，Kindle 标注的正文是没有换行的，即便是连续标注了几段也都会压缩在一行里面；</li><li>第五行： 即分隔符 <code>==========</code> ，所有的标注都是以它来进行分隔；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">娱乐至死 ([美]尼尔·波兹曼)</span><br><span class="line">- 您在位置 <span class="comment">#109-110的标注 | 添加于 2019年10月27日星期日 下午11:09:01</span></span><br><span class="line"></span><br><span class="line">电视需要的内容和其他媒体截然不同。电视无法表现政治哲学，电视的形式注定了它同政治哲学是水火不相容的。</span><br><span class="line">==========</span><br><span class="line">娱乐至死 ([美]尼尔·波兹曼)</span><br><span class="line">- 您在位置 <span class="comment">#110-112的标注 | 添加于 2019年10月27日星期日 下午11:09:19</span></span><br><span class="line"></span><br><span class="line">信息、内容，或者如果你愿意，可以称之为构成“今日新闻”的“素材”，在一个缺乏媒介的世界里是不存在的——是不能存在的。</span><br><span class="line">==========</span><br><span class="line">娱乐至死 ([美]尼尔·波兹曼)</span><br><span class="line">- 您在位置 <span class="comment">#114-115的标注 | 添加于 2019年10月27日星期日 下午11:09:52</span></span><br><span class="line"></span><br><span class="line">电报使无背景的信息能够以难以置信的速度跨越广阔的空间。</span><br><span class="line">==========</span><br><span class="line">通往奴役之路 (弗里德里希·奥古斯特·冯·哈耶克)</span><br><span class="line">- 您在位置 <span class="comment">#259-261的标注 | 添加于 2019年11月8日星期五 下午12:50:33</span></span><br><span class="line"></span><br><span class="line">在安排我们的事务时，应该尽可能多地运用自发的社会力量，而尽可能少地借助于强制，这个基本原则能够作千变万化的应用。深思熟虑地创造一种使竞争能尽可能地有益进行的体制，和被动地接受既定的制度，二者之间的差别尤其悬殊。</span><br><span class="line">==========</span><br><span class="line">通往奴役之路 (弗里德里希·奥古斯特·冯·哈耶克)</span><br><span class="line">- 您在位置 <span class="comment">#312-318的标注 | 添加于 2019年11月8日星期五 下午12:54:46</span></span><br><span class="line"></span><br><span class="line">尽管绝大部分的新思想，尤其是社会主义，并非起源于德国，但正是在德国它们得到完善，并在19世纪的最后25年和20世纪的最初25年，得到最充分的发展。现在，人们常常忽略了，德国在这一时期社会主义的理论和实际的发展中起了多么巨大的领导作用；在社会主义成为这个国家的一个严重问题以前的那一代，德国国会中已有一个很大的社会主义政党；并且在不久以前，社会主义学说的发展，几乎完全是在德国和奥地利进行的，以致于今天俄国人的讨论，在很大程度上是从德国人中止的地方进行的；绝大部分英国的社会主义者尚未意识到，他们才开始发现的大多数问题，德国社会主义者很早以前已彻底讨论过了。</span><br><span class="line">==========</span><br><span class="line">见识城邦·童年的消逝（媒介文化研究大师尼尔·波兹曼20年经典畅销作品） (尼尔·波兹曼)</span><br><span class="line">- 您在位置 <span class="comment">#536-539的标注 | 添加于 2019年11月21日星期四 上午6:47:26</span></span><br><span class="line"></span><br><span class="line">列奥·洛文塔尔（Leo Lowenthal）说道：“自从文艺复兴以来，关于人类本性的普遍哲学是建立在这样的构想之上的：每个个人都是离经叛道者。在很大程度上，个人的存在就在于坚持个性，反对社会的限制和规范要求。”</span><br><span class="line">==========</span><br></pre></td></tr></table></figure><ul><li>首先定义一个书籍列表，列表中的每个元素为一个字典，字典中记录的信息如下：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: book_name,</span><br><span class="line">    <span class="attr">"author"</span>: book_author,</span><br><span class="line">    <span class="attr">"url"</span>: book_url,</span><br><span class="line">    <span class="attr">"nums"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"marks"</span>: [],</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>每本书的标注列表</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"time"</span>: mark_time,</span><br><span class="line">    <span class="attr">"address"</span>: mark_address,</span><br><span class="line">    <span class="attr">"content"</span>: mark_content</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>转换后的 json 格式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"娱乐至死 "</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"尼尔·波兹曼"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"dd0875de349e84eb7e6a2402c64bd95a"</span>,</span><br><span class="line">    <span class="attr">"nums"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"marks"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年10月27日星期日 下午11:09:01"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #109-110的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"电视需要的内容和其他媒体截然不同。电视无法表现政治哲学，电视的形式注定了它同政治哲学是水火不相容的。"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年10月27日星期日 下午11:09:19"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #110-112的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"信息、内容，或者如果你愿意，可以称之为构成“今日新闻”的“素材”，在一个缺乏媒介的世界里是不存在的——是不能存在的。"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年10月27日星期日 下午11:09:52"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #114-115的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"电报使无背景的信息能够以难以置信的速度跨越广阔的空间。"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"通往奴役之路 "</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"弗里德里希·奥古斯特·冯·哈耶克"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"646a2a825b48c4c9df653a42aa72b702"</span>,</span><br><span class="line">    <span class="attr">"nums"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"marks"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年11月8日星期五 下午12:50:33"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #259-261的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"在安排我们的事务时，应该尽可能多地运用自发的社会力量，而尽可能少地借助于强制，这个基本原则能够作千变万化的应用。深思熟虑地创造一种使竞争能尽可能地有益进行的体制，和被动地接受既定的制度，二者之间的差别尤其悬殊。"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年11月8日星期五 下午12:54:46"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #312-318的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"尽管绝大部分的新思想，尤其是社会主义，并非起源于德国，但正是在德国它们得到完善，并在19世纪的最后25年和20世纪的最初25年，得到最充分的发展。现在，人们常常忽略了，德国在这一时期社会主义的理论和实际的发展中起了多么巨大的领导作用；在社会主义成为这个国家的一个严重问题以前的那一代，德国国会中已有一个很大的社会主义政党；并且在不久以前，社会主义学说的发展，几乎完全是在德国和奥地利进行的，以致于今天俄国人的讨论，在很大程度上是从德国人中止的地方进行的；绝大部分英国的社会主义者尚未意识到，他们才开始发现的大多数问题，德国社会主义者很早以前已彻底讨论过了。"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"见识城邦·童年的消逝"</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"尼尔·波兹曼"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"1e1c307ca9d857c047d33df2a808e557"</span>,</span><br><span class="line">    <span class="attr">"nums"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"marks"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年11月21日星期四 上午6:47:26"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #536-539的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"列奥·洛文塔尔（Leo Lowenthal）说道：“自从文艺复兴以来，关于人类本性的普遍哲学是建立在这样的构想之上的：每个个人都是离经叛道者。在很大程度上，个人的存在就在于坚持个性，反对社会的限制和规范要求。”"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="txt-to-json"><a href="#txt-to-json" class="headerlink" title="txt to json"></a>txt to json</h2><p>有了上面的思路之后，我们就可以对 Kindle 的标注文本进行处理。先将 txt 格式的文本转换成 json 结构化的数据。然后再使用这个结构化的 json 进行后续的处理操作。对于文本的处理，选择 Python 比较合适。因为在 Python 中字符串对象有很多操作方法，比如分割、匹配、替换等等，都要比其他语言方便一些；以下就是具体实现的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义分隔符</span></span><br><span class="line">DELIMITER = <span class="string">u"==========\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照分隔符对所有标注进行分割，并存放在该数组中</span></span><br><span class="line">all_marks = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照书籍来对标注进行分组存放</span></span><br><span class="line">all_books = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数用于获取当前书籍在 all_books 列表中的索引</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_book_index</span><span class="params">(book_name)</span>:</span></span><br><span class="line">    <span class="string">"""get book's index"""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_books)):</span><br><span class="line">        <span class="keyword">if</span> all_books[i][<span class="string">"name"</span>] == book_name:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="comment"># 如果书籍并不存在，说明还没有插入该元素，就将该元素插入到最后一个元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义渲染处理标注文本的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_clippings</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> all_marks</span><br><span class="line">    <span class="keyword">global</span> all_books</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以 utf-8 格式打开标注文件并并将内容读取到 content 变量中</span></span><br><span class="line">    <span class="keyword">with</span> open(file_name, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对读入的内容去除空行，即将 '\n\n' 替换为 '\n'，方便后续处理</span></span><br><span class="line">    content = content.replace(<span class="string">"\n\n"</span>, <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对去除空行的内容以分隔符进行分隔，得到的是一个列表，每个元素就是一个标注</span></span><br><span class="line">    all_marks = content.split(DELIMITER)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_marks)):</span><br><span class="line">        <span class="comment"># 以换行符进行分隔，将每个标注拆分成四个元素</span></span><br><span class="line">        mark = all_marks[i].split(<span class="string">"\n"</span>)</span><br><span class="line">        <span class="comment"># 如果该标注中元素的数量为 4 说明就是一个正确的标注，否则就是无效的</span></span><br><span class="line">        <span class="keyword">if</span> len(mark) == <span class="number">4</span>:</span><br><span class="line"></span><br><span class="line">          <span class="comment"># 对标注的第一个元素，即书名部分进行 md5 计算，用于将它设置为后续的 url 路径，以及 html 文件名</span></span><br><span class="line">            book_url = md5(mark[<span class="number">0</span>].encode(<span class="string">"utf-8"</span>)).hexdigest()</span><br><span class="line">            <span class="comment"># 去除掉书名中一些特殊的字符，用来拆分出简短的书名</span></span><br><span class="line">            book_info = re.split(<span class="string">r"[()&lt;&gt;|\[\]（）《》【】｜]\s*"</span>, mark[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># 获取书名，一般为第一个元素，目的是为了去除 kinlde 中文商店下载的又长又臭的书名</span></span><br><span class="line">            book_name = book_info[<span class="number">0</span>] <span class="keyword">if</span> str(book_info[<span class="number">0</span>]) != <span class="string">""</span> <span class="keyword">else</span> (mark[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取该书的作者</span></span><br><span class="line">            book_author = book_info[<span class="number">-2</span>] <span class="keyword">if</span> len(book_info) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">            mark_info = mark[<span class="number">1</span>].split(<span class="string">"|"</span>)</span><br><span class="line">  <span class="comment"># 获取该书的标记时间和标注位置</span></span><br><span class="line">            mark_time = mark_info[<span class="number">1</span>]</span><br><span class="line">            mark_address = mark_info[<span class="number">0</span>].strip(<span class="string">"- "</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取该标注的正文内容</span></span><br><span class="line">            mark_content = mark[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 查询该书的列表索引，将该标记插入到该书的 marks 列表中</span></span><br><span class="line">            book_index = get_book_index(book_name)</span><br><span class="line">            <span class="keyword">if</span> book_index == <span class="number">-1</span>:</span><br><span class="line">                all_books.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"name"</span>: book_name,</span><br><span class="line">                        <span class="string">"author"</span>: book_author,</span><br><span class="line">                        <span class="string">"url"</span>: book_url,</span><br><span class="line">                        <span class="string">"nums"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="string">"marks"</span>: [],</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            all_books[book_index][<span class="string">"marks"</span>].append(</span><br><span class="line">                &#123;<span class="string">"time"</span>: mark_time, <span class="string">"address"</span>: mark_address, <span class="string">"content"</span>: mark_content&#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 更新该书的标记数量</span></span><br><span class="line">            all_books[book_index][<span class="string">"nums"</span>] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 使用 lambda 函数以标注数量为 key 对所有书籍进行倒序排序</span></span><br><span class="line">    all_books.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">"nums"</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下就是将 all_books 列表以 json 格式写入到一个 json 文件中，或许会有一些其他的用途，比如前端展示</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        json_str = json.dumps(all_books, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"clippings.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(json_str)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    file_path = <span class="string">"source.txt"</span> <span class="keyword">if</span> len(sys.argv) == <span class="number">1</span> <span class="keyword">else</span> sys.argv[<span class="number">1</span>]</span><br><span class="line">    render_clippings(file_path)</span><br></pre></td></tr></table></figure><h2 id="json-to-html"><a href="#json-to-html" class="headerlink" title="json to html"></a>json to html</h2><p>接下来再将上述得到的 json 内容写入到 html 文件中。渲染 html 的方式有两种，一种是通过 jinja2 的模版进行渲染，一种是通过字符串替换拼凑 html 内容。两种各有各的好处，jinjia2 实现起来比较优雅一些，但是会引入一个 jinjia2 的依赖；第二种方式就无任何依赖，适用性回好一些；下面就讲一下使用第二种方式的实现；</p><ul><li>将 html 内容按照元素的分布进行拆分，定义如下几个几个特殊的变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">HTML_HEAD = <span class="string">"""&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset="utf-8" /&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt; Kindle 读书笔记 &lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span></span><br><span class="line"><span class="string">&lt;link href="../style/css/bootstrap.min.css" rel="stylesheet" type="text/css" /&gt;</span></span><br><span class="line"><span class="string">&lt;link href="../style/css/bootstrap-theme.min.css" rel="stylesheet" type="text/css" /&gt;</span></span><br><span class="line"><span class="string">&lt;link href="../style/css/custom.css" rel="stylesheet" type="text/css" /&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">INDEX_TITLE = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;div class="container"&gt;</span></span><br><span class="line"><span class="string">&lt;header class="header col-md-12"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="page-header"&gt;</span></span><br><span class="line"><span class="string">                &lt;embed src="date.svg" type="image/svg+xml" /&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;&lt;small&gt;&lt;span class="glyphicon glyphicon-book" aria-hidden="true"&gt;&lt;/span&gt; Kindle 读书笔记 &lt;/small&gt; &lt;span class="badge"&gt;更新于 UPDATE &lt;/span&gt; &lt;span class="badge"&gt; 共 BOOKS_SUM 本书，SENTENCE_SUM 条笔记&lt;/span&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/header&gt;</span></span><br><span class="line"><span class="string">&lt;div class="col-md-12"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="list-group"&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">BOOK_TITLE = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;div class="container"&gt;</span></span><br><span class="line"><span class="string">&lt;header class="header col-md-12"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="page-header"&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;&lt;small&gt;&lt;span class="glyphicon glyphicon-book" aria-hidden="true"&gt;&lt;/span&gt;BookName&lt;/small&gt; &lt;span class="badge"&gt;&lt;/span&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/header&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;div class="col-md-2"&gt;</span></span><br><span class="line"><span class="string">&lt;ul class="nav nav-pills nav-stacked go-back"&gt;</span></span><br><span class="line"><span class="string">&lt;li role="presentation" class="active text-center"&gt;</span></span><br><span class="line"><span class="string">&lt;a href="../index.html" style="border-radius: 50%;"&gt;&lt;span class="glyphicon glyphicon-backward" aria-hidden="true"&gt;&lt;/span&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">MARK_CONTENT = <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;div class="col-md-12"&gt;</span></span><br><span class="line"><span class="string">&lt;article&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel panel-default"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel-body mk88"&gt;&lt;p&gt;SENTENCE_TXT</span></span><br><span class="line"><span class="string">                    &lt;/p&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel-footer text-right"&gt;</span></span><br><span class="line"><span class="string">&lt;span class="label label-primary"&gt;&lt;span class="glyphicon glyphicon-tag" aria-hidden="true"&gt;&lt;/span&gt; 标注&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span class="label label-default"&gt;&lt;span class="glyphicon glyphicon-bookmark" aria-hidden="true"&gt;&lt;/span&gt;SENTENCE_ADDR&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span class="label label-default"&gt;&lt;span class="glyphicon glyphicon-time" aria-hidden="true"&gt;&lt;/span&gt;SENTENCE_TIME&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/article&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">ITEM_CONTENT = <span class="string">"""          &lt;a href="HTML_URL" class="list-group-item"&gt;&lt;span class="glyphicon glyphicon-book" aria-hidden="true"&gt;&lt;/span&gt;HTML_FILE_NAME&lt;span class="glyphicon glyphicon-tag" aria-hidden="true"&gt;SENTENCE_COUNT&lt;/span&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">FOOTER_CONTENT = <span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>渲染 index.html 文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_index_html</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"index.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(HTML_HEAD.replace(<span class="string">"../"</span>, <span class="string">""</span>))</span><br><span class="line">        <span class="comment"># 替换书籍的总数量和标注的总数量</span></span><br><span class="line">        f.write(</span><br><span class="line">            INDEX_TITLE.replace(<span class="string">"SENTENCE_SUM"</span>, str(len(all_marks)))</span><br><span class="line">            .replace(<span class="string">"UPDATE"</span>, time.strftime(<span class="string">"%Y-%m-%d %H:%M"</span>, time.localtime()))</span><br><span class="line">            .replace(<span class="string">"BOOKS_SUM"</span>, str(len(all_books)))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据预先定义的标识字符替换每本书籍的书籍名、作者、标注数量、URL</span></span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> all_books:</span><br><span class="line">            f.write(</span><br><span class="line">                ITEM_CONTENT.replace(<span class="string">"HTML_URL"</span>, <span class="string">"books/"</span> + book[<span class="string">"url"</span>] + <span class="string">".html"</span>)</span><br><span class="line">                .replace(<span class="string">"HTML_FILE_NAME"</span>, book[<span class="string">"name"</span>] + <span class="string">" ["</span> + book[<span class="string">"author"</span>] + <span class="string">"]"</span>)</span><br><span class="line">                .replace(<span class="string">"SENTENCE_COUNT"</span>, str(book[<span class="string">"nums"</span>]))</span><br><span class="line">            )</span><br><span class="line">        f.write(FOOTER_CONTENT)</span><br></pre></td></tr></table></figure><ul><li>渲染 book 书籍页面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_books_html</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">"books"</span>):</span><br><span class="line">        shutil.rmtree(<span class="string">"books"</span>)</span><br><span class="line">    os.mkdir(<span class="string">"books"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_books)):</span><br><span class="line">        book_url = all_books[i][<span class="string">"url"</span>]</span><br><span class="line">        book_name = all_books[i][<span class="string">"name"</span>]</span><br><span class="line">        book_author = all_books[i][<span class="string">"author"</span>]</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"books/"</span> + book_url + <span class="string">".html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(HTML_HEAD)</span><br><span class="line">            f.write(</span><br><span class="line">                BOOK_TITLE.replace(<span class="string">"BookName"</span>, book_name + <span class="string">" ["</span> + book_author + <span class="string">"]"</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(all_books[i][<span class="string">"marks"</span>])):</span><br><span class="line">                mark = all_books[i][<span class="string">"marks"</span>][j]</span><br><span class="line">                f.write(</span><br><span class="line">                    MARK_CONTENT.replace(<span class="string">"SENTENCE_TXT"</span>, mark[<span class="string">"content"</span>])</span><br><span class="line">                    .replace(<span class="string">"SENTENCE_ADDR"</span>, mark[<span class="string">"address"</span>])</span><br><span class="line">                    .replace(<span class="string">"SENTENCE_TIME"</span>, mark[<span class="string">"time"</span>])</span><br><span class="line">                )</span><br><span class="line">            f.write(FOOTER_CONTENT)</span><br></pre></td></tr></table></figure><h2 id="date-to-svg"><a href="#date-to-svg" class="headerlink" title="date to svg"></a>date to svg</h2><p>前段时间看到 yihong 大佬的 <strong><a href="https://github.com/yihong0618/GitHubPoster" target="_blank" rel="noopener">GitHubPoster</a></strong> 支持了 json 格式的数据，只要提供类似类似如下格式的数据，就可以生成相应的 svg 了。真的是一个很棒的特性，这样我们就可以根据每天标记的数量来生成一个对应的 svg 图了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"2019-05-28"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-06-10"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-07-18"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-07-23"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-07-24"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-07-29"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-08-12"</span>: <span class="number">1</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">支持了自定义 json 的源数据，生成了某个 tg 现充群的群聊的 poster <a href="https://t.co/nhSe3qlVe0" target="_blank" rel="noopener">https://t.co/nhSe3qlVe0</a> <a href="https://t.co/bkijsFDtzC" target="_blank" rel="noopener">pic.twitter.com/bkijsFDtzC</a></p>&mdash; yihong0618 (@yihong0618) <a href="https://twitter.com/yihong0618/status/1466275108952051716?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 2, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><ul><li>生成 <code>date.json</code> 数据文件</li></ul><p>生成一个{日期: 数量} 格式的字典其实挺简单，不过对于 kindle 标注的时间格式需要稍微处理一下，转换成一个标准的时间格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_date_json</span><span class="params">()</span>:</span></span><br><span class="line">    all_dates = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_marks)):</span><br><span class="line">        mark = all_marks[i].split(<span class="string">"\n"</span>)</span><br><span class="line">        <span class="comment"># 如果一个标注有 4 行说明它就是一个正确的标注</span></span><br><span class="line">        <span class="keyword">if</span> len(mark) == <span class="number">4</span>:</span><br><span class="line">            <span class="comment"># 第二行就是标注的时间，以年月日关键字进行分隔，第一个元素就是年，第二个就是月，第三个就是日</span></span><br><span class="line">            date = re.split(<span class="string">r"[年月日]\s*"</span>,mark[<span class="number">1</span>].split(<span class="string">"|"</span>)[<span class="number">1</span>].split(<span class="string">" "</span>)[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在 1-9 月前面补充一个 0</span></span><br><span class="line">            month = date[<span class="number">1</span>] <span class="keyword">if</span> len(date[<span class="number">1</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="string">"0"</span> + date[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在 1-9 日前面补充一个 0</span></span><br><span class="line">            day = date[<span class="number">2</span>] <span class="keyword">if</span> len(date[<span class="number">2</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="string">"0"</span> + date[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 最后拼凑成 2021-12-05 这样的时间格式</span></span><br><span class="line">            date = date[<span class="number">0</span>] + <span class="string">"-"</span> + month + <span class="string">"-"</span> + day</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果当前日期没有在字典中，则将它添加到字典中</span></span><br><span class="line">            <span class="keyword">if</span> date <span class="keyword">not</span> <span class="keyword">in</span> all_dates:</span><br><span class="line">                all_dates[date] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 对天数的 value 值进行自增 1</span></span><br><span class="line">            all_dates[date] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将数据写入 json 文件当中</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        json_str = json.dumps(all_dates, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"date.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(json_str)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>生成好 json 格式的数据之后，接下来我们就使用 GitHubPoster 来生成相应的 svg 文件。由于 GitHubPoster 的依赖项太多，且还没有支持 docker 方式来运行，在本地安装也不是很方便，因此为了方便起见我们将它放在 GitHub action 中运行。这样只要每次更新标注文本的源文件就可以自动更新 html 页面并生成最新的 svg 图片了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">kindle</span> <span class="string">note</span> <span class="string">website</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gh-pages</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="number">3.6</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># 安装 github_poster 及其依赖</span></span><br><span class="line">          <span class="string">pip3</span> <span class="string">install</span> <span class="string">-U</span> <span class="string">github_poster</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 生成 html 文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">.html</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">python3</span> <span class="string">kindle.py</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># 生成 svg 文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">svg</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">github_poster</span> <span class="string">json</span> <span class="string">--json_file</span> <span class="string">date.json</span> <span class="string">--year</span> <span class="number">2021</span> <span class="string">--me</span> <span class="string">kindleReading</span> <span class="string">--background-color</span> <span class="string">'#ffffff'</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">OUT_FOLDER/json.svg</span> <span class="string">date.svg</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 设置 commit 信息为 GitHub action bot，并提交 commit 和 push 到 origin 上</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Config</span> <span class="string">git</span> <span class="string">user</span> <span class="string">and</span> <span class="string">user.email</span> <span class="string">and</span> <span class="string">push</span> <span class="string">commit</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">github-actions</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-am</span> <span class="string">"Auto build by GitHub Actions $(date)"</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">-f</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;kindle-标注&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用 apcupsd 完成 UPS 断电后 ESXi 稳妥关机方案</title>
    <link href="https://blog.k8s.li/apcupsd-on-openwrt-with-esxi.html"/>
    <id>https://blog.k8s.li/apcupsd-on-openwrt-with-esxi.html</id>
    <published>2021-10-24T16:00:00.000Z</published>
    <updated>2021-10-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="APC-UPS-BK650M2-CH"><a href="#APC-UPS-BK650M2-CH" class="headerlink" title="APC UPS BK650M2-CH"></a>APC UPS BK650M2-CH</h2><p>上个月还在杭州的时候，房东家里的空气开关出现了故障，导致每天停电十几次，我那一百多块钱捡来的垃圾 UPS 断电之后续命不到 5 分钟就凉凉了。来到上海换了新家后，准备花 500 元左右买个好一点的 UPS，给我的 NAS 服务器找个好伴侣。这次的 UPS 不再买一百块钱的垃圾货了，实在是太坑人了呜呜呜，那台垃圾 UPS 已经在闲鱼上 50 包邮卖掉了。</p><p>市面上 500 左右的畅销 UPS 无非就是施耐德 APC 的 <a href="https://www.apc.com/shop/cn/zh/products/APC-BACK-UPS-BK-650VA-4-2-USB-230V-USB-/P-BK650M2-CH" target="_blank" rel="noopener">BK650M2-CH</a> 和国产山特的 <a href="https://www.santak.com.cn/product/santak-tg-box-ups.html" target="_blank" rel="noopener">TG-BOX 600/850</a> 。两者价位差不太多，从配置上来看  <a href="https://www.santak.com.cn/product/santak-tg-box-ups.html" target="_blank" rel="noopener">TG-BOX 600/850</a> 稍微好一点。但考虑到 APC 的 apcupsd 在 Linux 平台上兼容性比较好，因此我最终还是选择了 <a href="https://www.apc.com/shop/cn/zh/products/APC-BACK-UPS-BK-650VA-4-2-USB-230V-USB-/P-BK650M2-CH" target="_blank" rel="noopener">BK650M2-CH</a> ；另一方面还是本人不太喜欢和信任国产货，被小粉红看到会不会被骂成恨国党（手动狗头。</p><p>之前在使用垃圾 UPS 的时候有过一个很 low 的 UPS 断电关机 NAS 的方案，就是通过 ping 的方式来判断是否停电，然后就预估个时间就断电关机。不过这种方案使用起来十分不方便，尤其是当网络抽风的时候，NAS 就无缘无故地关机了；或者有时候 UPS 电池用尽了，关机脚本还没有触发。因此还是需要通过 UPS 本身的串口协议来获取当前 UPS 的状态比较好一些，比用 ping 的方式高到不知道哪里去了。</p><h2 id="ESXi-USB-直通翻车"><a href="#ESXi-USB-直通翻车" class="headerlink" title="ESXi USB 直通翻车"></a>ESXi USB 直通翻车</h2><p>使用 UPS 自带的 USB 线缆插到 NAS 主机 USB 接口之后，ESXi 的 USB 设备列表里也能正确地识别到了该设备。但将该设备添加到 Linux 虚拟机上之后，apcupsd 却无法获取该 UPS 的设备信息，而且在内核日志中一直会出现 <code>USB disconnect</code> 的信息，emmm，怀疑是 ESXi 直通 USB 的问题，遂放弃。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[  124.759971] usb 1-2.1: USB disconnect, device number 4</span><br><span class="line">[  126.840674] usb 1-2.1: new full-speed USB device number 5 using uhci_hcd</span><br><span class="line">[  127.364001] usb 1-2.1: New USB device found, idVendor=051d, idProduct=0002, bcdDevice= 1.06</span><br><span class="line">[  127.364006] usb 1-2.1: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span><br><span class="line">[  127.364009] usb 1-2.1: Product: Back-UPS BK650M2-CH FW:294803G -292804G</span><br><span class="line">[  127.364011] usb 1-2.1: Manufacturer: American Power Conversion</span><br><span class="line">[  127.364013] usb 1-2.1: SerialNumber: 9B2118A06920</span><br><span class="line">[  127.403811] hid-generic 0003:051D:0002.0003: hiddev0,hidraw1: USB HID v1.10 Device [American Power Conversion Back-UPS BK650M2-CH FW:294803G -292804G ] on usb-0000:02:01.0-2.1/input0</span><br><span class="line">[  248.394259] usb 1-2.1: USB disconnect, device number 5</span><br><span class="line">[  250.589751] usb 1-2.1: new full-speed USB device number 6 using uhci_hcd</span><br><span class="line">[  251.123039] usb 1-2.1: New USB device found, idVendor=051d, idProduct=0002, bcdDevice= 1.06</span><br><span class="line">[  251.123044] usb 1-2.1: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span><br><span class="line">[  251.123048] usb 1-2.1: Product: Back-UPS BK650M2-CH FW:294803G -292804G</span><br><span class="line">[  251.123050] usb 1-2.1: Manufacturer: American Power Conversion</span><br><span class="line">[  251.123052] usb 1-2.1: SerialNumber: 9B2118A06920</span><br><span class="line">[  251.160223] hid-generic 0003:051D:0002.0004: hiddev0,hidraw1: USB HID v1.10 Device [American Power Conversion Back-UPS BK650M2-CH FW:294803G -292804G ] on usb-0000:02:01.0-2.1/input0</span><br><span class="line">[  268.621010] usb 1-2.1: USB disconnect, device number 6</span><br></pre></td></tr></table></figure><p>不幸 USB 直通给虚拟机的方案翻车了，于是想着要不将 USB 线缆连接到我的 R4S 软路由上 🤔️。连接到软路由上要比在 ESXi 主机上好一些，这样在来电之后写的监控脚本也能检测到 UPS 已经通电了，这样就可以自动启动 NAS 主机以及上面的一些 VM。于是就琢磨了以下的方案，线路图如下：</p><p><img src="https://p.k8s.li/2021-10-25-apcupsd-on-openwrt-with-esxi.png" alt="image-20211025224325577"></p><p>我的 NAS 服务器、交换机、R4S 软路由的电源都连接到 UPS 上。R6300v2 通过无线桥接的方式连接到房东家的  Wi-Fi。无线桥接之后，R6300v2 就变成了一台”无线交换机”，连接到它的设备将会从房东家 Wi-Fi 路由器的 DHCP 那里获取到同一网段的 IP。R4S 的 WAN 口通过网线连接到 R6300v2 的 LAN 口上，这样 R4S 就能通过 R6300v2 连接到房东家的 Wi-Fi，从而连接到公网。</p><p>在这里 R6300v2 的电源未使用 UPS，而通过市电连接，因为停电之后估计房东家的 Wi-Fi 也连不上，连接到 UPS 电源意义不大，其实也用不多少电。断电之后，运行在 R4S 软路由上的 apcupsd 进程会探测到 UPS 电源处于 offline 的状态。等到 UPS 剩余电量还剩 30% 时（或者其他自定义指标）就触发自己定义的断电关机脚本。然后剩余 30% 的电量就供给 R4S 软路由使用至少 5 个小时，这段时间应该很快就能来电。等监测到 UPS 通电之后，再触发自定义的 UPS 来电启动脚本。</p><p>大致的流程梳理好之后，那么接下来就开始搞事情。</p><h2 id="apcupsd-on-openwrt"><a href="#apcupsd-on-openwrt" class="headerlink" title="apcupsd on openwrt"></a>apcupsd on openwrt</h2><p>首先就是在 R4S openwrt 上安装和配置 apcupsd，安装和配置的详细内容可参考几万字的官方手册 <a href="http://www.apcupsd.org/manual/" target="_blank" rel="noopener">apcupsd.org/manual</a> （劝退 😂。</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>先将 USP 自带的那根 USB 线缆 RJ45 的那一头查到 UPS 的上，再将 USB 那一头插到路由器的 USB 口上。</p><ul><li>安装 apcupsd 以及 usbutils 等相关依赖包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:00:20]</span></span><br><span class="line">$ opkg update</span><br><span class="line">$ opkg install usbutils kmod-hid kmod-hid-generic kmod-usb-hid apcupsd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完之后，会在 /etc/apcupsd 目录下生成如下文件</span></span><br><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:01:32]</span></span><br><span class="line">$ tree /etc/apcupsd</span><br><span class="line">/etc/apcupsd</span><br><span class="line">├── apccontrol <span class="comment"># UPS 状态触发脚本</span></span><br><span class="line">├── apcupsd.conf <span class="comment"># apcupsd 配置文件</span></span><br><span class="line">├── apcupsd_mail.conf <span class="comment"># email 发送配置文件，断电都断网了，有它也没啥用呀</span></span><br><span class="line">├── changeme <span class="comment"># UPS 需要进行充电时触发的脚本</span></span><br><span class="line">├── commfailure <span class="comment"># 连接 UPS 设备失败后触发的脚本</span></span><br><span class="line">├── commok <span class="comment"># 连接 UPS 设备之后触发的脚本</span></span><br><span class="line">├── offbattery <span class="comment"># UPS 来电之后触发的脚本</span></span><br><span class="line">└── onbattery <span class="comment"># 断电之后 UPS 进入使用电池状态后触发的脚本</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>lsusb</code> 或者 <code>dmesg</code> 命令查看 USB 设备是否正常连接以及内核加载 USB 设备的信息。如果 USB 设备能正常识别到，那就没问题啦。如果没出现的话，那就重启大法好！看看重启之后能不能识别到 UPS 设备信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:04:29]</span></span><br><span class="line">$ lsusb</span><br><span class="line">Bus 005 Device 003: ID 051d:0002 American Power Conversion Uninterruptible Power Supply</span><br><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:04:29]</span></span><br><span class="line">$ dmesg</span><br><span class="line">[   64.485003] usb 5-1: new full-speed USB device number 2 using xhci-hcd</span><br><span class="line">[   64.669133] hid-generic 0003:051D:0002.0001: hiddev96,hidraw0: USB HID v1.10 Device [American Power Conversion Back-UPS BK650M2-CH FW:294803G -292804G ] on usb-xhci-hcd.0.auto-1/input0</span><br><span class="line">[ 1260.590529] usb 5-1: USB disconnect, device number 2</span><br><span class="line">[ 1261.285846] usb 5-1: new full-speed USB device number 3 using xhci-hcd</span><br><span class="line">[ 1261.468989] hid-generic 0003:051D:0002.0002: hiddev96,hidraw0: USB HID v1.10 Device [American Power Conversion Back-UPS BK650M2-CH FW:294803G -292804G ] on usb-xhci-hcd.0.auto-1/input0</span><br></pre></td></tr></table></figure><ul><li>修改 <code>/etc/default/apcupsd</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为不是使用 systemd 启动 apcupsd 的，需要将它修改为 yes</span></span><br><span class="line"><span class="attr">ISCONFIGURED</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><ul><li>配置 <code>/etc/apcupsd/apcupsd.conf</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 养成好习惯，先备份一下远配置文件</span></span><br><span class="line">$ cp /etc/apcupsd/apcupsd.conf&#123;,.bak&#125;</span><br><span class="line">$ vim /etc/apcupsd/apcupsd.conf</span><br><span class="line"><span class="comment"># 自定义你的 UPS 名称，使用默认的也可以</span></span><br><span class="line">UPSNAME BK650M2-CH</span><br><span class="line"><span class="comment"># 设置 UPS 的连接线缆为 USB 模式</span></span><br><span class="line">UPSCABLE usb</span><br><span class="line"><span class="comment"># 设置 UPS 的通讯模式为 USB 模式</span></span><br><span class="line">UPSTYPE usb</span><br><span class="line"><span class="comment"># DEVICE 这行需要注释掉或者去掉 /dev/ttyS0</span></span><br><span class="line"><span class="comment"># DEVICE /dev/ttyS0</span></span><br><span class="line">NETSERVER on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下三个参数定义了何时触发 doshutdown 关机事件</span></span><br><span class="line"><span class="comment"># 当剩余电池电量低于指定百分比</span></span><br><span class="line">BATTERYLEVEL 30</span><br><span class="line"><span class="comment"># 当UPS内部计算的电池剩余运行时间低于指定的分钟数</span></span><br><span class="line">MINUTES 15</span><br><span class="line"><span class="comment"># 发生电源故障后，进入 UPS 电池模式时间</span></span><br><span class="line">TIMEOUT 0</span><br></pre></td></tr></table></figure><p>配置文件具体的参数信息可参考官方手册 <a href="http://www.apcupsd.org/manual/#configuration-directive-reference" target="_blank" rel="noopener">configuration-directive-reference</a>，一般情况下只需要配置上面我提到的那几个参数就可以，感兴趣的可以仔细阅读一些官方手册。</p><ul><li>开机自启</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/apcupsd <span class="built_in">enable</span></span><br><span class="line">$ /etc/init.d/apcupsd start</span><br></pre></td></tr></table></figure><h3 id="UPS-状态参数"><a href="#UPS-状态参数" class="headerlink" title="UPS 状态参数"></a>UPS 状态参数</h3><ul><li>使用 <code>apcaccess</code> 查看是否能连接到 UPS 设备，以下是正常通电时的信息：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:04:29]</span></span><br><span class="line">$ apcaccess</span><br><span class="line">APC      : 001,036,0860</span><br><span class="line">DATE     : 2021-10-24 21:02:51 +0800</span><br><span class="line">HOSTNAME : OpenWrt</span><br><span class="line">VERSION  : 3.14.14 (31 May 2016) unknown</span><br><span class="line">UPSNAME  : ups1</span><br><span class="line">CABLE    : USB Cable</span><br><span class="line">DRIVER   : USB UPS Driver</span><br><span class="line">UPSMODE  : Stand Alone</span><br><span class="line">STARTTIME: 2021-10-24 21:02:49 +0800</span><br><span class="line">MODEL    : Back-UPS BK650M2-CH</span><br><span class="line">STATUS   : ONLINE</span><br><span class="line">LINEV    : 224.0 Volts</span><br><span class="line">LOADPCT  : 14.0 Percent</span><br><span class="line">BCHARGE  : 100.0 Percent</span><br><span class="line">TIMELEFT : 46.8 Minutes</span><br><span class="line">MBATTCHG : 5 Percent</span><br><span class="line">MINTIMEL : 3 Minutes</span><br><span class="line">MAXTIME  : 0 Seconds</span><br><span class="line">SENSE    : Low</span><br><span class="line">LOTRANS  : 160.0 Volts</span><br><span class="line">HITRANS  : 278.0 Volts</span><br><span class="line">ALARMDEL : 30 Seconds</span><br><span class="line">BATTV    : 13.5 Volts</span><br><span class="line">LASTXFER : No transfers since turnon</span><br><span class="line">NUMXFERS : 0</span><br><span class="line">TONBATT  : 0 Seconds</span><br><span class="line">CUMONBATT: 0 Seconds</span><br><span class="line">XOFFBATT : N/A</span><br><span class="line">SELFTEST : NO</span><br><span class="line">BATTDATE : 2001-01-01</span><br><span class="line">NOMINV   : 220 Volts</span><br><span class="line">NOMBATTV : 12.0 Volts</span><br><span class="line">NOMPOWER : 390 Watts</span><br><span class="line">FIRMWARE : 294803G -292804G</span><br><span class="line">END APC  : 2021-10-24 21:04:36 +0800</span><br></pre></td></tr></table></figure><ul><li>尝试拔下 UPS 电源，断电之后的状态信息</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:06:39]</span></span><br><span class="line">$ apcaccess</span><br><span class="line">APC      : 001,037,0899</span><br><span class="line">DATE     : 2021-10-24 21:05:33 +0800</span><br><span class="line">HOSTNAME : OpenWrt</span><br><span class="line">VERSION  : 3.14.14 (31 May 2016) unknown</span><br><span class="line">UPSNAME  : ups1</span><br><span class="line">CABLE    : USB Cable</span><br><span class="line">DRIVER   : USB UPS Driver</span><br><span class="line">UPSMODE  : Stand Alone</span><br><span class="line">STARTTIME: 2021-10-24 21:02:49 +0800</span><br><span class="line">MODEL    : Back-UPS BK650M2-CH</span><br><span class="line">STATUS   : ONBATT</span><br><span class="line">LINEV    : 0.0 Volts</span><br><span class="line">LOADPCT  : 15.0 Percent</span><br><span class="line">BCHARGE  : 100.0 Percent</span><br><span class="line">TIMELEFT : 46.8 Minutes</span><br><span class="line">MBATTCHG : 5 Percent</span><br><span class="line">MINTIMEL : 3 Minutes</span><br><span class="line">MAXTIME  : 0 Seconds</span><br><span class="line">SENSE    : Low</span><br><span class="line">LOTRANS  : 160.0 Volts</span><br><span class="line">HITRANS  : 278.0 Volts</span><br><span class="line">ALARMDEL : 30 Seconds</span><br><span class="line">BATTV    : 12.8 Volts</span><br><span class="line">LASTXFER : No transfers since turnon</span><br><span class="line">NUMXFERS : 1</span><br><span class="line">XONBATT  : 2021-10-24 21:05:33 +0800</span><br><span class="line">TONBATT  : 27 Seconds</span><br><span class="line">CUMONBATT: 27 Seconds</span><br><span class="line">XOFFBATT : N/A</span><br><span class="line">SELFTEST : NO</span><br><span class="line">BATTDATE : 2001-01-01</span><br><span class="line">NOMINV   : 220 Volts</span><br><span class="line">NOMBATTV : 12.0 Volts</span><br><span class="line">NOMPOWER : 390 Watts</span><br><span class="line">FIRMWARE : 294803G -292804G</span><br><span class="line">END APC  : 2021-10-24 21:06:00 +0800</span><br></pre></td></tr></table></figure><p>全部的 UPS 状态参数可参考官方手册 <a href="http://www.apcupsd.org/manual/#status-report-fields" target="_blank" rel="noopener">status-report-fields</a> ，不过对于我们来讲，以下几个参数比较重要：</p><table><thead><tr><th>参数</th><th>意义</th><th>来电</th><th>断电</th></tr></thead><tbody><tr><td>STATUS</td><td>UPS 状态</td><td>ONLINE</td><td>ONBATT</td></tr><tr><td>LINEV</td><td>接入电压</td><td>224.0 Volts</td><td>0.0 Volts</td></tr><tr><td>BCHARGE</td><td>电池剩余</td><td>100.0 Percent</td><td>&lt; 100.0 Percent</td></tr><tr><td>XONBATT</td><td>上次</td><td>N/A</td><td>~</td></tr><tr><td>TONBATT</td><td>当前电池使用时间</td><td>N/A</td><td>~</td></tr><tr><td>CUMONBATT</td><td>当前电池使用总时间</td><td>N/A</td><td>~</td></tr></tbody></table><h3 id="apccontrol"><a href="#apccontrol" class="headerlink" title="apccontrol"></a>apccontrol</h3><p><code>apccontrol</code> 里定义了 UPS 事件触发后要执行的操作，完整的内容可参考官方手册 <a href="http://www.apcupsd.org/manual/#customizing-event-handling" target="_blank" rel="noopener">apcupsd</a> 。对于我们来讲 <code>doshutdown</code> 这个事件是比较重要的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doshutdown</span><br><span class="line">When the UPS is running on batteries and one of the limits expires (time, run, load), this event is generated to cause the machine to shutdown.</span><br><span class="line"></span><br><span class="line">Default: Shuts down the system using shutdown -h or similar</span><br></pre></td></tr></table></figure><p>当出现如下事件的时候则会调用 doshutdown 后的执行内容：</p><ol><li>UPS 电池即将用尽</li><li>UPS 运行在电池模式下剩余时间低于所定义的 <code>MINUTES</code> 值</li><li>UPS 电池剩余百分比低于所定义的 <code>BATTERYLEVEL</code> 值</li><li>UPS. 运行在电池模式下所超出的时间 <code>TIMEOUT</code> 值</li></ol><blockquote><p>When one of the conditions listed below occurs, apcupsd issues a shutdown command by calling <code>/etc/apcupsd/apccontrol doshutdown</code>, which should perform a shutdown of your system using the system shutdown(8) command. You can modify the behavior as described in <a href="http://www.apcupsd.org/manual/#customizing-event-handling" target="_blank" rel="noopener">Customizing Event Handling</a>.</p><p>The conditions that trigger the shutdown can be any of the following:</p><ul><li>Running time on batteries have expired (<code>TIMEOUT</code>)</li><li>The battery runtime remaining is below the configured value (<code>BATTERYLEVEL</code>)</li><li>The estimated remaining runtime is below the configured value (<code>MINUTES</code>)</li><li>The UPS signals that the batteries are exhausted.</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   doshutdown)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"UPS <span class="variable">$&#123;2&#125;</span> initiated Shutdown Sequence"</span> | <span class="variable">$&#123;WALL&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"apcupsd UPS <span class="variable">$&#123;2&#125;</span> initiated shutdown"</span></span><br><span class="line">bash /opt/bin/shutdown_esxi.sh</span><br><span class="line">;;</span><br></pre></td></tr></table></figure><p>然后我们就可以在 doshutdown 里面加入我们要执行的关机脚本，比如 <code>shutdown_esxi.sh</code>。至于如何优雅地关闭 ESXi 主机，推荐使用 govc 这个 CLI 工具。不太建议直接 ssh 到 ESXi 主机，然后 /sbin/shudown.sh &amp;&amp; poweroff 一把梭子就完事儿了。这样一顿操作猛有可能会对我们的虚拟机造成一定的影响，我们可以通过 govc 或者 vim-cmd 命令对虚拟机进行挂起或者保存快照的操作，来保存虚拟机断电之前的状态，等所有虚拟机安全关机之后，再关闭 ESXi 主机，这样比较稳妥一点。以下两种关闭 ESXi 的方式任选一种即即可：</p><h2 id="govc"><a href="#govc" class="headerlink" title="govc"></a>govc</h2><p>由于我的 apcupsd 是运行在 R4S 软路由上，如果将关机脚本保存在 R4S 软路由上，可以使用 govc 这个工具，然后通过 ESXi 的 https API 来对虚拟机和 ESXi 主机进行相关操作。</p><ul><li>下载并安装安装 govc</li></ul><p>在 <a href="https://github.com/vmware/govmomi/releases" target="_blank" rel="noopener">vmware/govmomi/releases</a> 下载页面找到与自己 CPU 体系架构相匹配的下载地址，比如我的 aarch64 的 CPU 使用如下地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/vmware/govmomi/releases/download/v0.27.1/govc_Linux_arm64.tar.gz</span><br><span class="line">$ tar xf govc_Linux_arm64.tar.gz</span><br><span class="line">$ mv govc /usr/bin</span><br></pre></td></tr></table></figure><ul><li>配置 ESXi 连接信息，使用 <code>govc host.info</code> 命令查看是否能正常连接到 ESXi 主机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GOVC_URL=<span class="string">"https://root:passw0rd@esxi.yoi.li"</span></span><br><span class="line">$ <span class="built_in">export</span> GOVC_DATASTORE=<span class="string">"NVME"</span></span><br><span class="line"></span><br><span class="line">$ govc host.info</span><br><span class="line">Name:              hp-esxi.lan</span><br><span class="line">  Path:            /ha-datacenter/host/hp-esxi.lan/hp-esxi.lan</span><br><span class="line">  Manufacturer:    HPE</span><br><span class="line">  Logical CPUs:    6 CPUs @ 3000MHz</span><br><span class="line">  Processor <span class="built_in">type</span>:  Genuine Intel(R) CPU 0000 @ 3.00GHz</span><br><span class="line">  CPU usage:       960 MHz (5.3%)</span><br><span class="line">  Memory:          32613MB</span><br><span class="line">  Memory usage:    29512 MB (90.5%)</span><br><span class="line">  Boot time:       2021-10-24 13:57:04.396892 +0000 UTC</span><br><span class="line">  State:           connected</span><br></pre></td></tr></table></figure><ul><li>获取 ESXi 主机上虚拟机的列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ govc ls /ha-datacenter/vm</span><br><span class="line">/ha-datacenter/vm/NAS</span><br><span class="line">/ha-datacenter/vm/kube-control-02</span><br><span class="line">/ha-datacenter/vm/kube-control-03</span><br><span class="line">/ha-datacenter/vm/kube-node-01</span><br><span class="line">/ha-datacenter/vm/kube-registry-01</span><br><span class="line">/ha-datacenter/vm/WG0</span><br><span class="line">/ha-datacenter/vm/Windows</span><br><span class="line">/ha-datacenter/vm/OP</span><br><span class="line">/ha-datacenter/vm/Devbox</span><br><span class="line">/ha-datacenter/vm/kube-control-01</span><br></pre></td></tr></table></figure><ul><li>VM 的电源相关操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将虚拟机挂起</span></span><br><span class="line">$ govc vm.power -s NAS</span><br></pre></td></tr></table></figure><ul><li>在 VM 里执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先设置终端登录的用户名和密码</span></span><br><span class="line">$ <span class="built_in">export</span> GOVC_GUEST_LOGIN=<span class="string">"root:passw0rd"</span></span><br><span class="line"><span class="comment"># 先让缓冲区数据写入到磁盘，然后再使用 shutdown 安全地关机</span></span><br><span class="line">$ govc guest.run -vm NAS <span class="string">"sync &amp;&amp; shutdown -h now"</span></span><br></pre></td></tr></table></figure><ul><li>使用 esxcli 命令查看 VM 进程，以确保虚拟机真正的关闭了。只有当 esxcli vm process list 输出结果为空的时候，ESXi 上所有的 VM 才真正的退出，这时就可以放心大胆地关闭 ESXi 主机了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox ~</span><br><span class="line">╰─<span class="comment"># govc host.esxcli vm process list</span></span><br><span class="line">ConfigFile:   /vmfs/volumes/6118f30c-3e1989cb-77c4-b47af1db548c/NAS/NAS.vmx</span><br><span class="line">DisplayName:  NAS</span><br><span class="line">ProcessID:    0</span><br><span class="line">UUID:         56 4d 7a 57 4c 17 4e 68-07 25 03 5e 4b 0f 8c 96</span><br><span class="line">VMXCartelID:  1121973</span><br><span class="line">WorldID:      1121976</span><br><span class="line"></span><br><span class="line">ConfigFile:   /vmfs/volumes/6118f30c-3e1989cb-77c4-b47af1db548c/Devbox/Devbox.vmx</span><br><span class="line">DisplayName:  Devbox</span><br><span class="line">ProcessID:    0</span><br><span class="line">UUID:         56 4d 91 74 02 b7 b7 59-2b 48 e3 21 d2 a6 b2 9d</span><br><span class="line">VMXCartelID:  1122777</span><br><span class="line">WorldID:      1122778</span><br></pre></td></tr></table></figure><ul><li>关闭 ESXi 主机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过调用 esxcli 命令来关机</span></span><br><span class="line">$ govc host.esxcli system shutdown</span><br><span class="line"><span class="comment"># 通过 host.shutdown 来关机，不过翻车了</span></span><br><span class="line">╭─root@esxi-debian-devbox ~</span><br><span class="line">╰─<span class="comment"># govc host.shutdown -host "esxi.yoi.li"</span></span><br><span class="line">govc: no argument</span><br></pre></td></tr></table></figure><ul><li>关机脚本 <code>shutdown_esxi.sh</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> GOVC_URL=<span class="string">"https://root:passw0rd@esxi.yoi.li"</span></span><br><span class="line"><span class="built_in">export</span> GOVC_DATASTORE=<span class="string">"NVME"</span></span><br><span class="line"><span class="built_in">export</span> GOVC_INSECURE=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> GOVC_GUEST_LOGIN=<span class="string">"root:passw0rd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># suspend all vms</span></span><br><span class="line">govc find . -<span class="built_in">type</span> m -runtime.powerState poweredOn | awk -F <span class="string">'/'</span> <span class="string">'&#123;print $NF&#125;'</span> \</span><br><span class="line">| grep -v NAS | xargs -L1 -&#123;&#125; govc vm.power -<span class="built_in">suspend</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># sync data to disk and shutdown vm</span></span><br><span class="line">govc vm.info NAS | grep -q poweredOn &amp;&amp; govc guest.run -vm NAS <span class="string">"sync &amp;&amp; shutdown -h now"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wait all vm exit</span></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;12;i++)); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! esxcli vm process list | grep UUID; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    sleep 10</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">govc host.esxcli system shutdown</span><br></pre></td></tr></table></figure><ul><li>修改 <code>/etc/apcupsd/apccontrol</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   doshutdown)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"UPS <span class="variable">$&#123;2&#125;</span> initiated Shutdown Sequence"</span> | <span class="variable">$&#123;WALL&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"apcupsd UPS <span class="variable">$&#123;2&#125;</span> initiated shutdown"</span></span><br><span class="line"><span class="string">"bash /opt/bin/shutdown_esxi.sh"</span></span><br><span class="line">;;</span><br></pre></td></tr></table></figure><h2 id="vim-cmd"><a href="#vim-cmd" class="headerlink" title="vim-cmd"></a>vim-cmd</h2><p>由于 vim-cmd 命令只能在 ESXi 主机上运行，因此我们需要将该关机脚本保存到 ESXI 主机上，或者通过 scp 的方式将该脚本传输到 ESXi 主机上，然后执行该脚本完成关机操作。</p><ul><li>修改 <code>/etc/apcupsd/apccontrol</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   doshutdown)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"UPS <span class="variable">$&#123;2&#125;</span> initiated Shutdown Sequence"</span> | <span class="variable">$&#123;WALL&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"apcupsd UPS <span class="variable">$&#123;2&#125;</span> initiated shutdown"</span></span><br><span class="line">scp shutdown_esxi.sh root@esxi.yoi.li:/</span><br><span class="line">ssh root@esxi.yoi.li <span class="string">"sh /shutdown_esxi.sh"</span></span><br><span class="line">;;</span><br></pre></td></tr></table></figure><ul><li><code>shutdown_esxi.sh</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">LOG_PATH=/vmfs/volumes/NVME/.<span class="built_in">log</span>/suspend.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(TZ=UTC-8 date +%Y-%m-%d" "%H:%M:%S)</span>"</span> &gt;&gt; <span class="variable">$&#123;LOG_PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">poweroff_vms</span></span>()&#123;</span><br><span class="line">    <span class="keyword">for</span> vm <span class="keyword">in</span> $(vim-cmd vmsvc/getallvms | grep -E <span class="string">'NAS'</span> | awk <span class="string">'&#123;print $1&#125;'</span> | xargs); <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> vim-cmd vmsvc/power.getstate <span class="variable">$&#123;vm&#125;</span> | grep <span class="string">'Powered on'</span>; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"<span class="variable">$(TZ=UTC-8 date +%Y-%m-%d" "%H:%M:%S)</span> shutdown vm <span class="variable">$&#123;vm&#125;</span>"</span> &gt;&gt; <span class="variable">$&#123;LOG_PATH&#125;</span></span><br><span class="line">            vim-cmd vmsvc/power.shutdown <span class="variable">$&#123;vm&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">suspend_vms</span></span>()&#123;</span><br><span class="line">    <span class="keyword">for</span> vm <span class="keyword">in</span> $(vim-cmd vmsvc/getallvms | grep -Ev <span class="string">'NAS|Vmid'</span> | awk <span class="string">'&#123;print $1&#125;'</span> | xargs); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> vim-cmd vmsvc/power.getstate <span class="variable">$&#123;vm&#125;</span> | grep <span class="string">'Powered on'</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$(TZ=UTC-8 date +%Y-%m-%d" "%H:%M:%S)</span> suppend vm <span class="variable">$&#123;vm&#125;</span>"</span> &gt;&gt; <span class="variable">$&#123;LOG_PATH&#125;</span></span><br><span class="line">        vim-cmd vmsvc/power.suspend <span class="variable">$&#123;vm&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">suspend_vms</span><br><span class="line">poweroff_vms</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Poweroff at <span class="variable">$(TZ=UTC-8 date +%Y-%m-%d" "%H:%M:%S)</span>"</span> &gt;&gt; <span class="variable">$&#123;LOG_PATH&#125;</span></span><br><span class="line">/bin/host_shutdown.sh</span><br></pre></td></tr></table></figure><p>通过 ssh 的方式执行该脚本需要 ESXi 主机开启 ssh 服务并做好 ssh 免密登录，这部分内容可参考 <a href="https://kb.vmware.com/s/article/1002866?lang=zh_CN" target="_blank" rel="noopener">允许使用公钥/私钥身份验证对 ESXi/ESX 主机进行 SSH 访问</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.apcupsd.org/manual/" target="_blank" rel="noopener">apcupsd 官方文档</a></li><li><a href="https://wiki.debian.org/apcupsd" target="_blank" rel="noopener">apcupsd debian wiki</a></li><li><a href="https://linuxtoy.org/archives/howto-use-apcupsd-to-automatically-shutdown-system-during-outrage.html" target="_blank" rel="noopener">使用 apcupsd 实现 UPS 断电自动关机</a></li><li><a href="https://github.com/vmware/govmomi/blob/master/govc/USAGE.md" target="_blank" rel="noopener">govc usage</a></li><li><a href="https://gitbook.curiouser.top/origin/vsphere-govc.html" target="_blank" rel="noopener">vSphere go 命令行管理工具 govc</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;APC-UPS-BK650M2-CH&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="NAS" scheme="https://blog.k8s.li/tags/NAS/"/>
    
      <category term="垃圾佬" scheme="https://blog.k8s.li/tags/%E5%9E%83%E5%9C%BE%E4%BD%AC/"/>
    
      <category term="UPS" scheme="https://blog.k8s.li/tags/UPS/"/>
    
  </entry>
  
  <entry>
    <title>万字长文详解 PaaS toB 场景下 K8s 离线部署方案</title>
    <link href="https://blog.k8s.li/pass-tob-k8s-offline-deploy.html"/>
    <id>https://blog.k8s.li/pass-tob-k8s-offline-deploy.html</id>
    <published>2021-08-29T16:00:00.000Z</published>
    <updated>2021-08-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在企业私有云环境当中，出于对数据安全的考虑以及满足 <a href="http://www.djbh.net/" target="_blank" rel="noopener">网络安全等级保护</a> 的要求，往往会对内部环境中的服务器做出严格的访问限制。一般来讲生产环境都会禁止访问外部网络，开发人员要访问生产环境也必须通过堡垒机或者其他方式进行安全审计登录。在这种无网（无法访问公网）的环境中，想要部署好一个 K8s 集群并不是一件轻松的事儿。市面上 K8s 部署工具也多不胜数，对于离线部署的支持情况也各不相同：</p><table><thead><tr><th align="center">Item</th><th align="center">Language</th><th align="center">Star</th><th align="center">Fork</th><th align="left">离线部署支持情况</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/kubernetes/kops" target="_blank" rel="noopener">kops</a></td><td align="center">Golang</td><td align="center">13.2k</td><td align="center">4.1k</td><td align="left">不支持</td></tr><tr><td align="center"><a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">kubespray</a></td><td align="center">Ansible</td><td align="center">11.1k</td><td align="center">4.7k</td><td align="left">支持，需自行构建安装包</td></tr><tr><td align="center"><a href="https://github.com/easzlab/kubeasz" target="_blank" rel="noopener">kubeasz</a></td><td align="center">Ansible</td><td align="center">7.2k</td><td align="center">2.7k</td><td align="left">支持，需自行构建安装包</td></tr><tr><td align="center"><a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a></td><td align="center">Golang</td><td align="center">4.1k</td><td align="center">790</td><td align="left">支持，需付费充值会员</td></tr><tr><td align="center"><a href="https://github.com/rancher/rke" target="_blank" rel="noopener">RKE</a></td><td align="center">Golang</td><td align="center">2.5k</td><td align="center">480</td><td align="left">不支持，需自行安装 docker</td></tr><tr><td align="center"><a href="https://github.com/alibaba/sealer" target="_blank" rel="noopener">sealer</a></td><td align="center">Golang</td><td align="center">503</td><td align="center">112</td><td align="left">支持，源自 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a></td></tr><tr><td align="center"><a href="https://github.com/kubesphere/kubekey" target="_blank" rel="noopener">kubekey</a></td><td align="center">Golang</td><td align="center">471</td><td align="center">155</td><td align="left">部分支持，仅镜像可离线</td></tr></tbody></table><p>无网环境离线部署 K8s 往往是作为一个商业服务或者商业付费产品来出售（如 <a href="https://www.sealyun.com/" target="_blank" rel="noopener">sealos</a> ），很少有开源免费的解决方案；或者虽然提供了离线部署方案，但想要操作起来十分繁琐，很难顺畅地做到一键部署；又或者只支持部分离线部署，还有一部分资源需要在部署的时候通过公网获取。</p><p>针对上述问题，本文调研主流的 K8s 部署工具，并基于这些工具设计并实现一种从构建离线安装包到一键部署 K8s 集群全流程的解决方案，以满足在无网的环境中一键部署 K8s 集群的需求，比较适合基于 K8s 的 PaaS toB 产品使用。</p><h2 id="离线资源"><a href="#离线资源" class="headerlink" title="离线资源"></a>离线资源</h2><p>总体来讲部署一个 K8s 集群大致需要依赖如下三种资源：</p><ul><li>系统 OS 的 rpm/deb 包：如 docker-ce、containerd、ipvsadm、conntrack 等；</li><li>二进制文件：如 kubelet、kubectl、kubeadm、crictl 等；</li><li>组件容器镜像：如 kube-apiserver、kube-proxy、coredns、calico、flannel 等；</li></ul><h3 id="OS-packages"><a href="#OS-packages" class="headerlink" title="OS packages"></a>OS packages</h3><p>这类属于 OS 系统层面的依赖，根据不同系统或者支持的功能需要使用相应的包管理器安装相应的依赖包，大致分为如下几种：</p><ul><li>kubernetes 组件依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- conntrack           <span class="comment"># kube-proxy 依赖</span></span><br><span class="line">- ipset               <span class="comment"># kube-proxy 使用 ipvs 模式需要</span></span><br><span class="line">- ipvsadm             <span class="comment"># kube-proxy 使用 ipvs 模式需要</span></span><br><span class="line">- socat               <span class="comment"># 用于 port forwarding</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details/" target="_blank" rel="noopener">Implementation details</a>:</p><p>[Error] if conntrack, ip, iptables, mount, nsenter commands are not present in the command path<br>[warning] if ebtables, ethtool, socat, tc, touch, crictl commands are not present in the command path</p></blockquote><ul><li>部署依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- ebtables            <span class="comment"># kubeadm 依赖工具</span></span><br><span class="line">- ethtool             <span class="comment"># kubeadm 依赖工具</span></span><br><span class="line">- chrony              <span class="comment"># 时钟同步工具，部署前节点的时候必须一致，不然证书或者 CNI 插件会出现问题</span></span><br></pre></td></tr></table></figure><ul><li>CRI 容器运行运行时</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- containerd.io       <span class="comment"># 可单独安装/docker-ce 依赖</span></span><br><span class="line">- docker-ce           <span class="comment"># docker-ce</span></span><br><span class="line">- libseccomp          <span class="comment"># 安装 containerd 需要</span></span><br><span class="line">- nvidia-container-runtime <span class="comment"># 支持 GPU 时需要依赖</span></span><br></pre></td></tr></table></figure><ul><li>存储客户端依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- nfs-utils/nfs-common <span class="comment"># 创建基于 nfs 的 PV 需要</span></span><br><span class="line">- ceph-common          <span class="comment"># ceph 客户端安装包，创建基于 ceph 的 pv 需要</span></span><br><span class="line">- lvm2                 <span class="comment"># 创建基于 ceph 的 pv 需要</span></span><br><span class="line">- glusterfs-client     <span class="comment"># 创建基于 glusterfs 的 pv 需要</span></span><br><span class="line">- glusterfs-common     <span class="comment"># 创建基于 glusterfs 的 pv 需要</span></span><br><span class="line">- cifs-utils           <span class="comment"># 创建基于 cifs 的 pv 需要</span></span><br><span class="line">- fuse                 <span class="comment"># ceph 或者其他存储客户端依赖</span></span><br></pre></td></tr></table></figure><p>想要解决上面这些依赖项十分棘手，也是离线部署场景下最难的一部分，至今并没有一个成熟的方案实现这些依赖的离线部署，基本上所有的 k8s 部署工具都没有提供这些包的离线安装方式。对于这些包的依赖，目前主要有避免安装这些依赖和制作离线源这两种解决方案。</p><h4 id="sealos"><a href="#sealos" class="headerlink" title="sealos"></a>sealos</h4><p>在 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a> 中就极力避免使用包管理器来安装依赖，比如安装 containerd 时的依赖 libseccomp 使用的是编译好的 .so 文件的方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tar -tf kube1.20.0.tar.gz</span><br><span class="line">kube/</span><br><span class="line">kube/lib64/</span><br><span class="line">kube/lib64/README.md</span><br><span class="line">kube/lib64/libseccomp.so.2</span><br><span class="line">kube/lib64/libseccomp.so.2.3.1</span><br></pre></td></tr></table></figure><p>安装 docker 使用的二进制的方式，但 docker 官方文档中也明确说明<strong>不建议使用二进制的方式来安装 docker</strong>，应该使用发行版自带的包管理器来安装。</p><blockquote><p>If you want to try Docker or use it in a testing environment, but you’re not on a supported platform, you can try installing from static binaries. <strong>If possible, you should use packages built for your operating system</strong>, and use your operating system’s package management system to manage Docker installation and upgrades.</p><p><a href="https://docs.docker.com/engine/install/binaries/" target="_blank" rel="noopener">Install Docker Engine from binaries</a></p></blockquote><p>实际上任何部署工具都会对系统 rpm/deb 包都会有不同程度上的依赖，有一部分依赖可以像 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a>  这样通过某种方式去规避掉。但并不是所有的依赖都能规避的，比如提供挂载 PV 需要依赖的存储客户端（nfs-common/nfs-utils，lvm2，gluster-client）这些包，基本上是没有任何规避的途径，必须通过包管理器来安装才行。</p><p>当然如果这些前置的依赖项在部署工具之外手动解决或者让用户自行去解决，那么使用 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a>  这种轻量级的工具来部署 K8s 是比较合适的。但对于一些 PaaS toB 的产品而言，让用户自己去手动解决这些依赖恐怕不太好。站在客户的角度来考虑既然平台提供了这部分功能，就应该在部署的时候解决所有的依赖问题，而不是让我自己手动临时来解决。</p><h4 id="kubekey"><a href="#kubekey" class="headerlink" title="kubekey"></a>kubekey</h4><p>在 kubekey 中一些依赖项目则是要求用户自行安装，并没有提供离线安装的方式：</p><blockquote><ul><li>建议您使用干净的操作系统（不安装任何其他软件），否则可能会有冲突。</li><li>请确保每个节点的硬盘至少有 <strong>100G</strong>。</li><li>所有节点必须都能通过 <code>SSH</code> 访问。</li><li>所有节点时间同步。</li><li>所有节点都应使用 <code>sudo</code>/<code>curl</code>/<code>openssl</code>。</li></ul><p>KubeKey 能够同时安装 Kubernetes 和 KubeSphere。根据要安装的 Kubernetes 版本，需要安装的依赖项可能会不同。您可以参考下方列表，查看是否需要提前在您的节点上安装相关依赖项。</p><table><thead><tr><th align="left">依赖项</th><th align="left">Kubernetes 版本 ≥ 1.18</th><th align="left">Kubernetes 版本 &lt; 1.18</th></tr></thead><tbody><tr><td align="left"><code>socat</code></td><td align="left">必须</td><td align="left">可选但建议</td></tr><tr><td align="left"><code>conntrack</code></td><td align="left">必须</td><td align="left">可选但建议</td></tr><tr><td align="left"><code>ebtables</code></td><td align="left">可选但建议</td><td align="left">可选但建议</td></tr><tr><td align="left"><code>ipset</code></td><td align="left">可选但建议</td><td align="left">可选但建议</td></tr></tbody></table><p>备注</p><ul><li>在离线环境中，您可以使用私有包、RPM 包（适用于 CentOS）或者 Deb 包（适用于 Debian）来安装这些依赖项。</li><li>建议您事先创建一个操作系统镜像文件，并且安装好所有相关依赖项。这样，您便可以直接使用该镜像文件在每台机器上安装操作系统，提高部署效率，也不用担心任何依赖项问题。</li></ul><p>您的集群必须有一个可用的容器运行时。在离线环境中创建集群之前，您必须手动安装 Docker 或其他容器运行时。</p><p><a href="https://github.com/kubesphere/kubekey#requirements-and-recommendations" target="_blank" rel="noopener">Requirements and Recommendations</a></p></blockquote><h4 id="构建离线源"><a href="#构建离线源" class="headerlink" title="构建离线源"></a>构建离线源</h4><p>对于系统 rpm/deb 包的依赖，我们还是踏踏实实地使用包管理器来安装这些包较为妥当，因此我们有必要为这些依赖的 rpm/deb 包构建成离线源，部署的时候使用这个离线源来安装这些依赖。在 《<a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a>》一文中曾分析过制作和使用离线源这么难的原因：</p><blockquote><p>作为平台部署工具的开发者，始终被离线部署这个难题困扰着。在线的容器镜像和二进制文件比较好解决，因为这些资源是与 OS 无关的，只要下载下来放到安装包里，部署的时候启动一个 HTTP 服务器和镜像仓库服务提供这些资源的下载即可。</p><p>但是对于 yum/apt 之类的软件来讲并不那么简单：</p><ul><li>首先由于各个包之间的依赖关系比较复杂，并不能将它们直接下载下来；</li><li>其次即便下载下来之后也无法直接通过 yum/apt 的方式安装指定的软件包，虽然也可以使用 scp 的方式将这些包复制到部署节点，通过 rpm 或 dpkg 的方式来安装上，但这样并不是很优雅，而且通用性能也不是很好；</li><li>最后需要适配的 Linux 发行版和包管理器种类也有多种，而且有些包的包名或者版本号在不同的包管理之间也相差甚大，无法做到统一管理。</li><li>离线源同时适配适配 ARM64 和 AMD64 有一定的难度</li></ul></blockquote><p>好在文中也给出了一个比较通用的解决方案，即通过 Dockerfile 来构建离线源，具体的实现细节可以翻看《<a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a>》一文。使用这个方案可以解决 PaaS 或者 IaaS 层面的离线源制作的难题，同样也适用于我们部署 K8s 集群的场景，而且采用 Dockerfile 的方式来构建离线源可以完美地解决同时适配 arm64 和 amd64 的难题。</p><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><p>一些部署过程中需要的二进制文件，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- kubelet</span><br><span class="line">- kubeadm</span><br><span class="line">- kubectl</span><br><span class="line">- etcd            <span class="comment"># systemd 方式部署 etcd 时需要的安装包</span></span><br><span class="line">- crictl          <span class="comment"># k8s 官方的 CRI CLI 工具</span></span><br><span class="line">- calicoctl       <span class="comment"># calico 的 CLI 工具</span></span><br><span class="line">- helm            <span class="comment"># 安装 helm 需要的二进制安装包</span></span><br><span class="line">- nerdctl         <span class="comment"># containerd 的 CLI 工具</span></span><br><span class="line">- cni-plugins     <span class="comment"># CNI 插件</span></span><br><span class="line">- cuda            <span class="comment"># GPU 依赖</span></span><br><span class="line">- nvidia_driver   <span class="comment"># GPU 驱动</span></span><br></pre></td></tr></table></figure><h4 id="sealos-1"><a href="#sealos-1" class="headerlink" title="sealos"></a>sealos</h4><p>sealos 对二进制文件的处理比较好，全部打包在离线安装包里，部署的时候会分发到集群节点上，整个部署过程都无需访问公网。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tar -tf kube1.20.0.tar.gz</span><br><span class="line">kube/bin/kubelet</span><br><span class="line">kube/bin/kubectl</span><br><span class="line">kube/bin/conntrack</span><br><span class="line">kube/bin/kubeadm</span><br></pre></td></tr></table></figure><h4 id="kubekey-1"><a href="#kubekey-1" class="headerlink" title="kubekey"></a>kubekey</h4><p>在 kubekey 的源码当中，是将所有二进制文件的 URL 硬编码在代码当中的。如果在部署的时候需要根据部署环境来修改二进制文件的下载地址，比如从内网 nginx 服务器上下载，就需要修改这部分源码把 <code>https://kubernetes-release.pek3b.qingstor.com</code> 修改成内网地址，比如 <code>http://172.20.0.25:8080/files</code> ，然而在部署的时候重新编译 kubekey 的代码又必须能访问公网才行，这就很僵硬。所以以目前开源的 kubekey 来看，是没有办法做到无网环境中愉快地部署 k8s 的，可能商业版的支持（猜测。</p><ul><li><a href="https://github.com/kubesphere/kubekey/blob/master/pkg/kubernetes/preinstall/preinstall.go" target="_blank" rel="noopener">kubekey/blob/master/pkg/kubernetes/preinstall/preinstall.go</a></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FilesDownloadHTTP defines the kubernetes' binaries that need to be downloaded in advance and downloads them.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FilesDownloadHTTP</span><span class="params">(mgr *manager.Manager, filepath, version, arch <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">kkzone := os.Getenv(<span class="string">"KKZONE"</span>)</span><br><span class="line">etcd := files.KubeBinary&#123;Name: <span class="string">"etcd"</span>, Arch: arch, Version: kubekeyapiv1alpha1.DefaultEtcdVersion&#125;</span><br><span class="line">kubeadm := files.KubeBinary&#123;Name: <span class="string">"kubeadm"</span>, Arch: arch, Version: version&#125;</span><br><span class="line">kubelet := files.KubeBinary&#123;Name: <span class="string">"kubelet"</span>, Arch: arch, Version: version&#125;</span><br><span class="line">kubectl := files.KubeBinary&#123;Name: <span class="string">"kubectl"</span>, Arch: arch, Version: version&#125;</span><br><span class="line">kubecni := files.KubeBinary&#123;Name: <span class="string">"kubecni"</span>, Arch: arch, Version: kubekeyapiv1alpha1.DefaultCniVersion&#125;</span><br><span class="line">helm := files.KubeBinary&#123;Name: <span class="string">"helm"</span>, Arch: arch, Version: kubekeyapiv1alpha1.DefaultHelmVersion&#125;</span><br><span class="line"></span><br><span class="line">etcd.Path = fmt.Sprintf(<span class="string">"%s/etcd-%s-linux-%s.tar.gz"</span>, filepath, kubekeyapiv1alpha1.DefaultEtcdVersion, arch)</span><br><span class="line">kubeadm.Path = fmt.Sprintf(<span class="string">"%s/kubeadm"</span>, filepath)</span><br><span class="line">kubelet.Path = fmt.Sprintf(<span class="string">"%s/kubelet"</span>, filepath)</span><br><span class="line">kubectl.Path = fmt.Sprintf(<span class="string">"%s/kubectl"</span>, filepath)</span><br><span class="line">kubecni.Path = fmt.Sprintf(<span class="string">"%s/cni-plugins-linux-%s-%s.tgz"</span>, filepath, arch, kubekeyapiv1alpha1.DefaultCniVersion)</span><br><span class="line">helm.Path = fmt.Sprintf(<span class="string">"%s/helm"</span>, filepath)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> kkzone == <span class="string">"cn"</span> &#123;</span><br><span class="line">etcd.Url = fmt.Sprintf(<span class="string">"https://kubernetes-release.pek3b.qingstor.com/etcd/release/download/%s/etcd-%s-linux-%s.tar.gz"</span>, etcd.Version, etcd.Version, etcd.Arch)</span><br><span class="line">kubeadm.Url = fmt.Sprintf(<span class="string">"https://kubernetes-release.pek3b.qingstor.com/release/%s/bin/linux/%s/kubeadm"</span>, kubeadm.Version, kubeadm.Arch)</span><br><span class="line">kubelet.Url = fmt.Sprintf(<span class="string">"https://kubernetes-release.pek3b.qingstor.com/release/%s/bin/linux/%s/kubelet"</span>, kubelet.Version, kubelet.Arch)</span><br><span class="line">kubectl.Url = fmt.Sprintf(<span class="string">"https://kubernetes-release.pek3b.qingstor.com/release/%s/bin/linux/%s/kubectl"</span>, kubectl.Version, kubectl.Arch)</span><br><span class="line">kubecni.Url = fmt.Sprintf(<span class="string">"https://containernetworking.pek3b.qingstor.com/plugins/releases/download/%s/cni-plugins-linux-%s-%s.tgz"</span>, kubecni.Version, kubecni.Arch, kubecni.Version)</span><br><span class="line">helm.Url = fmt.Sprintf(<span class="string">"https://kubernetes-helm.pek3b.qingstor.com/linux-%s/%s/helm"</span>, helm.Arch, helm.Version)</span><br><span class="line">helm.GetCmd = mgr.DownloadCommand(helm.Path, helm.Url)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">etcd.Url = fmt.Sprintf(<span class="string">"https://github.com/coreos/etcd/releases/download/%s/etcd-%s-linux-%s.tar.gz"</span>, etcd.Version, etcd.Version, etcd.Arch)</span><br><span class="line">kubeadm.Url = fmt.Sprintf(<span class="string">"https://storage.googleapis.com/kubernetes-release/release/%s/bin/linux/%s/kubeadm"</span>, kubeadm.Version, kubeadm.Arch)</span><br><span class="line">kubelet.Url = fmt.Sprintf(<span class="string">"https://storage.googleapis.com/kubernetes-release/release/%s/bin/linux/%s/kubelet"</span>, kubelet.Version, kubelet.Arch)</span><br><span class="line">kubectl.Url = fmt.Sprintf(<span class="string">"https://storage.googleapis.com/kubernetes-release/release/%s/bin/linux/%s/kubectl"</span>, kubectl.Version, kubectl.Arch)</span><br><span class="line">kubecni.Url = fmt.Sprintf(<span class="string">"https://github.com/containernetworking/plugins/releases/download/%s/cni-plugins-linux-%s-%s.tgz"</span>, kubecni.Version, kubecni.Arch, kubecni.Version)</span><br><span class="line">helm.Url = fmt.Sprintf(<span class="string">"https://get.helm.sh/helm-%s-linux-%s.tar.gz"</span>, helm.Version, helm.Arch)</span><br><span class="line">getCmd := mgr.DownloadCommand(fmt.Sprintf(<span class="string">"%s/helm-%s-linux-%s.tar.gz"</span>, filepath, helm.Version, helm.Arch), helm.Url)</span><br><span class="line">helm.GetCmd = fmt.Sprintf(<span class="string">"%s &amp;&amp; cd %s &amp;&amp; tar -zxf helm-%s-linux-%s.tar.gz &amp;&amp; mv linux-%s/helm . &amp;&amp; rm -rf *linux-%s*"</span>, getCmd, filepath, helm.Version, helm.Arch, helm.Arch, helm.Arch)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外 kubekey 在安装 docker 时，是直接调用的 <a href="https://get.docker.com/" target="_blank" rel="noopener">docker 官方的脚本</a> 来安装，安装过程也必须访问公网才行。</p><ul><li><a href="https://github.com/kubesphere/kubekey/blob/master/pkg/container-engine/docker/docker.go" target="_blank" rel="noopener">kubekey/blob/master/pkg/container-engine/docker/docker.go</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">installDockerOnNode</span><span class="params">(mgr *manager.Manager, _ *kubekeyapiv1alpha1.HostCfg)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">dockerConfig, err := GenerateDockerConfig(mgr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">dockerConfigBase64 := base64.StdEncoding.EncodeToString([]<span class="keyword">byte</span>(dockerConfig))</span><br><span class="line">output, err1 := mgr.Runner.ExecuteCmd(fmt.Sprintf(<span class="string">"sudo -E /bin/sh -c \"if [ -z $(which docker) ] || [ ! -e /var/run/docker.sock ]; then curl https://kubernetes.pek3b.qingstor.com/tools/kubekey/docker-install.sh | sh &amp;&amp; systemctl enable docker; if [ ! -f /etc/docker/daemon.json ]; then mkdir -p /etc/docker &amp;&amp; echo %s | base64 -d &gt; /etc/docker/daemon.json; fi; systemctl daemon-reload &amp;&amp; systemctl restart docker; fi\""</span>, dockerConfigBase64), <span class="number">0</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(errors.WithStack(err1), fmt.Sprintf(<span class="string">"Failed to install docker:\n%s"</span>, output))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 docker 官方的安装脚本来安装 docker 是有一个明显的问题就是：没有版本控制，不能指定 docker 的版本，每次安装的 docker 版本都是最新的 stable 版本。没有版本控制就会导致不同时间部署的集群或者加入的节点，docker 版本可能就不一样，在这里可能会埋下一些坑，可能会带来一定的维护成本或者将来升级时遇到问题。</p><p>编译过 kubernetes 组件的可能都知道 k8s 源码当中存在一个 <a href="https://github.com/kubernetes/kubernetes/blob/master/build/dependencies.yaml" target="_blank" rel="noopener">build/dependencies.yaml</a> 的文件，里面记录的是 k8s 组件与其他组件 (如 docker, etcd, coredns, cni, pause) 所匹配的最佳版本。</p><blockquote><p>On each of your nodes, install the Docker for your Linux distribution as per <a href="https://docs.docker.com/engine/install/#server" target="_blank" rel="noopener">Install Docker Engine</a>. You can find the latest validated version of Docker in this <a href="https://git.k8s.io/kubernetes/build/dependencies.yaml" target="_blank" rel="noopener">dependencies</a> file.</p></blockquote><ul><li><a href="https://github.com/kubernetes/kubernetes/blob/release-1.20/build/dependencies.yaml" target="_blank" rel="noopener">kubernetes/blob/release-1.20/build/dependencies.yaml</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="comment"># zeitgeist (https://github.com/kubernetes-sigs/zeitgeist) was inspired by</span></span><br><span class="line">  <span class="comment"># (and now replaces) the cmd/verifydependencies tool to verify external</span></span><br><span class="line">  <span class="comment"># dependencies across the repo.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># The zeitgeist dependencies.yaml file format is intended to be</span></span><br><span class="line">  <span class="comment"># backwards-compatible with the original tooling.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># In instances where the file format may change across versions, this meta</span></span><br><span class="line">  <span class="comment"># dependency check exists to ensure we're pinned to a known good version.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># ref: https://github.com/kubernetes/kubernetes/pull/98845</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Docker</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"docker"</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">19.03</span></span><br><span class="line">    <span class="attr">refPaths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">vendor/k8s.io/system-validators/validators/docker_validator.go</span></span><br><span class="line">      <span class="attr">match:</span> <span class="string">latestValidatedDockerVersion</span></span><br></pre></td></tr></table></figure><p>以 1.20.x 版本的 k8s 为例，它所依赖的 docker 版本为 19.03，而现在最新的 docker 版本如 20.10.8，并不是 K8s 官方所建议的最佳版本。总之，我们在部署 K8s 时，可以参考 <a href="https://github.com/kubernetes/kubernetes/blob/master/build/dependencies.yaml" target="_blank" rel="noopener">build/dependencies.yaml</a> 来确定与 K8s 相关的组件应该选择哪一个最佳的版本，而不是随便装一个最新的版本就完事儿了。</p><h4 id="kubespray"><a href="#kubespray" class="headerlink" title="kubespray"></a>kubespray</h4><p>在 kubespray 中，所有二进制文件的 URL 都是通过变量的方式定义的，想要做到离线部署十分简单，只需要通过 ansible 变量优先级的特性，将它们在 group_vars 通过 overrides 的方式覆盖即可。比如这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Download URLs</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubeadm"</span></span><br></pre></td></tr></table></figure><h3 id="images"><a href="#images" class="headerlink" title="images"></a>images</h3><p>一些如 kube-proxy、kube-apiserver、coredns、calico 组件镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">k8s.gcr.io/kube-apiserver:v1.20.7</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.20.7</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.20.7</span><br><span class="line">k8s.gcr.io/kube-registry-proxy:0.4</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.20.7</span><br><span class="line">k8s.gcr.io/pause:3.3</span><br><span class="line">k8s.gcr.io/coredns:1.7.0</span><br><span class="line">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64:1.8.3</span><br><span class="line">k8s.gcr.io/dns/k8s-dns-node-cache:1.17.1</span><br></pre></td></tr></table></figure><h4 id="sealos-2"><a href="#sealos-2" class="headerlink" title="sealos"></a>sealos</h4><p>sealos 将这些镜像使用 docker save 的方式打包成一个 tar 包，在部署的时候使用 docker/ctr load 的方式将镜像导入到容器运行时的存储目录当中，源码如下：</p><ul><li><a href="https://github.com/fanux/sealos/blob/develop/install/send.go" target="_blank" rel="noopener">fanux/sealos/blob/develop/install/send.go</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SendPackage is send new pkg to all nodes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *SealosUpgrade)</span> <span class="title">SendPackage</span><span class="params">()</span></span> &#123;</span><br><span class="line">all := <span class="built_in">append</span>(u.Masters, u.Nodes...)</span><br><span class="line">pkg := path.Base(u.NewPkgUrl)</span><br><span class="line"><span class="comment">// rm old sealos in package avoid old version problem. if sealos not exist in package then skip rm</span></span><br><span class="line"><span class="keyword">var</span> kubeHook <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> For120(Version) &#123;</span><br><span class="line"><span class="comment">// TODO update need load modprobe -- br_netfilter modprobe -- bridge.</span></span><br><span class="line"><span class="comment">// https://github.com/fanux/cloud-kernel/issues/23</span></span><br><span class="line">kubeHook = fmt.Sprintf(<span class="string">"cd /root &amp;&amp; rm -rf kube &amp;&amp; tar zxvf %s  &amp;&amp; cd /root/kube/shell &amp;&amp; rm -f ../bin/sealos &amp;&amp; (ctr -n=k8s.io image import ../images/images.tar || true) &amp;&amp; cp -f ../bin/* /usr/bin/ "</span>, pkg)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">kubeHook = fmt.Sprintf(<span class="string">"cd /root &amp;&amp; rm -rf kube &amp;&amp; tar zxvf %s  &amp;&amp; cd /root/kube/shell &amp;&amp; rm -f ../bin/sealos &amp;&amp; (docker load -i ../images/images.tar || true) &amp;&amp; cp -f ../bin/* /usr/bin/ "</span>, pkg)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PkgUrl = SendPackage(pkg, all, <span class="string">"/root"</span>, <span class="literal">nil</span>, &amp;kubeHook)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方式加载镜像有一个比较明显的限制就是 kube-apiserver 的 admission 准入控制中不能加入 <code>AlwaysPullImages</code> 参数。不然与这些镜像相关的 pod 重新调度或者重启之后会重新从源镜像仓库拉取镜像，在无网或者网络限制的环境中可能无法拉取镜像导致这些 Pod 启动失败，从而导致集群异常。</p><p>而在多租户场景下，出于安全的考虑  <code>AlwaysPullImages</code> 准入控制往往是要开启的。因此 sealos 可能并不适用于多租户或者对此有要求的环境中（最常见的就是 PaaS 平台）。</p><blockquote><p>该准入控制器会修改每一个新创建的 Pod 的镜像拉取策略为 Always 。 这在多租户集群中是有用的，这样用户就可以放心，他们的私有镜像只能被那些有凭证的人使用。 如果没有这个准入控制器，一旦镜像被拉取到节点上，任何用户的 Pod 都可以通过已了解到的镜像的名称（假设 Pod 被调度到正确的节点上）来使用它，而不需要对镜像进行任何授权检查。 当启用这个准入控制器时，总是在启动容器之前拉取镜像，这意味着需要有效的凭证。</p></blockquote><h4 id="kubekey-2"><a href="#kubekey-2" class="headerlink" title="kubekey"></a>kubekey</h4><p><a href="https://kubesphere.io/docs/installing-on-linux/introduction/air-gapped-installation/" target="_blank" rel="noopener">kubekey 官方的文档</a> 中有提到组件镜像离线部署的方式，不过十分繁琐(劝退 😂)，在 <a href="https://github.com/kubesphere/kubekey/issues/597" target="_blank" rel="noopener">Offline installation is too troublesome #597</a> 中也有人吐槽这个问题。不过目前 kubekey 开发团队已经在重构这部分内容了，至于结果如何，只能等了。</p><h4 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h4><p>在私有云环境中，企业一般都会有自己的镜像仓库（比如 harbor ）用于存放业务组件镜像或者一些其他平台依赖的镜像。再加上 Docker Hub 自从去年开始就加入了 pull 镜像次数的限制，如果直接使用 Docker Hub 上面的镜像来部署集群，很有可能会因为 <a href="https://www.docker.com/increase-rate-limit" target="_blank" rel="noopener">429 toomanyrequests</a> 或者一些网络原因导致拉取镜像失败。因此对于 k8s 集群部署而言，建议使用内部自己的镜像仓库，而非公网上镜像仓库。如果没有的话可以使用 harbor 或者 docker registry 在本地部署一个镜像仓库。我们将部署依赖的镜像导入到已经存在的镜像仓库中，部署的时候从该镜像仓库拉取即可。</p><h2 id="部署工具选择"><a href="#部署工具选择" class="headerlink" title="部署工具选择"></a>部署工具选择</h2><p>上面简单梳理了一下部署 k8s 集群过程中所依赖的的在线资源，以及如何将它们制作成离线资源的一些分析。上面提及的部署工具各有各的优缺点，针对以下两种不同的场景可以选择不同的部署工具。</p><h3 id="sealos-3"><a href="#sealos-3" class="headerlink" title="sealos"></a>sealos</h3><p>如果仅仅是部署一个简单的 k8s 集群，对集群没有太多定制化的需求，那么使用 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a> 可能是最佳的选择，只不过它是收费的，<a href="https://www.sealyun.com/" target="_blank" rel="noopener">需要充值会员</a> 😂。</p><blockquote><h3 id="现在开始-￥99-￥69-年"><a href="#现在开始-￥99-￥69-年" class="headerlink" title="现在开始 ￥99 ￥69/年"></a>现在开始 <del>￥99</del> ￥69/年</h3><p>欢迎成为年费会员，任意下载所有版本软件包!</p><blockquote><p>@F-liuhui 离线包居然要收费？那还是开源项目吗？</p></blockquote><p>开源与付费不冲突，100% 开源 100% 付费</p><p><a href="https://www.sealyun.com/" target="_blank" rel="noopener">sealyun.com</a></p></blockquote><p>如果动手能力强的话，可以根据 selaos 离线安装包的目录结构使用 GitHub Actions 来构建，实现起来也不是很难。只不过砸别人饭碗的事儿还是不做为好，因此我们应该选择另一种方案来实现，这样也能避免一些商业纠纷问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ tar -tf kube1.20.0.tar.gz</span><br><span class="line">kube/</span><br><span class="line">kube/lib64/</span><br><span class="line">kube/lib64/README.md</span><br><span class="line">kube/lib64/libseccomp.so.2</span><br><span class="line">kube/lib64/libseccomp.so.2.3.1</span><br><span class="line">kube/shell/</span><br><span class="line">kube/shell/containerd.sh</span><br><span class="line">kube/shell/init.sh</span><br><span class="line">kube/shell/master.sh</span><br><span class="line">kube/README.md</span><br><span class="line">kube/bin/</span><br><span class="line">kube/bin/kubelet</span><br><span class="line">kube/bin/kubectl</span><br><span class="line">kube/bin/conntrack</span><br><span class="line">kube/bin/kubeadm</span><br><span class="line">kube/bin/kubelet-pre-start.sh</span><br><span class="line">kube/conf/</span><br><span class="line">kube/conf/kubeadm.yaml</span><br><span class="line">kube/conf/kubelet.service</span><br><span class="line">kube/conf/calico.yaml</span><br><span class="line">kube/conf/10-kubeadm.conf</span><br><span class="line">kube/conf/net/</span><br><span class="line">kube/conf/net/calico.yaml</span><br><span class="line">kube/containerd/</span><br><span class="line">kube/containerd/README.md</span><br><span class="line">kube/containerd/cri-containerd-cni-linux-amd64.tar.gz</span><br><span class="line">kube/images/</span><br><span class="line">kube/images/images.tar</span><br><span class="line">kube/images/README.md</span><br></pre></td></tr></table></figure><h3 id="kubekey-3"><a href="#kubekey-3" class="headerlink" title="kubekey"></a>kubekey</h3><p>由于 kubekey 部署时二进制文件需要公网获取，docker 无法离线部署以及需要手动安装一些前置依赖，没有办法做到完整的离线部署，因此离线部署的方案也就直接放弃掉了，抽空他们提个 Issue 或 PR 看看能否支持这部分 😅。</p><h3 id="kubespray-1"><a href="#kubespray-1" class="headerlink" title="kubespray"></a>kubespray</h3><p>如果想找一个即开源又免费的离线部署方案，或者对集群部署有特殊的要求，比如基于 K8s 的 PaaS toB 产品，需要在部署时安装平台本身需要的一些依赖（如存储客户端、GPU 驱动等）。那么不妨先看一下 kubernetes-sig 社区的 <a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">kubespray</a> 如何 🤔，主要的特性如下：</p><ul><li>支持的 10 种 CNI 插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- cni-plugins v0.9.1</span><br><span class="line">- calico v3.17.4</span><br><span class="line">- canal (given calico/flannel versions)</span><br><span class="line">- cilium v1.9.9</span><br><span class="line">- flanneld v0.14.0</span><br><span class="line">- kube-ovn v1.7.1</span><br><span class="line">- kube-router v1.3.0</span><br><span class="line">- multus v3.7.2</span><br><span class="line">- ovn4nfv v1.1.0</span><br><span class="line">- weave v2.8.1</span><br></pre></td></tr></table></figure><ul><li>支持 3 种容器运行时以及 <a href="https://github.com/kubernetes-sigs/kubespray/blob/master/docs/kata-containers.md" target="_blank" rel="noopener">Kata Containers</a> 还有 nvidia-gpu-device-plugin 等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- docker v20.10</span><br><span class="line">- containerd v1.4.6</span><br><span class="line">- cri-o v1.21</span><br></pre></td></tr></table></figure><ul><li>适配了 10 种 Linux 发行版，覆盖了绝大多数私有云场景</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- Flatcar Container Linux by Kinvolk</span><br><span class="line">- Debian Buster, Jessie, Stretch, Wheezy</span><br><span class="line">- Ubuntu 16.04, 18.04, 20.04</span><br><span class="line">- CentOS/RHEL 7, 8</span><br><span class="line">- Fedora 33, 34</span><br><span class="line">- Fedora CoreOS (see fcos Note)</span><br><span class="line">- openSUSE Leap 15.x/Tumbleweed</span><br><span class="line">- Oracle Linux 7, 8</span><br><span class="line">- Alma Linux 8</span><br><span class="line">- Amazon Linux 2</span><br></pre></td></tr></table></figure><ul><li>丰富的插件和扩展</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 工具类</span></span><br><span class="line">- helm</span><br><span class="line">- krew</span><br><span class="line">- nerdctl</span><br><span class="line"></span><br><span class="line"><span class="comment">## 一些 controller 和 provisioner</span></span><br><span class="line">- ambassador: v1.5</span><br><span class="line">- cephfs-provisioner v2.1.0-k8s1.11</span><br><span class="line">- rbd-provisioner v2.1.1-k8s1.11</span><br><span class="line">- cert-manager v0.16.1</span><br><span class="line">- coredns v1.8.0</span><br><span class="line">- ingress-nginx v0.43.0</span><br></pre></td></tr></table></figure><ul><li>依赖的文件和镜像支持离线部署 <a href="https://github.com/kubernetes-sigs/kubespray/blob/master/docs/offline-environment.md" target="_blank" rel="noopener">Offline environment</a></li></ul><p>kubespray 对所有的依赖资源都做到了离线下载的支持：比如所有依赖文件的 URL 都通过变量的方式来定义，而非 kubekey 那样硬编码在代码中；所有镜像的 repo 和 tag 都是通过变量的方式来定义。这样的好处就是在部署的时候可以根据客户环境的的镜像仓库地址和文件服务器的 URL 地址来填写相应的参数，无需通过公网来获取。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Registry overrides</span></span><br><span class="line"><span class="attr">kube_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_host &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">gcr_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_host &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">docker_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_host &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">quay_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_host &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/kubeadm"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="comment"># etcd is optional if you **DON'T** use etcd_deployment=host</span></span><br><span class="line"><span class="attr">etcd_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/etcd/etcd-<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>-linux-amd64.tar.gz"</span></span><br><span class="line"><span class="attr">cni_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/cni/cni-plugins-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>-<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>.tgz"</span></span><br><span class="line"><span class="attr">crictl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/cri-tools/crictl-<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="comment"># If using Calico</span></span><br><span class="line"><span class="attr">calicoctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/calico/<span class="template-variable">&#123;&#123; calico_ctl_version &#125;&#125;</span>/calicoctl-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>和上述几种部署工具对比不难发现，kubespray 灵活性和可扩展性要领先其他工具（支持 10 种 CNI、10 种 Linux  发行版、3 种 CRI、以及多种插件和扩展）并在参数层面上做到了离线部署的支持。因此我们首先选用 kubespray 作为集群部署的底层工具。</p><p>还有一个问题就是 kubespray 虽然在参数配置上支持离线部署，但是从制作离线安装包到一键部署，目前为止还未有一个完整的实现方案。因此需要为 kubespray 设计一套从离线安装包的构建到集群一键部署的流程和方案，为此我们新建一个名为 <a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">kubeplay</a> 的 repo 来完成这部分内容。</p><p>另外值得一提的是 kubesphere 早期的版本 v2.x 使用也是 kubespray 部署的 k8s，至今 ks-installer 代码中仍残留着 <a href="https://github.com/kubesphere/ks-installer/commits/master/roles/download/tasks" target="_blank" rel="noopener">部分 kubespray 的代码</a> ，到了 3.0 的时候开始使用自研的 kubekey 来部署 K8s 了。</p><blockquote><p>基于 Ansible 的安装程序具有大量软件依赖性，例如 Python。KubeKey 是使用 Go 语言开发的，可以消除在各种环境中出现的问题，从而提高安装成功率。</p><p><a href="https://github.com/kubesphere/kubekey/blob/master/README_zh-CN.md" target="_blank" rel="noopener">README_zh-CN.md</a></p></blockquote><p>不过 ansible 的依赖问题当时为什么没有考虑采用容器化的方式运行 kubespray 🤔，至于 ansible 的性能问题也不是没有优化的余地。</p><h2 id="kubeplay"><a href="#kubeplay" class="headerlink" title="kubeplay"></a><a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">kubeplay</a></h2><p>kubeplay 这个项目主要是实现 K8s 离线安装包的构建和一键部署功能，目前只适配了 kubespray，等到后面会适配一些其他部署工具如 kubekey。</p><h3 id="打包方式"><a href="#打包方式" class="headerlink" title="打包方式"></a>打包方式</h3><p>由于部署依赖的二进制文件和组件镜像大都存放在 GitHub 、Docker Hub、gcr.io（Google Container Registry）、quay.io 这些国外的平台上，在国内环境获取这些资源是有一定的网络限制。而 GitHub 托管的 runner 运行在国外的机房当中，可以很顺畅地获取这些资源。因此我们选择使用 GitHub Actions 来进行离线安装包的构建。</p><p>像 selos 那样将安装包存放在阿里云 OSS 上，在国内能十分顺畅地高速下载，收费也是理所当然。但我们的方案是 100% 开源 100% 免费，每个人都可以 fork 代码到自己的 repo，根据自己的需求进行构建。因此选择 GitHub 来构建和存放我们的安装包是最合适的选择，这样也不用去额外考虑安装包下载的问题。至于从 GitHub 上下载安装包慢的问题，那应该由使用者自行去解决，而非本方案所关心的问题。</p><blockquote><p>Q：如何摆脱网络的依赖来创建个 Docker 的 image 呢，我觉得这个是 Docker 用户自己的基本权利？</p><p>A：这个基本权利我觉得还是要问 GFW ，国外的开发人员是非常难理解有些他们认为跟水电一样普及的基础设施在某些地方还是很困难的。</p><p>此处引用 <a href="http://dockone.io/article/722" target="_blank" rel="noopener">DockOne 技术分享（二十四）：容器和 IaaS：谁动了谁的奶酪</a></p></blockquote><p>选择好的构建场所为 GitHub Actions 之后我们再将这些离线资源进行拆分，目的是为了实现各个离线资源之间的解耦，这样做灵活性更好一些，比如能够适配多种 OS、支持多个 k8s 版本等。主要拆分成如下几个模块。</p><table><thead><tr><th>模块</th><th>Repo</th><th>用途</th><th>运行/使用方式</th></tr></thead><tbody><tr><td>compose</td><td><a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">kubeplay</a></td><td>用于部署 nginx 和 registry 服务</td><td>nerdctl compose</td></tr><tr><td>os-tools</td><td><a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">kubeplay</a></td><td>部署 compose 时的一些依赖工具</td><td>二进制安装</td></tr><tr><td>os-packages</td><td><a href="https://github.com/k8sli/os-packages" target="_blank" rel="noopener">os-packages</a></td><td>提供 rpm/deb 离线源</td><td>nginx 提供 http 方式下载</td></tr><tr><td>kubespray</td><td><a href="https://github.com/k8sli/kubespray" target="_blank" rel="noopener">kubespray</a></td><td>用于部署/扩缩容 k8s 集群</td><td>容器或者 pod</td></tr><tr><td>kubespray-files</td><td><a href="https://github.com/k8sli/kubespray" target="_blank" rel="noopener">kubespray</a></td><td>提供二进制文件依赖</td><td>nginx 提供 http 方式下载</td></tr><tr><td>kubespray-images</td><td><a href="https://github.com/k8sli/kubespray" target="_blank" rel="noopener">kubespray</a></td><td>提供组件镜像</td><td>registry 提供镜像下载</td></tr></tbody></table><p>拆分完成之后，我们最终还是需要将它们组合成一个完成的离线安装包。为了减少维护成本，我们将每个模块的构建操作都放在 Dockerfile 中，即 <code>All in Dockerfile</code> 🤣。这样每个模块的 GitHub Actions 流水线最终交付的都是一个镜像，然后镜像都推送到  <code>ghcr.io</code> 上，这样就解决了模块间产物传递以及镜像缓存的问题。最终通过一个最终的 <a href="https://github.com/k8sli/kubeplay/blob/main/Dockerfile" target="_blank" rel="noopener">Dockerfile</a> 将这些模块的镜像全部 COPY 到一个镜像当中，只要打包这个最终的镜像为离线安装包即可；另一个好处就使用 buildx 构建这些离线资源就原生支持多 CPU 体系架构，能够同时适配 amd64 和 arm64 体系架构，这样 arm64 也能愉快地玩耍了，真是一举两得。</p><p>下面就详细讲解每个模块的功能以及是如何打包的：</p><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>compose 模块里面主要运两个服务： 用于提供文件下载的 nginx 和组件镜像拉取的 registry。这两个我们依旧是容器化以类似 docker-compose 的方式来部署，而所依赖的也只有两个镜像和一些配置文件而已。</p><ul><li><a href="https://github.com/k8sli/kubeplay/blob/main/compose.yaml" target="_blank" rel="noopener">kubeplay/blob/main/compose.yaml</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.20-alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./resources/nginx:/usr/share/nginx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/compose/certs/domain.crt:/etc/nginx/conf.d/domain.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/compose/certs/domain.key:/etc/nginx/conf.d/domain.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/compose/nginx.conf:/etc/nginx/conf.d/default.conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 443 端口反向代理 registr 的 5000 端口，仅用于 pull 镜像</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2.7.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./resources/registry:/var/lib/registry</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 只允许本地 5000 端口 push 镜像</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5000:5000</span></span><br></pre></td></tr></table></figure><p>这两个镜像我们使用 skopeo copy 的方式保存为 tar 包，部署的时候 load 到容器运行时的存储中。</p><blockquote><p>Q：为什么要用 skopeo 而不是 docker？</p><p>A：因为 Dockerfile 构建过程中不支持运行 docker 命令 save 镜像</p></blockquote><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest as downloader</span><br><span class="line"><span class="keyword">ARG</span> SKOPEO_VERSION=v1.<span class="number">4.0</span></span><br><span class="line"><span class="keyword">ARG</span> NGINX_VERSION=<span class="number">1.20</span>-alpine</span><br><span class="line"><span class="keyword">ARG</span> RERGISRRY_VERSION=<span class="number">2.7</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /tools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk --no-cache add wget ca-certificates \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -k https://github.com/k8sli/skopeo/releases/download/v1.4.0/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> -O /tools/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /tools/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ln -s /tools/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> /usr/bin/skopeo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /images</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag nginx:<span class="variable">$&#123;NGINX_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://docker.io/library/nginx:<span class="variable">$&#123;NGINX_VERSION&#125;</span> docker-archive:nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag registry:<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://docker.io/library/registry:<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span> docker-archive:registry-<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span>.tar</span></span><br></pre></td></tr></table></figure><p>在部署的时候我们使用 nerdctl compose 的方式启动即可，使用方式有点类似于 docker-compose。</p><blockquote><p>Q: 为什么不用 docker 和 docker-compose</p><p>A：K8s 去 docker 是大势所趋，选择 containerd 更符合主流发展方向</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将镜像 load 进 containerd 存储</span></span><br><span class="line">$ find <span class="variable">$&#123;IMAGES_DIR&#125;</span> -<span class="built_in">type</span> f -name <span class="string">'*.tar'</span> | xargs -L1 nerdctl load -i</span><br><span class="line"><span class="comment"># nerdctl compose 启动 nginx 和 registry</span></span><br><span class="line">$ nerdctl compose -f compose.yaml up</span><br></pre></td></tr></table></figure><h3 id="os-packages"><a href="#os-packages" class="headerlink" title="os-packages"></a>os-packages</h3><p>这部分是 rpm/deb 离线源的构建，其详细的过程和原理可以参考我之前写的博客 《<a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a>》，下面只列举一下 CentOS7 离线源的构建配置：</p><ul><li><a href="https://github.com/k8sli/os-packages/blob/main/build/Dockerfile.os.centos7" target="_blank" rel="noopener">Dockerfile</a></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7.9</span>.<span class="number">2009</span> as os-centos7</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=<span class="number">7</span></span><br><span class="line"><span class="keyword">ARG</span> DOCKER_MIRROR_URL=<span class="string">"https://download.docker.com"</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_TOOLS=<span class="string">"yum-utils createrepo epel-release wget"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建工具，配置 docker 官方 yum 源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -q -y <span class="variable">$&#123;BUILD_TOOLS&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum-config-manager --add-repo <span class="variable">$&#123;DOCKER_MIRROR_URL&#125;</span>/linux/centos/docker-ce.repo \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum makecache</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /centos/<span class="variable">$OS_VERSION</span>/os</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=mikefarah/yq:4.11.1 /usr/bin/yq /usr/bin/yq</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据配置文件解析该 OS 需要构建的包，并获取这些包的下载 url</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> <span class="string">'.common[],.yum[],.centos7[],.kubespray.common[],.kubespray.yum[]'</span> packages.yaml &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sort -u packages.list | xargs repotrack --urls | sort -u &gt; packages.urls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 wget 的方式下载 rpm 包，使用 createrepo 创建 repo 索引文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -x -P <span class="variable">$&#123;ARCH&#125;</span> -i packages.urls \</span></span><br><span class="line"><span class="bash">    &amp;&amp; createrepo -d <span class="variable">$&#123;ARCH&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将构建的内容 COPY 成单独的一层</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=os-centos7 /centos /centos</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/k8sli/os-packages/blob/main/packages.yaml" target="_blank" rel="noopener">packages.yaml</a> 配置文件</li></ul><p>这个是需要安装包的配置文件，可以根据平台或者客户的一些要求配置上不同的包</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kubespray:</span></span><br><span class="line">  <span class="attr">common:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">socat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">unzip</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">e2fsprogs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xfsprogs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ebtables</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bash-completion</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ipvsadm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ipset</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">conntrack</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">yum:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nss</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">libselinux-python</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">device-mapper-libs</span></span><br><span class="line">  <span class="attr">apt:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python-apt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3-apt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">aufs-tools</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apt-transport-https</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">software-properties-common</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cifs-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lsof</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lvm2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sshpass</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wget</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ethtool</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net-tools</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rsync</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chrony</span></span><br><span class="line"></span><br><span class="line"><span class="attr">yum:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfs-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yum-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">createrepo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">epel-release</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nc</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">httpd-tools</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apt:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfs-common</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apt-transport-https</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ca-certificates</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gnupg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lsb-release</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">aptitude</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dpkg-dev</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gnupg2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">netcat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apache2-utils</span></span><br><span class="line"></span><br><span class="line"><span class="attr">centos7:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">containerd.io-1.4.6</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ubuntu:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">containerd.io=1.4.6-1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">debian10:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">containerd.io=1.4.6-1</span></span><br></pre></td></tr></table></figure><blockquote><p>对于 toB 产品，建议将下面这些常见的运维调试工具（如 tcpdump, strace, lsof, net-tools 等）也构建在离线源中。这样也不至于在客户的环境中排查问题的时候机器上连个 tcpdump 都没有，尤其是在无网的环境中，如果没有这些常用的运维工具，排查问题将会十分棘手。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tools:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">bash-completion</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chrony</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cifs-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dstat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">e2fsprogs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ebtables</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">expect</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gdb</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">htop</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">iftop</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">iotop</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ipset</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ipvsadm</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">jq</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lsof</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lvm2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ncdu</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net-tools</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nethogs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nload</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ntpdate</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pciutils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">psmisc</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rsync</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">smartmontools</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">socat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sshpass</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">strace</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sysstat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tcpdump</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">telnet</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tmux</span></span><br></pre></td></tr></table></figure><h3 id="kubespray-2"><a href="#kubespray-2" class="headerlink" title="kubespray"></a>kubespray</h3><p>kubespray 是部署 K8s 集群、增加节点、删除节点、移除集群等涉及对集群操作的主要工具。我们依旧采用容器化的方式运行 kubespray，主要有以下场景会用到 kubespray：</p><ul><li>在部署工具运行节点，使用 nerdctl 来运行 kubespray 容器部署  K8s 集群</li><li>K8s 集群部署完毕后，以 Job pod 的方式运行部署另一个 K8s 集群，实现多集群部署的基本能力</li><li>K8s 集群部署完毕后，以 Job pod 的方式运行 kubespray 对该集群集群节点进行扩缩容</li></ul><p>Job pod 方式对集群进行扩缩容的设计的是为了从一定程度上解决部署大规模集群时 ansible 性能问题。即我们一开始不必就部署一个上千节点的集群，而是先把一个规模较小的集群部署起来，然后通过创建批量的 Job 的方式运行 kubespray 再将集群慢慢扩容起来，比如扩容到上千台节点。</p><p>kubespray 官方的 Dockerfile 构建出来的镜像有 1.4GB，实在是太大了，因此我们需要优化一下，减少镜像大小</p><ul><li>kubespray BASE 镜像</li></ul><p>首先构建一个 base 镜像，对于不经常变动的内容我们把它封装在一个 base 镜像里，只有当相关依赖更新了才需要重新构建这个 base 镜像，<code>Dockerfile.base</code> 如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3</span> as builder</span><br><span class="line"><span class="keyword">ARG</span> KUBE_VERSION=v1.<span class="number">21.3</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> tests/requirements.txt tests/requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'shellcheck-py==0.7.2.1'</span> &gt;&gt; requirements.txt \</span></span><br><span class="line"><span class="bash">    &amp;&amp; grep -E <span class="string">'^yamllint|^ansible-lint'</span> tests/requirements.txt &gt;&gt; requirements.txt \</span></span><br><span class="line"><span class="bash">    &amp;&amp; pip3 install --user -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -O /root/.<span class="built_in">local</span>/bin/kubectl -q https://dl.k8s.io/<span class="variable">$&#123;KUBE_VERSION&#125;</span>/bin/linux/<span class="variable">$&#123;ARCH&#125;</span>/kubectl \</span></span><br><span class="line"><span class="bash">&amp;&amp; chmod a+x /root/.<span class="built_in">local</span>/bin/kubectl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3</span>-slim</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> DEBIAN_FRONTEND=noninteractive apt-get update -y -qq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y -qq --no-install-recommends \</span></span><br><span class="line"><span class="bash">        ca-certificates libssl-dev openssh-client sshpass curl gnupg2 rsync \</span></span><br><span class="line"><span class="bash">        jq moreutils vim iputils-ping wget tcpdump xz-utils \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /root/.<span class="built_in">local</span> /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /kubespray</span></span><br></pre></td></tr></table></figure><ul><li><a href="">kubespray 镜像</a></li></ul><p>FROM 的 base 镜像就使用我们刚刚构建好的镜像，相关依赖已经在 base 镜像中安装好了，这里构建的时候只需要把 repo 源码复制到 /kubespray 目录下即可，内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> BASE_IMAGE=ghcr.io/k8sli/kubespray-base</span><br><span class="line"><span class="keyword">ARG</span> BASE_IMAGE_VERSION=latest</span><br><span class="line"><span class="keyword">FROM</span> $BASE_IMAGE:$BASE_IMAGE_VERSION</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /kubespray</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br></pre></td></tr></table></figure><ul><li>kubespray 集群部署入口 <code>run.sh</code></li></ul><p>将集群部署、增加节点、删除节点、删除集群等操作封装成一个入口的脚本，提供外部工具调用该脚本，不然外部调用的时候直接运行 <code>ansible-playbook</code> 命令实在是不太方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">TYPE=<span class="variable">$1</span></span><br><span class="line">NODES=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">KUBE_ROOT=<span class="string">"<span class="variable">$(cd "$(dirname "$0")</span>"</span> &amp;&amp; <span class="built_in">pwd</span>)<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;TYPE:=deploy-cluster&#125;</span></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;ANSIBLE_FORKS:=10&#125;</span></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;BECOME_USER:=root&#125;</span></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;ANSIBLE_LOG_FORMAT:=yaml&#125;</span></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;INVENTORY:=$&#123;KUBE_ROOT&#125;</span>/config/inventory&#125;</span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;ENV_FILE:=$&#123;KUBE_ROOT&#125;</span>/config/env.yml&#125;</span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;INSTALL_STEPS_FILE:=$&#123;KUBE_ROOT&#125;</span>/config/.install_steps&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export ANSIBLE_STDOUT_CALLBACK=<span class="variable">$&#123;ANSIBLE_LOG_FORMAT&#125;</span></span></span><br><span class="line"><span class="string">export ANSIBLE_ARGS="</span>-f <span class="variable">$&#123;ANSIBLE_FORKS&#125;</span> --become --become-user=<span class="variable">$&#123;BECOME_USER&#125;</span> -i <span class="variable">$&#123;INVENTORY&#125;</span> -e @<span class="variable">$&#123;ENV_FILE&#125;</span><span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># Set logging colors</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NORMAL_COL=<span class="variable">$(tput sgr0)</span></span></span><br><span class="line"><span class="string">RED_COL=<span class="variable">$(tput setaf 1)</span></span></span><br><span class="line"><span class="string">WHITE_COL=<span class="variable">$(tput setaf 7)</span></span></span><br><span class="line"><span class="string">GREEN_COL=<span class="variable">$(tput setaf 76)</span></span></span><br><span class="line"><span class="string">YELLOW_COL=<span class="variable">$(tput setaf 202)</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">debuglog()&#123; printf "</span><span class="variable">$&#123;WHITE_COL&#125;</span>%s<span class="variable">$&#123;NORMAL_COL&#125;</span>\n<span class="string">" "</span><span class="variable">$@</span><span class="string">"; &#125;</span></span><br><span class="line"><span class="string">infolog()&#123; printf "</span><span class="variable">$&#123;GREEN_COL&#125;</span>✔ %s<span class="variable">$&#123;NORMAL_COL&#125;</span>\n<span class="string">" "</span><span class="variable">$@</span><span class="string">"; &#125;</span></span><br><span class="line"><span class="string">warnlog()&#123; printf "</span><span class="variable">$&#123;YELLOW_COL&#125;</span>➜ %s<span class="variable">$&#123;NORMAL_COL&#125;</span>\n<span class="string">" "</span><span class="variable">$@</span><span class="string">"; &#125;</span></span><br><span class="line"><span class="string">errorlog()&#123; printf "</span><span class="variable">$&#123;RED_COL&#125;</span>✖ %s<span class="variable">$&#123;NORMAL_COL&#125;</span>\n<span class="string">" "</span><span class="variable">$@</span><span class="string">"; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set -eo pipefail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [[ ! -f <span class="variable">$&#123;INVENTORY&#125;</span> ]]; then</span></span><br><span class="line"><span class="string">  errorlog "</span><span class="variable">$&#123;INVENTORY&#125;</span> file is missing, please check the inventory file is exists<span class="string">"</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deploy_cluster()&#123;</span></span><br><span class="line"><span class="string">:</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">main()&#123;</span></span><br><span class="line"><span class="string">  case <span class="variable">$TYPE</span> in</span></span><br><span class="line"><span class="string">    deploy-cluster)</span></span><br><span class="line"><span class="string">      infolog "</span><span class="comment">######  start deploy kubernetes cluster  ######"</span></span><br><span class="line">      deploy_cluster</span><br><span class="line">      infolog <span class="string">"######  kubernetes cluster successfully installed  ######"</span></span><br><span class="line">      ;;</span><br><span class="line">    remove-cluster)</span><br><span class="line">      infolog <span class="string">"######  start remove kubernetes cluster  ######"</span></span><br><span class="line">      <span class="keyword">if</span> ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/reset.yml &gt;/dev/stdout 2&gt;/dev/stderr; <span class="keyword">then</span></span><br><span class="line">        rm -f <span class="variable">$&#123;INSTALL_STEP_FILE&#125;</span></span><br><span class="line">        infolog <span class="string">"######  kubernetes cluster successfully removed ######"</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      ;;</span><br><span class="line">    add-node)</span><br><span class="line">      check_nodename</span><br><span class="line">      infolog <span class="string">"######  start add worker to kubernetes cluster  ######"</span></span><br><span class="line">      ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> --<span class="built_in">limit</span>=<span class="string">"<span class="variable">$&#123;NODES&#125;</span>"</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/playbooks/10-scale-nodes.yml &gt;/dev/stdout 2&gt;/dev/stderr</span><br><span class="line">      ;;</span><br><span class="line">    remove-node)</span><br><span class="line">      check_nodename</span><br><span class="line">      infolog <span class="string">"######  start remove worker from kubernetes cluster  ######"</span></span><br><span class="line">      ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> -e node=<span class="string">"<span class="variable">$&#123;NODES&#125;</span>"</span> -e reset_nodes=<span class="literal">true</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/remove-node.yml &gt;/dev/stdout 2&gt;/dev/stderr</span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      errorlog <span class="string">"unknow [TYPE] parameter: <span class="variable">$&#123;TYPE&#125;</span>"</span></span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><ul><li>分层部署 <a href="https://github.com/k8sli/kubespray/tree/main/playbooks" target="_blank" rel="noopener">playbooks</a></li></ul><p>不同于 kubespray 官方使用一个完整的 <a href="https://github.com/kubernetes-sigs/kubespray/blob/master/cluster.yml" target="_blank" rel="noopener">cluster.yaml</a> 来完成整个 K8s 集群的部署，我们在这里引入了分层部署的特性。即将集群部署分成若干个相互独立的 playbook，然后在各个 playbook 里引入我们增加的 roles 以及二开内容。这样的好处就是能和 kubespray 上游的代码保持相互独立，在 rebase 或者 cherry-pick 上游最新的代码能够避免出现冲突的现象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">playbooks</span><br><span class="line">├── 00-default-ssh-config.yml    <span class="comment"># 配置 ssh 连接</span></span><br><span class="line">├── 01-cluster-bootstrap-os.yml  <span class="comment"># 初始化集群节点</span></span><br><span class="line">├── 02-cluster-etcd.yml          <span class="comment"># 部署 etcd 集群</span></span><br><span class="line">├── 03-cluster-kubernetes.yml    <span class="comment"># 部署 k8s master 和 node</span></span><br><span class="line">├── 04-cluster-network.yml       <span class="comment"># 部署 CNI 插件</span></span><br><span class="line">├── 05-cluster-apps.yml          <span class="comment"># 部署一些 addon 组件如 coredns</span></span><br><span class="line">└── 10-scale-nodes.yml           <span class="comment"># 增删节点</span></span><br></pre></td></tr></table></figure><p>分层部署的时候通过一个文件来记录已经部署成功的步骤，这样如果本次因为一些原因导致部署失败（如网络中断），那么下次重新部署的时候会跳过已经部署好的步骤，从失败的地方继续部署，以提升整体的部署效率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deploy_cluster</span></span>()&#123;</span><br><span class="line">  touch <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span></span><br><span class="line">  STEPS=<span class="string">"00-default-ssh-config 01-cluster-bootstrap-os 02-cluster-etcd 03-cluster-kubernetes 04-cluster-network 05-cluster-apps"</span></span><br><span class="line">  <span class="keyword">for</span> step <span class="keyword">in</span> <span class="variable">$&#123;STEPS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! grep -q <span class="string">"<span class="variable">$&#123;step&#125;</span>"</span> <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span>; <span class="keyword">then</span></span><br><span class="line">      infolog <span class="string">"start deploy <span class="variable">$&#123;step&#125;</span>"</span></span><br><span class="line">      <span class="keyword">if</span> ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/playbooks/<span class="variable">$&#123;step&#125;</span>.yml; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;step&#125;</span> &gt;&gt; <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span></span><br><span class="line">        infolog <span class="string">"<span class="variable">$&#123;step&#125;</span> successfully installed"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        errorlog <span class="string">"<span class="variable">$&#123;step&#125;</span> installation failed"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      warnlog <span class="string">"<span class="variable">$&#123;step&#125;</span> is already installed, so skipped..."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件和镜像"><a href="#文件和镜像" class="headerlink" title="文件和镜像"></a>文件和镜像</h3><p>我们需要提取出 kubespray 部署的时候依赖的文件和镜像，生成一个文件列表和镜像列表，然后根据这些列表下载并构建到一个镜像里。</p><ul><li>文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Download URLs</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubeadm"</span></span><br><span class="line"><span class="attr">etcd_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/coreos/etcd/releases/download/<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>/etcd-<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">cni_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containernetworking/plugins/releases/download/<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>/cni-plugins-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>-<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>.tgz"</span></span><br><span class="line"><span class="attr">calicoctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calicoctl/releases/download/<span class="template-variable">&#123;&#123; calico_ctl_version &#125;&#125;</span>/calicoctl-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_crds_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calico/archive/<span class="template-variable">&#123;&#123; calico_version &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crictl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kubernetes-sigs/cri-tools/releases/download/<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>/crictl-<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">helm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/get.helm.sh/helm-<span class="template-variable">&#123;&#123; helm_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">nerdctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containerd/nerdctl/releases/download/v<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>/nerdctl-<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">patched_kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/k8sli/kubernetes/releases/download/<span class="template-variable">&#123;&#123; kubeadm_patch_version &#125;&#125;</span>/kubeadm-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>在构建安装包的时候，将 download_url 变量设置为 <code>https://</code> ，在部署的时候将 <code>download_url</code> 设置为内网 文件服务器服务器的 URL，比如 <code>https://172.20.0.25:8080/files</code>，这样就可以实现文件构建和部署使用的统一，节省维护成本。</p><ul><li>镜像</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define image repo and tag overwrite role/download/default/main.yml</span></span><br><span class="line"><span class="attr">pod_infra_image_tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; pod_infra_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">pod_infra_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/pause"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kube_proxy_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/kube-proxy"</span></span><br><span class="line"><span class="attr">kube_apiserver_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/kube-apiserver"</span></span><br><span class="line"><span class="attr">kube_scheduler_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/kube-scheduler"</span></span><br><span class="line"><span class="attr">kube_controller_manager_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/kube-controller-manager"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">coredns_image_tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; coredns_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">dnsautoscaler_image_tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dnsautoscaler_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">coredns_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_image_repo &#125;&#125;</span>/coredns"</span></span><br><span class="line"><span class="attr">dnsautoscaler_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/cluster-proportional-autoscaler-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Full image name for generate images list</span></span><br><span class="line"><span class="attr">kube_proxy_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_proxy_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kube_apiserver_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_apiserver_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kube_scheduler_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_scheduler_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kube_controller_manager_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_controller_manager_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">coredns_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; coredns_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; coredns_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">dnsautoscaler_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; dnsautoscaler_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; dnsautoscaler_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">nginx_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; nginx_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; nginx_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">pod_infra_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; pod_infra_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; pod_infra_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_policy_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; calico_policy_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; calico_policy_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_cni_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; calico_cni_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; calico_cni_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_node_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; calico_node_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; calico_node_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">flannel_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; flannel_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; flannel_image_tag &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><ul><li><code>generate.sh</code> 列表生成脚本</li></ul><p>我们根据上面 group_vars 中定义的版本号和一些参数，使用脚本的方式自动生成一个文件列表和镜像列表，构建的时候根据这些列表来下载所需要的文件和镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">SCRIPT_PATH=$(<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>); <span class="built_in">pwd</span>)</span><br><span class="line">REPO_PATH=<span class="string">"<span class="variable">$&#123;SCRIPT_PATH%/build&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">: <span class="variable">$&#123;IMAGE_ARCH:="amd64"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;ANSIBLE_ARCHITECTURE:="x86_64"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;DOWNLOAD_YML:="config/group_vars/all/download.yml"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ARCH used in convert &#123;%- if image_arch != 'amd64' -%&#125;-&#123;&#123; image_arch &#125;&#125;&#123;%- endif -%&#125; to &#123;&#123;arch&#125;&#125;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;IMAGE_ARCH&#125;</span>"</span> != <span class="string">"amd64"</span> ]]; <span class="keyword">then</span> ARCH=<span class="string">"-<span class="variable">$&#123;IMAGE_ARCH&#125;</span>"</span>; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cat &gt; /tmp/generate.sh &lt;&lt; EOF</span><br><span class="line">arch=<span class="variable">$&#123;ARCH&#125;</span></span><br><span class="line">download_url=https:/</span><br><span class="line">image_arch=<span class="variable">$&#123;IMAGE_ARCH&#125;</span></span><br><span class="line">ansible_system=linux</span><br><span class="line">ansible_architecture=<span class="variable">$&#123;ANSIBLE_ARCHITECTURE&#125;</span></span><br><span class="line">registry_project=library</span><br><span class="line">registry_domain=localhost</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate all component version by $DOWNLOAD_YML</span></span><br><span class="line">grep <span class="string">'_version:'</span> <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| sed <span class="string">'s/: /=/g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> | tr -d <span class="string">' '</span> &gt;&gt; /tmp/generate.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate download files url list</span></span><br><span class="line">grep <span class="string">'_download_url:'</span> <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| sed <span class="string">'s/: /=/g;s/ //g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g;s/|lower//g;s/^.*_url=/echo /g'</span> &gt;&gt; /tmp/generate.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate download images list</span></span><br><span class="line">grep -E <span class="string">'_image_tag:|_image_repo:|_image_name:'</span> <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| sed <span class="string">"s#&#123;%- if image_arch != 'amd64' -%&#125;-&#123;&#123; image_arch &#125;&#125;&#123;%- endif -%&#125;#&#123;&#123;arch&#125;&#125;#g"</span> \</span><br><span class="line">| sed <span class="string">'s/: /=/g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> | tr -d <span class="string">' '</span> &gt;&gt; /tmp/generate.sh</span><br><span class="line"></span><br><span class="line">grep <span class="string">'_image_name:'</span> <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| cut -d <span class="string">':'</span> -f1 | sed <span class="string">'s/^/echo $/g'</span> &gt;&gt; /tmp/generate.sh</span><br></pre></td></tr></table></figure><p>为了同时支持 amd64 和 arm64 的 CPU 架构，需要为两种架构各自生成列表，需要特殊处理一下。在这里踩的一个坑就是不同的组件镜像的命名方法千差万别，大致可以分为如下四种情况：</p><ul><li>像 kube-apiserver 这些 k8s 组件的镜像，镜像名称和镜像 tag 是不需要加上 CPU 体系架构的；</li><li>cluster-proportional-autoscaler 的镜像则是在镜像的名称后面加上了 CPU 体系架构的名称如 cluster-proportional-autoscaler-amd64，cluster-proportional-autoscaler-arm64；</li><li>flannel 则是将 CPU 体系架构名称定义在镜像 tag 后面比如 <code>flannel:v0.14.0-amd64</code>；</li><li>还有 calico 更奇葩，amd64 架构的镜像不需要加体系架构的名称如 <code>calico/cni:v3.18.4</code>，而 arm64 的则必须要在镜像 tag 后面带上 CPU 体系架构比如 <code>calico/cni:v3.18.4-arm64</code>；</li></ul><p><img src="https://p.k8s.li/2021-08-31-pass-tob-k8s-offline-deploy-2.jpeg" alt=""></p><p>在这里需要强调一下，文件列表和镜像列表一定要使用自动化的方式来管理，切勿手动更新，这样能节省大量的维护成本，不然的话每次都手动去更新这些列表成本实在是太高了，而且特别容易出出错或者遗漏某个组件。</p><h3 id="kubespray-files"><a href="#kubespray-files" class="headerlink" title="kubespray-files"></a>kubespray-files</h3><p>我们将 kubespray 部署所依赖的二进制文件构建在一个名为 kubespray-files 的镜像当中：</p><ul><li>生成的文件列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">https://get.helm.sh/helm-v3.6.3-linux-amd64.tar.gz</span><br><span class="line">https://github.com/containerd/nerdctl/releases/download/v0.8.1/nerdctl-0.8.1-linux-amd64.tar.gz</span><br><span class="line">https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">https://github.com/coreos/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">https://github.com/k8sli/kubernetes/releases/download/v1.21.3-patch-1.0/kubeadm-linux-amd64</span><br><span class="line">https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz</span><br><span class="line">https://github.com/projectcalico/calico/archive/v3.18.4.tar.gz</span><br><span class="line">https://github.com/projectcalico/calicoctl/releases/download/v3.18.4/calicoctl-linux-amd64</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.21.3/bin/linux/amd64/kubeadm</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.21.3/bin/linux/amd64/kubectl</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.21.3/bin/linux/amd64/kubelet</span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest as files</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add wget ca-certificates</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /build</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> build/kubespray-files/files_*.list /build/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed <span class="string">'/#/d'</span> *<span class="variable">$&#123;ARCH&#125;</span>.list &gt; all_files.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -x -P /files -i all_files.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=files /files /files</span></span><br></pre></td></tr></table></figure><ul><li>构建后的目录结构，通过目录层级的方式保留原有的 URL 地址，维护和使用起来比较方便</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">files/</span><br><span class="line">├── get.helm.sh</span><br><span class="line">│   └── helm-v3.6.3-linux-amd64.tar.gz</span><br><span class="line">├── github.com</span><br><span class="line">│   ├── containerd</span><br><span class="line">│   │   └── nerdctl</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.8.1</span><br><span class="line">│   │                   └── nerdctl-0.8.1-linux-amd64.tar.gz</span><br><span class="line">│   ├── containernetworking</span><br><span class="line">│   │   └── plugins</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.9.1</span><br><span class="line">│   │                   └── cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">│   ├── coreos</span><br><span class="line">│   │   └── etcd</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v3.4.13</span><br><span class="line">│   │                   └── etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">│   ├── k8sli</span><br><span class="line">│   │   └── kubernetes</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v1.21.3-patch-1.0</span><br><span class="line">│   │                   └── kubeadm-linux-amd64</span><br><span class="line">│   ├── kubernetes-sigs</span><br><span class="line">│   │   └── cri-tools</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v1.21.0</span><br><span class="line">│   │                   └── crictl-v1.21.0-linux-amd64.tar.gz</span><br><span class="line">│   └── projectcalico</span><br><span class="line">│       ├── calico</span><br><span class="line">│       │   └── archive</span><br><span class="line">│       │       └── v3.18.4.tar.gz</span><br><span class="line">│       └── calicoctl</span><br><span class="line">│           └── releases</span><br><span class="line">│               └── download</span><br><span class="line">│                   └── v3.18.4</span><br><span class="line">│                       └── calicoctl-linux-amd64</span><br><span class="line">└── storage.googleapis.com</span><br><span class="line">    └── kubernetes-release</span><br><span class="line">        └── release</span><br><span class="line">            └── v1.21.3</span><br><span class="line">                └── bin</span><br><span class="line">                    └── linux</span><br><span class="line">                        └── amd64</span><br><span class="line">                            ├── kubeadm</span><br><span class="line">                            ├── kubectl</span><br><span class="line">                            └── kubelet</span><br></pre></td></tr></table></figure><h3 id="kubespray-images"><a href="#kubespray-images" class="headerlink" title="kubespray-images"></a>kubespray-images</h3><p>我们同样将 kubespray 部署所需要的组件镜像构建在一个名为 kubespray-images 的镜像当中：</p><ul><li>镜像列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">library/calico-cni:v3.18.4</span><br><span class="line">library/calico-kube-controllers:v3.18.4</span><br><span class="line">library/calico-node:v3.18.4</span><br><span class="line">library/calico-pod2daemon-flexvol:v3.18.4</span><br><span class="line">library/cluster-proportional-autoscaler-amd64:1.8.3</span><br><span class="line">library/coredns:v1.8.0</span><br><span class="line">library/flannel:v0.14.0-amd64</span><br><span class="line">library/kube-apiserver:v1.21.3</span><br><span class="line">library/kube-controller-manager:v1.21.3</span><br><span class="line">library/kube-proxy:v1.21.3</span><br><span class="line">library/kube-scheduler:v1.21.3</span><br><span class="line">library/nginx:1.19</span><br><span class="line">library/pause:3.3</span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><p>在 Dockerfile 里完成所有镜像的下载，并使用 《<a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a>》文中提到的骚操作，利用 registry 存储复用相同 layer 的特性，将 skopeo sync 下载的镜像转换成 registry 存储的结构。这样在部署的时候直接把这个 registry 存储目录挂载进 registry 容器的 <code>/var/lib/registry</code> 即可。特点是性能方面无论是构建和部署，都比常规使用 docker save 和 docker load 的方式要快至少 5 到 10 倍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.12 as images</span><br><span class="line">ARG SKOPEO_VERSION=v1.4.0</span><br><span class="line">ARG YQ_VERSION=v4.11.2</span><br><span class="line">RUN ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span><br><span class="line">    &amp;&amp; apk --no-cache add bash wget ca-certificates \</span><br><span class="line">    &amp;&amp; wget -q -k https://github.com/mikefarah/yq/releases/download/<span class="variable">$&#123;YQ_VERSION&#125;</span>/yq_linux_<span class="variable">$&#123;ARCH&#125;</span> -O /usr/<span class="built_in">local</span>/bin/yq \</span><br><span class="line">    &amp;&amp; wget -q -k https://github.com/k8sli/skopeo/releases/download/<span class="variable">$&#123;SKOPEO_VERSION&#125;</span>/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> -O /usr/<span class="built_in">local</span>/bin/skopeo \</span><br><span class="line">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/*</span><br><span class="line"></span><br><span class="line">WORKDIR /build</span><br><span class="line">COPY build/kubespray-images/*  /build/</span><br><span class="line">RUN ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span><br><span class="line">    &amp;&amp; IMAGE_ARCH=<span class="variable">$&#123;ARCH&#125;</span> bash build.sh</span><br><span class="line"></span><br><span class="line">FROM scratch</span><br><span class="line">COPY --from=images /build/docker /docker</span><br></pre></td></tr></table></figure><ul><li>images_origin.yaml 镜像配置文件</li></ul><p>考虑到有将镜像导入到已经存在的镜像仓库中的场景，这里我们需要修改一下镜像仓库的 repo。因为 <code>library</code> 这个 repo 在 harbor 中是默认自带的，在导入到 harbor 的过程中也不需要创建一些额外的 project ，所以将所有镜像的 repo 全部统一为 <code>library</code> 更通用一些。</p><p>这里用一个 yaml 配置文件来记录原镜像地址和 library 镜像的地址的对应关系。比如上游的 <code>k8s.gcr.io/kube-apiserver</code> 映射为 <code>library/kube-apiserver</code>， <code>quay.io/calico/node</code> 映射为 <code>library/calico-node</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># kubeadm core images</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-apiserver</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/kube-apiserver</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-controller-manager</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/kube-controller-manager</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-proxy</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/kube-proxy</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-scheduler</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/kube-scheduler</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/coredns/coredns</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/coredns</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/pause</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/pause</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubernetes addons</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/dns/k8s-dns-node-cache</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/k8s-dns-node-cache</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/cluster-proportional-autoscaler-amd64</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/cpa/cluster-proportional-autoscaler-arm64</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/cluster-proportional-autoscaler-arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network plugin</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/cni</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-cni</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/node</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-node</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/kube-controllers</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-kube-controllers</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/pod2daemon-flexvol</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-pod2daemon-flexvol</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/typha</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-typha</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/coreos/flannel</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/flannel</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx for daemonset and offline</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">docker.io/library/nginx</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/nginx</span></span><br></pre></td></tr></table></figure><h3 id="kubeplay-1"><a href="#kubeplay-1" class="headerlink" title="kubeplay"></a>kubeplay</h3><p>kubeplay 部署的代码主要是由一些 shell 脚本和配置文件构成，用于完成 nginx 服务和 registry 服务的部署，以及最后调用 kubespray 来完成集群部署。</p><ul><li>代码结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubeplay/</span><br><span class="line">├── Dockerfile          <span class="comment"># 构建完整安装包的 Dockerfile</span></span><br><span class="line">├── compose.yaml        <span class="comment"># compose 启动配置 yaml 文件</span></span><br><span class="line">├── config</span><br><span class="line">│   ├── compose</span><br><span class="line">│   │   └── nginx.conf  <span class="comment"># nginx 配置文件</span></span><br><span class="line">│   └── rootCA.cnf      <span class="comment"># 生成镜像仓库证书用到的 openssl 配置文件</span></span><br><span class="line">├── config-sample.yaml  <span class="comment"># 主配置文件</span></span><br><span class="line">├── install.sh          <span class="comment"># 安装操作然后</span></span><br><span class="line">└── library             <span class="comment"># 一些 shell 函数库</span></span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest as downloader</span><br><span class="line"><span class="keyword">ARG</span> SKOPEO_VERSION=v1.<span class="number">4.0</span></span><br><span class="line"><span class="keyword">ARG</span> YQ_VERSION=v4.<span class="number">11.2</span></span><br><span class="line"><span class="keyword">ARG</span> NERDCTL_VERSION=<span class="number">0.11</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ARG</span> NGINX_VERSION=<span class="number">1.20</span>-alpine</span><br><span class="line"><span class="keyword">ARG</span> RERGISRRY_VERSION=<span class="number">2.7</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">ARG</span> KUBESPRAY_VERSION=latest</span><br><span class="line"><span class="keyword">ARG</span> KUBESPRAY_IMAGE=ghcr.io/k8sli/kubespray</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载部署时需要的工具，如 yq、skopeo、nerdctl-fullsss</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /tools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk --no-cache add wget ca-certificates \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -k https://github.com/mikefarah/yq/releases/download/<span class="variable">$&#123;YQ_VERSION&#125;</span>/yq_linux_<span class="variable">$&#123;ARCH&#125;</span>  -O /tools/yq-linux-<span class="variable">$&#123;ARCH&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -k https://github.com/k8sli/skopeo/releases/download/v1.4.0/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> -O /tools/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -k https://github.com/containerd/nerdctl/releases/download/v<span class="variable">$&#123;NERDCTL_VERSION&#125;</span>/nerdctl-full-<span class="variable">$&#123;NERDCTL_VERSION&#125;</span>-linux-<span class="variable">$&#123;ARCH&#125;</span>.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /tools/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ln -s /tools/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> /usr/bin/skopeo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一些镜像，如 nginx、registry、kubespray</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /images</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag nginx:<span class="variable">$&#123;NGINX_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://docker.io/library/nginx:<span class="variable">$&#123;NGINX_VERSION&#125;</span> docker-archive:nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag registry:<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://docker.io/library/registry:<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span> docker-archive:registry-<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span>.tar \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag kubespray:<span class="variable">$&#123;KUBESPRAY_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://<span class="variable">$&#123;KUBESPRAY_IMAGE&#125;</span>:<span class="variable">$&#123;KUBESPRAY_VERSION&#125;</span> docker-archive:kubespray-<span class="variable">$&#123;KUBESPRAY_VERSION&#125;</span>.tar</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"> <span class="comment"># 将其它模块中的内容复制到 scratch 镜像中，构建的时候导出为 local 方式</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=downloader /tools /resources/nginx/tools</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=downloader /images /resources/images</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=<span class="variable">$&#123;OS_PACKAGES_IMAGE&#125;</span>:<span class="variable">$&#123;OS_PACKAGE_REPO_TAG&#125;</span> / /resources/nginx</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=<span class="variable">$&#123;KUBESPRAY_FILES_IMAGE&#125;</span>:<span class="variable">$&#123;KUBESPRAY_REPO_TAG&#125;</span> / /resources/nginx</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=<span class="variable">$&#123;KUBESPRAY_IMAGES_IMAGE&#125;</span>:<span class="variable">$&#123;KUBESPRAY_REPO_TAG&#125;</span> / /resources/registry</span></span><br></pre></td></tr></table></figure><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>由于最终的构建涉及多个模块和 repo，其流程比较复杂，详细的代码可参考源码 <a href="https://github.com/k8sli/kubeplay/blob/main/.github/workflows/build.yaml" target="_blank" rel="noopener">build.yaml</a> ，在这里只讲几个关键的部分</p><ul><li>checkout repo，将 kubespray 和 os-packages repo clone 到工作目录</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-package:</span></span><br><span class="line">    <span class="comment"># 以 tag 的事件触发构建流水线</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">startsWith(github.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># fetch all git repo tag for define image tag</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">kubespray</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">kubespray</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;/kubespray</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">os-packages</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">os-packages</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;/os-packages</span></span><br></pre></td></tr></table></figure><ul><li>获取 kubespray 和 os-packages 的 repo tag，根据它来确定 os-packages, kubespray-files, kubespray-images 这个三个镜像的 tag，并生成一个 All in One 的 Dockerfile 用于完成后续安装包的构建。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一些组件的版本和变量传递给 Dockerfile</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">for</span> <span class="string">build</span> <span class="string">images</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">git</span> <span class="string">describe</span> <span class="string">--tags</span> <span class="string">--always</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/IMAGE_TAG=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">    <span class="string">cd</span> <span class="string">kubespray</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">describe</span> <span class="string">--tags</span> <span class="string">--always</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/KUBESPRAY_VERSION=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">..</span></span><br><span class="line">    <span class="string">cd</span> <span class="string">os-packages</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">describe</span> <span class="string">--tags</span> <span class="string">--always</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/OS_PACKAGE_REPO_TAG=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">..</span></span><br><span class="line">    <span class="string">cp</span> <span class="string">-rf</span> <span class="string">kubespray/config</span> <span class="string">config/kubespray</span> <span class="string">&amp;&amp;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">kubespray</span> <span class="string">os-packages</span></span><br><span class="line"></span><br><span class="line">    <span class="string">source</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">""</span> <span class="string">&gt;&gt;</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">"COPY --from=$&#123;OS_PACKAGES_IMAGE&#125;:$&#123;OS_PACKAGE_REPO_TAG&#125; / /resources/nginx"</span> <span class="string">&gt;&gt;</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">"COPY --from=$&#123;KUBESPRAY_FILES_IMAGE&#125;:$&#123;KUBESPRAY_VERSION&#125; / /resources/nginx"</span> <span class="string">&gt;&gt;</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">"COPY --from=$&#123;KUBESPRAY_IMAGES_IMAGE&#125;:$&#123;KUBESPRAY_VERSION&#125; / /resources/registry"</span> <span class="string">&gt;&gt;</span> <span class="string">Dockerfile</span></span><br><span class="line"></span><br><span class="line">    <span class="string">sed</span> <span class="string">-n</span> <span class="string">'s|image: nginx:|NGINX_VERSION=|p'</span> <span class="string">compose.yaml</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">' '</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">sed</span> <span class="string">-n</span> <span class="string">'s|image: registry:|RERGISRRY_VERSION=|p'</span> <span class="string">compose.yaml</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">' '</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>outputs: type=local,dest=./</code> 构建镜像到本地目录而非 push 到 registry</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">kubeplay</span> <span class="string">image</span> <span class="string">to</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">docker/build-push-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">platforms:</span> <span class="string">linux/amd64,linux/arm64</span></span><br><span class="line">    <span class="attr">build-args:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">NGINX_VERSION=$&#123;&#123;</span> <span class="string">env.NGINX_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">RERGISRRY_VERSION=$&#123;&#123;</span> <span class="string">env.RERGISRRY_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">KUBESPRAY_IMAGE=$&#123;&#123;</span> <span class="string">env.KUBESPRAY_IMAGE</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">KUBESPRAY_VERSION=$&#123;&#123;</span> <span class="string">env.KUBESPRAY_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">outputs:</span> <span class="string">type=local,dest=./</span></span><br></pre></td></tr></table></figure><ul><li>打包并上传安装包到 GitHub release 存储</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">for</span> <span class="string">upload</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">rm</span> <span class="string">-rf</span> <span class="string">linux_&#123;amd64,arm64&#125;/&#123;Dockerfile,LICENSE&#125;</span></span><br><span class="line">    <span class="string">mv</span> <span class="string">linux_amd64</span> <span class="string">kubeplay</span></span><br><span class="line">    <span class="string">tar</span> <span class="string">-I</span> <span class="string">pigz</span> <span class="string">-cf</span> <span class="string">kubeplay-$&#123;IMAGE_TAG&#125;-linux-amd64.tar.gz</span> <span class="string">kubeplay</span> <span class="string">--remove-files</span></span><br><span class="line">    <span class="string">mv</span> <span class="string">linux_arm64</span> <span class="string">kubeplay</span></span><br><span class="line">    <span class="string">tar</span> <span class="string">-I</span> <span class="string">pigz</span> <span class="string">-cf</span> <span class="string">kubeplay-$&#123;IMAGE_TAG&#125;-linux-arm64.tar.gz</span> <span class="string">kubeplay</span> <span class="string">--remove-files</span></span><br><span class="line">    <span class="string">sha256sum</span> <span class="string">kubeplay-$&#123;IMAGE_TAG&#125;-linux-&#123;amd64,arm64&#125;.tar.gz</span> <span class="string">&gt;</span> <span class="string">sha256sum.txt</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span> <span class="string">and</span> <span class="string">upload</span> <span class="string">packages</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">files:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">sha256sum.txt</span></span><br><span class="line">      <span class="string">kubeplay-$&#123;&#123;</span> <span class="string">env.IMAGE_TAG</span> <span class="string">&#125;&#125;-linux-amd64.tar.gz</span></span><br><span class="line">      <span class="string">kubeplay-$&#123;&#123;</span> <span class="string">env.IMAGE_TAG</span> <span class="string">&#125;&#125;-linux-arm64.tar.gz</span></span><br></pre></td></tr></table></figure><p>由此一个完整的离线安装包就构建完成了，接下来再讲一下安装流程</p><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>在 <a href="https://github.com/k8sli/kubeplay/releases" target="_blank" rel="noopener">GitHub release 页面</a> 将我们的离线安装包下载到本地，需要根据 CPU 架构的类型选择相应的安装包。</p><p><img src="https://p.k8s.li/2021-08-24-offline-deploy-k8s-1.png" alt="image"></p><p>下载完成之后再将安装包通过 scp 或者其他方式上传到内网的部署节点上，部署的文档可参考 <a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">README</a> 。过程十分简单：只需要填写好 <code>config.yaml</code> 配置文件然后执行 <code>bash install.sh</code> 即可完成 K8s 集群的一键部署。</p><p>下面从源码而非 README 文档的角度来讲一下部署流程的实现细节</p><h3 id="安装包结构"><a href="#安装包结构" class="headerlink" title="安装包结构"></a>安装包结构</h3><ul><li>配置文件 <code>config.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx 端口和 registry 域名配置参数</span></span><br><span class="line"><span class="attr">compose:</span></span><br><span class="line">  <span class="comment"># Compose bootstrap node ip, default is local internal ip</span></span><br><span class="line">  <span class="attr">internal_ip:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.25</span></span><br><span class="line">  <span class="comment"># Nginx http server bind port for download files and packages</span></span><br><span class="line">  <span class="attr">nginx_http_port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment"># Registry domain for CRI runtime download images</span></span><br><span class="line">  <span class="attr">registry_domain:</span> <span class="string">kube.registry.local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubespray 参数</span></span><br><span class="line"><span class="attr">kubespray:</span></span><br><span class="line">  <span class="comment"># Kubernetes version by default, only support v1.20.6</span></span><br><span class="line">  <span class="attr">kube_version:</span> <span class="string">v1.21.3</span></span><br><span class="line">  <span class="comment"># For deploy HA cluster you must configure a external apiserver access ip</span></span><br><span class="line">  <span class="attr">external_apiserver_access_ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="comment"># Set network plugin to calico with vxlan mode by default</span></span><br><span class="line">  <span class="attr">kube_network_plugin:</span> <span class="string">calico</span></span><br><span class="line">  <span class="comment">#Container runtime, only support containerd if offline deploy</span></span><br><span class="line">  <span class="attr">container_manager:</span> <span class="string">containerd</span></span><br><span class="line">  <span class="comment"># Now only support host if use containerd as CRI runtime</span></span><br><span class="line">  <span class="attr">etcd_deployment_type:</span> <span class="string">host</span></span><br><span class="line">  <span class="comment"># Settings for etcd event server</span></span><br><span class="line">  <span class="attr">etcd_events_cluster_setup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">etcd_events_cluster_enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群节点 ssh 登录 inventory 配置</span></span><br><span class="line"><span class="comment"># Cluster nodes inventory info</span></span><br><span class="line"><span class="attr">inventory:</span></span><br><span class="line">  <span class="attr">all:</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">ansible_port:</span> <span class="number">22</span></span><br><span class="line">      <span class="attr">ansible_user:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">ansible_ssh_pass:</span> <span class="string">Password</span></span><br><span class="line">      <span class="comment"># ansible_ssh_private_key_file: /kubespray/config/id_rsa</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">      <span class="attr">node1:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.21</span></span><br><span class="line">      <span class="attr">node2:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.22</span></span><br><span class="line">      <span class="attr">node3:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.23</span></span><br><span class="line">      <span class="attr">node4:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.24</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="attr">kube_control_plane:</span></span><br><span class="line">        <span class="attr">hosts:</span></span><br><span class="line">          <span class="attr">node1:</span></span><br><span class="line">          <span class="attr">node2:</span></span><br><span class="line">          <span class="attr">node3:</span></span><br><span class="line">      <span class="attr">kube_node:</span></span><br><span class="line">        <span class="attr">hosts:</span></span><br><span class="line">          <span class="attr">node1:</span></span><br><span class="line">          <span class="attr">node2:</span></span><br><span class="line">          <span class="attr">node3:</span></span><br><span class="line">          <span class="attr">node4:</span></span><br><span class="line">      <span class="attr">etcd:</span></span><br><span class="line">        <span class="attr">hosts:</span></span><br><span class="line">          <span class="attr">node1:</span></span><br><span class="line">          <span class="attr">node2:</span></span><br><span class="line">          <span class="attr">node3:</span></span><br><span class="line">      <span class="attr">k8s_cluster:</span></span><br><span class="line">        <span class="attr">children:</span></span><br><span class="line">          <span class="attr">kube_control_plane:</span></span><br><span class="line">          <span class="attr">kube_node:</span></span><br><span class="line">      <span class="attr">gpu:</span></span><br><span class="line">        <span class="attr">hosts:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="attr">calico_rr:</span></span><br><span class="line">        <span class="attr">hosts:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些默认的配置，一般情况下无需修改</span></span><br><span class="line"><span class="comment">### Default parameters ###</span></span><br><span class="line"><span class="comment">## This filed not need config, will auto update,</span></span><br><span class="line"><span class="comment">## if no special requirement, do not modify these parameters.</span></span><br><span class="line"><span class="attr">default:</span></span><br><span class="line">  <span class="comment"># NTP server ip address or domain, default is internal_ip</span></span><br><span class="line">  <span class="attr">ntp_server:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">internal_ip</span></span><br><span class="line">  <span class="comment"># Registry ip address, default is internal_ip</span></span><br><span class="line">  <span class="attr">registry_ip:</span> <span class="string">internal_ip</span></span><br><span class="line">  <span class="comment"># Offline resource url for download files, default is internal_ip:nginx_http_port</span></span><br><span class="line">  <span class="attr">offline_resources_url:</span> <span class="string">internal_ip:nginx_http_port</span></span><br><span class="line">  <span class="comment"># Use nginx and registry provide all offline resources</span></span><br><span class="line">  <span class="attr">offline_resources_enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Image repo in registry</span></span><br><span class="line">  <span class="attr">image_repository:</span> <span class="string">library</span></span><br><span class="line">  <span class="comment"># Kubespray container image for deploy user cluster or scale</span></span><br><span class="line">  <span class="attr">kubespray_image:</span> <span class="string">"kubespray"</span></span><br><span class="line">  <span class="comment"># Auto generate self-signed certificate for registry domain</span></span><br><span class="line">  <span class="attr">generate_domain_crt:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># For nodes pull image, use 443 as default</span></span><br><span class="line">  <span class="attr">registry_https_port:</span> <span class="number">443</span></span><br><span class="line">  <span class="comment"># For push image to this registry, use 5000 as default, and only bind at 127.0.0.1</span></span><br><span class="line">  <span class="attr">registry_push_port:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment"># Set false to disable download all container images on all nodes</span></span><br><span class="line">  <span class="attr">download_container:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>安装包目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">kubeplay/</span><br><span class="line">.</span><br><span class="line">├── compose.yaml                 <span class="comment"># compose 配置文件</span></span><br><span class="line">├── config</span><br><span class="line">│   ├── compose</span><br><span class="line">│   │   └── nginx.conf           <span class="comment"># nginx 配置文件</span></span><br><span class="line">│   ├── kubespray</span><br><span class="line">│   │   ├── env.yml</span><br><span class="line">│   │   ├── group_vars           <span class="comment"># kubespray group_vars  配置文件</span></span><br><span class="line">│   │   └── inventory.ini</span><br><span class="line">│   └── rootCA.cnf               <span class="comment"># openssl 配置文件</span></span><br><span class="line">├── config-sample.yaml           <span class="comment"># 主配置文件</span></span><br><span class="line">├── install.sh                   <span class="comment"># 安装包入口脚本</span></span><br><span class="line">├── library</span><br><span class="line">└── resources                    <span class="comment"># 所有离线资源</span></span><br><span class="line">    ├── images</span><br><span class="line">    │   ├── kubespray-v2.16.tar  <span class="comment"># kubespray 镜像</span></span><br><span class="line">    │   ├── nginx-1.20-alpine.tar<span class="comment"># nginx 镜像</span></span><br><span class="line">    │   └── registry-2.7.1.tar   <span class="comment"># registry 镜像</span></span><br><span class="line">    ├── nginx                    <span class="comment"># rpm/deb 包以及一些二进制文件</span></span><br><span class="line">    │   ├── centos               <span class="comment"># centos rpm 包</span></span><br><span class="line">    │   ├── debian               <span class="comment"># debian deb 包</span></span><br><span class="line">    │   ├── files                <span class="comment"># 一些二进制文件</span></span><br><span class="line">    │   ├── repos                <span class="comment"># yum/apt 配置文件</span></span><br><span class="line">    │   ├── tools                <span class="comment"># 一些部署时依赖的工具</span></span><br><span class="line">    │   └── ubuntu               <span class="comment"># ubuntu deb 包</span></span><br><span class="line">    └── registry</span><br><span class="line">        └── docker               <span class="comment"># 组件镜像 registry 存储目录</span></span><br></pre></td></tr></table></figure><h3 id="compose-节点"><a href="#compose-节点" class="headerlink" title="compose 节点"></a>compose 节点</h3><p>需要单独划分出一个节点用户部署 nginx 和镜像仓库服务，并在该节点上运行 kubespray 来部署 K8s 集群。大致流程的代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deploy_compose</span></span>()&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$&#123;ID&#125;</span> <span class="keyword">in</span></span><br><span class="line">    Debian|debian)</span><br><span class="line">      system::debian::config_repo</span><br><span class="line">      ;;</span><br><span class="line">    CentOS|centos)</span><br><span class="line">      system::centos::disable_selinux</span><br><span class="line">      system::centos::config_repo</span><br><span class="line">      ;;</span><br><span class="line">    Ubuntu|ubuntu)</span><br><span class="line">      system::ubuntu::config_repo</span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      errorlog <span class="string">"Not support system: <span class="variable">$&#123;ID&#125;</span>"</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  system::disable_firewalld</span><br><span class="line">  system::install_pkgs</span><br><span class="line">  common::install_tools</span><br><span class="line">  common::rudder_config</span><br><span class="line">  common::update_hosts</span><br><span class="line">  common::generate_domain_certs</span><br><span class="line">  common::load_images</span><br><span class="line">  common::compose_up</span><br><span class="line">  common::health_check</span><br><span class="line">  system::install_chrony</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$&#123;INSTALL_TYPE&#125;</span> <span class="keyword">in</span></span><br><span class="line">    all)</span><br><span class="line">      deploy_compose</span><br><span class="line">      common::push_kubespray_image</span><br><span class="line">      common::run_kubespray <span class="string">"bash /kubespray/run.sh deploy-cluster"</span></span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      echowarn <span class="string">"unknow [TYPE] parameter: <span class="variable">$&#123;INSTALL_TYPE&#125;</span>"</span></span><br><span class="line">      common::usage</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><ul><li>首先初始化节点，关闭防火墙和 <code>SELinux</code></li><li>配置部署节点 yum/apt 离线源</li><li>安装一些部署依赖包，如 chrony、 libseccomp  等</li><li>安装一些工具如 yq, skopeo, kubectl 等</li><li>安装 nerdctl-full (containerd)</li><li>使用 nerdctl load -i 的方式导入 nginx, registry, kubespray 镜像</li><li>使用 yq 渲染配置文件，生成 kubespray 需要的 env 文件和 inventory 文件</li><li>生成镜像仓库域名证书并将自签证书添加到主机的 CA trust 信任当中</li><li>在 <code>/etc/hosts</code> 中添加镜像仓库域名 hosts 映射</li><li>使用 nerdctl compose 启动 nginx 和 registry 服务</li><li>部署时钟同步服务 chrony</li><li>检查各个服务的状态</li><li>最后使用 nerdctl run 启动 kubespray 容器来部署 k8s 集群</li></ul><h3 id="kubespray-3"><a href="#kubespray-3" class="headerlink" title="kubespray"></a>kubespray</h3><p>部署的流程上基本上和 kubespray 官方大体一致，只不过我们引入里分层部署的特性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deploy_cluster</span></span>()&#123;</span><br><span class="line">  touch <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span></span><br><span class="line">  STEPS=<span class="string">"00-default-ssh-config 01-cluster-bootstrap-os 02-cluster-etcd 03-cluster-kubernetes 04-cluster-network 05-cluster-apps"</span></span><br><span class="line">  <span class="keyword">for</span> step <span class="keyword">in</span> <span class="variable">$&#123;STEPS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! grep -q <span class="string">"<span class="variable">$&#123;step&#125;</span>"</span> <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span>; <span class="keyword">then</span></span><br><span class="line">      infolog <span class="string">"start deploy <span class="variable">$&#123;step&#125;</span>"</span></span><br><span class="line">      <span class="keyword">if</span> ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/playbooks/<span class="variable">$&#123;step&#125;</span>.yml; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;step&#125;</span> &gt;&gt; <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span></span><br><span class="line">        infolog <span class="string">"<span class="variable">$&#123;step&#125;</span> successfully installed"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        errorlog <span class="string">"<span class="variable">$&#123;step&#125;</span> installation failed"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      warnlog <span class="string">"<span class="variable">$&#123;step&#125;</span> is already installed, so skipped..."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置堡垒机 ssh 登录（可选）</li><li>配置节点 yum/apt 源为 nginx 服务提供的源</li><li>将自签的域名证书添加到主机的 CA trust 信任当中</li><li>在 <code>/etc/hosts</code> 中添加镜像仓库域名 hosts 映射</li><li>关闭防火墙，安装时钟同步服务，进行同步时钟</li><li>初始化集群节点，安装部署依赖</li><li>安装容器运行时，下载文件和组件镜像</li><li>部署 etcd 集群</li><li>部署 K8s 集群</li><li>部署 CNI 插件</li><li>安装一些额外的 addon 组件如 (coredns)</li></ul><p>至此整个打包和部署流程就完毕了，下面再讲几个打包/部署常见的问题</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="kubeadm-证书"><a href="#kubeadm-证书" class="headerlink" title="kubeadm 证书"></a>kubeadm 证书</h3><p>通过修改 kubeadm 源码的方式将证书续命到 10 年，开启 <code>kubeadm_patch_enabled</code> 参数部署时就将 kubeadm 替换为修改后的 kubeadm。关于 kubeadm 的修改和构建和参考我之前写过的《<a href="https://blog.k8s.li/build-k8s-binary-by-github-actions.html">使用 GitHub Actions 编译 kubernetes 组件</a>》。</p><ul><li><a href="https://github.com/k8sli/kubespray/blob/main/roles/cluster/download/tasks/main.yml" target="_blank" rel="noopener">roles/cluster/download/tasks/main.yml</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Relpace</span> <span class="string">kubeadm</span> <span class="string">binary</span> <span class="string">file</span> <span class="string">as</span> <span class="string">patched</span> <span class="string">version</span></span><br><span class="line">  <span class="attr">get_url:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">"<span class="template-variable">&#123;&#123; patched_kubeadm_download_url &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">"<span class="template-variable">&#123;&#123; bin_dir &#125;&#125;</span>/kubeadm"</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubeadm</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">kubeadm_patch_enabled</span> <span class="string">|</span> <span class="string">default(true)</span> <span class="string">|</span> <span class="string">bool</span></span><br></pre></td></tr></table></figure><h3 id="镜像缓存"><a href="#镜像缓存" class="headerlink" title="镜像缓存"></a>镜像缓存</h3><p>os-packages, kubespray-base, kubespray-files, kubespray-images 这四个镜像在构建的时候都会采用 md5 值的方式校验是否需要重新构建镜像，这样能够大大提升 CI 的执行效率，下面以 kubespray-base 这个镜像为例介绍其原理和实现：</p><ul><li>在构建镜像前会有一个 md5 计算和校验的步骤，将与该镜像紧密相关的文件内容进行汇总并生成 md5 值，并将这个值得以 label 的方式保存在镜像的元数据信息当中。如果该值与上个最新的镜像中的 md5 值相等，那么就不需要重新构建该镜像，只需要进行 retag 即可。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">for</span> <span class="string">build</span> <span class="string">images</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">git</span> <span class="string">describe</span> <span class="string">--tags</span> <span class="string">--always</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/IMAGE_TAG=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">git</span> <span class="string">branch</span> <span class="string">--show-current</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/BRANCH_NAME=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">git</span> <span class="string">branch</span> <span class="string">--show-current</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/master/latest/;s/main/latest/;s/^/IMAGE_TAG_BY_BRANCH=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">sed</span> <span class="string">-n</span> <span class="string">'s/^kube_version: /KUBE_VERSION=/p'</span> <span class="string">roles/kubespray-defaults/defaults/main.yaml</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">cat</span> <span class="string">build/kubespray-base/Dockerfile</span> <span class="string">requirements.txt</span> <span class="string">tests/requirements.txt</span> <span class="string">.github/workflows/build.yaml</span> <span class="string">\</span></span><br><span class="line">    <span class="string">|</span> <span class="string">md5sum</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\ -'</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/BASE_MD5=md5-/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">    <span class="string">source</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">if</span> <span class="string">skopeo</span> <span class="string">inspect</span> <span class="string">docker://$&#123;BASE_IMAGE_REPO&#125;:$&#123;BRANCH_NAME&#125;</span> <span class="string">&gt;</span> <span class="string">mainfest.json;</span> <span class="string">then</span></span><br><span class="line">      <span class="string">jq</span> <span class="string">-r</span> <span class="string">'.Labels.BASE_MD5'</span> <span class="string">mainfest.json</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/LATEST_BASE_MD5=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">else</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">'LATEST_BASE_MD5=null'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果当前 md5 的值与最新的 md5 值相等，就重新生成一个新的 Dockerfile 来进行镜像 retag 的操作。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Replace</span> <span class="string">Dockerfile</span> <span class="string">if</span> <span class="string">MD5</span> <span class="string">not</span> <span class="string">update</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_MD5</span> <span class="string">==</span> <span class="string">env.LATEST_BASE_MD5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">"FROM $<span class="template-variable">&#123;&#123; env.BASE_IMAGE_REPO &#125;&#125;</span>:$<span class="template-variable">&#123;&#123; env.BASE_MD5 &#125;&#125;</span>"</span> <span class="string">&gt;</span> <span class="string">build/kubespray-base/Dockerfile</span></span><br></pre></td></tr></table></figure><ul><li>构建镜像并将 md5 值作为 labels 填充到镜像的元数据信息当中。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">kubespray-base</span> <span class="string">images</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">docker/build-push-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">push:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event_name</span> <span class="string">!=</span> <span class="string">'pull_request'</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">build/kubespray-base/Dockerfile</span></span><br><span class="line">    <span class="attr">platforms:</span> <span class="string">linux/amd64,linux/arm64</span></span><br><span class="line">    <span class="attr">cache-from:</span> <span class="string">type=local,src=/tmp/.buildx-cache</span></span><br><span class="line">    <span class="attr">cache-to:</span> <span class="string">type=local,dest=/tmp/.buildx-cache-new</span></span><br><span class="line">    <span class="attr">build-args:</span> <span class="string">KUBE_VERSION=$&#123;&#123;</span> <span class="string">env.KUBE_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="string">BASE_MD5=$&#123;&#123;</span> <span class="string">env.BASE_MD5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_IMAGE_REPO</span> <span class="string">&#125;&#125;:$&#123;&#123;</span> <span class="string">env.IMAGE_TAG</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_IMAGE_REPO</span> <span class="string">&#125;&#125;:$&#123;&#123;</span> <span class="string">env.BASE_MD5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_IMAGE_REPO</span> <span class="string">&#125;&#125;:$&#123;&#123;</span> <span class="string">env.BRANCH_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_IMAGE_REPO</span> <span class="string">&#125;&#125;:$&#123;&#123;</span> <span class="string">env.IMAGE_TAG_BY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>使用这种方式的好处就在于在不需要构建镜像的时候能大幅度提升 CI 的运行效率。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://blog.k8s.li/pass-platform-release.html">云原生 PaaS 产品发布&amp;部署方案</a></li><li><a href="https://mp.weixin.qq.com/s/7hKkdBUXHFZt5q3KbpmU6Q" target="_blank" rel="noopener">政采云基于 sealer 的私有化业务交付实践</a></li><li><a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a></li><li><a href="https://blog.k8s.li/deploy-k8s-by-kubespray.html">使用 Kubespray 本地开发测试部署 kubernetes 集群</a></li><li><a href="https://blog.k8s.li/select-registry-images.html">什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</a></li><li><a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在企业私有云环境当中，出于对数据安全的考虑以及满足 &lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="k8s" scheme="https://blog.k8s.li/tags/k8s/"/>
    
      <category term="PaaS" scheme="https://blog.k8s.li/tags/PaaS/"/>
    
      <category term="toB" scheme="https://blog.k8s.li/tags/toB/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Actions 编译 kubernetes 组件</title>
    <link href="https://blog.k8s.li/build-k8s-binary-by-github-actions.html"/>
    <id>https://blog.k8s.li/build-k8s-binary-by-github-actions.html</id>
    <published>2021-08-25T16:00:00.000Z</published>
    <updated>2021-08-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 kubernetes 过程中由于某些需求往往要修改一下 k8s 官方的源码，然后重新编译才行。本文就以修改 kubeadm 生成证书为默认 10 年为例，来讲解如何使用 GitHub Actions 来编译和发布生成的二进制文件。</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h3 id="clone-repo"><a href="#clone-repo" class="headerlink" title="clone repo"></a>clone repo</h3><p>将 kubernetes 官方源码 fork 到自己的 repo 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/k8sli/kubernetes.git</span><br><span class="line">$ <span class="built_in">cd</span> kubernetes</span><br><span class="line">$ git remote add upstream https://github.com/kubernetes/kubernetes.git</span><br><span class="line">$ git fetch --all</span><br><span class="line">$ git checkout upstream/release-1.21</span><br><span class="line">$ git checkout -B kubeadm-1.21</span><br></pre></td></tr></table></figure><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><ul><li><code>.github/workflows/kubeadm.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">kubeadm</span> <span class="string">binary</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tag:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'v*'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="comment"># 这里我们选择以 tag 的方式惩触发 job 的运行</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">startsWith(github.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">kubeadm</span> <span class="string">binary</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># 运行 build/run.sh 构建脚本来编译相应平台上的二进制文件</span></span><br><span class="line">          <span class="string">build/run.sh</span> <span class="string">make</span> <span class="string">kubeadm</span> <span class="string">KUBE_BUILD_PLATFORMS=linux/amd64</span></span><br><span class="line">          <span class="string">build/run.sh</span> <span class="string">make</span> <span class="string">kubeadm</span> <span class="string">KUBE_BUILD_PLATFORMS=linux/arm64</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 构建好的二进制文件存放在 _output/dockerized/bin/ 中</span></span><br><span class="line">      <span class="comment"># 我们根据二进制目标文件的系统名称+CPU体系架构名称进行命名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">for</span> <span class="string">upload</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">_output/dockerized/bin/linux/amd64/kubeadm</span> <span class="string">kubeadm-linux-amd64</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">_output/dockerized/bin/linux/arm64/kubeadm</span> <span class="string">kubeadm-linux-arm64</span></span><br><span class="line">          <span class="string">sha256sum</span> <span class="string">kubeadm-linux-&#123;amd64,arm64&#125;</span> <span class="string">&gt;</span> <span class="string">sha256sum.txt</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 使用 softprops/action-gh-release 来将构建产物上传到 GitHub release 当中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span> <span class="string">and</span> <span class="string">upload</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">files:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">sha256sum.txt</span></span><br><span class="line">            <span class="string">kubeadm-linux-amd64</span></span><br><span class="line">            <span class="string">kubeadm-linux-arm64</span></span><br></pre></td></tr></table></figure><ul><li><code>build/run.sh</code></li></ul><blockquote><p>: Run a command in a build docker container. Common invocations:</p><ul><li><code>build/run.sh make</code>: Build just linux binaries in the container. Pass options and packages as necessary.</li><li><code>build/run.sh make cross</code>: Build all binaries for all platforms. To build only a specific platform, add <code>KUBE_BUILD_PLATFORMS=&lt;os&gt;/&lt;arch&gt;</code></li><li><code>build/run.sh make kubectl KUBE_BUILD_PLATFORMS=darwin/amd64</code>: Build the specific binary for the specific platform (<code>kubectl</code> and <code>darwin/amd64</code> respectively in this example)</li><li><code>build/run.sh make test</code>: Run all unit tests</li><li><code>build/run.sh make test-integration</code>: Run integration test</li><li><code>build/run.sh make test-cmd</code>: Run CLI tests</li></ul></blockquote><h3 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h3><ul><li><code>cmd/kubeadm/app/constants/constants.go</code></li></ul><p>找到 <code>CertificateValidity</code> 变量将它在 375 天后面加个 0，就将证书续命为 10 年了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// CertificateValidity defines the validity for all the signed certificates generated by kubeadm</span></span><br><span class="line">-CertificateValidity = time.Hour * <span class="number">24</span> * <span class="number">365</span></span><br><span class="line">+CertificateValidity = time.Hour * <span class="number">24</span> * <span class="number">3650</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// CACertAndKeyBaseName defines certificate authority base name</span></span><br><span class="line"> CACertAndKeyBaseName = <span class="string">"ca"</span></span><br></pre></td></tr></table></figure><ul><li><code>git diff</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/.github/workflows/kubeadm.yaml b/.github/workflows/kubeadm.yaml</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..376f37c0edf</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/.github/workflows/kubeadm.yaml</span><br><span class="line">@@ -0,0 +1,37 @@</span><br><span class="line">+---</span><br><span class="line">+name: Build kubeadm binary image</span><br><span class="line">+</span><br><span class="line">+on:</span><br><span class="line">+  push:</span><br><span class="line">+    tag:</span><br><span class="line">+      - <span class="string">'v*'</span></span><br><span class="line">+<span class="built_in">jobs</span>:</span><br><span class="line">+  build:</span><br><span class="line">+    runs-on: ubuntu-20.04</span><br><span class="line">+    <span class="keyword">if</span>: startsWith(github.ref, <span class="string">'refs/tags/'</span>)</span><br><span class="line">+    steps:</span><br><span class="line">+      - name: Checkout</span><br><span class="line">+        uses: actions/checkout@v2</span><br><span class="line">+</span><br><span class="line">+      - name: Build kubeadm binary</span><br><span class="line">+        shell: bash</span><br><span class="line">+        run: |</span><br><span class="line">+          build/run.sh make kubeadm KUBE_BUILD_PLATFORMS=linux/amd64</span><br><span class="line">+          build/run.sh make kubeadm KUBE_BUILD_PLATFORMS=linux/arm64</span><br><span class="line">+</span><br><span class="line">+      - name: Prepare <span class="keyword">for</span> upload</span><br><span class="line">+        shell: bash</span><br><span class="line">+        run: |</span><br><span class="line">+          mv _output/dockerized/bin/linux/amd64/kubeadm kubeadm-linux-amd64</span><br><span class="line">+          mv _output/dockerized/bin/linux/arm64/kubeadm kubeadm-linux-arm64</span><br><span class="line">+          sha256sum kubeadm-linux-&#123;amd64,arm64&#125; &gt; sha256sum.txt</span><br><span class="line">+</span><br><span class="line">+      - name: Release and upload packages</span><br><span class="line">+        uses: softprops/action-gh-release@v1</span><br><span class="line">+        env:</span><br><span class="line">+          GITHUB_TOKEN: <span class="variable">$&#123;&#123; secrets.GITHUB_TOKEN &#125;</span>&#125;</span><br><span class="line">+        with:</span><br><span class="line">+          files: |</span><br><span class="line">+            sha256sum.txt</span><br><span class="line">+            kubeadm-linux-amd64</span><br><span class="line">+            kubeadm-linux-arm64</span><br><span class="line">diff --git a/cmd/kubeadm/app/constants/constants.go b/cmd/kubeadm/app/constants/constants.go</span><br><span class="line">index aed3a713020..08a24d237f8 100644</span><br><span class="line">--- a/cmd/kubeadm/app/constants/constants.go</span><br><span class="line">+++ b/cmd/kubeadm/app/constants/constants.go</span><br><span class="line">@@ -46,7 +46,7 @@ const (</span><br><span class="line"> TempDirForKubeadm = <span class="string">"tmp"</span></span><br><span class="line"></span><br><span class="line"> // CertificateValidity defines the validity <span class="keyword">for</span> all the signed certificates generated by kubeadm</span><br><span class="line">-CertificateValidity = time.Hour * 24 * 365</span><br><span class="line">+CertificateValidity = time.Hour * 24 * 3650</span><br><span class="line"></span><br><span class="line"> // CACertAndKeyBaseName defines certificate authority base name</span><br><span class="line"> CACertAndKeyBaseName = <span class="string">"ca"</span></span><br></pre></td></tr></table></figure><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><p>在分支上完成修改之后，我们将这个修改 cherry-pick 到其他的 tag 上面去，下面以 v1.21.4 为例子：在 v1.21.4 tag 的基础之上将上述的修改 cherry-pick 过来，重新打上新的 tag。</p><ul><li>获取上述修改的 commit id</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ COMMIT_ID=$(git rev-parse HEAD)</span><br></pre></td></tr></table></figure><ul><li>checkout 到 v1.21.4 这个 tag 上</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout v1.21.4</span><br><span class="line">Note: checking out <span class="string">'v1.21.4'</span>.</span><br><span class="line"></span><br><span class="line">You are <span class="keyword">in</span> <span class="string">'detached HEAD'</span> state. You can look around, make experimental</span><br><span class="line">changes and commit them, and you can discard any commits you make <span class="keyword">in</span> this</span><br><span class="line">state without impacting any branches by performing another checkout.</span><br><span class="line"></span><br><span class="line">If you want to create a new branch to retain commits you create, you may</span><br><span class="line"><span class="keyword">do</span> so (now or later) by using -b with the checkout <span class="built_in">command</span> again. Example:</span><br><span class="line"></span><br><span class="line">HEAD is now at 3cce4a82b44 Release commit <span class="keyword">for</span> Kubernetes v1.21.4</span><br></pre></td></tr></table></figure><ul><li>将修改 cherry-pick 到当前 tag 上</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick <span class="variable">$COMMIT_ID</span></span><br><span class="line">[detached HEAD baadbe03458] Update kubeadm CertificateValidity time to ten years</span><br><span class="line"> Date: Tue Aug 24 16:32:49 2021 +0800</span><br><span class="line"> 2 files changed, 38 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 .github/workflows/kubeadm.yaml</span><br></pre></td></tr></table></figure><ul><li>重新打上新的 tag，如 <code>v1.21.4-patch-1.0</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.21.4-patch-1.0 -f</span><br><span class="line">Updated tag <span class="string">'v1.21.4-patch-1.0'</span> (was 70bcbd6de6c)</span><br></pre></td></tr></table></figure><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-1.png" alt="image-20210826020226785"></p><ul><li>将 tag push 到 repo 中触发 workflow</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags -f</span><br><span class="line">Enumerating objects: 17, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (17/17), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (9/9), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (10/10), 1.13 KiB | 192.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 10 (delta 7), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (7/7), completed with 7 <span class="built_in">local</span> objects.</span><br><span class="line">To github.com:k8sli/kubernetes.git</span><br><span class="line"> + c2a633e07ec...baadbe03458 v1.21.4-patch-1.0 -&gt; v1.21.4-patch-1.0 (forced update)</span><br></pre></td></tr></table></figure><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-2.png" alt="image-20210826020837194"></p><ul><li>整个构建过程大概需要 7 分钟左右，效率还是蛮高的。</li></ul><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-3.png" alt="image-20210826021451447"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面只展示了以一个 tag 为单位进行构建的流程，想要构建其他版本的 kubeadm ，可以按照同样的流程和方法来完成。其实写一个 shell 脚本来处理也是十分简单，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 commit ID</span></span><br><span class="line">: <span class="variable">$&#123;COMMIT:="48e4b4c7c62a84ab4ec363588721011b73ee77e6"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义需要重新编译的版本号</span></span><br><span class="line">: <span class="variable">$&#123;TAGS:="v1.22.1 v1.22.0 v1.21.4 v1.21.3 v1.20.10 v1.19.14 v1.18.10"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> <span class="variable">$&#123;TAGS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    git reset --hard <span class="variable">$&#123;tag&#125;</span></span><br><span class="line">    git cherry-pick <span class="variable">$&#123;COMMIT&#125;</span></span><br><span class="line">    git tag <span class="variable">$&#123;tag&#125;</span>-patch-1.0</span><br><span class="line">    git push origin <span class="variable">$&#123;tag&#125;</span>-patch-1.0</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-5.png" alt="image-20210827021756974"></p><p>使用 GitHub Actions 的好处就是能够为我们解决代码管理和产物管理，构建好的二进制文件存放在 GitHub release 当中，下载和使用起来十分方便，不用在自己搞一台单独的机器或者存储服务器，节省很多人力维护成本。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在使用 kubernetes
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="k8s" scheme="https://blog.k8s.li/tags/k8s/"/>
    
      <category term="GitHub" scheme="https://blog.k8s.li/tags/GitHub/"/>
    
  </entry>
  
</feed>
