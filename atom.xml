<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子</title>
  <icon>https://blog.k8s.li/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.k8s.li/"/>
  <updated>2021-05-29T16:00:00.000Z</updated>
  <id>https://blog.k8s.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021 五一假期环太湖骑行之旅</title>
    <link href="https://blog.k8s.li/taihu.html"/>
    <id>https://blog.k8s.li/taihu.html</id>
    <published>2021-05-29T16:00:00.000Z</published>
    <updated>2021-05-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>调休两天终于迎来了五天的五一假期，实际上仅仅放了一天假期，也有网友调侃到 <strong>人们 996 连续工作 12 天从而换取 5 天假期去纪念这个工人获得 8 小时工作制的节日</strong>。</p><p>春节的时候就地过年没有回家，独自一人在杭州呆了 7 天，这 7 天一直宅在家里看书和追番，甚至连小区的门都没出去过。为了不让宝贵的五一假期烂在家里，在 4 月初的时候就开始计划环太湖的骑行之旅。</p><p>记得上一次长远的骑行还是高考完的那个暑假，也是独自一人从家骑车去北京，来回用了五天时间。简单估计了一下从杭州骑行到太湖，然后环太湖骑行一周，总的路程大概 520 公里，也正好五天的时间。等到回来的时候如果身体吃不消再调休几天也没啥大碍。于是，一个环太湖骑行的计划慢慢在脑中酝酿了，那么开始回顾这段骑行之旅吧：</p><h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>山地车是去年刚来杭州时就买的，在闲鱼上花了 800 块钱买的 2012 款 GIANT 捷安特 ATX770-D，到现在也是有些年头了。上下班骑行用了一年多也没啥大毛病，这一年间就后轮塔基里的轴承坏了一次，自己买来工具拆开给轴承补上缺损的珠子并上好黄油密封就修好了。</p><p><img src="https://p.k8s.li/20210501_021308214_iOS.jpg" alt=""></p><p>在五月的最后两周一直在准备骑行的装备，把后轮的外胎换了一条新的，因为旧的磨损太严重了，中间部分基本磨平了，如果不换掉的话保不准这一路会爆胎。另外又准备了两条内胎以应对爆胎的情况。又买了一个二氧化碳充气泵和 4 瓶二氧化碳补气瓶，以及多功能扳手。将这一些维修工具全部放到了车架的三角包里面。</p><p>另外在此强烈推荐车架上挂的三角包。它的空间放下修车常用的工具和一条内胎绰绰有余，这样即便是一到两天的短途骑行也能带齐装备轻装上阵，唯一不足的就是要牺牲掉水壶位。</p><p>为了放下后座架的驼包，又花了三十多块钱买了后车架，将驼包固定在上面。驼包里面带的东西还蛮多的：几件换洗的衣服、雨衣和雨伞、充电宝、毛巾纸巾等。水没有带太多，在路上随便买着喝就行。</p><h2 id="出发篇"><a href="#出发篇" class="headerlink" title="出发篇"></a>出发篇</h2><p>出发前天晚上一直睡不着，脑子实在是太兴奋了，这种感觉就像是高中放寒暑假的前天晚上一样，终于可以痛快地放松一下了。五一当天早上 8 点起床的，本计划着 6 点起床出发的，因为早上凉快车少比较适合骑行。收拾一下装备下楼准备出发，离开小区没多久后就发现：我艹，保命头盔没带！这怎么能行，于是屁颠颠地返回家里拿头盔。虽然头盔是几十块钱的破烂货，但关键时刻还是能保小命一条滴，还是要戴上滴。</p><p>第一天准备先骑行到湖州，因为临近太湖的城市中，湖州是距离杭州最近的一个，正好可以把湖州当作环太湖骑行的出发点，最终再返回这里。从地图上看，杭州到太湖适合骑行的的最佳路线就是沿着笤（tiao）溪旁的公路直达湖州，我们这里暂定它条路为笤溪路。只要进入到这条沿溪公路基本上无需导航和地图就能到达湖州，而且这条路上的路绿灯特别少，车辆相对于国道和省道也少很多，路边有大片的绿化带树林可以遮阴，以及临近水边空气质量和湿度都十分安逸。</p><p><img src="https://p.k8s.li/20210501_031349626_iOS.jpg" alt=""></p><p><img src="https://p.k8s.li/20210501_040031464_iOS.jpg" alt=""></p><h2 id="Day-1-杭州-–-gt-湖州-–-gt-长兴"><a href="#Day-1-杭州-–-gt-湖州-–-gt-长兴" class="headerlink" title="Day 1 杭州 –&gt; 湖州 –&gt; 长兴"></a>Day 1 杭州 –&gt; 湖州 –&gt; 长兴</h2><p>大概上午九点左右就进入到笤溪路，当时随身携带的一瓶矿泉水也一口闷喝完了。后面一直沿着这条路骑行路两个小时依旧没有在路边找到任何一家超市，十分僵硬。只好看地图找到德清县的一个小乡镇，于是绕道这个这个小乡镇里买水和吃饭。中午吃完饭之后感觉实在是太热，扰扰头发现头发好长，大概有三个月没有理发 🥲，是我太懒了，平时很少在意这件事儿。这么热的天头发头顶着这么长也不是个好办法，于是在路边随便找路一家理发点剪短了头发。</p><ul><li>理完发之后已经中午十二点半了，应该找个地方稍作休息一下。于是还是返回到笤溪路，在路边的绿化带树林里找到路个合适的大石头。将随身携带的换洗衣服当作枕头，雨衣在石头上一摊就是个简易的小床了，躺着休息一个半小时再出发。</li></ul><p><img src="https://p.k8s.li/20210501_050737596_iOS.jpg" alt=""></p><ul><li>在笤溪路路边的绿化带树林里有特别多的大树被风吹断，心疼树树 🥺</li></ul><p><img src="https://p.k8s.li/20210501_064702113_iOS.jpg" alt=""></p><ul><li>到了下午五点左右到达湖州的太湖风景区，拍摄地点为湖滨路附近的公园</li></ul><p><img src="https://p.k8s.li/20210501_092945406_iOS.jpg" alt=""></p><p>在景区休息了半个多小时之后，天已经快黑了，原本准备当晚住在湖州，但发现附近五公里内的酒价格普遍在 3k～5k 之间。毕竟是临近太湖风景区，而且是五一黄金周，价格高的离谱可不是咱这种韭菜和低端人口能够享受的 🥲。于是在搜一下十公里外的城区，虽然价格能够接受。但要骑行十多公里，而且在城区骑行红绿灯特别多，十分浪费时间。第二天早上又得骑行十多公里返回环太湖公路，感觉来回二十多公里还不如往前面接着骑行，在远一点的地方找一个合适的酒店住下。于是在地图上发现长兴火车站距离太湖十分近，火车站附近肯定有酒店。于是接着找了距离环太湖路最近的酒店。距离当前地点二十公里左右，如果现在骑行的话，一小时左右应该就能骑到酒店。应该没问题，因为天已经快黑了，不再赶紧骑行的话将要夜间骑行，很不安全。</p><p>于是当时做了一个很蠢的决定，继续骑行，忘记了吃晚饭。本来午饭吃的就比较少，也没有及时补充能量，体力已经快到达了极限。于是在体力不堪的情况下又继续骑行了二十公里。到达长兴火车站附近后，距离酒店就不到两公里的路程了。令我意想不到的是，刚过火车站不久后，就出突然出现头晕恶心的不适。停下来歇息了半个小时才缓过来，以至于最后的两周里基本上是推着车子走了半个小时才到的酒店。到达酒店已经八点半了，已经快九个小时没吃东西了，感觉特别累、全身无力。</p><p>把车子推到房间里简单洗漱了一下，就去楼下的夜市吃点饭。点了一盘凉拌黄瓜和干锅包菜，没想到等了半个小时……</p><p>吃完饭后在超市买了几瓶水和水果，回到房间看了一集 <a href="">BBC：冰冻星球·如履薄冰</a> 纪录片就睡着了。</p><p><img src="https://p.k8s.li/20210501_141353000_iOS.png" alt=""></p><h2 id="Day-2-长兴-–-gt-无锡-–-gt-苏州"><a href="#Day-2-长兴-–-gt-无锡-–-gt-苏州" class="headerlink" title="Day 2 长兴 –&gt; 无锡 –&gt; 苏州"></a>Day 2 长兴 –&gt; 无锡 –&gt; 苏州</h2><p>第二天早上七点半起床，在楼下的早餐店吃早饭，也是酒店附赠的一顿早餐。在酒店们口发现了很多驴友的山地车和公路车，估计他们昨晚也是在这里休息的。吃完饭之后收拾东西出发，下一站是苏州，本想着要去无锡，但由于时间缘故还是不去无锡了，今天要骑行 150 多公里到达苏州的西山风景区。</p><p><img src="https://p.k8s.li/20210502_004340465_iOS.jpg" alt=""></p><p>刚刚出来酒店门口到达 302 国道后就发现今天天气十分不妙，逆风！骑行起来特别费劲，平均时速只能维持在 18公里/小时，只能奋力骑行了。中午的时候到达了宜兴的一个小镇，在那里吃了顿午饭，之后继续骑行到了无锡市的十八湾湿地公园，在公园里的一个湖边休息了一个小时候就继续骑行。到达无锡之后没有继续沿着太湖公路骑行，而是选择了最短的路线到达苏州西山风景区。</p><p><img src="https://p.k8s.li/20210502_010036044_iOS.jpg" alt=""></p><p>晚上到达西山风景区已经八点左右了，到达凤凰台景点所在的小岛之后，在景区里的一家饭店吃顿晚饭，一个人三菜一汤吃得特别饱。之后又继续骑行到西山风景区里面的一家民宿。在美团上订的价格是 108¥ 一个大床大间。</p><p><img src="https://p.k8s.li/20210502_110411190_iOS.jpg" alt=""></p><h2 id="Day-3-太湖风景区-–-gt-苏州城区"><a href="#Day-3-太湖风景区-–-gt-苏州城区" class="headerlink" title="Day 3 太湖风景区 –&gt; 苏州城区"></a>Day 3 太湖风景区 –&gt; 苏州城区</h2><p>早上七点半起床，将驼包从山地车上卸了下来放在了房间里。今天上午只在西山风景区玩儿，不需要带这些行李，这样在山里骑行起来也能放飞自我。</p><ul><li>去的第一个景点是林屋洞，价格是 50¥，在林屋洞山上的一座塔的内部拍摄太湖沿岸的风景</li></ul><p><img src="https://p.k8s.li/20210503_005522469_iOS.jpg" alt=""></p><p>上午的时候就在西山风景区沿着湖边骑行玩儿了一圈，退房之后也十二点多了，于是在附近的一家兰州拉面吃了顿蛋炒饭。</p><ul><li>随后又骑行到太湖周边休息一段时间</li></ul><p><img src="https://p.k8s.li/20210503_044026640_iOS.jpg" alt=""></p><p>下午继续骑行，三号号和四号这两晚定的民宿在平江历史街区附近。从西山风景区到那里大概有 65 公里的骑行路程。下午五点左右到达住的地方。价格是 512¥ 两晚，感觉还是比较贵的，而且是三人间，凑活住两晚吧。其实本人对和陌生人合住并不是很介意，还是能接受。在我大学刚毕业之后，也是住在公司附近的一家民宿。当时一个不到十五平米的房间里，两个上下铺的床，和四个人住一块。虽然十分拥挤也又很多不便，但价格十分便宜，每个月 300¥ 包所有费用，十分适合当时刚毕业手无分文的我。</p><ul><li>晚上的时候自己一个人去吃了顿海底捞火锅，总感觉在外面自己一个人吃饭十分尴尬 😅 。如今毕业也快两年了，这两年基本上是独自一个人生活的，这种独处的感觉也慢慢适应了，也越来越享受这种独处的生活了。</li></ul><p><img src="https://p.k8s.li/20210503_114832550_iOS.jpg" alt=""></p><ul><li>平江历史街区夜景</li></ul><p><img src="https://p.k8s.li/20210503_124849278_iOS.jpg" alt=""></p><ul><li>平江历史街区夜景</li></ul><p><img src="https://p.k8s.li/20210503_125244682_iOS.jpg" alt=""></p><h2 id="Day-4-苏州游玩"><a href="#Day-4-苏州游玩" class="headerlink" title="Day 4 苏州游玩"></a>Day 4 苏州游玩</h2><p>早上七点半就起床了，上午游玩的第一站是留园，预定的是早上 8 点到 9 点的门票，早上下起了丝丝细雨，感觉天气不太好。在留园逛完之后又去了狮子林，感觉这两个园子还可以，景区的人并不是特别多。</p><p><img src="https://p.k8s.li/20210504_010754779_iOS.jpg" alt=""></p><p>本想着下午去拙政园，但当天已经没有门票了，只能预定到五号上午的。于是下午就去了虎丘风景区。</p><p><img src="https://p.k8s.li/20210504_084847466_iOS.jpg" alt=""></p><ul><li>虎丘风景区附近</li></ul><p><img src="https://p.k8s.li/20210504_085354580_iOS.jpg" alt=""></p><p><img src="https://p.k8s.li/20210504_085413326_iOS.jpg" alt=""></p><h2 id="Day-5-苏州-–-gt-湖州"><a href="#Day-5-苏州-–-gt-湖州" class="headerlink" title="Day 5 苏州 –&gt; 湖州"></a>Day 5 苏州 –&gt; 湖州</h2><p>早上八点就出发去了拙政园，在里面逛的时间比较长，等到十点半的时候才从里面出来。</p><p><img src="https://p.k8s.li/20210505_010850949_iOS.jpg" alt=""></p><ul><li>感觉这棵树特别像人的手 🖐️ 🤔️</li></ul><p><img src="https://p.k8s.li/20210505_011052002_iOS.jpg" alt=""></p><p>逛完拙政园之后已经快十一点了，回到住的地方收拾完行李，在附近的一家素食餐厅吃了顿午饭。之后继续骑行，准备返回了，晚上准备住在湖州。</p><p><img src="https://p.k8s.li/20210505_082143685_iOS.jpg" alt=""></p><ul><li>下午五点半的时候到达湖州滨湖大道，再次来到了出发点，环太湖骑行总算顺利结束了，只剩下明天一天返回杭州的路程了。明天到家后再在家休息一天，因此给 TL 申请了两天年假，也很顺利滴批准了。</li></ul><p><img src="https://p.k8s.li/20210505_093503000_iOS.png" alt=""></p><ul><li>滨湖大道旁的公园，湖边夕阳西下的景色</li></ul><p><img src="https://p.k8s.li/20210505_095106128_iOS.jpg" alt=""></p><h2 id="Day-6-湖州-–-gt-杭州"><a href="#Day-6-湖州-–-gt-杭州" class="headerlink" title="Day 6 湖州 –&gt; 杭州"></a>Day 6 湖州 –&gt; 杭州</h2><p>最后一天就是从湖州返回杭州了，还是沿着原路返回，下午临近六点顺利到达杭州。</p><p>感觉这几天吃的太多了 😤</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>住宿</td><td>866</td></tr><tr><td>门票</td><td>295</td></tr><tr><td>食物</td><td>750</td></tr><tr><td>其他</td><td>182</td></tr><tr><td>总计</td><td>2093</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;调休两天终于迎来了五天的五一假期，实际上仅仅放了一天假期，
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.k8s.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="骑行" scheme="https://blog.k8s.li/tags/%E9%AA%91%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>使用 docker build 制作 yum/apt 离线源</title>
    <link href="https://blog.k8s.li/make-offline-mirrors.html"/>
    <id>https://blog.k8s.li/make-offline-mirrors.html</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2021-05-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="离线部署"><a href="#离线部署" class="headerlink" title="离线部署"></a>离线部署</h2><p>对于 PaaS toB 产品来讲，客户往往会要求产品的部署方案必须做到离线安装，即在部署时不能依赖任何在线的资源，比如安装一些 OS 软件包时依赖的 yum/apt 源；docker.io、k8s.gcr.io 、quay.io 上面的容器镜像；GitHub 上开源软件的二进制下载文件等。</p><p>作为平台部署工具的开发者，始终被离线部署这个难题困扰着。在线的容器镜像和二进制文件比较好解决，因为这些资源是与 OS 无关的，只要下载下来放到安装包里，部署的时候启动一个 HTTP 服务器和镜像仓库服务提供这些资源的下载即可。</p><p>但是对于 yum/apt 之类的软件来讲并不那么简单：</p><ul><li>首先由于各个包之间的依赖关系比较复杂，并不能将它们直接下载下来；</li><li>其次即便下载下来之后也无法直接通过 yum/apt 的方式安装指定的软件包，虽然也可以使用 scp 的方式将这些包复制到部署节点，通过 rpm 或 dpkg 的方式来安装上，但这样并不是很优雅，而且通用性能也不是很好；</li><li>最后需要适配的 Linux 发行版和包管理器种类也有多种，而且有些包的包名或者版本号在不同的包管理之间也相差甚大，无法做到统一管理。</li></ul><p>综上，将平台部署依赖的在线 yum/apt 之类的软件包资源制作成离线安装包是一件很棘手的事情。个人就这个问题折腾了一段时间，终于找到了一个比较合适的解决方案：即通过一个 YAML 配置文件来管理包，然后使用 Dockerfile 来构建成离线的 tar 包或者容器镜像。如果有类似需求的小伙伴，可以参考一下本方案。</p><h2 id="Docker-build"><a href="#Docker-build" class="headerlink" title="Docker build"></a>Docker build</h2><p>传统制作离线源的方式是找一台相应的 Linux 机器，在上面通过包管理器下载这些软件包，然后再创建这些软件包的 repo 索引文件。</p><p>可以看出这种方式十分不灵活，假如我想要制作 Debian 9 的 apt 离线源，我就需要一台 Debian 9 的机器。如果要适配多个 Linux 发行版就需要多个相应的 OS 机器。要管理和使用这么多种类的 OS 不是一件容易的事儿，而如今已经十分普遍使用的容器技术恰恰能帮助我们解决这类问题。比如我想运行一个 Debian9 的操作系统，我只需要运行一个 Debian 9 镜像的容器即可，而且不需要额外的管理成本，使用起来也十分地轻量。</p><p>日常工作中我们常使用容器来构建一些 Golang 写的后端组件，那么构建离线源是不是也可以这样做？实践证明确实可以，我们只需要为不同的 OS 和包管理器写一个相应的 Dockerfile 即可。使用 docker build 多阶段构建的特性，可以将多个 Dockerfile 合并成一个，然后最后使用 COPY –from 的方式将这个构建的产物复制到同一个镜像中，比如提供 HTTP 的 nginx 容器，或者使用 BuildKit 的特性将这些构建产物导出为 tar包 或者为本地目录。</p><h2 id="适配-OS"><a href="#适配-OS" class="headerlink" title="适配 OS"></a>适配 OS</h2><p>根据自己的 PaaS toB 从业经验可知，目前国内的私有云客户生产环境中使用的 OS 中， CentOS 应该是最多的，其次是 Ubuntu 和 Debian。至于 RedHat 则需要付费订阅才能使用，DockerHub 上更是没有免费可使用的镜像，因此本方案无法确保适用于 RedHat。产品方面 CentOS 需要的版本只有 7.9；Ubuntu 需要支持 18.04 和 20.04；Debian 需要支持 9 和 10。因为时间和精力有限，本方案支持的 Linux 发行版和相应的版本只有 CentOS 7, Debian 9/10, Ubuntu 18.04/20.04 这五个。如果要支持其他 OS 的离线源比如 OpenSUSE，也可以参考本方案编写一个 Dockerfile 文件来实现适配。</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>构建的过程十分简单，使用一个 YAML 格式的配置文件来管理不同的包管理器或 Linux 发行版安装不同的包，并在一个 Dockerfile 里完成所有的构建操作。实现源码在 <a href="https://github.com/muzi502/scripts/tree/master/build-packages-repo" target="_blank" rel="noopener">github.com/muzi502/scripts/build-packages-repo</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">build</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── Dockerfile.centos</span><br><span class="line">├── Dockerfile.debian</span><br><span class="line">├── Dockerfile.ubuntu</span><br><span class="line">└── packages.yaml</span><br></pre></td></tr></table></figure><h3 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h3><p>使用 docker build 的方式构建离线源大致可以分为如下几个步骤：</p><ul><li>在构建容器内配置 yum/apt 源，安装构建时需要工具；</li><li>生成系统内的 rpm/deb 包的列表和需要下载的包列表，解决一些软件包依赖的问题；</li><li>根据生成的包列表使用相应的包管理器工具下载需要的软件包；</li><li>生用相应的包管理器生成这些包的 index 文件，如 repodata 或 Packages.gz 文件；</li><li>将上述的构建产物 COPY 到同一个容器镜像里，比如 nginx ；也可以导出为 tar 包或目录；</li></ul><h3 id="packages-yaml"><a href="#packages-yaml" class="headerlink" title="packages.yaml"></a>packages.yaml</h3><p>这个文件用来管理不同的包管理器或者 Linux 发行版需要安装的软件包。根据不同的包管理器和发行版我们可以将这些包大致划分为 4 类。</p><ul><li><p>common：适用于一些所有包管理器中包名相同或者对版本无要求的包，比如 vim 、curl、wget 这类工具。一般情况下使用这些工具我们并不关心它的版本，并且这类包的包名在所有的包管理器中都是相同的，所以这类可以划分为公共包。</p></li><li><p>yum/apt/dnf：适用于不同的发行版使用相同的包管理器。比如 nfs 的包，在 yum 中包名为 nfs-utils 但在 apt 中为 nfs-common，这类软件包可以划分为一类。</p></li><li><p>OS：适用于一些该 OS 独有的包，比如安装一个 Ubuntu 中有但 Debian 中没有的包（比如 debian-builder 或 ubuntu-dev-tools）。</p></li><li><p>OS-发行版代号：这类包的版本和发行版代号绑定在一起，比如 <code>docker-ce=5:19.03.15~3-0~debian-stretch。</code></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wget</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tree</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lvm2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">yum:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfs-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yum-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">createrepo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">centos-release-gluster</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">epel-release</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apt:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfs-common</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apt-transport-https</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ca-certificates</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lsb-release</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">software-properties-common</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">aptitude</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dpkg-dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">centos:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">centos-release</span></span><br><span class="line"></span><br><span class="line"><span class="attr">debian:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">debian-builder</span></span><br><span class="line"></span><br><span class="line"><span class="attr">debian-buster:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">docker-ce=5:19.03.15~3-0~debian-buster</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ubuntu:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ubuntu-dev-tools</span></span><br></pre></td></tr></table></figure><p>在这里需要额外注意一下，在不同的包管理器之间指定包版本的方式也各不相同，比如在 yum 中如果要安装 19.03.15 版本的 docker-ce 包名为 <code>docker-ce-19.03.15</code>，而在 debian 中包名则为 <code>docker-ce=5:19.03.15~3-0~debian-stretch</code>。可以使用包管理器查看相同的一个包如 docker-ce 在不同的包管理器之前的差异，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos:]<span class="comment"># yum list docker-ce --showduplicates | grep 19.03.15</span></span><br><span class="line">docker-ce.x86_64            3:19.03.15-3.el7                    docker-ce-stable</span><br><span class="line"></span><br><span class="line">root@debian:/<span class="comment"># apt-cache policy docker-ce</span></span><br><span class="line">docker-ce:</span><br><span class="line">  Installed: (none)</span><br><span class="line">  Candidate: 5:19.03.15~3-0~debian-stretch</span><br><span class="line">  Version table:</span><br><span class="line">     5:19.03.15~3-0~debian-stretch 500</span><br><span class="line">        500 https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br></pre></td></tr></table></figure><p>这个版本号的问题在 kubespray 的源码中也是同样做了特殊处理，目前确实没有太好的方案来解决，只能手动维护这个版本号。</p><ul><li>roles/container-engine/docker/vars/redhat.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># https://docs.docker.com/engine/installation/linux/centos/#install-from-a-package</span></span><br><span class="line"><span class="comment"># https://download.docker.com/linux/centos/&lt;centos_version&gt;&gt;/x86_64/stable/Packages/</span></span><br><span class="line"><span class="comment"># or do 'yum --showduplicates list docker-engine'</span></span><br><span class="line"><span class="attr">docker_versioned_pkg:</span></span><br><span class="line">  <span class="attr">'latest':</span> <span class="string">docker-ce</span></span><br><span class="line">  <span class="attr">'18.09':</span> <span class="string">docker-ce-18.09.9-3.el7</span></span><br><span class="line">  <span class="attr">'19.03':</span> <span class="string">docker-ce-19.03.15-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'20.10':</span> <span class="string">docker-ce-20.10.5-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'stable':</span> <span class="string">docker-ce-19.03.15-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'edge':</span> <span class="string">docker-ce-19.03.15-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker_cli_versioned_pkg:</span></span><br><span class="line">  <span class="attr">'latest':</span> <span class="string">docker-ce-cli</span></span><br><span class="line">  <span class="attr">'18.09':</span> <span class="string">docker-ce-cli-18.09.9-3.el7</span></span><br><span class="line">  <span class="attr">'19.03':</span> <span class="string">docker-ce-cli-19.03.15-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'20.10':</span> <span class="string">docker-ce-cli-20.10.5-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker_package_info:</span></span><br><span class="line">  <span class="attr">enablerepo:</span> <span class="string">"docker-ce"</span></span><br><span class="line">  <span class="attr">pkgs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; containerd_versioned_pkg[containerd_version | string] &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_cli_versioned_pkg[docker_cli_version | string] &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_versioned_pkg[docker_version | string] &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><ul><li>roles/container-engine/docker/vars/ubuntu.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://download.docker.com/linux/ubuntu/</span></span><br><span class="line"><span class="attr">docker_versioned_pkg:</span></span><br><span class="line">  <span class="attr">'latest':</span> <span class="string">docker-ce</span></span><br><span class="line">  <span class="attr">'18.09':</span> <span class="string">docker-ce=5:18.09.9~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'19.03':</span> <span class="string">docker-ce=5:19.03.15~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'20.10':</span> <span class="string">docker-ce=5:20.10.5~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'stable':</span> <span class="string">docker-ce=5:19.03.15~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'edge':</span> <span class="string">docker-ce=5:19.03.15~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker_cli_versioned_pkg:</span></span><br><span class="line">  <span class="attr">'latest':</span> <span class="string">docker-ce-cli</span></span><br><span class="line">  <span class="attr">'18.09':</span> <span class="string">docker-ce-cli=5:18.09.9~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'19.03':</span> <span class="string">docker-ce-cli=5:19.03.15~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'20.10':</span> <span class="string">docker-ce-cli=5:20.10.5~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker_package_info:</span></span><br><span class="line">  <span class="attr">pkgs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; containerd_versioned_pkg[containerd_version | string] &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_cli_versioned_pkg[docker_cli_version | string] &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_versioned_pkg[docker_version | string] &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h3><p>介绍完上述的包配置文件之后，接下来我们就根据这个 packages.yml 配置文件使用 Dockerfile 构建这些包的离线源。以下是构建 CentOS 7 离线源的 Dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 centos 7.9 作为 base 构建镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7.9</span>.<span class="number">2009</span> as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 centos 的版本和处理器体系架构</span></span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=<span class="number">7</span></span><br><span class="line"><span class="keyword">ARG</span> ARCH=x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这里定义一些构建时需要的软件包</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_TOOLS=<span class="string">"yum-utils createrepo centos-release-gluster epel-release curl"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建工具和配置一些软件源 repo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -q -y <span class="variable">$BUILD_TOOLS</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum makecache &amp;&amp; yum update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安装 yq 和 jq 这两个工具来处理 packages.yaml 配置文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析 packages.yml 配置文件，生成所需要的 packages.list 文件</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /centos/<span class="variable">$OS_VERSION</span>/os/<span class="variable">$ARCH</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 yq 先将 YAML 文件转换成 json 格式的内容，再使用 jq 过滤出所需要的包，输出为一个列表</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.yum[],.centos[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rpm -qa &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 packages.list 中的软件包，并生成 repo 索引文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cat packages.list | xargs yumdownloader --resolve \</span></span><br><span class="line"><span class="bash">    &amp;&amp; createrepo -d .</span></span><br><span class="line"><span class="comment"># 将构建产物复制到一层空的镜像中，方便导出为 tar 包或目录的格式</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=centos7 /centos /centos</span></span><br></pre></td></tr></table></figure><p>在最后的一个 FROM 镜像中，这里指定的是 <code>scratch</code>，这是一个特殊的镜像名，它代表的是一个空的镜像 layer。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将构建产物复制到一层空的镜像中，方便导出为 tar 包或目录的格式</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=centos7 /centos /centos</span></span><br></pre></td></tr></table></figure><p>也可以直接将构建出来的产物放到 nginx 容器中，这样直接运行 nginx 容器就能提供 yum/apt 源的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx:1.19</span><br><span class="line">COPY --from=centos7 /centos /usr/share/nginx/html</span><br></pre></td></tr></table></figure><ul><li>如果要构建为 tar 包或者本地目录的方式，需要为 Docker 开启 <code>DOCKER_BUILDKIT=1</code> 这个特性</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建为本地目录</span></span><br><span class="line">root@debian: ~ <span class="comment"># DOCKER_BUILDKIT=1 docker build -o type=local,dest=$PWD -f Dockerfile.centos .</span></span><br><span class="line"><span class="comment"># 构建为 tar 包</span></span><br><span class="line">root@debian: ~ <span class="comment"># DOCKER_BUILDKIT=1 docker build -o type=tar,dest=$PWD/centos7.tar -f Dockerfile.centos .</span></span><br></pre></td></tr></table></figure><ul><li>构建日志如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[+] Building 30.9s (13/13) FINISHED</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                                                                                                            0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 109B                                                                                                                                            0.0s</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile.centos                                                                                                                  0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 979B                                                                                                                                         0.0s</span><br><span class="line"> =&gt; [internal] load metadata <span class="keyword">for</span> docker.io/library/centos:7.9.2009                                                                                                           2.6s</span><br><span class="line"> =&gt; [centos7 1/7] FROM docker.io/library/centos:7.9.2009@sha256:0f4ec88e21daf75124b8a9e5ca03c37a5e937e0e108a255d890492430789b60e                                             0.0s</span><br><span class="line"> =&gt; [internal] load build context                                                                                                                                            0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 818B                                                                                                                                            0.0s</span><br><span class="line"> =&gt; CACHED [centos7 2/7] RUN yum install -q -y yum-utils createrepo centos-release-gluster epel-release curl     &amp;&amp; yum-config-manager --add-repo https://download.docker.c  0.0s</span><br><span class="line"> =&gt; [centos7 3/7] WORKDIR /centos/7/os/x86_64                                                                                                                                0.0s</span><br><span class="line"> =&gt; [centos7 4/7] RUN curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64     &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq     &amp;&amp; curl   3.2s</span><br><span class="line"> =&gt; [centos7 5/7] COPY packages.yaml packages.yaml                                                                                                                           0.1s</span><br><span class="line"> =&gt; [centos7 6/7] RUN yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.yum[],.centos[]'</span> | sort -u &gt; packages.list     &amp;&amp; rpm -qa &gt;&gt; packages.list                                1.0s</span><br><span class="line"> =&gt; [centos7 7/7] RUN cat packages.list | xargs yumdownloader --resolve     &amp;&amp; createrepo -d .                                                                              21.6s</span><br><span class="line"> =&gt; [stage-1 1/1] COPY --from=centos7 /centos /centos                                                                                                                        0.5s</span><br><span class="line"> =&gt; exporting to client                                                                                                                                                      0.7s</span><br><span class="line"> =&gt; =&gt; copying files 301.37MB</span><br></pre></td></tr></table></figure><ul><li>构建产物如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/build <span class="comment"># tree centos</span></span><br><span class="line">centos</span><br><span class="line">└── 7</span><br><span class="line">    └── os</span><br><span class="line">        └── x86_64</span><br><span class="line">            ├── acl-2.2.51-15.el7.x86_64.rpm</span><br><span class="line">            ├── ansible-2.9.21-1.el7.noarch.rpm</span><br><span class="line">            ├── at-3.1.13-24.el7.x86_64.rpm</span><br><span class="line">            ├── attr-2.4.46-13.el7.x86_64.rpm</span><br><span class="line">            ├── audit-libs-2.8.5-4.el7.x86_64.rpm</span><br><span class="line">            ├── audit-libs-python-2.8.5-4.el7.x86_64.rpm</span><br><span class="line">            ├── avahi-libs-0.6.31-20.el7.x86_64.rpm</span><br><span class="line">            ├── basesystem-10.0-7.el7.centos.noarch.rpm</span><br><span class="line">            ├── bash-4.2.46-34.el7.x86_64.rpm</span><br><span class="line">            ……………………………………</span><br><span class="line">            ├── redhat-lsb-submod-security-4.1-27.el7.centos.1.x86_64.rpm</span><br><span class="line">            ├── repodata</span><br><span class="line">            │   ├── 28d2fe2d1dbd9b76d3e5385d42cf628ac9fc34d69e151edfe8d134fe6ac6a6d9-primary.xml.gz</span><br><span class="line">            │   ├── 5264ca1af13ec7c870f25b2a28edb3c2843556ca201d07ac681eb4af7a28b47c-primary.sqlite.bz2</span><br><span class="line">            │   ├── 591d9c2d5be714356e8db39f006d07073f0e1e024a4a811d5960d8e200a874fb-other.xml.gz</span><br><span class="line">            │   ├── c035d2112d55d23a72b6d006b9e86a2f67db78c0de45345e415884aa0782f40c-other.sqlite.bz2</span><br><span class="line">            │   ├── cd756169c3718d77201d08590c0613ebed80053f84a2db7acc719b5b9bca866f-filelists.xml.gz</span><br><span class="line">            │   ├── ed0c5a36b12cf1d4100f90b4825b93dac832e6e21f83b23ae9d9753842801cee-filelists.sqlite.bz2</span><br><span class="line">            │   └── repomd.xml</span><br><span class="line">            ├── yum-utils-1.1.31-54.el7_8.noarch.rpm</span><br><span class="line">            └── zlib-1.2.7-19.el7_9.x86_64.rpm</span><br><span class="line"></span><br><span class="line">4 directories, 368 files</span><br></pre></td></tr></table></figure><h3 id="Debian9"><a href="#Debian9" class="headerlink" title="Debian9"></a>Debian9</h3><p>下面是 Debian9 构建 Dockerfile，流程上和 CentOS 相差不多，只是包管理器的使用方式不太相同而已，这里就不再做详细的源码介绍。</p><ul><li>Dockerfile.debian</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch-slim as stretch</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=stretch</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /debian/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.apt[],.debian[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /debian/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /debian /debian</span></span><br></pre></td></tr></table></figure><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>Ubuntu 离线源的制作步骤和 Debian 差不太多，只需要简单修改一下 Debian 的 Dockerfile 应该就 OK ，比如 <code>&#39;s/debian/ubuntu/g&#39;</code> ，毕竟 Debian 是 Ubuntu 的爸爸嘛～～，所以 apt 使用的方式和包名几乎一模一样，这里就不再赘述了。</p><h3 id="All-in-Oone"><a href="#All-in-Oone" class="headerlink" title="All-in-Oone"></a>All-in-Oone</h3><p>将上述几个 Linux 发行版的 Dockerfile 整合成一个，这样只需要一个 docker build 命令就能构建出所需要的所有 OS 的离线源了。</p><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 7.9 2009</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7.9</span>.<span class="number">2009</span> as centos7</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=<span class="number">7</span></span><br><span class="line"><span class="keyword">ARG</span> ARCH=x86_64</span><br><span class="line"><span class="keyword">ARG</span> BUILD_TOOLS=<span class="string">"yum-utils createrepo centos-release-gluster epel-release curl"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -q -y <span class="variable">$BUILD_TOOLS</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum makecache &amp;&amp; yum update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /centos/<span class="variable">$OS_VERSION</span>/os/<span class="variable">$ARCH</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.yum[],.centos[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rpm -qa &gt;&gt; packages.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cat packages.list | xargs yumdownloader --resolve \</span></span><br><span class="line"><span class="bash">    &amp;&amp; createrepo -d .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian 9 stretch</span></span><br><span class="line"><span class="keyword">FROM</span> debian:stretch-slim as stretch</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=stretch</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /debian/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.apt[],.debian[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /debian/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian 10 buster</span></span><br><span class="line"><span class="keyword">FROM</span> debian:buster-slim as buster</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=buster</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /debian/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.apt[],.debian[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /debian/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 18.04 bionic</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:bionic as bionic</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=bionic</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /ubuntu/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.apt[],.ubuntu[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /ubuntu/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 20.04 focal</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:focal as focal</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=focal</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /ubuntu/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.apt[],.ubuntu[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /ubuntu/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=centos7 /centos /centos</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=stretch /debian /debian</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=buster /debian /debian</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=bionic /ubuntu /ubuntu</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=focal /ubuntu /ubuntu</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>构建好了离线源之后，在部署的机器上运行一个 Nginx 服务，用于提供 HTTP 方式下载这些软件包，同时需要配置一下机器的包管理器 repo 配置文件。</p><ul><li>CentOS 7</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Inra-Mirror]</span><br><span class="line">name=Infra Mirror Repository</span><br><span class="line">baseurl=http://172.20.0.10/centos/7/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><ul><li>Debian 9 stretch</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb [trusted=yes] http://172.20.0.10:8080/debian stretch/</span><br></pre></td></tr></table></figure><ul><li>Debian 10 buster</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb [trusted&#x3D;yes] http:&#x2F;&#x2F;172.20.0.10:8080&#x2F;debian buster&#x2F;</span><br></pre></td></tr></table></figure><ul><li>Ubuntu 18.04 bionic</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb [trusted=yes] http://172.20.0.10:8080/ubuntu bionic/</span><br></pre></td></tr></table></figure><ul><li>Ubuntu 20.04 focal</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb [trusted&#x3D;yes] http:&#x2F;&#x2F;172.20.0.10:8080&#x2F;debian focal&#x2F;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>可以考虑将 Dockerfile 中的构建过程合并成一个 shell 脚本，然后在 Dockerfile 中调用这个脚本即可，这样可优化 Dockerfile 代码的可维护性，同时后续适配多种 OS 的时候也可以复用部分相同的代码，但这样可能会导致 docker build 缓存的失效问题。</p><p>当然也可以使用脚本将多个 Dockerfile 合并成一个，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Merge all Dockerfile.xx to an all-in-one file</span></span><br><span class="line">ls Dockerfile.* | xargs -L1 grep -Ev 'FROM scratch|COPY --from=' &gt; Dockerfile</span><br><span class="line">echo "FROM scratch" &gt;&gt; Dockerfile</span><br><span class="line">ls Dockerfile.* | xargs -L1 grep 'COPY --from=' &gt;&gt; Dockerfile</span><br></pre></td></tr></table></figure><h3 id="Package-version"><a href="#Package-version" class="headerlink" title="Package version"></a>Package version</h3><p>对于一些版本中包含 Linux 发行版本代号的包来讲，手动维护这个代号不太方便，可以考虑将它魔改成占位变量的方式，在构建容器内生成 package.list 文件后统一使用 sed 把这些占位的变量给替换一下，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt:</span><br><span class="line">  - docker-ce=5:19.03.15~3-0~__ID__-__VERSION_CODENAME__</span><br></pre></td></tr></table></figure><p>使用 sed 处理一下生成的 packages.list 中的这些占位符变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">"s|__ID__|<span class="variable">$(sed -n 's|^ID=||p' /etc/os-release)</span>|;s|__VERSION_CODENAME__|<span class="variable">$(sed -n 's|^VERSION_CODENAME=||p' /etc/os-release)</span>|"</span> packages.list</span><br></pre></td></tr></table></figure><p>虽然这样做很不美观，但这种方式确实可行 😂，最终能够的到正确的版本号。总之我们尽量地少维护一些包的版本，比如使用这种方式就可以将某个版本的 docker-ce 包放在配置文件的 apt 中，而不是 debian/ubuntu 中，通过一些环境变量或者 shell 脚本自动添加上这些特殊项，这样能减少一些维护成本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.aptly.info/tutorial/mirror/" target="_blank" rel="noopener">aptly.info</a></li><li><a href="https://mozillazg.com/2018/01/jq-use-examples-cookbook.html" target="_blank" rel="noopener">jq 常用操作</a></li><li><a href="https://lyyao09.github.io/2019/08/02/tools/The-usage-of-yq-read-write/" target="_blank" rel="noopener">yq 之读写篇</a></li><li><a href="https://docs.docker.com/develop/develop-images/build_enhancements/" target="_blank" rel="noopener">Build images with BuildKit</a></li><li><a href="https://github.com/kubernetes-sigs/kubespray/pull/6766" target="_blank" rel="noopener">kubernetes-sigs/kubespray/pull/6766</a></li><li><a href="https://moelove.info/2021/03/14/万字长文彻底搞懂容器镜像构建/" target="_blank" rel="noopener">万字长文：彻底搞懂容器镜像构建</a></li><li><a href="https://www.xiaocoder.com/2017/09/12/offline-local-source/" target="_blank" rel="noopener">为 CentOS 与 Ubuntu 制作离线本地源</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;离线部署&quot;&gt;&lt;a href=&quot;#离线部署&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="centos" scheme="https://blog.k8s.li/tags/centos/"/>
    
      <category term="ubuntu" scheme="https://blog.k8s.li/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>kubespray 部署常见问题和优化汇总</title>
    <link href="https://blog.k8s.li/kubespray-tips.html"/>
    <id>https://blog.k8s.li/kubespray-tips.html</id>
    <published>2021-05-12T16:00:00.000Z</published>
    <updated>2021-05-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>kubespray v2.16 版本即将发布，整理一下自己在使用 kubespray 过程中遇到的问题和一些优化建议。</p><h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><p>在 kubespray 上游的 <a href="https://github.com/kubernetes-sigs/kubespray/pull/7561" target="_blank" rel="noopener">#7561</a>  PR 中实现了根据 kubespray 的源码生成需要的文件列表和镜像列表。只需要在 repo 的 <code>contrib/offline</code> 目录下执行 <code>bash generate_list.sh</code> 就可以生成一个 files.list 和一个 images.list  文件。然后就可以根据这个文件来下载依赖的文件和镜像。如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> contrib/offline</span><br><span class="line">$ bash generate_list.sh</span><br><span class="line">$ tree temp</span><br><span class="line">temp</span><br><span class="line">├── files.list</span><br><span class="line">├── generate.sh</span><br><span class="line">└── images.list</span><br></pre></td></tr></table></figure><ul><li>files.list 内容如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat temp/files.list</span><br><span class="line">https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz</span><br><span class="line">https://github.com/containerd/nerdctl/releases/download/v0.8.0/nerdctl-0.8.0-linux-amd64.tar.gz</span><br><span class="line">https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">https://github.com/containers/crun/releases/download/0.19/crun-0.19-linux-amd64</span><br><span class="line">https://github.com/coreos/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">https://github.com/kata-containers/runtime/releases/download/1.12.1/kata-static-1.12.1-x86_64.tar.xz</span><br><span class="line">https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.20.0/crictl-v1.20.0-linux-amd64.tar.gz</span><br><span class="line">https://github.com/kubernetes-sigs/krew/releases/download/v0.4.1/krew.tar.gz</span><br><span class="line">https://github.com/projectcalico/calico/archive/v3.17.4.tar.gz</span><br><span class="line">https://github.com/projectcalico/calicoctl/releases/download/v3.17.4/calicoctl-linux-amd64</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.20.6/bin/linux/amd64/kubeadm</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.20.6/bin/linux/amd64/kubectl</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.20.6/bin/linux/amd64/kubelet</span><br></pre></td></tr></table></figure><p>然后通过 wget 进行下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -x -P temp/files -i temp/files.list</span><br></pre></td></tr></table></figure><ul><li>下载后的文件如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> tree temp/files</span><br><span class="line">temp/files</span><br><span class="line">├── get.helm.sh</span><br><span class="line">│   └── helm-v3.5.4-linux-amd64.tar.gz</span><br><span class="line">├── github.com</span><br><span class="line">│   ├── containerd</span><br><span class="line">│   │   └── nerdctl</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.8.0</span><br><span class="line">│   │                   └── nerdctl-0.8.0-linux-amd64.tar.gz</span><br><span class="line">│   ├── containernetworking</span><br><span class="line">│   │   └── plugins</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.9.1</span><br><span class="line">│   │                   └── cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">│   ├── containers</span><br><span class="line">│   │   └── crun</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── 0.19</span><br><span class="line">│   │                   └── crun-0.19-linux-amd64</span><br><span class="line">│   ├── coreos</span><br><span class="line">│   │   └── etcd</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v3.4.13</span><br><span class="line">│   │                   └── etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">│   ├── kata-containers</span><br><span class="line">│   │   └── runtime</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── 1.12.1</span><br><span class="line">│   │                   └── kata-static-1.12.1-x86_64.tar.xz</span><br><span class="line">│   ├── kubernetes-sigs</span><br><span class="line">│   │   ├── cri-tools</span><br><span class="line">│   │   │   └── releases</span><br><span class="line">│   │   │       └── download</span><br><span class="line">│   │   │           └── v1.20.0</span><br><span class="line">│   │   │               └── crictl-v1.20.0-linux-amd64.tar.gz</span><br><span class="line">│   │   └── krew</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.4.1</span><br><span class="line">│   │                   └── krew.tar.gz</span><br><span class="line">│   └── projectcalico</span><br><span class="line">│       ├── calico</span><br><span class="line">│       │   └── archive</span><br><span class="line">│       │       └── v3.17.4.tar.gz</span><br><span class="line">│       └── calicoctl</span><br><span class="line">│           └── releases</span><br><span class="line">│               └── download</span><br><span class="line">│                   └── v3.17.4</span><br><span class="line">│                       └── calicoctl-linux-amd64</span><br><span class="line">└── storage.googleapis.com</span><br><span class="line">    └── kubernetes-release</span><br><span class="line">        └── release</span><br><span class="line">            └── v1.20.6</span><br><span class="line">                └── bin</span><br><span class="line">                    └── linux</span><br><span class="line">                        └── amd64</span><br><span class="line">                            ├── kubeadm</span><br><span class="line">                            ├── kubectl</span><br><span class="line">                            └── kubelet</span><br></pre></td></tr></table></figure><p>保持这个目录结构不变，把它们上传到自己的文件服务器上，然后再修改这个文件的下载参数，只需要在前面加上文件服务器的 URL 即可，比如我的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Download URLs</span></span><br><span class="line"><span class="attr">download_url:</span> <span class="string">"https://dl.k8s.li"</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kubeadm_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubeadm"</span></span><br><span class="line"><span class="attr">etcd_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/coreos/etcd/releases/download/<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>/etcd-<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">cni_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containernetworking/plugins/releases/download/<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>/cni-plugins-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>-<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>.tgz"</span></span><br><span class="line"><span class="attr">calicoctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calicoctl/releases/download/<span class="template-variable">&#123;&#123; calico_ctl_version &#125;&#125;</span>/calicoctl-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_crds_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calico/archive/<span class="template-variable">&#123;&#123; calico_version &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crictl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kubernetes-sigs/cri-tools/releases/download/<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>/crictl-<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">helm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/get.helm.sh/helm-<span class="template-variable">&#123;&#123; helm_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crun_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containers/crun/releases/download/<span class="template-variable">&#123;&#123; crun_version &#125;&#125;</span>/crun-<span class="template-variable">&#123;&#123; crun_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kata_containers_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kata-containers/runtime/releases/download/<span class="template-variable">&#123;&#123; kata_containers_version &#125;&#125;</span>/kata-static-<span class="template-variable">&#123;&#123; kata_containers_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_architecture &#125;&#125;</span>.tar.xz"</span></span><br><span class="line"><span class="attr">nerdctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containerd/nerdctl/releases/download/v<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>/nerdctl-<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br></pre></td></tr></table></figure><ul><li>images.list 是 kubespray 所有可能会用到的镜像，如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat temp/images.list</span></span><br><span class="line">docker.io/amazon/aws-alb-ingress-controller:v1.1.9</span><br><span class="line">docker.io/amazon/aws-ebs-csi-driver:v0.5.0</span><br><span class="line">docker.io/cloudnativelabs/kube-router:v1.2.2</span><br><span class="line">docker.io/integratedcloudnative/ovn4nfv-k8s-plugin:v1.1.0</span><br><span class="line">docker.io/k8scloudprovider/cinder-csi-plugin:v1.20.0</span><br><span class="line">docker.io/kubeovn/kube-ovn:v1.6.2</span><br><span class="line">docker.io/kubernetesui/dashboard-amd64:v2.2.0</span><br><span class="line">docker.io/kubernetesui/metrics-scraper:v1.0.6</span><br><span class="line">docker.io/library/haproxy:2.3</span><br><span class="line">docker.io/library/nginx:1.19</span><br><span class="line">docker.io/library/registry:2.7.1</span><br><span class="line">docker.io/nfvpe/multus:v3.7</span><br><span class="line">docker.io/rancher/<span class="built_in">local</span>-path-provisioner:v0.0.19</span><br><span class="line">docker.io/weaveworks/weave-kube:2.8.1</span><br><span class="line">docker.io/weaveworks/weave-npc:2.8.1</span><br><span class="line">docker.io/xueshanf/install-socat:latest</span><br><span class="line">k8s.gcr.io/addon-resizer:1.8.11</span><br><span class="line">k8s.gcr.io/coredns:1.7.0</span><br><span class="line">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64:1.8.3</span><br><span class="line">k8s.gcr.io/dns/k8s-dns-node-cache:1.17.1</span><br><span class="line">k8s.gcr.io/ingress-nginx/controller:v0.43.0</span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-registry-proxy:0.4</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.20.6</span><br><span class="line">k8s.gcr.io/metrics-server/metrics-server:v0.4.2</span><br><span class="line">k8s.gcr.io/pause:3.3</span><br><span class="line">quay.io/calico/cni:v3.17.4</span><br><span class="line">quay.io/calico/kube-controllers:v3.17.4</span><br><span class="line">quay.io/calico/node:v3.17.4</span><br><span class="line">quay.io/calico/typha:v3.17.4</span><br><span class="line">quay.io/cilium/cilium-init:2019-04-05</span><br><span class="line">quay.io/cilium/cilium:v1.8.9</span><br><span class="line">quay.io/cilium/operator:v1.8.9</span><br><span class="line">quay.io/coreos/etcd:v3.4.13</span><br><span class="line">quay.io/coreos/flannel:v0.13.0-amd64</span><br><span class="line">quay.io/datawire/ambassador-operator:v1.2.9</span><br><span class="line">quay.io/external_storage/cephfs-provisioner:v2.1.0-k8s1.11</span><br><span class="line">quay.io/external_storage/<span class="built_in">local</span>-volume-provisioner:v2.3.4</span><br><span class="line">quay.io/external_storage/rbd-provisioner:v2.1.1-k8s1.11</span><br><span class="line">quay.io/jetstack/cert-manager-cainjector:v1.0.4</span><br><span class="line">quay.io/jetstack/cert-manager-controller:v1.0.4</span><br><span class="line">quay.io/jetstack/cert-manager-webhook:v1.0.4</span><br><span class="line">quay.io/k8scsi/csi-attacher:v2.2.0</span><br><span class="line">quay.io/k8scsi/csi-node-driver-registrar:v1.3.0</span><br><span class="line">quay.io/k8scsi/csi-provisioner:v1.6.0</span><br><span class="line">quay.io/k8scsi/csi-resizer:v0.5.0</span><br><span class="line">quay.io/k8scsi/csi-snapshotter:v2.1.1</span><br><span class="line">quay.io/k8scsi/snapshot-controller:v2.0.1</span><br><span class="line">quay.io/l23network/k8s-netchecker-agent:v1.0</span><br><span class="line">quay.io/l23network/k8s-netchecker-server:v1.0</span><br></pre></td></tr></table></figure><p>可使用 skopeo 将镜像同步到自己的 registry 中，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> $(cat temp/images.list); <span class="keyword">do</span> skopeo copy docker://<span class="variable">$&#123;image&#125;</span> docker://hub.k8s.li/<span class="variable">$&#123;image#*/&#125;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p>当时写这个脚本的时候一堆蛇皮 sed 替换操作写得想 🤮，比如有些变量会有 ansible 的 if else 判断，这就意味着也要用 shell 去实现它的判断逻辑。比如使用 shell 处理的时候需要将这下面坨转换成 shell 的 if else，而且还不能换行：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">coredns_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span><span class="template-variable">&#123;&#123;'/coredns/coredns' if (coredns_image_is_namespaced | bool) else '/coredns' &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">coredns_image_tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; coredns_version if (coredns_image_is_namespaced | bool) else (coredns_version | regex_replace('^v', '')) &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># special handling for https://github.com/kubernetes-sigs/kubespray/pull/7570</span></span><br><span class="line">sed -i <span class="string">'s#^coredns_image_repo=.*#coredns_image_repo=$&#123;kube_image_repo&#125;$(if printf "%s\\n%s\\n" v1.21 $&#123;kube_version%.*&#125; | sort --check=quiet --version-sort; then echo -n /coredns/coredns;else echo -n /coredns; fi)#'</span> <span class="variable">$&#123;TEMP_DIR&#125;</span>/generate.sh</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">'s#^coredns_image_tag=.*#coredns_image_tag=$(if printf "%s\\n%s\\n" v1.21 $&#123;kube_version%.*&#125; | sort --check=quiet --version-sort; then echo -n $&#123;coredns_version&#125;;else echo -n $&#123;coredns_version/v/&#125;; fi)#'</span> <span class="variable">$&#123;TEMP_DIR&#125;</span>/generate.sh</span><br></pre></td></tr></table></figure><p>当时还学会了一手，在 shell 中使用 <code>printf &quot;%s\\n%s\\n&quot; $v1 $v2 | sort --check=quiet --version-sort</code> 这种方式可以判断两个版本号的大小，而且是最简单便捷的。</p><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p>之前提到的是根据镜像列表将需要的镜像同步到自己的 registry 中，但对于本地开发测试来讲，这种手动导入比较费事费力。在看了大佬写的 <a href="https://fuckcloudnative.io/posts/docker-registry-proxy/" target="_blank" rel="noopener">Docker 镜像加速教程</a> 和 <a href="https://www.chenshaowen.com/blog/how-to-run-a-private-registry-mirror.html" target="_blank" rel="noopener">如何搭建一个私有的镜像仓库 mirror</a>  就想到了可以使用 docker registry 的 proxy 特性来部署几个 kubespray 需要的镜像仓库。如下</p><table><thead><tr><th>origin</th><th>mirror</th></tr></thead><tbody><tr><td>docker.io</td><td>hub.k8s.li</td></tr><tr><td>k8s.gcr.io</td><td>gcr.k8s.li</td></tr><tr><td>quay.io</td><td>quay.k8s.li</td></tr></tbody></table><ul><li>config.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">accesskeyid:</span> <span class="string">xxxx</span> <span class="comment"># 这里配置阿里云 OSS 的 accesskeyid</span></span><br><span class="line">    <span class="attr">accesskeysecret:</span> <span class="string">xxxx</span> <span class="comment"># 这里配置阿里云 OSS 的 accesskeysecret</span></span><br><span class="line">    <span class="attr">region:</span> <span class="string">oss-cn-beijing</span> <span class="comment"># 配置 OSS bucket 的区域，比如 oss-cn-beijing</span></span><br><span class="line">    <span class="attr">internal:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">fileserver</span> <span class="comment"># 配置存储 bucket 的名称</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/kubespray/registry</span> <span class="comment"># 配置路径</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>docker-compose.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gcr-registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gcr-registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yml:/etc/docker/registry/config.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5001:5001</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_HTTP_ADDR=0.0.0.0:5001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_PROXY_REMOTEURL=https://k8s.gcr.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hub-registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hub-registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yml:/etc/docker/registry/config.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5002:5002</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_HTTP_ADDR=0.0.0.0:5002</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_PROXY_REMOTEURL=https://docker.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">quay-registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">quay-registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yml:/etc/docker/registry/config.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5003:5003</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_HTTP_ADDR=0.0.0.0:5003</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_PROXY_REMOTEURL=https://quay.io</span></span><br></pre></td></tr></table></figure><ul><li>nginx.conf</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  gcr.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> domain.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> domain.key;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100000m</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET|HEAD)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:5001;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  hub.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> domain.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> domain.key;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100000m</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET|HEAD)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:5002;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  quay.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> domain.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> domain.key;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100000m</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET|HEAD)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:5003;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关配置文件在 <a href="https://github.com/muzi502/registry-mirrors" target="_blank" rel="noopener">registry-mirrors</a> 这个 repo 中。</p><h2 id="优化-kubespray-镜像大小"><a href="#优化-kubespray-镜像大小" class="headerlink" title="优化 kubespray 镜像大小"></a>优化 kubespray 镜像大小</h2><p>kubespray v1.25.1 版本官方构建的镜像大小为 <code>1.41GB</code>，对于一些场景下希望镜像小一些，可以通过如下方法构建一个体积较小的镜像。</p><ul><li>首先构建一个 base 镜像，对于不经常变动的我们把它封装在一个 base 镜像里，只有当相关依赖更新了才需要重新构建这个 base 镜像，<code>Dockerfile.base</code> 如下：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span>-slim</span><br><span class="line"><span class="keyword">ENV</span> KUBE_VERSION v1.<span class="number">20.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y \</span></span><br><span class="line"><span class="bash"> &amp;&amp; apt install -y \</span></span><br><span class="line"><span class="bash"> libssl-dev sshpass apt-transport-https jq moreutils vim moreutils iputils-ping \</span></span><br><span class="line"><span class="bash"> ca-certificates curl gnupg2 software-properties-common rsync wget tcpdump \</span></span><br><span class="line"><span class="bash"> &amp;&amp; rm -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="bash"> &amp;&amp; wget -q https://dl.k8s.io/<span class="variable">$KUBE_VERSION</span>/bin/linux/amd64/kubectl -O /usr/<span class="built_in">local</span>/bin/kubectl \</span></span><br><span class="line"><span class="bash"> &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/kubectl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /kubespray</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> python3 -m pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><p>构建 kubespray 镜像：FROM 的 base 镜像就使用我们刚刚构建好的镜像，对于 kubespray 来讲，相关依赖已经在 base 镜像中安装好了，这里构建的时候只需要把 repo 复制到 /kubespray 目录下即可，如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> kubespray:v2.<span class="number">16.0</span>-base-kube-v1.<span class="number">20.6</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /kubespray</span></span><br></pre></td></tr></table></figure><p>这样构建出来的镜像大小不到 600MB，比之前小了很多，而且每次构建镜像的时候也比较快。只不过当 <code>requirements.txt</code>  文件更新后需要重新构建 base 镜像，并修改 kubespray 的 FROM 镜像为新的 base 镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubespray     v2.15.1                  73294562105a    1.41GB</span><br><span class="line">kubespray     v2.16-kube-v1.20.6-1.0   80b735995e48    579MB</span><br></pre></td></tr></table></figure><ul><li>kubespray 默认没有加如 <code>.dockerignore</code>，这就意味着构建镜像的时候会把当前目录下的所有内容复制到镜像里，会导致镜像工作目录下可能很混乱，在容器里 debug 的时候不太美观，强迫症患者可以在 repo 中加入如下的 <code>.dockerignore</code> 文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.ansible-lint</span><br><span class="line">.editorconfig</span><br><span class="line">.git</span><br><span class="line">.github</span><br><span class="line">.gitignore</span><br><span class="line">.gitlab-ci</span><br><span class="line">.gitlab-ci.yml</span><br><span class="line">.gitmodules</span><br><span class="line">.markdownlint.yaml</span><br><span class="line">.nojekyll</span><br><span class="line">CNAME</span><br><span class="line">CONTRIBUTING.md</span><br><span class="line">Dockerfile</span><br><span class="line">Makefile</span><br><span class="line">OWNERS</span><br><span class="line">README.md</span><br><span class="line">RELEASE.md</span><br><span class="line">SECURITY_CONTACTS</span><br><span class="line">build</span><br><span class="line">code-of-conduct.md</span><br><span class="line">docs</span><br><span class="line">index.html</span><br><span class="line">logo</span><br></pre></td></tr></table></figure><h2 id="docker-registry-禁止-push-镜像"><a href="#docker-registry-禁止-push-镜像" class="headerlink" title="docker registry 禁止 push 镜像"></a>docker registry 禁止 push 镜像</h2><p>默认直接使用 docker registry 来部署镜像仓库的话，比如我的 hub.k8s.li ，因为没有权限限制会导致任何可访问该镜像仓库的客户端可以 push 镜像，这有点不安全，需要安全加固一下。因为 pull 镜像的时候客户端走的都是 HTTP GET 请求，可以通过 nginx 禁止 POST、PUT 这种请求方法，这样就可以禁止 push 镜像。在 nginx 的server 字段中添加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在 push 镜像的时候会返回 403 的错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root # docker pull hub.k8s.li/calico/node:v3.17.3</span><br><span class="line">v3.17.3: Pulling from calico/node</span><br><span class="line">282bf12aa8be: Pull complete</span><br><span class="line">4ac1bb9354ad: Pull complete</span><br><span class="line">Digest: sha256:3595a9a945a7ba346a12ee523fc7ae15ed35f1e6282b76bce7fec474d28d68bb</span><br><span class="line">Status: Downloaded newer image for hub.k8s.li/calico/node:v3.17.3</span><br><span class="line">root@debian:/root # docker push !$</span><br><span class="line">root@debian:/root # docker push hub.k8s.li/calico/node:v3.17.3</span><br><span class="line">The push refers to repository [hub.k8s.li/calico/node]</span><br><span class="line">bc19ae092bb4: Preparing</span><br><span class="line">94333d52d45d: Preparing</span><br><span class="line">error parsing HTTP 403 response body: invalid character '&lt;' looking for beginning of value: "&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;\r\n&lt;body bgcolor=\"white\"&gt;\r\n&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;\r\n&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n"</span><br></pre></td></tr></table></figure><p>那么需要 push 镜像的时候怎么办？</p><p>docker registry 启动的时候 bind 在 127.0.0.1 上，而不是 0.0.0.0，通过 localhost:5000 来 push 镜像。</p><h2 id="镜像仓库自签证书"><a href="#镜像仓库自签证书" class="headerlink" title="镜像仓库自签证书"></a>镜像仓库自签证书</h2><p>如果镜像仓库使用的是自签证书，可以跑下面这个 playbook 将自签证书添加到所有节点的 trusted CA dir 中，这样无需配置 <code>insecure-registries</code> 也能拉取镜像。</p><p><code>add-registry-ca.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">target</span> <span class="string">ca-certificate</span> <span class="string">store</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">set_fact:</span></span><br><span class="line">        <span class="attr">ca_cert_path:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">&#123;%</span> <span class="string">if</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"Debian"</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/usr/local/share/ca-certificates/registry-ca.crt</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">elif</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"RedHat"</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/etc/pki/ca-trust/source/anchors/registry-ca.crt</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">elif</span> <span class="string">ansible_os_family</span> <span class="string">in</span> <span class="string">["Flatcar</span> <span class="string">Container</span> <span class="string">Linux</span> <span class="string">by</span> <span class="string">Kinvolk"]</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/etc/ssl/certs/registry-ca.pem</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">elif</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"Suse"</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/etc/pki/trust/anchors/registry-ca.pem</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">elif</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"ClearLinux"</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/usr/share/ca-certs/registry-ca.pem</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">facts</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">add</span> <span class="string">CA</span> <span class="string">to</span> <span class="string">trusted</span> <span class="string">CA</span> <span class="string">dir</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_cert_path &#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">&#123;&#123; ca_cert_path &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">registry_ca_cert</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">update</span> <span class="string">ca-certificates</span> <span class="string">(Debian/Ubuntu/SUSE/Flatcar)</span>  <span class="comment"># noqa 503</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">update-ca-certificates</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">registry_ca_cert.changed</span> <span class="string">and</span> <span class="string">ansible_os_family</span> <span class="string">in</span> <span class="string">["Debian",</span> <span class="string">"Flatcar Container Linux by Kinvolk"</span><span class="string">,</span> <span class="string">"Suse"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">update</span> <span class="string">ca-certificates</span> <span class="string">(RedHat)</span>  <span class="comment"># noqa 503</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">update-ca-trust</span> <span class="string">extract</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">registry_ca_cert.changed</span> <span class="string">and</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"RedHat"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">update</span> <span class="string">ca-certificates</span> <span class="string">(ClearLinux)</span>  <span class="comment"># noqa 503</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">clrtrust</span> <span class="string">add</span> <span class="string">"<span class="template-variable">&#123;&#123; ca_cert_path &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">registry_ca_cert.changed</span> <span class="string">and</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"ClearLinux"</span></span><br></pre></td></tr></table></figure><ul><li>将自签的 registry 证书放到本地，执行 playbook 并指定 <code>registry_cert_path</code> 为正确的路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/kubespray# ansible-playbook -i deploy/inventory -e registry_cert_path=/kubespray/registry_ca.pem add-registry-ca.yml</span><br><span class="line"></span><br><span class="line">PLAY [all] **********************************************************************************</span><br><span class="line">Thursday 29 April 2021  08:18:25 +0000 (0:00:00.077)       0:00:00.077 ********</span><br><span class="line"></span><br><span class="line">TASK [Gen_certs | target ca-certificate store file] *****************************************</span><br><span class="line">ok: [kube-control-2]</span><br><span class="line">ok: [kube-control-3]</span><br><span class="line">ok: [kube-control-1]</span><br><span class="line">ok: [kube-node-1]</span><br><span class="line">Thursday 29 April 2021  08:18:25 +0000 (0:00:00.389)       0:00:00.467 ********</span><br><span class="line"></span><br><span class="line">TASK [Gen_certs | add CA to trusted CA dir] *************************************************</span><br><span class="line">changed: [kube-control-2]</span><br><span class="line">changed: [kube-control-3]</span><br><span class="line">changed: [kube-control-1]</span><br><span class="line">changed: [kube-node-1]</span><br><span class="line">Thursday 29 April 2021  08:18:29 +0000 (0:00:04.433)       0:00:04.901 ********</span><br><span class="line">Thursday 29 April 2021  08:18:30 +0000 (0:00:00.358)       0:00:05.259 ********</span><br><span class="line"></span><br><span class="line">TASK [Gen_certs | update ca-certificates (RedHat)] ******************************************</span><br><span class="line">changed: [kube-control-1]</span><br><span class="line">changed: [kube-control-3]</span><br><span class="line">changed: [kube-control-2]</span><br><span class="line">changed: [kube-node-1]</span><br><span class="line">Thursday 29 April 2021  08:18:33 +0000 (0:00:02.938)       0:00:08.197 ********</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************</span><br><span class="line">kube-control-1             : ok=3    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0</span><br><span class="line">kube-control-2             : ok=3    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0</span><br><span class="line">kube-control-3             : ok=3    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0</span><br><span class="line">kube-node-1                : ok=3    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0</span><br><span class="line"></span><br><span class="line">Thursday 29 April 2021  08:18:33 +0000 (0:00:00.355)  0:00:08.553 ********</span><br><span class="line">================================================================</span><br><span class="line">Gen_certs | add CA to trusted CA dir ------------------------------------------------------------- 4.43s</span><br><span class="line">Gen_certs | update ca-certificates (RedHat) ------------------------------------------------------------- 2.94s</span><br><span class="line">Gen_certs | target ca-certificate store file ------------------------------------------------------------- 0.39s</span><br><span class="line">Gen_certs | update ca-certificates (Debian/Ubuntu/SUSE/Flatcar) ------------------------------------------------------------- 0.36s</span><br><span class="line">Gen_certs | update ca-certificates (ClearLinux) -------------------------------------------------------------- 0.36s</span><br></pre></td></tr></table></figure><h2 id="containerd-无法加载-CNI-配置导致节点-NotReady"><a href="#containerd-无法加载-CNI-配置导致节点-NotReady" class="headerlink" title="containerd 无法加载 CNI 配置导致节点 NotReady"></a>containerd 无法加载 CNI 配置导致节点 NotReady</h2><p>偶现问题，重启一下 containerd 就可以了，具体原因还没排查出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/kubespray<span class="comment"># ansible all -i deploy/inventory -m service -a "name=containerd state=restarted"</span></span><br></pre></td></tr></table></figure><h2 id="优化部署速度"><a href="#优化部署速度" class="headerlink" title="优化部署速度"></a>优化部署速度</h2><p>Kubespray 部署的时候有个 task 专门用来下载部署需要的镜像，由于是操作的所有节点，会将一些不需要的镜像拉取到该节点上。比如 kube-apiserver、kube-controller-manager、kube-scheduler 这些在 node 节点上不会用到的镜像也会在 node 节点上拉取，这样会导致 download 的 task 比较耗时。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">TASK [download : set_container_facts | Display the name of the image being processed] ********************************************************************************************</span><br><span class="line">ok: [kube-control-3] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-controller-manager"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-control-2] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-controller-manager"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-control-1] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-controller-manager"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-node-1] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-controller-manager"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ok: [kube-control-3] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-scheduler"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-control-2] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-scheduler"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-control-1] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-scheduler"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-node-1] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-scheduler"</span></span><br></pre></td></tr></table></figure><p>可用通过 <code>download_container: false</code> 这个参数来禁用 download container 这个 task，这样在 pod 启动的时候只拉取需要的镜像，可以节省一些部署耗时。</p><h2 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h2><p>Kubespray 官方支持的插件列表如下，默认是 false 禁用了插件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Kubernetes dashboard</span></span><br><span class="line"><span class="comment"># RBAC required. see docs/getting-started.md for access details.</span></span><br><span class="line"><span class="attr">dashboard_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Addons which can be enabled</span></span><br><span class="line"><span class="attr">helm_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">krew_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">registry_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">metrics_server_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">enable_network_policy:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">local_path_provisioner_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">local_volume_provisioner_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">local_volume_provisioner_directory_mode:</span> <span class="number">0700</span></span><br><span class="line"><span class="attr">cinder_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">aws_ebs_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">azure_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">gcp_pd_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">vsphere_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">persistent_volumes_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cephfs_provisioner_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">rbd_provisioner_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">ingress_nginx_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">ingress_ambassador_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">ingress_alb_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cert_manager_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">expand_persistent_volumes:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">metallb_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># containerd official CLI tool</span></span><br><span class="line"><span class="attr">nerdctl_enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在部署的时候如果想启动某些插件可以在自己本地对应的 inventory 目录下的 <code>group_vars/k8s_cluster/addons.yml</code> 文件中选择开启相应的插件，比如 <code>inventory/sample/group_vars/k8s_cluster/addons.yml</code>。</p><h2 id="分层部署"><a href="#分层部署" class="headerlink" title="分层部署"></a>分层部署</h2><p>这个是我们对 kubespray 二开的一个优化项。kubespray 在部署集群的时候运行的 playbook 是 <code>cluster.yml</code>，在集群部署的过程中可能会因为你一些不稳定因素导致集群部署失败，失败后再次尝试部署的话，kubespray 会从头开始再跑一遍已经成功运行的 task，这样的效率会比较低。因此需要使用某种方法记录一下已经成功执行的 task 或 roles，失败后重新部署的时候就跳过这些已经成功运行的 task，然后从上次失败的地方开始运行。</p><p>大体的思路是根据 <code>cluster.yml</code> 中的 roles 拆分为不同的层即 layer，如 bootstrap-os、download、kubernetes、network、apps ，在部署的过程中每运行完一个 layer 就将它记录在一个文件中，部署的时候会根据这个文件来判断是否需要部署，如果文件中记录存在的话就说明已经成功部署完成了，就跳过它，继续执行未执行的 layer。</p><p>至于拆分的方式大概有两种，一种是根据 tag 、一种是将 <code>cluster.yml</code> 文件拆分成若干个 playbook 文件。通过 tag 的方式可能会比较复杂一些，在这里还是选择拆分的方式。拆分的粒度有大有小，以下是我认为比较合理的拆封方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">playbooks</span><br><span class="line">├── 00-default-ssh-config.yml <span class="comment"># 默认需要运行的 playbook，用于配置堡垒机和配置 ssh 认证</span></span><br><span class="line">├── 01-cluster-bootstrap-os.yml <span class="comment"># 初始化集群节点 OS，安装容器运行时，下载部署依赖的文件</span></span><br><span class="line">├── 02-cluster-etcd.yml <span class="comment"># 部署 etcd 集群</span></span><br><span class="line">├── 03-cluster-kubernetes.yml <span class="comment"># 部署 kubernetes 集群</span></span><br><span class="line">├── 04-cluster-network.yml <span class="comment"># 部署网络插件</span></span><br><span class="line">├── 05-cluster-apps.yml <span class="comment"># 部署一些 addons 组件，如 coredns 等</span></span><br><span class="line">├── 06-cluster-self-host.yml <span class="comment"># 平台 self-host 自托管的部分</span></span><br><span class="line">└── 11-reset-reset.yml <span class="comment"># 移除集群</span></span><br></pre></td></tr></table></figure><ul><li>00-default-ssh-config.yml</li></ul><p>该 playbook 用于配置堡垒机和 ssh 认证，kubespray 需要使用  public key 的方式 ssh 连接到部署节点，如果部署节点没有配置 ssh public key 的方式，可以指定 <code>ssh_cert_path</code> 这个变量的路径，将公钥添加到主机的 authorized_key 中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">bastion[0]</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">bastion-ssh-config,</span> <span class="attr">tags:</span> <span class="string">["localhost",</span> <span class="string">"bastion"</span><span class="string">]</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster:etcd</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setting</span> <span class="string">up</span> <span class="string">ssh</span> <span class="string">public</span> <span class="string">key</span> <span class="string">authentication</span></span><br><span class="line">      <span class="attr">authorized_key:</span> <span class="string">"user=<span class="template-variable">&#123;&#123; ansible_user &#125;&#125;</span> key=<span class="template-variable">&#123;&#123; lookup('file', '&#123;&#123; ssh_cert_path &#125;&#125;</span>') &#125;&#125;"</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ssh_cert_path</span> <span class="string">is</span> <span class="string">defined</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">ssh-config</span></span><br></pre></td></tr></table></figure><ul><li>01-cluster-bootstrap-os.yml</li></ul><p>这个 playbook 用于初始化部署节点 OS、安装一些依赖的 rpm/deb 包、安装容器运行时、下载二进制文件等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster:etcd</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">linear</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">bootstrap-os,</span> <span class="attr">tags:</span> <span class="string">bootstrap-os&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster:etcd</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/preinstall,</span> <span class="attr">tags:</span> <span class="string">preinstall</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">"container-engine"</span><span class="string">,</span> <span class="attr">tags:</span> <span class="string">"container-engine"</span><span class="string">,</span> <span class="attr">when:</span> <span class="string">deploy_container_engine|default(true)</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">download,</span> <span class="attr">tags:</span> <span class="string">download,</span> <span class="attr">when:</span> <span class="string">"not skip_downloads"</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>02-cluster-etcd.yml</li></ul><p>这个主要是部署 etcd 集群和分发 etcd 集群的证书到集群节点。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">etcd</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">etcd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">etcd</span></span><br><span class="line">      <span class="attr">vars:</span></span><br><span class="line">        <span class="attr">etcd_cluster_setup:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">etcd_events_cluster_setup:</span> <span class="string">"<span class="template-variable">&#123;&#123; etcd_events_cluster_enabled &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">not</span> <span class="string">etcd_kubeadm_enabled|</span> <span class="string">default(false)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">etcd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">etcd</span></span><br><span class="line">      <span class="attr">vars:</span></span><br><span class="line">        <span class="attr">etcd_cluster_setup:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">etcd_events_cluster_setup:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">not</span> <span class="string">etcd_kubeadm_enabled|</span> <span class="string">default(false)</span></span><br></pre></td></tr></table></figure><ul><li>03-cluster-kubernetes.yml</li></ul><p>这个主要是部署 kubernetes 集群，虽然这里的 roles 很多，但并没有做过多的拆分，个人还是觉着这部分可以作为一个整体。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/node,</span> <span class="attr">tags:</span> <span class="string">node</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/control-plane,</span> <span class="attr">tags:</span> <span class="string">master</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/client,</span> <span class="attr">tags:</span> <span class="string">client</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/cluster_roles,</span> <span class="attr">tags:</span> <span class="string">cluster-roles</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/kubeadm,</span> <span class="attr">tags:</span> <span class="string">kubeadm&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/node-label,</span> <span class="attr">tags:</span> <span class="string">node-label</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>04-cluster-network.yml</li></ul><p>这个主要是部署网络插件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">network_plugin,</span> <span class="attr">tags:</span> <span class="string">network</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/network_plugin,</span> <span class="attr">tags:</span> <span class="string">network</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/policy_controller,</span> <span class="attr">tags:</span> <span class="string">policy-controller</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>05-cluster-apps.yml</li></ul><p>这个主要是部署一些 addons 插件，必须 coredns, ingress-controller，以及一些外置的 provisioner 等。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/external_cloud_controller,</span> <span class="attr">tags:</span> <span class="string">external-cloud-controller</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/ingress_controller,</span> <span class="attr">tags:</span> <span class="string">ingress-controller</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/external_provisioner,</span> <span class="attr">tags:</span> <span class="string">external-provisioner</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps,</span> <span class="attr">tags:</span> <span class="string">apps</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>拆分的时候可以根据自己的实际情况去除一些不必要的 roles，比如 <code>calico_rr</code> , <code>win_nodes</code> ，我们的产品本身就不支持 calico 路由反射器、也不支持 windows 节点，因此直接将这两部分给去除了，这样也能避免去执行这些 task 的判断，能节省一定的时间。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">calico_rr</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">network_plugin/calico/rr,</span> <span class="attr">tags:</span> <span class="string">['network',</span> <span class="string">'calico_rr'</span><span class="string">]</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane[0]</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">win_nodes/kubernetes_patch,</span> <span class="attr">tags:</span> <span class="string">["master",</span> <span class="string">"win_nodes"</span><span class="string">]</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;kubespray v2.16
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="kubespray" scheme="https://blog.k8s.li/tags/kubespray/"/>
    
  </entry>
  
  <entry>
    <title>使用 Kubespray 本地开发测试部署 kubernetes 集群</title>
    <link href="https://blog.k8s.li/deploy-k8s-by-kubespray.html"/>
    <id>https://blog.k8s.li/deploy-k8s-by-kubespray.html</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2021-04-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司 PaaS 平台底层的 kubernetes 集群部署采用的开源的 kubespray，正好我在参与 kubespray 二开工作。在这段时主要完成了 kubespray 自动化打包发布流水线、私有化部署、增加自研 CNI 部署、以及一些 bugfix 等。最近抽空整理并总结一下使用 kubespray 在本地开发测试部署 kubernetes 集群踩的一些坑。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>劝退三连😂：</p><ul><li>需要一个部署镜像仓库和 nginx</li><li>需要一个域名，最好已经设置好 DNS 解析和 SSL 证书</li><li>集群节点需要至少两台机器，并且可以访问外网</li></ul><p>虽然手头里有一大批开发机器，但由于我的域名 <code>k8s.li</code> 比较特殊，国内很难进行备案（也不想备案），所以无法将 DNS 解析到这些国内的服务器上。因此我打算将域名解析到一台国外的服务器上，然后再使用 nginx rewrite 重写将请求转发到阿里云的 OSS ；另外 docker registry 的后端存储也可以选择使用阿里云 OSS，这样客户端在拉取镜像的时候，只会通过我的域名获取镜像的 manifest 文件，镜像的 blobs 数据将会转发到阿里云 OSS。在集群部署的时候，下载文件和镜像最主要的流量都会通过阿里云 OSS，这样可以节省集群部署耗时，提高部署效率，同时又能剩下一笔服务器的流量费用。</p><h3 id="域名-SSL-证书制作"><a href="#域名-SSL-证书制作" class="headerlink" title="域名 SSL 证书制作"></a>域名 SSL 证书制作</h3><p>域名 SSL 证书主要是给镜像仓库使用的，假如证书是自签的或者镜像仓库使用的是 HTTP 协议，这样会导致 docker 或者 containerd 无法拉取镜像，需要为集群所有节点配置 <code>insecure-registries</code>  这个参数。搞起来比较麻烦，因此还是推荐给镜像仓库加一个非自签的 SSL 证书，这样能减少一些不必要的麻烦。如果有现成的镜像仓库并且配置好了 SSL 证书，可以略过此步。</p><p>制作域名证书的方式有很多种，个人比较推荐使用 acme.sh 。它实现了 acme 协议支持的所有验证协议，并且支持支持数十种域名解析商。由于我的域名是托管在 cloudflare 上的，使用 acme.sh 来签发证书特别方便，只需要配置两个参数即可。下面就给 k8s.li 这个域名签发一个泛域名证书。</p><ul><li>安装  acme.sh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br><span class="line">~/.acme.sh/acme.sh --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><ul><li>签发证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CF_Email=<span class="string">"muzi502.li@gmail.com"</span> <span class="comment"># cloudflare 账户的邮箱</span></span><br><span class="line"><span class="built_in">export</span> CF_Key=<span class="string">"xxxxxx"</span> <span class="comment"># "cloudflare中查看你的key"</span></span><br><span class="line"></span><br><span class="line">~/.acme.sh/acme.sh --issue --dns dns_cf -d k8s.li -d *.k8s.li</span><br><span class="line"></span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] Cert success.</span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] Your cert is <span class="keyword">in</span>  /root/.acme.sh/k8s.li/k8s.li.cer</span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] Your cert key is <span class="keyword">in</span>  /root/.acme.sh/k8s.li/k8s.li.key</span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] The intermediate CA cert is <span class="keyword">in</span>  /root/.acme.sh/k8s.li/ca.cer</span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] And the full chain certs is there:  /root/.acme.sh/k8s.li/fullchain.cer</span><br></pre></td></tr></table></figure><blockquote><p>前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方。</p><p>注意，默认生成的证书都放在安装目录下<code>~/.acme.sh/</code>， 请不要直接使用此目录下的文件，例如: 不要直接让<code>nginx/apache</code>的配置文件使用这下面的文件。这里面的文件都是内部使用，而且目录结构可能会变化。</p><p>正确的使用方法是使用<code>--installcert</code> 命令，并指定目标位置，然后证书文件会被 copy 到相应的位置</p></blockquote><ul><li>安装证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert -d k8s.li \</span><br><span class="line">--cert-file      /etc/nginx/ssl/k8s.li.cer  \</span><br><span class="line">--key-file       /etc/nginx/ssl/k8s.li.key  \</span><br><span class="line">--fullchain-file /etc/nginx/ssl/fullchain.cer</span><br></pre></td></tr></table></figure><h3 id="搭建镜像仓库"><a href="#搭建镜像仓库" class="headerlink" title="搭建镜像仓库"></a>搭建镜像仓库</h3><ul><li>config.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">accesskeyid:</span> <span class="string">xxxx</span> <span class="comment"># 这里配置阿里云 OSS 的 accesskeyid</span></span><br><span class="line">    <span class="attr">accesskeysecret:</span> <span class="string">xxxx</span> <span class="comment"># 这里配置阿里云 OSS 的 accesskeysecret</span></span><br><span class="line">    <span class="attr">region:</span> <span class="string">oss-cn-beijing</span> <span class="comment"># 配置 OSS bucket 的区域，比如 oss-cn-beijing</span></span><br><span class="line">    <span class="attr">internal:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">fileserver</span> <span class="comment"># 配置存储 bucket 的名称</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/kubespray/registry</span> <span class="comment"># 配置路径</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:5000</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>docker-compose</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">hub-registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2.7.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hub-registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yml:/etc/docker/registry/config.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5000:5000</span></span><br></pre></td></tr></table></figure><ul><li>nginx.conf</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  hub.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/fullchain.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/k8s.li.key;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">4096m</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:5000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h3><p>文件服务器用于存放一些 kubeadm、kubectl、kubelet 等二进制文件，kubespray 默认的下载地址在国内访问特别慢，因此需要搭建一个 http/https 服务器，用于给集群部署下载这些二进制文件使用。</p><ul><li>nginx.conf</li></ul><p>需要注意，这里的 nginx 配置使用的是 rewrite 而不是 proxy_pass，这样客户端在想我的服务器请求文件时，会重写客户端的请求，让客户端去请求阿里云 OSS 的地址。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>   dl.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/fullchain.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/k8s.li.key;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> https://fileserver.oss-cn-beijing.aliyuncs.com/kubespray/files/<span class="variable">$1</span>;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> Content-Disposition;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-request-id;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-object-type;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-hash-crc64ecma;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-storage-class;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-force-download;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-server-time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译安装-skopeo"><a href="#编译安装-skopeo" class="headerlink" title="编译安装 skopeo"></a>编译安装 skopeo</h3><p>安装 skopeo 用来同步一些使用的镜像到私有镜像仓库，性能上比 docker 快很多，强烈推荐。skopeo 的安装方式可参考官方文档 <a href="https://github.com/containers/skopeo/blob/master/install.md" target="_blank" rel="noopener">Installing from packages</a> 。不过个人还是使用 go buid 编译一个静态链接的可执行文件，这样在 Linux 发行版都可以使用。不然在 Debian 上编译的可执行文件无法拿到 CentOS 上使用，因为二者使用的动态链接库不一样！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/skopeo git:(master*) <span class="comment"># git clone https://github.com/containers/skopeo &amp;&amp; cd skopeo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地开发机器已经安装并配置好了 golang 编译环境</span></span><br><span class="line">root@debian:/root/skopeo git:(master*) <span class="comment"># CGO_ENABLE=0 GO111MODULE=on go build -mod=vendor "-buildmode=pie" -ldflags '-extldflags "-static"' -gcflags "" -tags "exclude_graphdriver_devicemapper exclude_graphdriver_btrfs containers_image_openpgp" -o bin/skopeo ./cmd/skopeo</span></span><br><span class="line"></span><br><span class="line">root@debian:/root/skopeo git:(master*) <span class="comment"># ldd bin/skopeo</span></span><br><span class="line">not a dynamic executable</span><br></pre></td></tr></table></figure><h3 id="获取部署需要的二进制文件"><a href="#获取部署需要的二进制文件" class="headerlink" title="获取部署需要的二进制文件"></a>获取部署需要的二进制文件</h3><p>kubespray 部署的时候需要到 github.com 或 storage.googleapis.com 下载一些二进制文件，这些地址在国内都都被阻断了，因此需要将部署时依赖的文件上传到自己的文件服务器上。自己写了个脚本用于获取 kubespray 部署需要的二进制文件，在 kubespray repo 的根目录下执行,下载的文件默认会存放在 <code>temp/files</code> 目录下。下载完成之后将该目录下的所有子目录上传到自己的文件服务器上。后面配置一些参数在这个地址的参数前面加上自己文件服务器的 URL 即可。</p><ul><li>首先 clone repo 到本地</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root<span class="comment"># git clone https://github.com/kubernetes-sigs/kubespray &amp;&amp; cd kubespray</span></span><br></pre></td></tr></table></figure><ul><li>将该脚本 <code>generate_list.sh</code> 保存到 repo 根目录下，并执行该脚下载需要的文件。</li></ul><blockquote><p>ps: 用 shell 脚本去处理 Jinja2 的 yaml， 写 sed 写得我想吐🤮</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">CURRENT_DIR=$(<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>); <span class="built_in">pwd</span>)</span><br><span class="line">TEMP_DIR=<span class="string">"<span class="variable">$&#123;CURRENT_DIR&#125;</span>/temp"</span></span><br><span class="line">REPO_ROOT_DIR=<span class="string">"<span class="variable">$&#123;CURRENT_DIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">: <span class="variable">$&#123;IMAGE_ARCH:="amd64"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;ANSIBLE_SYSTEM:="linux"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;ANSIBLE_ARCHITECTURE:="x86_64"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;DOWNLOAD_YML:="roles/download/defaults/main.yml"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;KUBE_VERSION_YAML:="roles/kubespray-defaults/defaults/main.yaml"&#125;</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$&#123;TEMP_DIR&#125;</span></span><br><span class="line"><span class="function"><span class="title">generate_versions</span></span>() &#123;</span><br><span class="line">    <span class="comment"># ARCH used in convert &#123;%- if image_arch != 'amd64' -%&#125;-&#123;&#123; image_arch &#125;&#125;&#123;%- endif -%&#125; to &#123;&#123;arch&#125;&#125;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;IMAGE_ARCH&#125;</span>"</span> != <span class="string">"amd64"</span> ]; <span class="keyword">then</span> ARCH=<span class="string">"<span class="variable">$&#123;IMAGE_ARCH&#125;</span>"</span>; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    cat &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh &lt;&lt; EOF</span><br><span class="line">arch=<span class="variable">$&#123;ARCH&#125;</span></span><br><span class="line">image_arch=<span class="variable">$&#123;IMAGE_ARCH&#125;</span></span><br><span class="line">ansible_system=<span class="variable">$&#123;ANSIBLE_SYSTEM&#125;</span></span><br><span class="line">ansible_architecture=<span class="variable">$&#123;ANSIBLE_ARCHITECTURE&#125;</span></span><br><span class="line">EOF</span><br><span class="line">    grep <span class="string">'kube_version:'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;KUBE_VERSION_YAML&#125;</span> \</span><br><span class="line">    | sed <span class="string">'s/: /=/g'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh</span><br><span class="line">    grep <span class="string">'_version:'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">    | sed <span class="string">'s/: /=/g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> | tr -d <span class="string">' '</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh</span><br><span class="line">    sed -i <span class="string">'s/kube_major_version=.*/kube_major_version=$&#123;kube_version%.*&#125;/g'</span> <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh</span><br><span class="line">    sed -i <span class="string">'s/crictl_version=.*/crictl_version=$&#123;kube_version%.*&#125;.0/g'</span> <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">generate_files_list</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"source <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh"</span> &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.sh</span><br><span class="line">    grep <span class="string">'download_url:'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">    | sed <span class="string">'s/: /=/g;s/ //g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g;s/|lower//g;s/^.*_url=/echo /g'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.sh</span><br><span class="line">    bash <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.sh | sort &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">generate_images_list</span></span>() &#123;</span><br><span class="line">    KUBE_IMAGES=<span class="string">"kube-apiserver kube-controller-manager kube-scheduler kube-proxy"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"source <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh"</span> &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh</span><br><span class="line">    grep -E <span class="string">'_repo:|_tag:'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">    | sed <span class="string">"s#&#123;%- if image_arch != 'amd64' -%&#125;-&#123;&#123; image_arch &#125;&#125;&#123;%- endif -%&#125;#&#123;&#123;arch&#125;&#125;#g"</span> \</span><br><span class="line">    | sed <span class="string">'s/: /=/g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> | tr -d <span class="string">' '</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh</span><br><span class="line">    sed -n <span class="string">'/^downloads:/,/download_defaults:/p'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">    | sed -n <span class="string">"s/repo: //p;s/tag: //p"</span> | tr -d <span class="string">' '</span> | sed <span class="string">'s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> \</span><br><span class="line">    | sed <span class="string">'N;s#\n# #g'</span> | tr <span class="string">' '</span> <span class="string">':'</span> | sed <span class="string">'s/^/echo /g'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;KUBE_IMAGES&#125;</span>"</span> | tr <span class="string">' '</span> <span class="string">'\n'</span> | xargs -L1 -I &#123;&#125; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'echo $&#123;kube_image_repo&#125;/&#123;&#125;:$&#123;kube_version&#125;'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh</span><br><span class="line">    bash <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh | sort &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">generate_versions</span><br><span class="line">generate_files_list</span><br><span class="line">generate_images_list</span><br><span class="line">wget -x -P <span class="variable">$&#123;TEMP_DIR&#125;</span>/files -i <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.list</span><br></pre></td></tr></table></figure><p>最终下载的结果如下，基本上保持了原有的 URL 路径，也方便后续的更新和版本迭代。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">temp/files</span><br><span class="line">├── get.helm.sh</span><br><span class="line">│   └── helm-v3.5.4-linux-amd64.tar.gz</span><br><span class="line">├── github.com</span><br><span class="line">│   ├── containerd</span><br><span class="line">│   │   └── nerdctl</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.8.0</span><br><span class="line">│   │                   └── nerdctl-0.8.0-linux-amd64.tar.gz</span><br><span class="line">│   ├── containernetworking</span><br><span class="line">│   │   └── plugins</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.9.1</span><br><span class="line">│   │                   └── cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">│   ├── containers</span><br><span class="line">│   │   └── crun</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── 0.19</span><br><span class="line">│   │                   └── crun-0.19-linux-amd64</span><br><span class="line">│   ├── coreos</span><br><span class="line">│   │   └── etcd</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v3.4.13</span><br><span class="line">│   │                   └── etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">│   ├── kata-containers</span><br><span class="line">│   │   └── runtime</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── 1.12.1</span><br><span class="line">│   │                   └── kata-static-1.12.1-x86_64.tar.xz</span><br><span class="line">│   ├── kubernetes-sigs</span><br><span class="line">│   │   └── cri-tools</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v1.20.0</span><br><span class="line">│   │                   └── crictl-v1.20.0-linux-amd64.tar.gz</span><br><span class="line">│   └── projectcalico</span><br><span class="line">│       ├── calico</span><br><span class="line">│       │   └── archive</span><br><span class="line">│       │       └── v3.17.3.tar.gz</span><br><span class="line">│       └── calicoctl</span><br><span class="line">│           └── releases</span><br><span class="line">│               └── download</span><br><span class="line">│                   └── v3.17.3</span><br><span class="line">│                       └── calicoctl-linux-amd64</span><br><span class="line">└── storage.googleapis.com</span><br><span class="line">    └── kubernetes-release</span><br><span class="line">        └── release</span><br><span class="line">            └── v1.20.6</span><br><span class="line">                └── bin</span><br><span class="line">                    └── linux</span><br><span class="line">                        └── amd64</span><br><span class="line">                            ├── kubeadm</span><br><span class="line">                            ├── kubectl</span><br><span class="line">                            └── kubelet</span><br></pre></td></tr></table></figure><h3 id="获取部署需要的镜像"><a href="#获取部署需要的镜像" class="headerlink" title="获取部署需要的镜像"></a>获取部署需要的镜像</h3><p>对于离线部署，kubespray 支持的并不是很友好。比如获取部署需要的镜像列表，目前的方案是需要先部署一个集群，然后通过 kubectl get 一些资源来获取 pod 使用到的镜像。个人觉得这个方式可以修改一下，比如通过 kubespray 源码来生成一个镜像列表。下面只是简单生成一个镜像列表，内容如下</p><ul><li>images.list</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker.io/nginx:1.19.0</span><br><span class="line">docker.io/calico/cni:v3.17.3</span><br><span class="line">docker.io/calico/node:v3.17.3</span><br><span class="line">docker.io/calico/kube-controllers:v3.17.3</span><br><span class="line">quay.io/coreos/flannel:v0.13.0</span><br><span class="line">quay.io/coreos/flannel:v0.13.0-amd64</span><br><span class="line">k8s.gcr.io/pause:3.2</span><br><span class="line">k8s.gcr.io/coredns:1.7.0</span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.20.6</span><br><span class="line">k8s.gcr.io/dns/k8s-dns-node-cache:1.17.1</span><br><span class="line">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64:1.8.3</span><br></pre></td></tr></table></figure><p>由于 master 分支的代码一直在更新，当前的 master 分支的版本可能和这里的不太一样，需要修改为自己需要的版本。</p><ul><li>根据上面的镜像列表，使用 skopeo 将镜像同步到自己的镜像仓库中，如我的 <code>hub.k8s.li</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> $(cat images.list); <span class="keyword">do</span> skopeo copy docker://<span class="variable">$&#123;image&#125;</span> docker://hub.k8s.li/<span class="variable">$&#123;image#*/&#125;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>同步到我的镜像仓库中，内容就如下，在部署的时候通过修改一些镜像仓库的地址即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hub.k8s.li/nginx:1.19.0</span><br><span class="line">hub.k8s.li/calico/cni:v3.17.3</span><br><span class="line">hub.k8s.li/calico/node:v3.17.3</span><br><span class="line">hub.k8s.li/calico/kube-controllers:v3.17.3</span><br><span class="line">hub.k8s.li/coreos/flannel:v0.13.0</span><br><span class="line">hub.k8s.li/coreos/flannel:v0.13.0-amd64</span><br><span class="line">hub.k8s.li/pause:3.2</span><br><span class="line">hub.k8s.li/coredns:1.7.0</span><br><span class="line">hub.k8s.li/kube-apiserver:v1.20.6</span><br><span class="line">hub.k8s.li/kube-controller-manager:v1.20.6</span><br><span class="line">hub.k8s.li/kube-proxy:v1.20.6</span><br><span class="line">hub.k8s.li/kube-scheduler:v1.20.6</span><br><span class="line">hub.k8s.li/dns/k8s-dns-node-cache:1.17.1</span><br><span class="line">hub.k8s.li/cpa/cluster-proportional-autoscaler-amd64:1.8.3</span><br></pre></td></tr></table></figure><p>至此准备工作大致都已经完成了，接下来开始配置 kubespray 的一些参数和 inventory 文件</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>按照 kubespray 文档说明，将 <code>inventory/sample</code> 目录复制一份，然后通过修改里面的参数来控制部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># cp -rf inventory/sample deploy</span></span><br></pre></td></tr></table></figure><h3 id="inventory"><a href="#inventory" class="headerlink" title="inventory"></a>inventory</h3><ul><li><code>deploy/inventory</code></li></ul><p>创建主机 inventory 文件，格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[all:vars]</span></span><br><span class="line"><span class="attr">ansible_port</span>=<span class="number">22</span></span><br><span class="line"><span class="attr">ansible_user</span>=root</span><br><span class="line"></span><br><span class="line"><span class="attr">ansible_ssh_private_key_file</span>=/kubespray/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="section">[all]</span></span><br><span class="line">kube-control-1 ansible_host=192.168.4.11</span><br><span class="line">kube-control-2 ansible_host=192.168.4.12</span><br><span class="line">kube-control-3 ansible_host=192.168.4.13</span><br><span class="line">kube-node-1 ansible_host=192.168.4.4</span><br><span class="line"></span><br><span class="line"><span class="section">[kube_control_plane]</span></span><br><span class="line">kube-control-1</span><br><span class="line">kube-control-2</span><br><span class="line">kube-control-3</span><br><span class="line"></span><br><span class="line"><span class="section">[etcd]</span></span><br><span class="line">kube-control-1</span><br><span class="line">kube-control-2</span><br><span class="line">kube-control-3</span><br><span class="line"></span><br><span class="line"><span class="section">[kube-node]</span></span><br><span class="line">kube-control-1</span><br><span class="line">kube-control-2</span><br><span class="line">kube-control-3</span><br><span class="line">kube-node-1</span><br><span class="line"></span><br><span class="line"><span class="section">[calico-rr]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[k8s-cluster:children]</span></span><br><span class="line">kube_control_plane</span><br><span class="line">kube-node</span><br><span class="line">calico-rr</span><br></pre></td></tr></table></figure><ul><li>ssh 互信</li></ul><p>Kubespray 用到了 ansible 的 <a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/synchronize_module.html" target="_blank" rel="noopener">synchronize</a> 模块来分发文件，基于 rsync 协议所以必须要使用 ssh 密钥对来连接集群节点。inventory 配置的是 kubespray 容器内的路径，因此需要将 ssh 公钥和私钥复制到 repo 的 .ssh 目录下。如果节点就没有进行 ssh 免密登录，可以用 ansible 的 authorized_key 模块将 ssh 公钥添加到主机的 authorized_key 中。操作步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># mkdir -p .ssh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 ssh 密钥对</span></span><br><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># ssh-keygen -t rsa -f .ssh/id_rsa -P ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ssh 公钥添加到所有主机</span></span><br><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># ansible -i deploy/inventory all -m authorized_key -a "user=&#123;&#123; ansible_user &#125;&#125; key='&#123;&#123; lookup('file', '&#123;&#123; ssh_cert_path &#125;&#125;') &#125;&#125;'" -e ssh_cert_path=./.ssh/id_rsa.pub -e ansible_ssh_pass=passwd</span></span><br></pre></td></tr></table></figure><h3 id="vars"><a href="#vars" class="headerlink" title="vars"></a>vars</h3><p>创建并修改以下配置文件</p><ul><li><code>deploy/env.yml</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 定义一些组件的版本</span></span><br><span class="line"><span class="attr">kube_version:</span> <span class="string">v1.20.6</span></span><br><span class="line"><span class="attr">calico_version:</span> <span class="string">"v3.17.3"</span></span><br><span class="line"><span class="attr">pod_infra_version:</span> <span class="string">"3.2"</span></span><br><span class="line"><span class="attr">nginx_image_version:</span> <span class="string">"1.19"</span></span><br><span class="line"><span class="attr">coredns_version:</span> <span class="string">"1.7.0"</span></span><br><span class="line"><span class="attr">image_arch:</span> <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker registry domain</span></span><br><span class="line"><span class="attr">registry_domain:</span> <span class="string">"hub.k8s.li"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file download server url</span></span><br><span class="line"><span class="attr">download_url:</span> <span class="string">"https://dl.k8s.li"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-ce-repo mirrors</span></span><br><span class="line"><span class="attr">docker_mirrors_url:</span> <span class="string">"https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">container_manager:</span> <span class="string">"containerd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于使用的是 containerd 作为 CRI，目前 etcd 不支持 containerd 容器化部署因此需要将该参数修改为 host ，使用 systemd 来部署</span></span><br><span class="line"><span class="attr">etcd_deployment_type:</span> <span class="string">host</span></span><br><span class="line"><span class="attr">etcd_cluster_setup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">etcd_events_cluster_setup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">etcd_events_cluster_enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubernetes CNI type 配置集群 CNI 使用的类型</span></span><br><span class="line"><span class="attr">kube_network_plugin:</span> <span class="string">canal</span></span><br></pre></td></tr></table></figure><ul><li><code>deploy/group_vars/all/download.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Container registry define</span></span><br><span class="line"><span class="attr">gcr_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_domain &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kube_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_domain &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">docker_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_domain &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">quay_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_domain &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Download URLs</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kubeadm_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubeadm"</span></span><br><span class="line"><span class="attr">etcd_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/coreos/etcd/releases/download/<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>/etcd-<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">cni_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containernetworking/plugins/releases/download/<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>/cni-plugins-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>-<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>.tgz"</span></span><br><span class="line"><span class="attr">calicoctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calicoctl/releases/download/<span class="template-variable">&#123;&#123; calico_ctl_version &#125;&#125;</span>/calicoctl-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_crds_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calico/archive/<span class="template-variable">&#123;&#123; calico_version &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crictl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kubernetes-sigs/cri-tools/releases/download/<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>/crictl-<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">helm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/get.helm.sh/helm-<span class="template-variable">&#123;&#123; helm_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crun_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containers/crun/releases/download/<span class="template-variable">&#123;&#123; crun_version &#125;&#125;</span>/crun-<span class="template-variable">&#123;&#123; crun_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kata_containers_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kata-containers/runtime/releases/download/<span class="template-variable">&#123;&#123; kata_containers_version &#125;&#125;</span>/kata-static-<span class="template-variable">&#123;&#123; kata_containers_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_architecture &#125;&#125;</span>.tar.xz"</span></span><br><span class="line"><span class="attr">nerdctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containerd/nerdctl/releases/download/v<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>/nerdctl-<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br></pre></td></tr></table></figure><h3 id="docker-ce-mirrors"><a href="#docker-ce-mirrors" class="headerlink" title="docker-ce mirrors"></a>docker-ce mirrors</h3><p>kubespray 安装 docker 或者 containerd 容器运行时，需要使用 docker-ce 的源，国内可以使用清华的镜像源。根据不同的 Linux 发行版，在 <code>deploy/group_vars/all/offline.yml</code> 文件中添加这些参数即可。其中 <code>docker_mirrors_url</code> 这个参数就是在 <code>env.yml</code> 里设置的参数。</p><ul><li>CentOS/Redhat</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## CentOS/Redhat</span></span><br><span class="line"><span class="comment">### For EL7, base and extras repo must be available, for EL8, baseos and appstream</span></span><br><span class="line"><span class="comment">### By default we enable those repo automatically</span></span><br><span class="line"><span class="comment"># rhel_enable_repos: false</span></span><br><span class="line"><span class="comment">### Docker / Containerd</span></span><br><span class="line">docker_rh_repo_base_url: <span class="string">"&#123;&#123; docker_mirrors_url &#125;&#125;/centos/&#123;&#123; ansible_distribution_major_version &#125;&#125;/&#123;&#123; ansible_architecture &#125;&#125;/stable"</span></span><br><span class="line">docker_rh_repo_gpgkey: <span class="string">"&#123;&#123; docker_mirrors_url &#125;&#125;/centos/gpg"</span></span><br></pre></td></tr></table></figure><ul><li>Fedora</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Fedora</span></span><br><span class="line"><span class="comment">### Docker</span></span><br><span class="line"><span class="attr">docker_fedora_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/fedora/<span class="template-variable">&#123;&#123; ansible_distribution_major_version &#125;&#125;</span>/<span class="template-variable">&#123;&#123; ansible_architecture &#125;&#125;</span>/stable"</span></span><br><span class="line"><span class="attr">docker_fedora_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/fedora/gpg"</span></span><br><span class="line"><span class="comment">### Containerd</span></span><br><span class="line"><span class="attr">containerd_fedora_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/fedora/<span class="template-variable">&#123;&#123; ansible_distribution_major_version &#125;&#125;</span>/<span class="template-variable">&#123;&#123; ansible_architecture &#125;&#125;</span>/stable"</span></span><br><span class="line"><span class="attr">containerd_fedora_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/fedora/gpg"</span></span><br></pre></td></tr></table></figure><ul><li>debian</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Debian</span></span><br><span class="line"><span class="comment">### Docker</span></span><br><span class="line"><span class="attr">docker_debian_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/debian"</span></span><br><span class="line"><span class="attr">docker_debian_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/debian/gpg"</span></span><br><span class="line"><span class="comment">### Containerd</span></span><br><span class="line"><span class="attr">containerd_debian_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/debian"</span></span><br><span class="line"><span class="attr">containerd_debian_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/debian/gpg"</span></span><br><span class="line"><span class="comment"># containerd_debian_repo_repokey: 'YOURREPOKEY'</span></span><br></pre></td></tr></table></figure><ul><li>ubuntu</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Ubuntu</span></span><br><span class="line"><span class="comment">### Docker</span></span><br><span class="line"><span class="attr">docker_ubuntu_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/ubuntu"</span></span><br><span class="line"><span class="attr">docker_ubuntu_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/ubuntu/gpg"</span></span><br><span class="line"><span class="comment">### Containerd</span></span><br><span class="line"><span class="attr">containerd_ubuntu_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/ubuntu"</span></span><br><span class="line"><span class="attr">containerd_ubuntu_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/ubuntu/gpg"</span></span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>经过以上准备好配置工作之后，接下来可以开始正式部署了。在使用 ansible 进行部署的时候，个人倾向于在 kubespray 容器里进行操作，而非在本地开发机器上安装 python3 等环境。对于离线部署而言，提前构建好镜像，使用 docker 容器更为方便一些。</p><ul><li>构建镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># docker build -t kubespray:v2.15.1-kube-v1.20.6 .</span></span><br></pre></td></tr></table></figure><ul><li>运行 kubespray 容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># docker run --rm -it --net=host -v $PWD:/kubespray kubespray:v2.15.1-kube-v1.20.6 bash</span></span><br></pre></td></tr></table></figure><ul><li>测试主机是否连接正常</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/kubespray<span class="comment"># ansible -i cluster/inventory all -m ping</span></span><br><span class="line">kube-control-3 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">kube-control-1 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">kube-node-1 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">kube-control-2 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开始部署集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/kubespray<span class="comment"># ansible-playbook -i deploy/inventory -e "@deploy/env.yml" cluster.yml</span></span><br></pre></td></tr></table></figure><ul><li>部署完成日志如下，当 failed 都为 0 时说明 tasks 都已经成功跑完了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PLAY RECAP ******************************************************************</span><br><span class="line">kube-control-1             : ok=526  changed=67   unreachable=0    failed=0    skipped=978  rescued=0    ignored=0</span><br><span class="line">kube-control-2             : ok=524  changed=66   unreachable=0    failed=0    skipped=980  rescued=0    ignored=0</span><br><span class="line">kube-control-3             : ok=593  changed=76   unreachable=0    failed=0    skipped=1125 rescued=0    ignored=1</span><br><span class="line">kube-node-1                : ok=366  changed=34   unreachable=0    failed=0    skipped=628  rescued=0    ignored=0</span><br><span class="line">localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class="line"></span><br><span class="line">Wednesday 28 April 2021  10:57:57 +0000 (0:00:00.115)       0:15:21.190 *******</span><br><span class="line">===============================================================================</span><br><span class="line">kubernetes/control-plane : kubeadm | Initialize first master -------------- 65.88s</span><br><span class="line">kubernetes/control-plane : Joining control plane node to the cluster. ----- 50.05s</span><br><span class="line">kubernetes/kubeadm : Join to cluster -------------------------------------- 31.54s</span><br><span class="line">download_container | Download image <span class="keyword">if</span> required --------------------------- 24.38s</span><br><span class="line">reload etcd --------------------------------------------------------------- 20.56s</span><br><span class="line">Gen_certs | Write etcd member and admin certs to other etcd nodes --------- 19.32s</span><br><span class="line">Gen_certs | Write node certs to other etcd nodes -------------------------- 19.14s</span><br><span class="line">Gen_certs | Write etcd member and admin certs to other etcd nodes --------- 17.45s</span><br><span class="line">network_plugin/canal : Canal | Create canal node manifests ---------------- 15.41s</span><br><span class="line">kubernetes-apps/ansible : Kubernetes Apps | Lay Down CoreDNS Template ----- 13.27s</span><br><span class="line">kubernetes/control-plane : Master | <span class="built_in">wait</span> <span class="keyword">for</span> kube-scheduler --------------- 11.97s</span><br><span class="line">download_container | Download image <span class="keyword">if</span> required --------------------------- 11.76s</span><br><span class="line">Gen_certs | Write node certs to other etcd nodes -------------------------- 10.50s</span><br><span class="line">kubernetes-apps/ansible : Kubernetes Apps | Start Resources ---------------- 8.28s</span><br><span class="line">policy_controller/calico : Create calico-kube-controllers manifests -------- 7.61s</span><br><span class="line">kubernetes/control-plane : <span class="built_in">set</span> kubeadm certificate key --------------------- 6.32s</span><br><span class="line">download : extract_file | Unpacking archive -------------------------------- 5.51s</span><br><span class="line">Configure | Check <span class="keyword">if</span> etcd cluster is healthy ------------------------------- 5.41s</span><br><span class="line">Configure | Check <span class="keyword">if</span> etcd-events cluster is healthy ------------------------ 5.41s</span><br><span class="line">kubernetes-apps/network_plugin/canal : Canal | Start Resources ------------- 4.85s</span><br></pre></td></tr></table></figure><ul><li>集群状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@kube-control-1 ~]# kubectl get node -o wide</span><br><span class="line">NAME             STATUS   ROLES                  AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION           CONTAINER-RUNTIME</span><br><span class="line">kube-control-1   Ready    control-plane,master   5m24s   v1.20.6   192.168.4.11   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   containerd://1.4.4</span><br><span class="line">kube-control-2   Ready    control-plane,master   5m40s   v1.20.6   192.168.4.12   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   containerd://1.4.4</span><br><span class="line">kube-control-3   Ready    control-plane,master   6m28s   v1.20.6   192.168.4.13   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   containerd://1.4.4</span><br><span class="line">kube-node-1      Ready    &lt;none&gt;                 3m53s   v1.20.6   192.168.4.14   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   containerd://1.4.4</span><br></pre></td></tr></table></figure><ul><li>集群组件状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@kube-control-1 ~]<span class="comment"># kubectl get all -n kube-system</span></span><br><span class="line">NAME                                           READY   STATUS             RESTARTS   AGE</span><br><span class="line">pod/calico-kube-controllers-67d6cdb559-cwf62   0/1     CrashLoopBackOff   5          4m10s</span><br><span class="line">pod/canal-node-46x2b                           2/2     Running            0          4m25s</span><br><span class="line">pod/canal-node-5rkhq                           2/2     Running            0          4m25s</span><br><span class="line">pod/canal-node-fcsgn                           2/2     Running            0          4m25s</span><br><span class="line">pod/canal-node-nhkp8                           2/2     Running            0          4m25s</span><br><span class="line">pod/coredns-5d578c6f84-5nnp8                   1/1     Running            0          3m33s</span><br><span class="line">pod/coredns-5d578c6f84-w2kvf                   1/1     Running            0          3m39s</span><br><span class="line">pod/dns-autoscaler-6b675c8995-vp282            1/1     Running            0          3m34s</span><br><span class="line">pod/kube-apiserver-kube-control-1              1/1     Running            0          6m51s</span><br><span class="line">pod/kube-apiserver-kube-control-2              1/1     Running            0          7m7s</span><br><span class="line">pod/kube-apiserver-kube-control-3              1/1     Running            0          7m41s</span><br><span class="line">pod/kube-controller-manager-kube-control-1     1/1     Running            0          6m52s</span><br><span class="line">pod/kube-controller-manager-kube-control-2     1/1     Running            0          7m7s</span><br><span class="line">pod/kube-controller-manager-kube-control-3     1/1     Running            0          7m41s</span><br><span class="line">pod/kube-proxy-5dfx8                           1/1     Running            0          5m17s</span><br><span class="line">pod/kube-proxy-fvrqk                           1/1     Running            0          5m17s</span><br><span class="line">pod/kube-proxy-jd84p                           1/1     Running            0          5m17s</span><br><span class="line">pod/kube-proxy-l2mjk                           1/1     Running            0          5m17s</span><br><span class="line">pod/kube-scheduler-kube-control-1              1/1     Running            0          6m51s</span><br><span class="line">pod/kube-scheduler-kube-control-2              1/1     Running            0          7m7s</span><br><span class="line">pod/kube-scheduler-kube-control-3              1/1     Running            0          7m41s</span><br><span class="line">pod/nginx-proxy-kube-node-1                    1/1     Running            0          5m20s</span><br><span class="line">pod/nodelocaldns-77kq9                         1/1     Running            0          3m32s</span><br><span class="line">pod/nodelocaldns-fn5pd                         1/1     Running            0          3m32s</span><br><span class="line">pod/nodelocaldns-lfjzb                         1/1     Running            0          3m32s</span><br><span class="line">pod/nodelocaldns-xnc6n                         1/1     Running            0          3m32s</span><br><span class="line"></span><br><span class="line">NAME              TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">service/coredns   ClusterIP   10.233.0.3   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   3m38s</span><br><span class="line"></span><br><span class="line">NAME                          DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE</span><br><span class="line">daemonset.apps/canal-node     4         4         4       4            4           &lt;none&gt;                   4m25s</span><br><span class="line">daemonset.apps/kube-proxy     4         4         4       4            4           kubernetes.io/os=linux   7m53s</span><br><span class="line">daemonset.apps/nodelocaldns   4         4         4       4            4           &lt;none&gt;                   3m32s</span><br><span class="line"></span><br><span class="line">NAME                                      READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/calico-kube-controllers   0/1     1            0           4m12s</span><br><span class="line">deployment.apps/coredns                   2/2     2            2           3m39s</span><br><span class="line">deployment.apps/dns-autoscaler            1/1     1            1           3m34s</span><br><span class="line"></span><br><span class="line">NAME                                                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/calico-kube-controllers-67d6cdb559   1         1         0       4m12s</span><br><span class="line">replicaset.apps/coredns-5d578c6f84                   2         2         2       3m39s</span><br><span class="line">replicaset.apps/dns-autoscaler-6b675c8995            1         1         1       3m34s</span><br></pre></td></tr></table></figure><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>在国内这种十分糟糕的网络环境下，对于普通的开发者或者学生来讲，部署一个 kubernetes 集群是十分痛苦的事情，这也进一步阻碍了这门技术的普及和使用。也想起了几年前在一次 docker 技术分享时的 QA 问答：</p><blockquote><p>Q：如何摆脱网络的依赖来创建个 Docker 的 image 呢，我觉得这个是 Docker 用户自己的基本权利？</p></blockquote><p><strong>A：这个基本权利我觉得还是要问 GFW ，国外的开发人员是非常难理解有些他们认为跟水电一样普及的基础设施在某些地方还是很困难的。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;公司 PaaS 平台底层的 kubernetes
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="k8s" scheme="https://blog.k8s.li/tags/k8s/"/>
    
      <category term="kubespray" scheme="https://blog.k8s.li/tags/kubespray/"/>
    
  </entry>
  
  <entry>
    <title>什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</title>
    <link href="https://blog.k8s.li/select-registry-images.html"/>
    <id>https://blog.k8s.li/select-registry-images.html</id>
    <published>2021-04-27T16:00:00.000Z</published>
    <updated>2021-04-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="overlay2-优化"><a href="#overlay2-优化" class="headerlink" title="overlay2 优化"></a>overlay2 优化</h2><p>前段时间写过一篇 <a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a>，来介绍在产品发布流水线中使用 overlay2 和 registry 组合的技术来优化镜像同步的流程，感兴趣的小伙伴可以去阅读一下。最近<strong>忽然</strong>发现了一个可以完美替代 overlay2 的方案，而且性能更好，流程更简单。</p><p><img src="https://p.k8s.li/2021-03-01-002.jpeg" alt=""></p><p>根据在文章中提到的镜像同步流程可以得知：在打包发布流水线中，会进行两次镜像同步。第一次是根据一个镜像列表将镜像从 cicd.registry.local 仓库同步到 overlay2.registry.local；第二次是将 overlay2.registry.local 镜像同步到 package.registry.local。overlay2.registry.local 和 package.registry.local 这两个镜像仓库是在同一台机器上，而且 overlay2.registry.lcoal 的 registry 存储目录将作为 overlay2 挂载的 lower 给 package.registry.local 使用。</p><p>在 <a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a> 文章我提到过 skopeo dir 格式的镜像可以还原回 registry 存储的格式；在 <a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a> 文章中提到了可以将 registry 存储的格式转换为 skopeo dir 的格式，因此总结出 skopeo dir 和 docker registry 这两种镜像存储格式可以互相转换。</p><p>掌握了这两种镜像存储格式之间互相转换之后，突然意识到<strong>为何不直接从 registry 存储提取特定的镜像（镜像列表），并保取为 registry 存储的格式？</strong> 这样根本就不需要 overlay2 和 skopeo，可以直接对 registry 的存储进行操作，将镜像一个一个地硬链接出来。而且对 registry 文件系统的 I/O 操作从理论上来讲性能会远远高于 skopeo 这种通过 HTTP 协议传输。</p><h2 id="玩转-registry-存储"><a href="#玩转-registry-存储" class="headerlink" title="玩转 registry 存储"></a>玩转 registry 存储</h2><p>再一次搬来这张 registry 存储的结构图，如果想要看懂这系列的文章，一定要理解这张图：</p><p><img src="https://p.k8s.li/registry-storage.jpeg" alt=""></p><h3 id="registry-to-skopeo-dir"><a href="#registry-to-skopeo-dir" class="headerlink" title="registry to skopeo dir"></a>registry to skopeo dir</h3><p>之前在 <a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a>  文章中提到过将 registry 存储中的镜像转换为 skopeo dir 的格式，然后使用 skopeo 将转换后的镜像 push 到 harbor 中。大致流程如下：</p><ul><li>首先要得到镜像的 manifests 文件，从 manifests 文件中可以得到该镜像的所有 blob 文件。例如对于 registry 存储目录中的 <code>library/alpine:latest</code> 镜像来讲，它在 registry 中是这样存放的：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree</span><br><span class="line">.</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 21</span><br><span class="line">│       │   └── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── a1</span><br><span class="line">│       │   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">│       │       └── data</span><br><span class="line">│       └── be</span><br><span class="line">│           └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">│               └── data</span><br><span class="line">└── repositories</span><br><span class="line">    └── library</span><br><span class="line">        └── alpine</span><br><span class="line">            ├── _layers</span><br><span class="line">            │   └── sha256</span><br><span class="line">            │       ├── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">            │       │   └── link</span><br><span class="line">            │       └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">            │           └── link</span><br><span class="line">            ├── _manifests</span><br><span class="line">            │   ├── revisions</span><br><span class="line">            │   │   └── sha256</span><br><span class="line">            │   │       └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │   │           └── link</span><br><span class="line">            │   └── tags</span><br><span class="line">            │       └── latest</span><br><span class="line">            │           ├── current</span><br><span class="line">            │           │   └── link</span><br><span class="line">            │           └── index</span><br><span class="line">            │               └── sha256</span><br><span class="line">            │                   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │                       └── link</span><br><span class="line">            └── _uploads</span><br><span class="line"></span><br><span class="line">26 directories, 8 files</span><br></pre></td></tr></table></figure><ul><li>步骤一：通过 <code>repositories/library/alpine/_manifests/tags/latest/current/link</code> 文件得到 alpine 镜像 lasts 这个 tag 的 manifests 文件的 sha256 值，然后根据这个 sha256 值去 blobs 找到镜像的 manifests 文件;</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/alpine/_manifests/tags/latest/current/</span><br><span class="line">╰─# cat link</span><br><span class="line">sha256:39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01#</span><br></pre></td></tr></table></figure><ul><li>步骤二：根据 <code>current/link</code> 文件中的 sha256 值在 blobs 目录下找到与之对应的文件，blobs 目录下对应的 manifests 文件为 blobs/sha256/39/39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01/data;</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/alpine/_manifests/tags/latest/current</span><br><span class="line">╰─# cat /var/lib/registry/docker/registry/v2/blobs/sha256/39/39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01/data</span><br><span class="line">&#123;</span><br><span class="line">   "schemaVersion": 2,</span><br><span class="line">   "mediaType": "application/vnd.docker.distribution.manifest.v2+json",</span><br><span class="line">   "config": &#123;</span><br><span class="line">      "mediaType": "application/vnd.docker.container.image.v1+json",</span><br><span class="line">      "size": 1507,</span><br><span class="line">      "digest": "sha256:f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a"</span><br><span class="line">   &#125;,</span><br><span class="line">   "layers": [</span><br><span class="line">      &#123;</span><br><span class="line">         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",</span><br><span class="line">         "size": 2813316,</span><br><span class="line">         "digest": "sha256:cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08"</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>步骤三：使用正则匹配，过滤出 manifests 文件中的所有 sha256 值，这些 sha256 值就对应着 blobs 目录下的 image config 文件和 image layer 文件;</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/alpine/_manifests/tags/latest/current</span><br><span class="line">╰─# grep -Eo "\b[a-f0-9]&#123;64&#125;\b" /var/lib/registry/docker/registry/v2/blobs/sha256/39/39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01/data</span><br><span class="line">f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br></pre></td></tr></table></figure><ul><li>步骤四：根据 manifests 文件就可以得到 blobs 目录中镜像的所有 layer 和 image config 文件，然后将这些文件拼成一个 dir 格式的镜像，在这里使用 cp 的方式将镜像从 registry 存储目录里复制出来，过程如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先创建一个文件夹，为了保留镜像的 name 和 tag，文件夹的名称就对应的是 NAME:TAG</span></span><br><span class="line">╭─root@sg-02 /var/lib/registry/docker</span><br><span class="line">╰─# mkdir -p skopeo/library/alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制镜像的 manifest 文件</span></span><br><span class="line">╭─root@sg-02 /var/lib/registry/docker</span><br><span class="line">╰─# cp /var/lib/registry/docker/registry/v2/blobs/sha256/39/39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01/data skopeo/library/alpine:latest/manifest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制镜像的 blob 文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /var/lib/registry/docker/registry/v2/blobs/sha256/f7/f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a/data skopeo/library/alpine:latest/f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /var/lib/registry/docker/registry/v2/blobs/sha256/cb/cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08/data skopeo/library/alpine:latest/cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span></span><br></pre></td></tr></table></figure><p>最终得到的镜像格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker</span><br><span class="line">╰─# tree skopeo/library/alpine:latest</span><br><span class="line">skopeo/library/alpine:latest</span><br><span class="line">├── cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class="line">├── f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">└── manifest</span><br><span class="line"></span><br><span class="line">0 directories, 3 files</span><br></pre></td></tr></table></figure><h3 id="skopeo-dir-to-registry"><a href="#skopeo-dir-to-registry" class="headerlink" title="skopeo dir to registry"></a>skopeo dir to registry</h3><p>在 <a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a> 文章我提到过 skopeo dir 格式的镜像可以还原回 registry 存储的格式，大致流程如下：</p><p>将 <code>images/alpine:latest</code> 这个镜像在转换成 docker registry 存储目录的形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root # tree -h images/alpine:latest</span><br><span class="line">images/alpine:latest</span><br><span class="line">└── [4.0K]  alpine:latest</span><br><span class="line">    ├── [2.7M]  4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">    ├── [1.5K]  af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">    ├── [ 528]  manifest.json</span><br><span class="line">    └── [  33]  version</span><br></pre></td></tr></table></figure><p>根据镜像文件大小我们可以得知： <code>2.7M</code> 大小的 <code>4167d3e1497……</code> 文件就是镜像的 layer 文件，由于 alpine 是一个 base 镜像，该 layer 就是 alpine 的根文件系统；<code>1.5K</code> 大小的 <code>af341ccd2……</code> 显而易见就是镜像的 images config 文件；<code>manifest.json</code> 文件则是镜像在 registry 存储中的 manifest.json 文件。</p><ul><li>步骤一：先创建该镜像在 registry 存储中的目录结构</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root # mkdir -p docker/registry/v2/&#123;blobs/sha256,repositories/alpine&#125;</span><br><span class="line">root@debian:/root # tree docker</span><br><span class="line">docker</span><br><span class="line">└── registry</span><br><span class="line">    └── v2</span><br><span class="line">        ├── blobs</span><br><span class="line">        │   └── sha256</span><br><span class="line">        └── repositories</span><br><span class="line">            └── alpine</span><br></pre></td></tr></table></figure><ul><li>步骤二：构建镜像 layer 的 link 文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -Eo "\b[a-f0-9]&#123;64&#125;\b" images/alpine:latest/manifest.json | sort -u | xargs -L1 -I &#123;&#125; mkdir -p docker/registry/v2/repositories/alpine/_layers/sha256/&#123;&#125;</span><br><span class="line"></span><br><span class="line">grep -Eo "\b[a-f0-9]&#123;64&#125;\b" images/alpine:latest/manifest.json | sort -u | xargs -L1 -I &#123;&#125; sh -c "echo -n 'sha256:&#123;&#125;' &gt; docker/registry/v2/repositories/alpine/_layers/sha256/&#123;&#125;/link"</span><br></pre></td></tr></table></figure><ul><li>步骤三：构建镜像 tag 的 link 文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">manifests_sha256=$(sha256sum images/alpine:latest/manifest.json | awk '&#123;print $1&#125;')</span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/revisions/sha256/$&#123;manifests_sha256&#125;</span><br><span class="line">echo -n "sha256:$&#123;manifests_sha256&#125;" &gt; docker/registry/v2/repositories/alpine/_manifests/revisions/sha256/$&#123;manifests_sha256&#125;/link</span><br><span class="line"></span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/tags/latest/index/sha256/$&#123;manifests_sha256&#125;</span><br><span class="line">echo -n "sha256:$&#123;manifests_sha256&#125;" &gt; docker/registry/v2/repositories/alpine/_manifests/tags/latest/index/sha256/$&#123;manifests_sha256&#125;/link</span><br><span class="line"></span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/tags/latest/current</span><br><span class="line">echo -n "sha256:$&#123;manifests_sha256&#125;" &gt; docker/registry/v2/repositories/alpine/_manifests/tags/latest/current/link</span><br></pre></td></tr></table></figure><ul><li>步骤四：构建镜像的 blobs 目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p docker/registry/v2/blobs/sha256/$&#123;manifests_sha256:0:2&#125;/$&#123;manifests_sha256&#125;</span><br><span class="line">ln -f images/alpine:latest/manifest.json docker/registry/v2/blobs/sha256/$&#123;manifests_sha256:0:2&#125;/$&#123;manifests_sha256&#125;/data</span><br><span class="line"></span><br><span class="line">for layer in $(grep -Eo "\b[a-f0-9]&#123;64&#125;\b" images/alpine:latest/manifest.json); do</span><br><span class="line">    mkdir -p docker/registry/v2/blobs/sha256/$&#123;layer:0:2&#125;/$&#123;layer&#125;</span><br><span class="line">    ln -f  images/alpine:latest/$&#123;layer&#125; docker/registry/v2/blobs/sha256/$&#123;layer:0:2&#125;/$&#123;layer&#125;/data</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>最终得到的 registry 存储目录如下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker</span><br><span class="line">└── registry</span><br><span class="line">    └── v2</span><br><span class="line">        ├── blobs</span><br><span class="line">        │   └── sha256</span><br><span class="line">        │       ├── 41</span><br><span class="line">        │       │   └── 4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">        │       │       └── data</span><br><span class="line">        │       ├── af</span><br><span class="line">        │       │   └── af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">        │       │       └── data</span><br><span class="line">        │       └── de</span><br><span class="line">        │           └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">        │               └── data</span><br><span class="line">        └── repositories</span><br><span class="line">            └── alpine</span><br><span class="line">                ├── _layers</span><br><span class="line">                │   └── sha256</span><br><span class="line">                │       ├── 4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">                │       │   └── link</span><br><span class="line">                │       └── af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">                │           └── link</span><br><span class="line">                └── _manifests</span><br><span class="line">                    ├── revisions</span><br><span class="line">                    │   └── sha256</span><br><span class="line">                    │       └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">                    │           └── link</span><br><span class="line">                    └── tags</span><br><span class="line">                        └── latest</span><br><span class="line">                            ├── current</span><br><span class="line">                            │   └── link</span><br><span class="line">                            └── index</span><br><span class="line">                                └── sha256</span><br><span class="line">                                    └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">                                        └── link</span><br></pre></td></tr></table></figure><h3 id="registry-to-registry-by-images-list"><a href="#registry-to-registry-by-images-list" class="headerlink" title="registry to registry  by images list"></a>registry to registry  by images list</h3><p>熟悉了如何将 registry 存储转换为 skopeo dir 以及镜像 skopeo dir 转换为 registry 存储的流程之后，我们就可以根据一个镜像列表，将镜像从一个很大的 registry 存储中（里面几千个镜像）提取出一些特定的镜像。比如镜像列表如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">library/alpine:latest</span><br><span class="line">library/alpine:3.6</span><br><span class="line">library/alpine:3.7</span><br><span class="line">library/busybox:1.30.0</span><br><span class="line">library/centos:6.7</span><br><span class="line">library/centos:7.4.1708</span><br><span class="line">library/default-http-backend:v0.1.0</span><br><span class="line">library/elasticsearch:6.5.4</span><br><span class="line">library/examples-bookinfo-details-v1:1.8.0</span><br><span class="line">library/examples-bookinfo-productpage-v1:1.8.0</span><br><span class="line">library/examples-bookinfo-ratings-v1:1.8.0</span><br><span class="line">library/examples-bookinfo-reviews-v1:1.8.0</span><br><span class="line">library/examples-bookinfo-reviews-v2:1.8.0</span><br><span class="line">library/examples-bookinfo-reviews-v3:1.8.0</span><br><span class="line">library/galera:5.7.20</span><br><span class="line">library/gitlab-ce:10.3.3-ce.0</span><br><span class="line">library/golang:1.10.1-alpine3.7</span><br><span class="line">library/golang:1.9.5-alpine3.7</span><br><span class="line">library/gradle:5.5.1</span><br><span class="line">library/haproxy:1.6.14-alpine</span><br><span class="line">library/haproxy:1.7.10-alpine</span><br><span class="line">library/influxdb:1.4.2-alpine</span><br><span class="line">library/influxdb:1.4.3</span><br><span class="line">library/influxdb:1.5.2-alpine</span><br><span class="line">library/jenkins:2.101-alpine-enhanced</span><br><span class="line">library/kibana:6.5.4</span><br><span class="line">library/mariadb:10.2.12</span><br><span class="line">library/maven:3.5.3-ibmjava-8-alpine</span><br><span class="line">library/maven:3.5.3-jdk-8-alpine</span><br><span class="line">library/memcached:1.5.4-alpine</span><br><span class="line">library/mongo:3.4.14-jessie</span><br><span class="line">library/mongo:3.6.1</span><br><span class="line">library/mongo:3.6.13</span><br><span class="line">library/mongo:3.7.3-jessie</span><br><span class="line">library/mysql:5.6.39</span><br><span class="line">library/mysql:5.7.20</span><br><span class="line">library/nginx:1.11.12-alpine</span><br><span class="line">library/nginx:1.12.2</span><br><span class="line">library/nginx:1.13.8-alpine</span><br><span class="line">library/nginx-ingress-controller:0.23.0-cps-1.3</span><br><span class="line">library/node:9-alpine</span><br><span class="line">library/openjdk:8u151-alpine3.7</span><br><span class="line">library/openjdk:8u151-jre-alpine3.7</span><br><span class="line">library/php:7.1-apache</span><br><span class="line">library/python:2.7.14-alpine3.6</span><br><span class="line">library/python:3.6.5-alpine3.6</span><br><span class="line">library/rabbitmq:3.7.2-alpine</span><br><span class="line">library/redis:3.2.11-alpine</span><br><span class="line">library/redis:4.0.6-alpine</span><br><span class="line">library/redis:4.0.9-alpine</span><br><span class="line">library/redmine:3.4.4</span><br><span class="line">library/sbt:8u232_1.3.13</span><br><span class="line">library/wordpress:4.9.1</span><br></pre></td></tr></table></figure><p>我们先以单个镜像为例子如： <code>library/alpine:latest</code></p><ul><li>首先要得到镜像的 manifest 文件，从 manifest 文件中可以得到该镜像的所有 blob 文件。例如对于 registry 存储目录中的 <code>library/alpine:latest</code> 镜像来讲，它在 registry 中是这样存放的：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree</span><br><span class="line">.</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 21</span><br><span class="line">│       │   └── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── a1</span><br><span class="line">│       │   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">│       │       └── data</span><br><span class="line">│       └── be</span><br><span class="line">│           └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">│               └── data</span><br><span class="line">└── repositories</span><br><span class="line">    └── library</span><br><span class="line">        └── alpine</span><br><span class="line">            ├── _layers</span><br><span class="line">            │   └── sha256</span><br><span class="line">            │       ├── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">            │       │   └── link</span><br><span class="line">            │       └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">            │           └── link</span><br><span class="line">            ├── _manifests</span><br><span class="line">            │   ├── revisions</span><br><span class="line">            │   │   └── sha256</span><br><span class="line">            │   │       └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │   │           └── link</span><br><span class="line">            │   └── tags</span><br><span class="line">            │       └── latest</span><br><span class="line">            │           ├── current</span><br><span class="line">            │           │   └── link</span><br><span class="line">            │           └── index</span><br><span class="line">            │               └── sha256</span><br><span class="line">            │                   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │                       └── link</span><br><span class="line">            └── _uploads</span><br><span class="line"></span><br><span class="line">26 directories, 8 files</span><br></pre></td></tr></table></figure><ul><li>首先定义一些需要用到的变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义镜像列表</span></span><br><span class="line">IMAGES_LIST=<span class="string">"images.list"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 registry 存储目录的绝对路径</span></span><br><span class="line">REGISTRY_PATH=<span class="string">"/var/lib/registry"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输出的存储目录路径，要和 registay 存储在同一分区</span></span><br><span class="line">OUTPUT_DIR=<span class="string">"/var/lib/images"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义这两个固定变量</span></span><br><span class="line">BLOB_DIR=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">REPO_DIR=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义单个镜像</span></span><br><span class="line">image=<span class="string">"library/alpine:latest"</span></span><br><span class="line"><span class="comment"># 使用 bash 内置的变量替换截取出镜像的 name</span></span><br><span class="line">image_tag=<span class="variable">$&#123;image##*:&#125;</span></span><br><span class="line"><span class="comment"># 使用 bash 内置的变量替换截取出镜像的 tag</span></span><br><span class="line">image_name=<span class="variable">$&#123;image%%:*&#125;</span></span><br></pre></td></tr></table></figure><ul><li>步骤一：通过 <code>${REGISTRY_PATH}/${REPO_DIR}/${image_name}/_manifests/tags/${image_tag}/current/link</code> 文件得到 alpine 镜像 lasts 这个 tag 的 manifests 文件的 sha256 值，然后根据这个 sha256 值去 blobs 目录下找到镜像的 manifests 文件;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tag_link=<span class="variable">$&#123;REGISTRY_PATH&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line">manifest_sha256=$(sed <span class="string">'s/sha256://'</span> <span class="variable">$&#123;tag_link&#125;</span>)</span><br><span class="line">manifest=<span class="variable">$&#123;REGISTRY_PATH&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br></pre></td></tr></table></figure><ul><li>步骤二：找到镜像的 manifest 文件之后，在输出目录下创建相应的目录，并通过硬链接的方式将镜像的 manifest 链接到输出对应的目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">ln -f <span class="variable">$&#123;manifest&#125;</span> <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br></pre></td></tr></table></figure><ul><li>步骤三：参照 <strong>skopeo dir to registry</strong> 中的步骤三创建镜像 tag 的 link 文件，路径基本上保持一致，只不过前面需要加上输出目录的路径，步骤如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make image repositories dir</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/&#123;_uploads,_layers,_manifests&#125;</span><br><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create image tag manifest link file</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br></pre></td></tr></table></figure><ul><li>步骤四：通过正则匹配  sha256 值获取该镜像 manifest 文件中的所有 image layer 和 image config，并在一个 for 循环中将对应 sha256 值对应的 blob 文件硬链接到输出目录，并在 _layer 目录下创建相应的 link 文件。这一步和 <strong>skopeo dir to registry</strong> 中的步骤四及其相似。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> $(sed <span class="string">'/v1Compatibility/d'</span> <span class="variable">$&#123;manifest&#125;</span> | grep -Eo <span class="string">'\b[a-f0-9]&#123;64&#125;\b'</span> | sort -u); <span class="keyword">do</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">    ln -f <span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;layer&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span>/link</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>将上述步骤整合成一个 shell 脚本 <code>select_registry_images.sh</code> 如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -eo pipefail</span><br><span class="line"></span><br><span class="line">IMAGES_LIST="$1"</span><br><span class="line">REGISTRY_PATH="$2"</span><br><span class="line">OUTPUT_DIR="$3"</span><br><span class="line">BLOB_DIR="docker/registry/v2/blobs/sha256"</span><br><span class="line">REPO_DIR="docker/registry/v2/repositories"</span><br><span class="line"></span><br><span class="line">rm -rf $&#123;OUTPUT_DIR&#125;; mkdir -p $&#123;OUTPUT_DIR&#125;</span><br><span class="line">for image in $(find $&#123;IMAGES_LIST&#125; -type f -name "*.list" | xargs grep -Ev '^#|^/' | grep ':'); do</span><br><span class="line">    image_tag=$&#123;image##*:&#125;</span><br><span class="line">    image_name=$&#123;image%%:*&#125;</span><br><span class="line">    tag_link=$&#123;REGISTRY_PATH&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/current/link</span><br><span class="line">    manifest_sha256=$(sed 's/sha256://' $&#123;tag_link&#125;)</span><br><span class="line">    manifest=$&#123;REGISTRY_PATH&#125;/$&#123;BLOB_DIR&#125;/$&#123;manifest_sha256:0:2&#125;/$&#123;manifest_sha256&#125;/data</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;BLOB_DIR&#125;/$&#123;manifest_sha256:0:2&#125;/$&#123;manifest_sha256&#125;</span><br><span class="line">    ln -f $&#123;manifest&#125; $&#123;OUTPUT_DIR&#125;/$&#123;BLOB_DIR&#125;/$&#123;manifest_sha256:0:2&#125;/$&#123;manifest_sha256&#125;/data</span><br><span class="line"></span><br><span class="line">    # make image repositories dir</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/&#123;_uploads,_layers,_manifests&#125;</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/revisions/sha256/$&#123;manifest_sha256&#125;</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/&#123;current,index/sha256&#125;</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/index/sha256/$&#123;manifest_sha256&#125;</span><br><span class="line"></span><br><span class="line">    # create image tag manifest link file</span><br><span class="line">    echo -n "sha256:$&#123;manifest_sha256&#125;" &gt; $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/current/link</span><br><span class="line">    echo -n "sha256:$&#123;manifest_sha256&#125;" &gt; $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/revisions/sha256/$&#123;manifest_sha256&#125;/link</span><br><span class="line">    echo -n "sha256:$&#123;manifest_sha256&#125;" &gt; $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/index/sha256/$&#123;manifest_sha256&#125;/link</span><br><span class="line">    for layer in $(sed '/v1Compatibility/d' $&#123;manifest&#125; | grep -Eo '\b[a-f0-9]&#123;64&#125;\b' | sort -u); do</span><br><span class="line">        mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;BLOB_DIR&#125;/$&#123;layer:0:2&#125;/$&#123;layer&#125;</span><br><span class="line">        mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_layers/sha256/$&#123;layer&#125;</span><br><span class="line">        ln -f $&#123;BLOB_DIR&#125;/$&#123;layer:0:2&#125;/$&#123;layer&#125;/data $&#123;OUTPUT_DIR&#125;/$&#123;BLOB_DIR&#125;/$&#123;layer:0:2&#125;/$&#123;layer&#125;/data</span><br><span class="line">        echo -n "sha256:$&#123;layer&#125;" &gt; $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_layers/sha256/$&#123;layer&#125;/link</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行该脚本，将 images.list 中的 183 个镜像通过硬链接的方式，从 registry 存储中提取到另一个 registry 存储目录下，用时才 6s 左右。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~$ wc images.list</span><br><span class="line"> 183  183 5644 images.list</span><br><span class="line"></span><br><span class="line">root@debian:~$ time bash select_registry_images.sh images.list /var/lib/registry /var/lib/images</span><br><span class="line">bash select_registry_images.sh images.list /var/lib/registry   4.39s user 2.48s system 109% cpu 6.283 total</span><br></pre></td></tr></table></figure><h2 id="效果如何？"><a href="#效果如何？" class="headerlink" title="效果如何？"></a>效果如何？</h2><p>之前使用 overlay2 技术已经将流水线的镜像同步优化得很好了，由原来的最长 2h30min 缩短到了几分钟。</p><p>经过本次的优化，将流水线中第二次的镜像同步耗时从原来的  90s 缩短到了 6s，速度提升了 15 倍，而且过程比之前更简单了一些，也不再需要引入 overlay2 这种技术。看来之前被我吹了这么久的 overlay2 + registry 组合技术和这次优化相比也不过如此。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;overlay2-优化&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="images" scheme="https://blog.k8s.li/tags/images/"/>
    
      <category term="skopeo" scheme="https://blog.k8s.li/tags/skopeo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 registry 存储的特性</title>
    <link href="https://blog.k8s.li/skopeo-to-registry.html"/>
    <id>https://blog.k8s.li/skopeo-to-registry.html</id>
    <published>2021-04-16T16:00:00.000Z</published>
    <updated>2021-04-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="苦命打包工具人😭"><a href="#苦命打包工具人😭" class="headerlink" title="苦命打包工具人😭"></a>苦命打包工具人😭</h2><p>目前在负责公司 PaaS toB 产品的打包发布工作（苦命发版+打包工具人😣）。日常的一项工作就是跑完自动化打包流水线，再将打出来的安装包更新到 QA 测试环境中。因为打包环境和测试环境分布在两个不同的机房，产品的安装包需要跨公网从打包机器上同步到 QA 环境中，因此产品安装包的大小就决定着两者间同步的耗时。优化和减少产品安装包的大小就成为了提升流水线效率的途径之一。最近做的一项工作就是将产品补丁包的大小减少 30%～60%，大大节省了补丁包上传下载和安装的耗时，提升了产品打包流水线的效率。因此今天就总结一下从中学到的一点人生经验 👓。</p><h2 id="再次优化"><a href="#再次优化" class="headerlink" title="再次优化"></a>再次优化</h2><p>因为产品所有的组件都是容器化的形式部署的，所以产品的补丁包中最主要的就是镜像文件以及一些部署脚本，想要优化和见减小补丁包基本上等同于减小这些镜像的大小。众所周知 docker 镜像是由一层一层的 layer + 镜像的元数据信息构成的，其中镜像的元数据信息就是镜像的 image config + manifests，这些都是 json 格式的文本内容，相对于镜像的 layer 的大小，这些文本内容往往可以忽略不计。</p><p>其实去年的时候已经做过了一次优化，将补丁包镜像打包的方式由原来的 docker save 的方式替换成了 skopeo copy 到目录的方式，优化的效果就是：将补丁包的大小减少了 60%～80%；流水线的速度提升了 5 倍；补丁包安装速度也提升了 5 倍。这项优化的原理可以参考我之前的博客 <a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生</a>。虽然第一次已经有了这么明显的优化，但咱仍然觉得还有可以优化的空间。</p><p>经过第一次优化之后，产品补丁包中镜像存在的形式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kube <span class="comment"># tree images -h</span></span><br><span class="line">images</span><br><span class="line">├── [4.0K]  kube-apiserver:v1.20.5</span><br><span class="line">│   ├── [707K]  742efefc8a44179dcc376b969cb5e3f8afff66f87ab618a15164638ad07bf722</span><br><span class="line">│   ├── [ 28M]  98d681774b176bb2fd6b3499377d63ff4b1b040886dd9d3641bb93840815a1e7</span><br><span class="line">│   ├── [2.6K]  d7e24aeb3b10210bf6a2dc39f77c1ea835b22af06dfd2933c06e0421ed6d35ac</span><br><span class="line">│   ├── [642K]  fefd475334af8255ba693de12951b5176a2853c2f0d5d2b053e188a1f3b611d9</span><br><span class="line">│   ├── [ 949]  manifest.json</span><br><span class="line">│   └── [  33]  version</span><br><span class="line">├── [4.0K]  kube-controller-manager:v1.20.5</span><br><span class="line">│   ├── [ 27M]  454a7944c47b608efb657a1bef7f4093f63ceb2db14fd78c5ecd2a08333da7cf</span><br><span class="line">│   ├── [2.6K]  6f0c3da8c99e99bbe82920a35653f286bd8130f0662884e77fa9fcdca079c07f</span><br><span class="line">│   ├── [707K]  742efefc8a44179dcc376b969cb5e3f8afff66f87ab618a15164638ad07bf722</span><br><span class="line">│   ├── [642K]  fefd475334af8255ba693de12951b5176a2853c2f0d5d2b053e188a1f3b611d9</span><br><span class="line">│   ├── [ 949]  manifest.json</span><br><span class="line">│   └── [  33]  version</span><br><span class="line">└── [4.0K]  kube-scheduler:v1.20.5</span><br><span class="line">    ├── [ 12M]  565677e452d17c4e2841250bbf0cc010d906fbf7877569bb2d69bfb4e68db1b5</span><br><span class="line">    ├── [707K]  742efefc8a44179dcc376b969cb5e3f8afff66f87ab618a15164638ad07bf722</span><br><span class="line">    ├── [2.6K]  8d13f1db8bfb498afb0caff6bf3f8c599ecc2ace74275f69886067f6af8ffdf6</span><br><span class="line">    ├── [642K]  fefd475334af8255ba693de12951b5176a2853c2f0d5d2b053e188a1f3b611d9</span><br><span class="line">    ├── [ 949]  manifest.json</span><br><span class="line">    └── [  33]  version</span><br></pre></td></tr></table></figure><p>仔细分析可以发现这样打包出来的镜像要比它们在 registry 中的所占存储空间要大一些，这是因为每一个镜像存储目录下都保存在该镜像的所有 layer ，不能像 registry 存储那样可以复用相同的 layer。比如 <code>kube-apiserver</code>  <code>kube-controller-manager</code> <code>kube-scheduler</code> 这三个镜像都是使用的 <code>k8s.gcr.io/build-image/go-runner</code> 这个 base 镜像。在 registry 中，它只需要存储一份 <code>go-runner</code> base 镜像即可。而使用 skopeo copy 存储在目录中时，就需要分别存储一份这个 base 镜像了。</p><p>从文件名和文件大小也可以大致推断出 <code>707K</code> 大小的 742efefc8a 就是 <code>go-runner</code> 镜像的跟文件系统；<code>642K</code> 大小的 fefd47533 就是 go-runner 的二进制文件；<code>2.x</code> 左右大小的应该就是镜像的 image config 文件；剩下那个十几二十几 M 的就是  <code>kube-apiserver</code>  <code>kube-controller-manager</code> <code>kube-scheduler</code>  的二进制文件；manifest.json 文件就是镜像在 registry 存储中的 manifest 。</p><ul><li>使用 find 来统计这些文件的数量，经过去重之后可以发现镜像的 layer 文件和 config 文件总数量从原来的 12 个减少到 8 个。做一个简单的加法计算也就是：3 个 image config 文件 + 3 个二进制文件 + 1 个 base 镜像 layer 文件 + 1 个 go-runner 二进制文件，这不正好就是 8 嘛😂</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kube <span class="comment"># find images -type f | grep -Eo "\b[a-f0-9]&#123;64&#125;\b" | wc</span></span><br><span class="line">12</span><br><span class="line">root@debian:/root/kube <span class="comment"># find images -type f | grep -Eo "\b[a-f0-9]&#123;64&#125;\b" | sort -u | wc -l</span></span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>既然补丁包中的镜像文件有一些相同的 layer，那么去重这些相同的 layer 文件岂不就能减少补丁包的大小了？于是就拿了一个历史的补丁包测试一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root $ du -sh images</span><br><span class="line">3.3Gimages</span><br><span class="line">root@debian:/root $ find images -<span class="built_in">type</span> f ! -name <span class="string">'version'</span> ! -name <span class="string">'manifest.json'</span> | wc -l</span><br><span class="line">279</span><br><span class="line">root@debian:/root $ mkdir -p images2</span><br><span class="line">root@debian:/root $ find images -<span class="built_in">type</span> f -<span class="built_in">exec</span> mv &#123;&#125; images2 \;</span><br><span class="line">root@debian:/root $ du -sh images2</span><br><span class="line">1.3Gimages2</span><br><span class="line">root@debian:/root $ $ find images2 -<span class="built_in">type</span> f ! -name <span class="string">'version'</span> ! -name <span class="string">'manifest.json'</span> | wc -l</span><br><span class="line">187</span><br></pre></td></tr></table></figure><p>没有对比就没有伤害，经过测试之后发现：补丁包中镜像文件的总数量由原来的 279 个减小至 187 个，总大小从原来的 3.3G 减小到 1.3G，减小了 60%！当时兴奋得我拍案叫绝，如获珍宝。其实这得益于我们产品组件使用的 base 镜像基本上是相同的，因此可以去除掉很多相同的 base 镜像 layer 文件。</p><p>既然找到了减小补丁包中镜像大小的思路，那么只要找到一种方式来去重这些镜像 layer 就可以了。首先想到的就是使用 registry 存储：根据 registry 存储的特性，镜像在 registry 中是可以复用相同的 layer 的。所以大体的思路就是将这些补丁包中的镜像转换为 registry 存储的格式，在安装的时候再将 registry 存储的格式转换为 skopeo copy 支持的 dir 格式。</p><h2 id="构建-skopeo-dir-镜像存储"><a href="#构建-skopeo-dir-镜像存储" class="headerlink" title="构建 skopeo dir 镜像存储"></a>构建 skopeo dir 镜像存储</h2><ul><li>为了方便演示，需要找个合适的镜像列表，看了一下 <a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">ks-installer</a> 项目中有个镜像列表，看样子比较合适那就用它吧😃</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.0.0/images-list.txt</span></span><br></pre></td></tr></table></figure><ul><li>首先将镜像使用 skopeo sync 同步到本地目录，并统计一下镜像的大小和文件的数量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># for img in $(cat cat images-list.txt | grep -v "#");do skopeo sync --insecure-policy --src docker --dest dir $&#123;img&#125; images; done</span></span><br><span class="line"></span><br><span class="line">root@debian:/root <span class="comment"># tree images -d -L 1</span></span><br><span class="line">images</span><br><span class="line">├── alpine:3.10.4</span><br><span class="line">├── busybox:1.31.1</span><br><span class="line">├── calico</span><br><span class="line">├── coredns</span><br><span class="line">├── csiplugin</span><br><span class="line">├── docker:19.03</span><br><span class="line">├── elastic</span><br><span class="line">├── fluent</span><br><span class="line">├── haproxy:2.0.4</span><br><span class="line">├── istio</span><br><span class="line">├── jaegertracing</span><br><span class="line">├── java:openjdk-8-jre-alpine</span><br><span class="line">├── jenkins</span><br><span class="line">├── jimmidyson</span><br><span class="line">├── joosthofman</span><br><span class="line">├── kubesphere</span><br><span class="line">├── minio</span><br><span class="line">├── mirrorgooglecontainers</span><br><span class="line">├── mysql:8.0.11</span><br><span class="line">├── nginx:1.14-alpine</span><br><span class="line">├── nginxdemos</span><br><span class="line">├── openpitrix</span><br><span class="line">├── osixia</span><br><span class="line">├── perl:latest</span><br><span class="line">├── prom</span><br><span class="line">├── redis:5.0.5-alpine</span><br><span class="line">└── wordpress:4.8-apache</span><br></pre></td></tr></table></figure><ul><li>使用 skopeo sync 将镜像同步到本地 images 目录后，统计可得所有镜像的大小为 11G、总的文件为 1264 个。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># du -sh images</span></span><br><span class="line">11Gimages</span><br><span class="line">root@debian:/root <span class="comment"># find images -type f ! -name "version" | wc -l</span></span><br><span class="line">1264</span><br></pre></td></tr></table></figure><h2 id="转换成-registry-存储目录"><a href="#转换成-registry-存储目录" class="headerlink" title="转换成 registry 存储目录"></a>转换成 registry 存储目录</h2><p>根据下图所示的 registry 存储结构，我们要将镜像的 layer、image config、manifests 这三种文件根据它们的 sha256 值存放到 blobs/sha256 目录下，然后再在 repositories 目录下创建相应link 文件，这样就可以将镜像转换成 registry 存储的格式了。</p><p><img src="https://p.k8s.li/registry-storage.jpeg" alt=""></p><p>为方便演示我们先以单个镜像为例，将 <code>images/alpine:3.10.4</code> 这个镜像在转换成 docker registry 存储目录的形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># tree -h images/alpine:3.10.4</span></span><br><span class="line">images/alpine:3.10.4</span><br><span class="line">└── [4.0K]  alpine:3.10.4</span><br><span class="line">    ├── [2.7M]  4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">    ├── [1.5K]  af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">    ├── [ 528]  manifest.json</span><br><span class="line">    └── [  33]  version</span><br></pre></td></tr></table></figure><p> 根据镜像文件大小我们可以得知： <code>2.7M</code> 大小的 <code>4167d3e1497……</code> 文件就是镜像的 layer 文件，由于 alpine 是一个 base 镜像，该 layer 就是 alpine 的根文件系统；<code>1.5K</code> 大小的 <code>af341ccd2……</code> 显而易见就是镜像的 images config 文件；<code>manifest.json</code> 文件则是镜像在 registry 存储中的 manifest.json 文件。</p><ul><li>先创建该镜像在 registry 存储中的目录结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># mkdir -p docker/registry/v2/&#123;blobs/sha256,repositories/alpine&#125;</span></span><br><span class="line">root@debian:/root <span class="comment"># tree docker</span></span><br><span class="line">docker</span><br><span class="line">└── registry</span><br><span class="line">    └── v2</span><br><span class="line">        ├── blobs</span><br><span class="line">        │   └── sha256</span><br><span class="line">        └── repositories</span><br><span class="line">            └── alpine</span><br></pre></td></tr></table></figure><ul><li>构建镜像 layer 的 link 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> images/alpine:3.10.4/manifest.json | sort -u | xargs -L1 -I &#123;&#125; mkdir -p docker/registry/v2/repositories/alpine/_layers/sha256/&#123;&#125;</span><br><span class="line"></span><br><span class="line">grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> images/alpine:3.10.4/manifest.json | sort -u | xargs -L1 -I &#123;&#125; sh -c <span class="string">"echo -n 'sha256:&#123;&#125;' &gt; docker/registry/v2/repositories/alpine/_layers/sha256/&#123;&#125;/link"</span></span><br></pre></td></tr></table></figure><ul><li>构建镜像 tag 的 link 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">manifests_sha256=$(sha256sum images/alpine:3.10.4/manifest.json | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/revisions/sha256/<span class="variable">$&#123;manifests_sha256&#125;</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifests_sha256&#125;</span>"</span> &gt; docker/registry/v2/repositories/alpine/_manifests/revisions/sha256/<span class="variable">$&#123;manifests_sha256&#125;</span>/link</span><br><span class="line"></span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/tags/3.10.4/index/sha256/<span class="variable">$&#123;manifests_sha256&#125;</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifests_sha256&#125;</span>"</span> &gt; docker/registry/v2/repositories/alpine/_manifests/tags/3.10.4/index/sha256/<span class="variable">$&#123;manifests_sha256&#125;</span>/link</span><br><span class="line"></span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/tags/3.10.4/current</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifests_sha256&#125;</span>"</span> &gt; docker/registry/v2/repositories/alpine/_manifests/tags/3.10.4/current/link</span><br></pre></td></tr></table></figure><ul><li>构建镜像的 blobs 目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p docker/registry/v2/blobs/sha256/<span class="variable">$&#123;manifests_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifests_sha256&#125;</span></span><br><span class="line">ln -f images/alpine:3.10.4/manifest.json docker/registry/v2/blobs/sha256/<span class="variable">$&#123;manifests_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifests_sha256&#125;</span>/data</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> $(grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> images/alpine:3.10.4/manifest.json); <span class="keyword">do</span></span><br><span class="line">    mkdir -p docker/registry/v2/blobs/sha256/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">    ln -f  images/alpine:3.10.4/<span class="variable">$&#123;layer&#125;</span> docker/registry/v2/blobs/sha256/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>最终得到的 registry 存储目录如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker</span><br><span class="line">└── registry</span><br><span class="line">    └── v2</span><br><span class="line">        ├── blobs</span><br><span class="line">        │   └── sha256</span><br><span class="line">        │       ├── 41</span><br><span class="line">        │       │   └── 4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">        │       │       └── data</span><br><span class="line">        │       ├── af</span><br><span class="line">        │       │   └── af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">        │       │       └── data</span><br><span class="line">        │       └── de</span><br><span class="line">        │           └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">        │               └── data</span><br><span class="line">        └── repositories</span><br><span class="line">            └── alpine</span><br><span class="line">                ├── _layers</span><br><span class="line">                │   └── sha256</span><br><span class="line">                │       ├── 4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">                │       │   └── link</span><br><span class="line">                │       └── af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">                │           └── link</span><br><span class="line">                └── _manifests</span><br><span class="line">                    ├── revisions</span><br><span class="line">                    │   └── sha256</span><br><span class="line">                    │       └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">                    │           └── link</span><br><span class="line">                    └── tags</span><br><span class="line">                        └── 3.10.4</span><br><span class="line">                            ├── current</span><br><span class="line">                            │   └── link</span><br><span class="line">                            └── index</span><br><span class="line">                                └── sha256</span><br><span class="line">                                    └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">                                        └── link</span><br></pre></td></tr></table></figure><ul><li>测试是否正常，本地 docker run 一个 registry 容器，将刚刚转换的 registry 存储目录挂载到容器的 /var/lib/registry，然后再使用 docker pull 的方式拉取镜像，在使用 docker run 测试一下能否正常使用。经过验证之后确实可以使用，那就说明这样的转换是没有问题的😊。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># docker pull localhost/alpine:3.10.4</span></span><br><span class="line">3.10.4: Pulling from alpine</span><br><span class="line">4167d3e14976: Pull complete</span><br><span class="line">Digest: sha256:de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> localhost/alpine:3.10.4</span><br><span class="line">root@debian:/root <span class="comment"># docker run --rm -it localhost/alpine:3.10.4 cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">"Alpine Linux"</span></span><br><span class="line">ID=alpine</span><br><span class="line">VERSION_ID=3.10.4</span><br><span class="line">PRETTY_NAME=<span class="string">"Alpine Linux v3.10"</span></span><br><span class="line">HOME_URL=<span class="string">"https://alpinelinux.org/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.alpinelinux.org/"</span></span><br></pre></td></tr></table></figure><ul><li>将上述步骤整合成一个 shell 脚本，内容如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">IMAGES_DIR=<span class="string">"images"</span></span><br><span class="line">REGISTRY_DIR=<span class="string">"docker"</span></span><br><span class="line"></span><br><span class="line">rm -rf <span class="variable">$&#123;REGISTRY_DIR&#125;</span></span><br><span class="line">BLOBS_PATH=<span class="string">"<span class="variable">$&#123;REGISTRY_DIR&#125;</span>/registry/v2/blobs"</span></span><br><span class="line">REPO_PATH=<span class="string">"<span class="variable">$&#123;REGISTRY_DIR&#125;</span>/registry/v2/repositories"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> $(find <span class="variable">$&#123;IMAGES_DIR&#125;</span> -<span class="built_in">type</span> f | sed -n <span class="string">'s|/manifest.json||p'</span> | sort -u); <span class="keyword">do</span></span><br><span class="line">    image_name=$(<span class="built_in">echo</span> <span class="variable">$&#123;image%%:*&#125;</span> | sed <span class="string">"s|<span class="variable">$&#123;IMAGES_DIR&#125;</span>/||g"</span>)</span><br><span class="line">    image_tag=<span class="variable">$&#123;image##*:&#125;</span>; mfs=<span class="string">"<span class="variable">$&#123;image&#125;</span>/manifest.json"</span></span><br><span class="line">    mfs_sha256=$(sha256sum <span class="variable">$&#123;image&#125;</span>/manifest.json | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">    mkdir -p <span class="variable">$&#123;BLOBS_PATH&#125;</span>/sha256/<span class="variable">$&#123;mfs_sha256:0:2&#125;</span>/<span class="variable">$&#123;mfs_sha256&#125;</span></span><br><span class="line">    ln -f <span class="variable">$&#123;mfs&#125;</span> <span class="variable">$&#123;BLOBS_PATH&#125;</span>/sha256/<span class="variable">$&#123;mfs_sha256:0:2&#125;</span>/<span class="variable">$&#123;mfs_sha256&#125;</span>/data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make image repositories dir</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/&#123;_layers,_manifests/revisions&#125;/sha256</span><br><span class="line">    mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;mfs_sha256&#125;</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class="line">    mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;mfs_sha256&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># create image tag manifest link file</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;mfs_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;mfs_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;mfs_sha256&#125;</span>/link</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;mfs_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;mfs_sha256&#125;</span>/link</span><br><span class="line"></span><br><span class="line">    <span class="comment"># link image layers file to registry blobs file</span></span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> $(grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> <span class="variable">$&#123;mfs&#125;</span>); <span class="keyword">do</span></span><br><span class="line">        mkdir -p <span class="variable">$&#123;BLOBS_PATH&#125;</span>/sha256/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;layer&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span>/link</span><br><span class="line">        ln -f <span class="variable">$&#123;image&#125;</span>/<span class="variable">$&#123;layer&#125;</span> <span class="variable">$&#123;BLOBS_PATH&#125;</span>/sha256/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>使用该脚本对 images 中所有镜像进行一下转换，最终得到的 registry 存储大小为 8.3 G，比之前减少了 2.7G。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># du -sh docker</span></span><br><span class="line">8.3Gdocker</span><br><span class="line">root@debian:/root <span class="comment"># find docker -type f -name "data" | wc -l</span></span><br><span class="line">1046</span><br></pre></td></tr></table></figure><h2 id="再还原回-Dir-格式"><a href="#再还原回-Dir-格式" class="headerlink" title="再还原回 Dir 格式"></a>再还原回 Dir 格式</h2><p>经过上述步骤一番折腾之后，将补丁包中镜像文件的总大小的确实减少了很多，但同时又引入了另一个问题：skopeo 无法直接使用 registry 存储的格式。因此我们还需要再做一次转换，将镜像由 registry 存储的格式还原回 skopeo 所支持的 dir 格式。至于还原的原理和方法我在 <a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a> 中有详细地介绍，感兴趣的小伙伴可以再去看一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">REGISTRY_DOMAIN=<span class="string">"harbor.k8s.li"</span></span><br><span class="line">REGISTRY_PATH=<span class="string">"/var/lib/registry"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 registry 存储主目录下</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;REGISTRY_PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">gen_skopeo_dir</span></span>() &#123;</span><br><span class="line">   <span class="comment"># 定义 registry 存储的 blob 目录 和 repositories 目录，方便后面使用</span></span><br><span class="line">    BLOB_DIR=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">    REPO_DIR=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line">    <span class="comment"># 定义生成 skopeo 目录</span></span><br><span class="line">    SKOPEO_DIR=<span class="string">"docker/skopeo"</span></span><br><span class="line">    <span class="comment"># 通过 find 出 current 文件夹可以得到所有带 tag 的镜像，因为一个 tag 对应一个 current 目录</span></span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> $(find <span class="variable">$&#123;REPO_DIR&#125;</span> -<span class="built_in">type</span> d -name <span class="string">"current"</span>); <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 根据镜像的 tag 提取镜像的名字</span></span><br><span class="line">        name=$(<span class="built_in">echo</span> <span class="variable">$&#123;image&#125;</span> | awk -F <span class="string">'/'</span> <span class="string">'&#123;print $5"/"$6":"$9&#125;'</span>)</span><br><span class="line">        link=$(cat <span class="variable">$&#123;image&#125;</span>/link | sed <span class="string">'s/sha256://'</span>)</span><br><span class="line">        mfs=<span class="string">"<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;link:0:2&#125;</span>/<span class="variable">$&#123;link&#125;</span>/data"</span></span><br><span class="line">        <span class="comment"># 创建镜像的硬链接需要的目录</span></span><br><span class="line">        mkdir -p <span class="string">"<span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>"</span></span><br><span class="line">        <span class="comment"># 硬链接镜像的 manifests 文件到目录的 manifest 文件</span></span><br><span class="line">        ln <span class="variable">$&#123;mfs&#125;</span> <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>/manifest.json</span><br><span class="line">        <span class="comment"># 使用正则匹配出所有的 sha256 值，然后排序去重</span></span><br><span class="line">        layers=$(grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> <span class="variable">$&#123;mfs&#125;</span> | sort -u)</span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> <span class="variable">$&#123;layers&#125;</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="comment"># 硬链接 registry 存储目录里的镜像 layer 和 images config 到镜像的 dir 目录</span></span><br><span class="line">            ln <span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sync_image</span></span>() &#123;</span><br><span class="line">    <span class="comment"># 使用 skopeo sync 将 dir 格式的镜像同步到 harbor</span></span><br><span class="line">    <span class="keyword">for</span> project <span class="keyword">in</span> $(ls <span class="variable">$&#123;SKOPEO_DIR&#125;</span>); <span class="keyword">do</span></span><br><span class="line">        skopeo sync --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> \</span><br><span class="line">        --src dir --dest docker <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;project&#125;</span> <span class="variable">$&#123;REGISTRY_DOMAIN&#125;</span>/<span class="variable">$&#123;project&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gen_skopeo_dir</span><br><span class="line">sync_image</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;苦命打包工具人😭&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="image" scheme="https://blog.k8s.li/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>python-gitlab CLI 使用记录</title>
    <link href="https://blog.k8s.li/gitlab-cli.html"/>
    <id>https://blog.k8s.li/gitlab-cli.html</id>
    <published>2021-03-22T16:00:00.000Z</published>
    <updated>2021-03-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开倒车-🚗-？"><a href="#开倒车-🚗-？" class="headerlink" title="开倒车 🚗 ？"></a>开倒车 🚗 ？</h2><p>年后这几周花了两周左右的时间将我司的 GitHub 代码迁移到内部的 Gitlab。影响最大的就是我们产品的发布流水线，需要适配 Gitlab 和内网环境的一些服务。基本上整个产品打包发布的流水线代码全部重写了一遍，可累坏咱了🥺。当时心里还认为代码迁移至 Gitlab 纯属倒车行为😅，不过等到所有的适配修改完毕后忽然发现 Gitlab 真香！</p><p>归根结底内网的 Gitlab 网络状况十倍百倍与 GitHub 不止。众所周知在学习<strong>墙国</strong>，GitHub 直连的速度和稳定性差的一批。也正因此之前在 GitHub 上的流水线经常会被网络抖动所干扰，有时侯 fetch 一个 repo 十几二十分钟！迁移到内网 Gitlab 之后，那速度简直飞起！以往最少十几分钟的流水线现在只需要不到五分钟就能完成😂。</p><p>于是今天就写篇博客记录一下当时折腾 Gitlab 时收获的一点人生经验👓</p><blockquote><p>我今天是作为一个长者给你们讲的，我不是新闻工作者，但是我见得太多了，我有这个必要告诉你们一点人生的经验</p></blockquote><h2 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h2><p>在折腾的过程中使用到的有关 Gitlab 的文档和工具：</p><ul><li><a href="https://about.gitlab.com/topics/version-control/what-is-gitlab-workflow/" target="_blank" rel="noopener">Gitlab workflow</a>：了解一下 Gitlab 的工作流，不同于 GitHub 的 PR，在 Gitlab 中使用的是 MR 的方式；</li><li><a href="https://docs.gitlab.com/ee/api/README.html" target="_blank" rel="noopener">Gitlab API</a>：Gitlab API 的官方文档，了解它在使用下下面这些工具时候会得心应手。</li><li><a href="https://python-gitlab.readthedocs.io/en/stable/api-objects.html" target="_blank" rel="noopener">python-gitlab</a> API client：使用 Python 实现的 Gitlab API client，用它来完成一些特定需求工具的开发，比如根据 tag 或者 branch获取 repo 中指定的文件或目录；</li><li><a href="https://python-gitlab.readthedocs.io/" target="_blank" rel="noopener">python-gitlab</a> CLI：基于 <a href="https://python-gitlab.readthedocs.io/en/stable/api-objects.html" target="_blank" rel="noopener">python-gitlab</a> API client 封装成的命令行工具，因为是 CLI 工具所以可以很方便地集成在一些流水线的脚本中；</li><li><a href="https://github.com/xanzy/go-gitlab" target="_blank" rel="noopener">go-gitlab</a> API client：使用 Golang 实现的 Gitlab API client。由于发布流水线中的一个阶段就是根据一个 list 来收集其他 repo 中的特定文件和目录，使用的工具是 golang 写的，为了减少代码修改量就使用了 go-gitlab 而不是 python-gitlab。</li></ul><h2 id="Gitlab-workflow"><a href="#Gitlab-workflow" class="headerlink" title="Gitlab workflow"></a><a href="https://about.gitlab.com/topics/version-control/what-is-gitlab-workflow/" target="_blank" rel="noopener">Gitlab workflow</a></h2><h3 id="PR"><a href="#PR" class="headerlink" title="PR"></a>PR</h3><p>在 GitHub 上我们一般使用 PR 的方式来完成代码合并工作，流程如下：</p><ul><li>成员 Fork 原始仓库，将 Fork 出来的仓库 clone 到本地</li><li>在本地创建新分支，并基于新分支进行修改和提交，推送新分支到 Fork 的仓库</li><li>基于 Fork 仓库中的新分支向原始仓库的目标分支发起 Pull Request</li><li>在 PR 的评论中 @ 审查者，请求 review 修改</li><li>审查者收到请求邮件，审查代码，并在建议处直接做出评论</li><li>提交者根据建议，继续提交改动，并对意见作出回应</li><li>审查者无异议后，在 PR 的评论中 @ 管理员，请求合入代码，管理员接受 PR，代码合入主分支</li></ul><h3 id="MR"><a href="#MR" class="headerlink" title="MR"></a>MR</h3><p>但是到了 Gitlab 之后我们就使用 MR 的方式来完成代码合并工作，流程如下：</p><ul><li>成员 Clone 原始仓库到本地，基于要修改的分支，创建新的分支</li><li>本地修改和提交，推送新分支到原始仓库</li><li>在原始仓库中基于新分支向目标保护分支发起 Merge Request</li><li>审核者 review 代码，管理员 Merge 代码</li></ul><p>相比来讲 MR 和方式更适合团队内部的协作开发，PR 的方式适合开源项目的协作开发。</p><h2 id="Gitlab-API"><a href="#Gitlab-API" class="headerlink" title="Gitlab API"></a><a href="https://docs.gitlab.com/ee/api/README.html" target="_blank" rel="noopener">Gitlab</a> API</h2><blockquote><p>The main GitLab API is a <a href="http://spec.openapis.org/oas/v3.0.3" target="_blank" rel="noopener">REST</a> API. Because of this, the documentation in this section assumes that you’re familiar with REST concepts.</p></blockquote><p>参照官方文档 <a href="https://docs.gitlab.com/ee/api/api_resources.html" target="_blank" rel="noopener">API resources</a> 可知，共有 Projects 、Groups、Standalone 这三种 API 分组。</p><ul><li>Projects： 对应的就是与 repo 相关的 API ，比如 tag、commit、branch 、MR、Issue 这一类型；</li><li>Groups： 对应类似于 GitHub 上的 Organizations，一般来讲公司里的 repo 都会按照团队来划分组织，同一团队里的 repo 会放在 gitlab 同一个 Groups  下，而不是以个人为单位存放 repo；</li><li>Standalone：则是除了 Projects 和 Groups 之外的 API 资源，如 user</li></ul><p>而我们多数情况下使用的是 Projects 相关的 API，通过它来对 repo 进行增删改查。简单介绍完 Gitlab API 类型之后，本文会介绍几种使用 Gitlab API 的工具。在使用这些工具的过程中，如果遇到一些错误可以通过 <a href="https://docs.gitlab.com/ee/api/README.html#status-codes" target="_blank" rel="noopener">Status codes</a> API 返回状态码来排查问题。</p><h2 id="python-gitlab-CLI"><a href="#python-gitlab-CLI" class="headerlink" title="python-gitlab CLI"></a><a href="https://python-gitlab.readthedocs.io/" target="_blank" rel="noopener">python-gitlab</a> CLI</h2><p>这是一个使用 <a href="https://python-gitlab.readthedocs.io/en/stable/api-objects.html" target="_blank" rel="noopener">python-gitlab</a> API client 封装好的 gitlab 命令行工具，可以使用它来完成绝大多数 Gitlab API 所支持的操作。因为之前的流水线中有很多操作是访问的 GitHub，比如提交 PR、获取 repo tag、查看 PR labels 等，都是写在 Jenkinsfile 调用各种脚本和工具来完成的。 切换到了 Gitlab，自然也需要一个工具来完成上述操作了。那么 python-gitlab CLI 这个工具无疑是不二之选，甚至比之前的工具更方便。因为迄今为止还没有见到过 GitHub 能有像 python-gitlab 这样的工具。总之，对于使用 Gitlab 的人来讲，要对 repo 完成一些自动化处理的工作，强烈推荐使用这个 CLI 工具，它可以很方便地集成在流水线中。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>python-gitlab CLI 依赖 Python 2.7 或者 3.4+，2021 年啦，就不要使用 Python2.7 啦😊。本地安装好 python3 和 pip3 后使用如下命令安装即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在这里使用清华的 pypi 源来加速安装，毕竟是墙🧱国</span></span><br><span class="line">$ sudo pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple requests PyYAML python-gitlab</span><br></pre></td></tr></table></figure><p>由于使用这个工具的场景大多数是在 Jenkins 所创建的 slave pod 中执行的，所以也可以构建一个 docker 镜像， <code>Dockerfile</code> 如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:buster</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends \</span></span><br><span class="line"><span class="bash">        git \</span></span><br><span class="line"><span class="bash">        python3 \</span></span><br><span class="line"><span class="bash">        python3-pip \</span></span><br><span class="line"><span class="bash">        jq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple requests PyYAML python-gitlab</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> python-gitlab.cfg /etc/python-gitlab.cfg</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Gitlab CLI 工具需要使用一个 <code>python-gitlab.cfg</code> 配置文件用于连接 Gitlab 服务器以及完成一些鉴权认证，配置文件格式为 <code>ini</code> 如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">default</span> = gitlab.com</span><br><span class="line"><span class="attr">ssl_verify</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">per_page</span> = <span class="number">100</span></span><br><span class="line"><span class="attr">api_version</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="section">[gitlab.com]</span></span><br><span class="line"><span class="attr">url</span> = https://gitlab.com</span><br><span class="line"><span class="attr">private_token</span> = xxxxxxxxx</span><br></pre></td></tr></table></figure><ul><li>全局的连接参数</li></ul><table><thead><tr><th>Option</th><th>Possible values</th><th>Description</th></tr></thead><tbody><tr><td><code>ssl_verify</code></td><td><code>True</code> 或 <code>False</code></td><td>是否开启 SSL 加密验证</td></tr><tr><td><code>timeout</code></td><td>证书</td><td>连接超时时间</td></tr><tr><td><code>api_version</code></td><td><code>4</code></td><td>API 的版本，默认为 4 即可，参考 <a href="https://docs.gitlab.com/ee/api/v3_to_v4.html" target="_blank" rel="noopener">API V3 to API V4</a></td></tr><tr><td><code>per_page</code></td><td>1 ～ 100</td><td>每次返回的元素数量，Gitlab 的最大限制为 100。可以通过 <code>--all</code> 参数获取所有的元素</td></tr></tbody></table><ul><li>自定义 GitLab server 参数</li></ul><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>url</code></td><td>GitLab server 的 URL</td></tr><tr><td><code>private_token</code></td><td>通过访问 gitlab 服务器的 <a href="https://gitlab.com/-/profile/personal_access_tokens" target="_blank" rel="noopener">-/profile/personal_access_tokens</a> 来生成 token</td></tr><tr><td><code>oauth_token</code></td><td></td></tr><tr><td><code>job_token</code></td><td></td></tr><tr><td><code>api_version</code></td><td>API 的版本，默认为 4 即可，也可以不用定义，使用全局参数</td></tr><tr><td><code>http_username</code></td><td>Gitlab 用户名，不推荐使用它来连接 Gitlab 服务器</td></tr><tr><td><code>http_password</code></td><td>Gitlab 密码，不推荐使用它来连接 Gitlab 服务器</td></tr></tbody></table><p>将文件保存在 <code>~/.python-gitlab.cfg</code> 或者 <code>/etc/python-gitlab.cfg</code> ，也可以使用环境变量 <code>PYTHON_GITLAB_CFG</code> 或者 <code>--config-file</code> 执行配置文件的路径，为了省事儿还是将它放到 <code>~/.python-gitlab.cfg</code> 下。</p><p>配置完成之后，可以使用 <code>gitlab current-user get</code> 命令测试连接是否正常，如果有返回值且正确的用户名说明配置成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab current-user get</span><br><span class="line">username: muzi502</span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>gitlab 命令行工具主要是对 Gitlab 服务器上的各种对象如：user, project, file, repo, mr, tag, commit 等进行增删改查(get、list、create、delete、update)。使用的命令行格式方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab &lt;option&gt; [object] [action] &lt;option&gt;</span><br></pre></td></tr></table></figure><p>一般来讲只需要 4 种参数：</p><ul><li><p>第一个参数是紧接着 gitlab 命令后面的参数，它是 gitlab 命令行的输出参数和配置参数，如 <code>-o</code>参数指定输出结果的格式；<code>-f</code> 参数将输出结果存放到文件中; <code>-g</code> 参数执行连接哪个 Gitlab 服务器。</p></li><li><p>第二个参数则是用来指定所要操作的对象，比如 project-merge-request，project-tag 等，所支持的对象有很多，基本上涵盖了所有 Gitlab API 所支持的操作对象，如下：</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab -h</span><br><span class="line">usage: gitlab [-h] [--version] [-v] [-d] [-c CONFIG_FILE] [-g GITLAB] [-o &#123;json,legacy,yaml&#125;] [-f FIELDS]</span><br><span class="line">&#123;application,application-appearance,application-settings,audit-event,broadcast-message,current-user,current-user-email,current-user-gp-gkey,current-user-key,current-user-status,deploy-key,deploy-token,dockerfile,event,feature,geo-node,gitignore,gitlabciyml,group,group-access-request,group-badge,group-board,group-board-list,group-cluster,group-custom-attribute,group-deploy-token,group-epic,group-epic-issue,group-epic-resource-label-event,group-export,group-import,group-issue,group-label,group-member,group-merge-request,group-milestone,group-notification-settings,group-package,group-project,group-runner,group-subgroup,group-variable,hook,issue,l-da-pgroup,license,merge-request,namespace,notification-settings,pages-domain,project,project-access-request,project-additional-statistics,project-approval,project-approval-rule,project-badge,project-board,project-board-list,project-branch,project-cluster,project-commit,project-commit-comment,project-commit-discussion,project-commit-discussion-note,project-commit-status,project-custom-attribute,project-deploy-token,project-deployment,project-environment,project-event,project-export,project-file,project-fork,project-hook,project-import,project-issue,project-issue-award-emoji,project-issue-discussion,project-issue-discussion-note,project-issue-link,project-issue-note,project-issue-note-award-emoji,project-issue-resource-label-event,project-issue-resource-milestone-event,project-issues-statistics,project-job,project-key,project-label,project-member,project-merge-request,project-merge-request-approval,project-merge-request-approval-rule,project-merge-request-award-emoji,project-merge-request-diff,project-merge-request-discussion,project-merge-request-discussion-note,project-merge-request-note,project-merge-request-note-award-emoji,project-merge-request-resource-label-event,project-merge-request-resource-milestone-event,project-milestone,project-note,project-notification-settings,project-package,project-pages-domain,project-pipeline,project-pipeline-bridge,project-pipeline-job,project-pipeline-schedule,project-pipeline-schedule-variable,project-pipeline-variable,project-protected-branch,project-protected-tag,project-push-rules,project-registry-repository,project-registry-tag,project-release,project-remote-mirror,project-runner,project-service,project-snippet,project-snippet-award-emoji,project-snippet-discussion,project-snippet-discussion-note,project-snippet-note,project-snippet-note-award-emoji,project-tag,project-trigger,project-user,project-variable,project-wiki,runner,runner-job,snippet,todo,user,user-activities,user-custom-attribute,user-email,user-event,user-gp-gkey,user-impersonation-token,user-key,user-membership,user-project,user-status,variable&#125;</span><br></pre></td></tr></table></figure><ul><li>第三个参数则是 action 参数，即用于指定对所操作的对象进行何种操作，一般来讲都会支持增删改查操作（get, list, create, update, delete）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab project-tag</span><br><span class="line">usage: gitlab project-tag [-h] &#123;list,get,create,delete,<span class="built_in">set</span>-release-description&#125; ...</span><br></pre></td></tr></table></figure><ul><li>第三个参数则是 object + action 所依赖的参数，比如指定 project id</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab project-tag list</span><br><span class="line">usage: gitlab project-tag list --project-id PROJECT_ID [--page PAGE] [--per-page PER_PAGE] [--all]</span><br><span class="line">gitlab project-tag list: error: the following arguments are required: --project-id</span><br></pre></td></tr></table></figure><ul><li><p>Project-ID：是 gitlab 上唯一表示该 repo 的 ID，可分为两种，一种是 <code>group/project</code> 的形式，其中 <code>/</code> 要转译成 <code>%2F</code> 如：<code>muzi502%2Fkubespray</code>；另一种则是数字的形式，在该 repo 的 web 页面上可以看到，推荐使用第二种。</p><p><img src="https://p.k8s.li/image-20210319085926423.png" alt="image-20210319085926423"></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以使用gitlab 命令获取 repo 的 id</span></span><br><span class="line">$ gitlab project get --id muzi502%2Fkubespray</span><br><span class="line">id: 25099880</span><br><span class="line">path: kubespray</span><br></pre></td></tr></table></figure><ul><li>在流水线中可以根据 token 获取用户的用户名和邮箱，用于配置流水线中的 repo git 信息，避免因为 CLA 无法通过。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab -o json current-user get | jq '.id'</span><br><span class="line">git config --global user.email $(gitlab -o json current-user get | jq -r '.email')</span><br><span class="line">git config --global user.name $(gitlab -o json current-user get | jq -r '.username')</span><br></pre></td></tr></table></figure><h3 id="project"><a href="#project" class="headerlink" title="project"></a>project</h3><ul><li>获取 repo ssh url  地址</li></ul><p>由于 Jenkins 流水线中 clone 的 repo url 是使用 token+ https 的方式，在流水线中如果要 push 代码到 repo 需要修改为 ssh 的方式，可使用如下方式根据 project id 来获取该 repo 的 ssh url。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab -o json  project get --id <span class="variable">$&#123;PROJECT_ID&#125;</span> | jq -r <span class="string">'.ssh_url_to_repo'</span></span><br><span class="line">$ git remote remove origin</span><br><span class="line">$ git remote add origin $(gitlab -o json  project get --id <span class="variable">$&#123;PROJECT_ID&#125;</span> | jq -r <span class="string">'.ssh_url_to_repo'</span>)</span><br></pre></td></tr></table></figure><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>对于 repo 中文件的操作使用 project-file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab project-file</span><br><span class="line">usage: gitlab project-file [-h] &#123;get,create,update,delete,raw,blame&#125; ...</span><br></pre></td></tr></table></figure><ul><li>获取文件，通过 <code>project-file</code> 对象的 get 操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab -o json project-file get --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span> --file-path .gitignore --ref master  | jq <span class="string">'.'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"file_name"</span>: <span class="string">".gitignore"</span>,</span><br><span class="line">  <span class="string">"file_path"</span>: <span class="string">".gitignore"</span>,</span><br><span class="line">  <span class="string">"size"</span>: 1208,</span><br><span class="line">  <span class="string">"encoding"</span>: <span class="string">"base64"</span>,</span><br><span class="line">  <span class="string">"content_sha256"</span>: <span class="string">"91f1d50ba3a4f79f96d9371afc70b389f75dfb2ac5190b8fb01051aa8679fd04"</span>,</span><br><span class="line">  <span class="string">"ref"</span>: <span class="string">"master"</span>,</span><br><span class="line">  <span class="string">"blob_id"</span>: <span class="string">"b09ca9d3b101034c7e34430177c1d64738df5fbb"</span>,</span><br><span class="line">  <span class="string">"commit_id"</span>: <span class="string">"a9c97e5253c455546c2c7fdd794147eeb9b8ab7a"</span>,</span><br><span class="line">  <span class="string">"last_commit_id"</span>: <span class="string">"4ffc106c58fc5865b6d72a52365e25b8c268d4d8"</span>,</span><br><span class="line">  <span class="string">"content"</span>: <span class="string">"LnZhZ3JhbnQKKi5yZXRyeQoqKi92YWdyYW50X2Fuc2libGVfaW52ZW50b3J5CiouaW1sCnRlbXAKLmlkZWEKLnRveAouY2FjaGUKKi5iYWsKKi50ZnN0YXRlCioudGZzdGF0ZS5iYWNrdXAKLnRlcnJhZm9ybS8KY29udHJpYi90ZXJyYWZvcm0vYXdzL2NyZWRlbnRpYWxzLnRmdmFycwovc3NoLWJhc3Rpb24uY29uZgoqKi8qLnN3W3Bvbl0KKn4KdmFncmFudC8KcGx1Z2lucy9taXRvZ2VuCgojIEFuc2libGUgaW52ZW50b3J5CmludmVudG9yeS8qCiFpbnZlbnRvcnkvbG9jYWwKIWludmVudG9yeS9zYW1wbGUKaW52ZW50b3J5LyovYXJ0aWZhY3RzLwoKIyBCeXRlLWNvbXBpbGVkIC8gb3B0aW1pemVkIC8gRExMIGZpbGVzCl9fcHljYWNoZV9fLwoqLnB5W2NvZF0KKiRweS5jbGFzcwoKIyBEaXN0cmlidXRpb24gLyBwYWNrYWdpbmcKLlB5dGhvbgplbnYvCmJ1aWxkLwpjcmVkZW50aWFscy8KZGV2ZWxvcC1lZ2dzLwpkaXN0Lwpkb3dubG9hZHMvCmVnZ3MvCi5lZ2dzLwpwYXJ0cy8Kc2Rpc3QvCnZhci8KKi5lZ2ctaW5mby8KLmluc3RhbGxlZC5jZmcKKi5lZ2cKCiMgUHlJbnN0YWxsZXIKIyAgVXN1YWxseSB0aGVzZSBmaWxlcyBhcmUgd3JpdHRlbiBieSBhIHB5dGhvbiBzY3JpcHQgZnJvbSBhIHRlbXBsYXRlCiMgIGJlZm9yZSBQeUluc3RhbGxlciBidWlsZHMgdGhlIGV4ZSwgc28gYXMgdG8gaW5qZWN0IGRhdGUvb3RoZXIgaW5mb3MgaW50byBpdC4KKi5tYW5pZmVzdAoqLnNwZWMKCiMgSW5zdGFsbGVyIGxvZ3MKcGlwLWxvZy50eHQKcGlwLWRlbGV0ZS10aGlzLWRpcmVjdG9yeS50eHQKCiMgVW5pdCB0ZXN0IC8gY292ZXJhZ2UgcmVwb3J0cwpodG1sY292LwoudG94LwouY292ZXJhZ2UKLmNvdmVyYWdlLioKLmNhY2hlCm5vc2V0ZXN0cy54bWwKY292ZXJhZ2UueG1sCiosY292ZXIKLmh5cG90aGVzaXMvCgojIFRyYW5zbGF0aW9ucwoqLm1vCioucG90CgojIERqYW5nbyBzdHVmZjoKKi5sb2cKbG9jYWxfc2V0dGluZ3MucHkKCiMgRmxhc2sgc3R1ZmY6Cmluc3RhbmNlLwoud2ViYXNzZXRzLWNhY2hlCgojIFNjcmFweSBzdHVmZjoKLnNjcmFweQoKIyBTcGhpbnggZG9jdW1lbnRhdGlvbgpkb2NzL19idWlsZC8KCiMgUHlCdWlsZGVyCnRhcmdldC8KCiMgSVB5dGhvbiBOb3RlYm9vawouaXB5bmJfY2hlY2twb2ludHMKCiMgcHllbnYKLnB5dGhvbi12ZXJzaW9uCgojIGRvdGVudgouZW52CgojIHZpcnR1YWxlbnYKdmVudi8KRU5WLwo="</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件内容是 base64 编码的，需要使用 base64 解码才能获取原始的内容。</span></span><br><span class="line">$ gitlab -g gitlab -o json project-file get --project-id 25099880 --file-path .gitignore --ref master  | jq -r <span class="string">'.content'</span> | base64 -d</span><br><span class="line">.vagrant</span><br><span class="line">*.retry</span><br><span class="line">**/vagrant_ansible_inventory</span><br><span class="line">*.iml</span><br><span class="line">temp</span><br><span class="line">.idea</span><br><span class="line">.tox</span><br><span class="line">…………</span><br></pre></td></tr></table></figure><ul><li>通过 project-file 的 raw 方法可以获取文件的原始内容，无须 base64 解码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab project-file get --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span> --file-path .gitignore --ref master</span><br></pre></td></tr></table></figure><ul><li><p>创建文件，对文件的增删改都是通过提交 commit 来完成的，因此需要指定所要操作的分支以及 commit-message 的信息。另外如果操作的文件是 master 分支获取其他保护分支，要确保当前用户有写入的权限，不然会提示如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab project-file update</span><br><span class="line">Impossible to update object (400: You are not allowed to push into this branch)</span><br></pre></td></tr></table></figure></li></ul><p>之前在 GitHub 上有一套 CI 并不能适用于 Gitlab，因此需要为所有的分支创建 CI 流水线，用于检查代码是否符合规范，可以通过如下方法批量量地向所有分支创建文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ID=123456</span><br><span class="line">BRANCHS=$(gitlab -o json project-branch list --project-id <span class="variable">$&#123;ID&#125;</span> --all | jq -r <span class="string">".[].name"</span>)</span><br><span class="line"><span class="keyword">for</span> branch <span class="keyword">in</span> <span class="variable">$&#123;BRANCHS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">gitlab project-file create --project-id <span class="variable">$&#123;ID&#125;</span> --file-path .gitlab-ci.yml --branch <span class="variable">$&#123;branch&#125;</span> --content @.gitlab-ci.yml --commit-message <span class="string">"feat(gitlab-ci): add gitlab-ci.yml for ci"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>更新文件</li></ul><p>比如批量更新所有分支的 <code>Makefile</code> 中 <code>github.com</code> 为 <code>gitlab.com</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ID=123456</span><br><span class="line">BRANCHS=$(gitlab -o json project-branch list --project-id <span class="variable">$&#123;ID&#125;</span> --all | jq -r <span class="string">".[].name"</span>)</span><br><span class="line"><span class="keyword">for</span> branch <span class="keyword">in</span> <span class="variable">$&#123;BRANCHS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    rm -f Makefile Makefile-</span><br><span class="line">    gitlab project-file raw --project-id <span class="variable">$&#123;ID&#125;</span> --file-path Makefile --ref <span class="variable">$&#123;branch&#125;</span> &gt; Makefile</span><br><span class="line">    sed -i- <span class="string">"s|github.com/muzi502|gitlab.com/muzi502"</span> Makefile</span><br><span class="line">    gitlab project-file update --project-id <span class="variable">$&#123;ID&#125;</span> --file-path Makefile --branch <span class="variable">$&#123;branch&#125;</span> --content @Makefile \</span><br><span class="line">    --commit-message <span class="string">"chore(Makefile): update repo url in Makefile for migrate gitlab"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>删除文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab project-file delete --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span> --file-path .gitignore --ref master \</span><br><span class="line">--commit-message <span class="string">"test delete file"</span></span><br></pre></td></tr></table></figure><h3 id="MR-1"><a href="#MR-1" class="headerlink" title="MR"></a>MR</h3><ul><li>创建 MR，指定 source branch 和 target branch 以及 mr 的 title 这三个参数。前面最好加上 -o json 参数用户获取 mr 的 iid，可通过此 iid 来对这个 mr 进行增删改查。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab -o json project-merge-request create --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span> --<span class="built_in">source</span>-branch --target-branch <span class="variable">$&#123;BASE_BRANCH&#125;</span> --title <span class="string">"<span class="variable">$&#123;MR_TITLE&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>通过 -o json 参数会返回此 mr 的信息，其中 <code>iid</code> 就是该 mr 在此 repo 中的唯一标示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab -g gitlab -o json project-merge-request create --project-id 25099880 --source-branch release-2.14 --target-branch  master --title "mr create test"</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">92872102</span>,</span><br><span class="line">  <span class="attr">"iid"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"project_id"</span>: <span class="number">25099880</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"mr create test"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="string">"opened"</span>,</span><br><span class="line">  <span class="attr">"created_at"</span>: <span class="string">"2021-03-21T12:42:52.893Z"</span>,</span><br><span class="line">  <span class="attr">"updated_at"</span>: <span class="string">"2021-03-21T12:42:52.893Z"</span>,</span><br><span class="line">  <span class="attr">"merged_by"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"merged_at"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"closed_by"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"closed_at"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"target_branch"</span>: <span class="string">"master"</span>,</span><br><span class="line">  <span class="attr">"source_branch"</span>: <span class="string">"release-2.14"</span>,</span><br><span class="line">  <span class="attr">"user_notes_count"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"upvotes"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"downvotes"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"author"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">5599205</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"muzi502"</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"muzi502"</span>,</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"active"</span>,</span><br><span class="line">    <span class="attr">"avatar_url"</span>: <span class="string">"https://secure.gravatar.com/avatar/f91578ffea9a538eedd8fbaf3007289b?s=80&amp;d=identicon"</span>,</span><br><span class="line">    <span class="attr">"web_url"</span>: <span class="string">"https://gitlab.com/muzi502"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>合并 MR</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab project-merge-request merge --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span> --iid @mr_iid</span><br></pre></td></tr></table></figure><ul><li>查看 MR 状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab -o json project-merge-request get --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span> --iid @mr_iid | jq -r <span class="string">".state"</span></span><br></pre></td></tr></table></figure><ul><li>集成在 Jenkinsfile  中完成创建 MR、合并 MR、检查 MR </li></ul><p>调用用它的时候只需要传入 SOURCE_BRANCH, TARGET_BRANCH, MR_TITLE 这三个参数即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def makeMR(SOURCE_BRANCH, TARGET_BRANCH, MR_TITLE) &#123;</span><br><span class="line">    container(<span class="string">"debian"</span>) &#123;</span><br><span class="line">        sh <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        gitlab -o json project-merge-request create --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span>  --title \"<span class="variable">$&#123;MR_TITLE&#125;</span>\" \</span></span><br><span class="line"><span class="string">        --source-branch <span class="variable">$&#123;SOURCE_BRANCH&#125;</span> --target-branch <span class="variable">$&#123;TARGET_BRANCH&#125;</span> &gt; mr_info.json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        jq -r '.iid' mr_info.json &gt; mr_iid</span></span><br><span class="line"><span class="string">        jq -r '.web_url' mr_info.json &gt; mr_url</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="title">checkMR</span></span>() &#123;</span><br><span class="line">    container(<span class="string">"debian"</span>) &#123;</span><br><span class="line">        retry(120) &#123;</span><br><span class="line">        sh <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        if [ ! -s mr_iid ]; then exit 0; else sleep 60s; fi</span></span><br><span class="line"><span class="string">        gitlab -o json project-merge-request get --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span> --iid @mr_iid | jq -r "</span>.labels[]<span class="string">" | grep 'approve'</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="title">mergeMR</span></span>()&#123;</span><br><span class="line">    container(<span class="string">"debian"</span>) &#123;</span><br><span class="line">        retry(10)&#123;</span><br><span class="line">        sh <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        if [ ! -s mr_iid ]; then exit 0; else sleep 60s; fi</span></span><br><span class="line"><span class="string">        if gitlab project-merge-request merge --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span> --iid @mr_iid; then sleep 10s; fi</span></span><br><span class="line"><span class="string">        gitlab -o json project-merge-request get --project-id <span class="variable">$&#123;PROJECT_ID&#125;</span> --iid @mr_iid | jq -r "</span>.state<span class="string">" | grep 'merged'</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><ul><li>列出 repo tag</li></ul><p>在这里还是推荐使用 git tag 的方式获取 repo tag ，因为 Gitlab API 的限制，每次请求最多只能返回 100 个值，可以加上 <code>--all</code> 参数来返回所有的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab -o json project-tag list --project-id <span class="variable">$&#123;ID&#125;</span> | jq -r <span class="string">'.[].name'</span></span><br><span class="line">$ gitlab -o json project-tag list --project-id <span class="variable">$&#123;ID&#125;</span> --all | jq -r <span class="string">'.[].name'</span></span><br></pre></td></tr></table></figure><ul><li>创建 tag</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab project-tag create --project-id <span class="variable">$&#123;ID&#125;</span> --tag-name v1.0.0-rc.2 --ref master</span><br></pre></td></tr></table></figure><ul><li>删除 tag</li></ul><p>upstream 上的 repo tag 只能通过在 Gitlab 上删除，在本地 repo 下是无法删除的，因此可以使用如下命令删除  Gitlab repo tag，注意：受保护的 repo tag 如果没有权限的话是无法删除的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitlab project-tag delete --project-id <span class="variable">$&#123;ID&#125;</span> --tag-name v1.0.0-rc.2</span><br></pre></td></tr></table></figure><ul><li>创建受保护的 repo tag</li></ul><p>由于我们流水线任务依赖于 repo tag 来做版本的对于，因此需要保护每一个 repo tag，但有特殊情况下又要覆盖 repo tag，所以受保护的 repo tag 目前还没有找到合适的方法，只能先手动创建了，等到需要删除的时候再删除它。可以使用如下命令批量创建受保护的 repo tag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag | xargs -L1 -I &#123;&#125; gitlab project-protected-tag create --project-id <span class="variable">$&#123;ID&#125;</span> --name &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Lint-流水线"><a href="#Lint-流水线" class="headerlink" title="Lint 流水线"></a>Lint 流水线</h2><p>迁移到了 Gitlab 之后原有的流水线在内网的 Gitlab 上也就无法使用了，为了减少维护成本就使用了 Gitlab 自带的 CI 。我所维护的 repo 使用 Gitlab CI 只是做一些 lint 的检查内容，因此 CI 配置起来也特别简单。如 kubespray 的 CI 配置：</p><ul><li><code>.gitlab-ci.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">lint:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">'quay.io/kubespray/kubespray:v2.15.0'</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">-R</span> <span class="string">o-w</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">make</span> <span class="string">lint</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">shared</span></span><br></pre></td></tr></table></figure><ul><li>使用 gitlab CLI 工具给所有分支添加 <code>.gitlab-ci.yml</code> 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ID=123456</span><br><span class="line">BRANCHS=$(gitlab -o json project-branch list --project-id <span class="variable">$&#123;ID&#125;</span> --all | jq -r <span class="string">".[].name"</span>)</span><br><span class="line"><span class="keyword">for</span> branch <span class="keyword">in</span> <span class="variable">$&#123;BRANCHS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">gitlab project-file create --project-id <span class="variable">$&#123;ID&#125;</span> --file-path .gitlab-ci.yml --branch <span class="variable">$&#123;branch&#125;</span> --content @.gitlab-ci.yml --commit-message <span class="string">"feat(gitlab-ci): add gitlab-ci.yml for ci"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>repo 迁移</li></ul><p>由于内部的 Gitlab 不支持导入 git url 的方式，所以只能手动地将 GitHub 上的 repo clone 到本地再 push 到 Gitlab 上。使用 git clone 的方式本地只会有一个 master 分支，要把 GitHub 上 repo 的所有分支都 track 一遍，然后再 push 到 Gitlab 上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 git clone 下来的 repo 默认为 master 分支</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@gitlab.com/muzi502/kubespray.git</span><br><span class="line"><span class="comment"># track 出 origin 上的所有分支</span></span><br><span class="line">$ git branch -r | grep -v <span class="string">'\-&gt;'</span> | <span class="keyword">while</span> <span class="built_in">read</span> remote; <span class="keyword">do</span> git branch --track <span class="string">"<span class="variable">$&#123;remote#origin/&#125;</span>"</span> <span class="string">"<span class="variable">$remote</span>"</span>; <span class="keyword">done</span></span><br><span class="line">$ git fetch --all</span><br><span class="line">$ git pull --all</span><br><span class="line">$ git remote remove origin</span><br><span class="line">$ git remote add origin git@gitlab/gitlab502/kubespray.git</span><br><span class="line">$ git push origin --all</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches" target="_blank" rel="noopener">How to fetch all Git branches</a></li><li><a href="https://yixinglu.gitlab.io/gitlab-workflow.html" target="_blank" rel="noopener">GitLab 工作流</a></li><li><a href="https://python-gitlab.readthedocs.io/" target="_blank" rel="noopener">python-gitlab</a></li><li><a href="https://docs.gitlab.com/ee/api/README.html" target="_blank" rel="noopener">Gitlab API Docs</a></li><li><a href="https://github.com/xanzy/go-gitlab" target="_blank" rel="noopener">go-gitlab</a></li><li><a href="https://mp.weixin.qq.com/s/x5PHNn87OYCSpYE_hb8I2A" target="_blank" rel="noopener">谈谈 Git 存储原理及相关实现</a></li><li><a href="https://morningspace.github.io/tech/inside-git-3/" target="_blank" rel="noopener">Git解密——认识Git引用</a></li><li><a href="https://blinkfox.github.io/2018/11/22/ruan-jian-gong-ju/devops/gitlab-ci-jie-shao-he-shi-yong/" target="_blank" rel="noopener">GitLab CI/CD 介绍和使用</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;开倒车-🚗-？&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ci" scheme="https://blog.k8s.li/tags/ci/"/>
    
      <category term="gitlab" scheme="https://blog.k8s.li/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 大叔与 kubernetes 船长手牵手 🧑‍🤝‍🧑</title>
    <link href="https://blog.k8s.li/jenkins-with-kubernetes.html"/>
    <id>https://blog.k8s.li/jenkins-with-kubernetes.html</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>虽然云原生时代有了 <a href="https://jenkins-x.io/" target="_blank" rel="noopener">JenkinsX</a>、<a href="https://www.drone.io/" target="_blank" rel="noopener">Drone</a>、<a href="https://tekton.dev" target="_blank" rel="noopener">Tekton</a> 这样的后起之秀，但 Jenkins 这样一个老牌的 CI/CD 工具仍是各大公司主流的使用方案。比如我司的私有云产品打包发布就是用这老家伙完成的。然而传统的 Jenkins Slave 一主多从方式会存在一些痛点，比如：</p><ul><li>每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲</li><li>资源分配不均衡，有的 Slave 要运行的 job 出现排队等待，而有的 Slave 处于空闲状态</li><li>资源有浪费，每台 Slave 可能是物理机或者虚拟机，当 Slave 处于空闲状态时，也不会完全释放掉资源。</li></ul><p>正因为上面的 Jenkins slave 存在这些种种痛点，我们渴望一种更高效更可靠的方式来完成这个 CI/CD 流程，而 Docker 虚拟化容器技术能很好的解决这个痛点，又特别是在 Kubernetes 集群环境下面能够更好来解决上面的问题，下图是基于 Kubernetes 搭建 Jenkins slave 集群的简单示意图：</p><p><img src="https://p.k8s.li/k8s-jenkins-slave.png" alt="k8s-jenkins"></p><p>从图上可以看到 Jenkins Master 时以 docker-compose 的方式运行在一个节点上。Jenkins Slave 以 Pod 形式运行在 Kubernetes 集群的 Node 上，并且它不是一直处于运行状态，它会按照需求动态的创建并自动删除。这种方式的工作流程大致为：当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。</p><p>那么我们使用这种方式带来了以下好处：</p><ul><li><strong>动态伸缩</strong>，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。</li><li><strong>扩展性好</strong>，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。</li></ul><p>上面的大半段复制粘贴自 <a href="https://www.qikqiak.com/k8s-book/docs/36.Jenkins%20Slave.html" target="_blank" rel="noopener">基于 Jenkins 的 CI/CD (一)</a> 🤐</p><h2 id="kubernetes-集群"><a href="#kubernetes-集群" class="headerlink" title="kubernetes 集群"></a>kubernetes 集群</h2><p>关于 kubernetes 集群部署，使用 kubeadm 部署是最为方便的了，可参考我很早之前写过的文章《<a href="https://blog.k8s.li/kubeadm-deploy-k8s-v1.17.4.html">使用 kubeadm 快速部署体验 K8s</a>》，在这里只是简单介绍一下：</p><ul><li>使用 kubeadm 来创建一个单 master 节点的 kubernets 集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@jenkins:~ <span class="comment"># kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.20.11</span></span><br></pre></td></tr></table></figure><ul><li>集群成功部署完成之后会有如下提示：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><ul><li>查看节点状态和 pod 都已经正常</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@jenkins:~ <span class="comment"># kubectl get pod -A</span></span><br><span class="line">NAMESPACE     NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-f9fd979d6-9t6qp           1/1     Running   0          89s</span><br><span class="line">kube-system   coredns-f9fd979d6-hntm8           1/1     Running   0          89s</span><br><span class="line">kube-system   etcd-jenkins                      1/1     Running   0          106s</span><br><span class="line">kube-system   kube-apiserver-jenkins            1/1     Running   0          106s</span><br><span class="line">kube-system   kube-controller-manager-jenkins   1/1     Running   0          106s</span><br><span class="line">kube-system   kube-proxy-8pzkz                  1/1     Running   0          89s</span><br><span class="line">kube-system   kube-scheduler-jenkins            1/1     Running   0          106s</span><br><span class="line">root@jenkins:~ <span class="comment"># kubectl get node</span></span><br><span class="line">NAME      STATUS   ROLES    AGE    VERSION</span><br><span class="line">jenkins   Ready    master   119s   v1.19.8</span><br></pre></td></tr></table></figure><ul><li>去除 master 节点上的污点，允许其他的 pod 调度在 master 节点上，不然后面 Jenkins 所创建的 pod 将无法调度在该节点上。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes $(hostname) node-role.kubernetes.io/master:NoSchedule-</span><br></pre></td></tr></table></figure><h2 id="Jenkins-master"><a href="#Jenkins-master" class="headerlink" title="Jenkins master"></a>Jenkins master</h2><p>至于  Jenkins master 的部署方式，个人建议使用 docker-compose 来部署。运行在 kubernetes 集群集群中也没什么毛病，可以参考 <a href="https://www.qikqiak.com/k8s-book/docs/36.Jenkins%20Slave.html" target="_blank" rel="noopener">基于 Jenkins 的 CI/CD (一)</a> 这篇博客。但从个人运维踩的坑来讲，还是将  Jenkins master 独立于 kubernetes 集群部署比较方便😂。</p><ul><li><code>docker-compose.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.6'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins:2.263.4-lts-slim</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./jenkins_home:/var/jenkins_home</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPTS=-Duser.timezone=Asia/Shanghai</span></span><br></pre></td></tr></table></figure><ul><li>使用 docker-compose up 来启动，成功启动后会有如下提示，日志输出的密钥就是 <code>admin</code> 用户的默认密码，使用它来第一次登录 Jenkins。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">jenkins    | 2021-03-06 02:22:31.741+0000 [id=41]INFOjenkins.install.SetupWizard<span class="comment">#init:</span></span><br><span class="line">jenkins    |</span><br><span class="line">jenkins    | *************************************************************</span><br><span class="line">jenkins    | *************************************************************</span><br><span class="line">jenkins    | *************************************************************</span><br><span class="line">jenkins    |</span><br><span class="line">jenkins    | Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">jenkins    | Please use the following password to proceed to installation:</span><br><span class="line">jenkins    |</span><br><span class="line">jenkins    | 4c2361968cd94323acdde17f7603d8e1</span><br><span class="line">jenkins    |</span><br><span class="line">jenkins    | This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">jenkins    |</span><br><span class="line">jenkins    | *************************************************************</span><br><span class="line">jenkins    | *************************************************************</span><br><span class="line">jenkins    | *************************************************************</span><br></pre></td></tr></table></figure><ul><li>登录上去之后，建议选择 <code>选择插件来安装</code>，尽可能少地安装插件，按需安装即可。</li></ul><p><img src="https://p.k8s.li/image-20210306102735594.png" alt="image-20210306102735594"></p><ul><li>在 Jenkins 的插件管理那里安装上 kubernetes 插件</li><li><img src="https://p.k8s.li/image-20210306103352837.png" alt="image-20210306103352837"></li><li>接下来开始配置 Jenkins 大叔如何与 kubernetes 船长手牵手🧑‍🤝‍🧑 :-)。配置 kubernets 的地方是在 <code>系统管理 &gt; 节点管理 &gt; Configure Clouds</code>。点击 <code>Add a new cloud</code>，来添加一个 kubernetes 集群。</li></ul><p><img src="https://p.k8s.li/image-20210306111626079.png" alt="image-20210306111626079"></p><ul><li>配置连接参数</li></ul><table><thead><tr><th>参数</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>名称</td><td>kubernetes</td><td>也是后面 pod 模板中的 <code>cloud</code> 的值</td></tr><tr><td>凭据</td><td>kubeconfig 凭据 id</td><td>使用 kubeconfig 文件来连接集群</td></tr><tr><td>Kubernetes 地址</td><td>默认即可</td><td></td></tr><tr><td>Use Jenkins Proxy</td><td>默认即可</td><td></td></tr><tr><td>Kubernetes 服务证书 key</td><td>默认即可</td><td></td></tr><tr><td>禁用 HTTPS 证书检查</td><td>默认即可</td><td></td></tr><tr><td>Kubernetes 命名空间</td><td>默认即可</td><td></td></tr><tr><td>WebSocket</td><td>默认即可</td><td></td></tr><tr><td>Direct Connection</td><td>默认即可</td><td></td></tr><tr><td>Jenkins 地址</td><td><a href="http://jenkins.k8s.li:8080" target="_blank" rel="noopener">http://jenkins.k8s.li:8080</a></td><td>Jenkins pod 连接  Jenkins master 的  URL</td></tr><tr><td>Jenkins 通道</td><td>50000</td><td>Jenkins <code>JNLP</code> 的端口，默认为 50000</td></tr><tr><td>Connection Timeout</td><td>默认即可</td><td>Jenkins 连接 kubernetes 超时时间</td></tr><tr><td>Read Timeout</td><td>默认即可</td><td></td></tr><tr><td>容器数量</td><td>默认即可</td><td>Jenkins pod 创建的最大数量</td></tr><tr><td>Pod Labels</td><td>默认即可</td><td>Jenkins pod 的 lables</td></tr><tr><td>连接 Kubernetes API 的最大连接数</td><td>默认即可</td><td></td></tr><tr><td>Seconds to wait for pod to be running</td><td>默认即可</td><td>等待 pod 正常 running 的时间</td></tr></tbody></table><ul><li>在 Jenkins 的凭据那里添加上 kubeconfig 文件，凭据的类型选择为 <code>Secret file</code>，然后将上面使用 kubeadm 部署生成的 kubeconfig 上传到这里。</li></ul><p><img src="https://p.k8s.li/image-20210306111037947.png" alt="image-20210306111037947"></p><ul><li>点击连接测试，如果提示 <code>Connected to Kubernetes v1.19.8</code> 就说明已经成功连接上了 kubernetes 集群。</li></ul><p><img src="https://p.k8s.li/image-20210306111148462.png" alt="image-20210306111148462"></p><ul><li>关于 pod 模板</li></ul><p>其实就是配置 Jenkins Slave 运行的 Pod 模板，个人不太建议使用插件中的模板去配置，推荐将 pod 的模板放在 Jenkinsfile 中，因为这些配置与我们的流水线紧密相关，把 pod 的配置存储在 Jenkins 的插件里实在是不太方便；不方便后续的迁移备份之类的工作；后续插件升级后这些配置也可能会丢失。因此建议将 pod 模板的配置直接定义在 Jenkinsfile 中，灵活性更高一些，不会受 Jenkins 插件升级的影响。总之用代码去管理这些 pod 配置维护成本将会少很多。</p><h2 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h2><ul><li>流水线 <code>Jenkinsfile</code>，下面是一个简单的任务，用于构建 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">webp-server-go</a> 项目的 docker 镜像。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">Kubernetes</span> <span class="string">pod</span> <span class="string">template</span> <span class="string">to</span> <span class="string">run.</span></span><br><span class="line"><span class="string">def</span> <span class="string">JOB_NAME</span> <span class="string">=</span> <span class="string">"$&#123;env.JOB_NAME&#125;"</span></span><br><span class="line"><span class="string">def</span> <span class="string">BUILD_NUMBER</span> <span class="string">=</span> <span class="string">"$&#123;env.BUILD_NUMBER&#125;"</span></span><br><span class="line"><span class="string">def</span> <span class="string">POD_NAME</span> <span class="string">=</span> <span class="string">"jenkins-$&#123;JOB_NAME&#125;-$&#123;BUILD_NUMBER&#125;"</span></span><br><span class="line"><span class="string">podTemplate(</span></span><br><span class="line"><span class="comment"># 这里定义 pod 模版</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&#123;</span> <span class="string">node(POD_NAME)</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">container(JOB_NAME)</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">stage("Build</span> <span class="string">image")</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">sh</span> <span class="string">""</span><span class="string">"#!/bin/bash</span></span><br><span class="line"><span class="string">          git clone https://github.com/webp-sh/webp_server_go /build</span></span><br><span class="line"><span class="string">          cd /build</span></span><br><span class="line"><span class="string">          docker build -t webps:0.3.2-rc.1 .</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>pod 模版如下，将模板的内容复制粘贴到上面的 Jenkinsfile 中。在容器中构建镜像，我们使用 dind 的方案：将 pod 所在宿主机的 docker sock 文件挂载到 pod 的容器内，pod 容器内只要安装好 docker-cli 工具就可以像宿主机那样直接使用 docker 了。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">podTemplate(</span></span><br><span class="line">  <span class="attr">cloud:</span> <span class="string">"kubernetes"</span><span class="string">,</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">"default"</span><span class="string">,</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">POD_NAME,</span></span><br><span class="line">  <span class="attr">label:</span> <span class="string">POD_NAME,</span></span><br><span class="line">  <span class="attr">yaml:</span> <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Pod</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  containers:</span></span><br><span class="line"><span class="string">  - name: $&#123;JOB_NAME&#125;</span></span><br><span class="line"><span class="string">    image: "</span><span class="string">debian:buster-docker"</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jnlp</span></span><br><span class="line">    <span class="attr">args:</span> <span class="string">["\$(JENKINS_SECRET)",</span> <span class="string">"\$(JENKINS_NAME)"</span><span class="string">]</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">"jenkins/inbound-agent:4.3-4-alpine"</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line"><span class="string">""</span><span class="string">",</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><ul><li>构建 <code>debian:buster-docker</code> 镜像，使用它来在 pod 的容器内构建 docker 镜像，使用的 <code>Dockerfile</code> 如下：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:buster</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends \</span></span><br><span class="line"><span class="bash">        vim \</span></span><br><span class="line"><span class="bash">        curl \</span></span><br><span class="line"><span class="bash">        git \</span></span><br><span class="line"><span class="bash">        make \</span></span><br><span class="line"><span class="bash">        ca-certificates \</span></span><br><span class="line"><span class="bash">        gnupg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -fsSL <span class="string">"https://download.docker.com/linux/debian/gpg"</span> | apt-key add -qq - &gt;/dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian buster stable"</span> &gt; /etc/apt/sources.list.d/docker.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -qq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y -qq --no-install-recommends docker-ce-cli \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure><p>定义好 jenkinsfile 文件并且构建好 pod 模板中的镜像后，接下来我们开始使用它来创建流水线任务。</p><h2 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h2><ul><li>在 Jenkins 上新建一个任务，选择任务的类型为 <code>流水线</code></li></ul><p><img src="https://p.k8s.li/image-20210306185651025.png" alt="image-20210306185651025"></p><ul><li>将定义好的 Jenkinsfile 内容复制粘贴到流水线定义 <code>Pipeline script</code> 中并点击保存。在新建好的 Job 页面点击 <code>立即构建</code> 来运行流水线任务。</li></ul><p><img src="https://p.k8s.li/image-20210306185838845.png" alt="image-20210306185838845"></p><ul><li>在 kubernetes 集群的机器上使用 kubectl 命令查看 pod 是否正常 Running</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@jenkins:~ <span class="comment"># kubectl get pod</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">jenkins-webps-9-bs78x-5x204   2/2     Running   0          66s</span><br></pre></td></tr></table></figure><ul><li>Job 正常运行并且状态为绿色表明该 job 已经成功执行了。</li></ul><p><img src="https://p.k8s.li/image-20210306190124096.png" alt="image-20210306190124096"></p><ul><li>在 kubernetes 集群机器上查看 docker 镜像是否构建成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@jenkins:~ <span class="comment"># docker images | grep webps</span></span><br><span class="line">webps                                0.3.2-rc.1          f68f496c0444        20 minutes ago      13.7MB</span><br></pre></td></tr></table></figure><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ul><li>pod 无法正常 Running</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Running <span class="keyword">in</span> Durability level: MAX_SURVIVABILITY</span><br><span class="line">[Pipeline] Start of Pipeline</span><br><span class="line">[Pipeline] podTemplate</span><br><span class="line">[Pipeline] &#123;</span><br><span class="line">[Pipeline] node</span><br><span class="line">Created Pod: kubernetes default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r][Scheduled] Successfully assigned default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r to jenkins</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r][Pulling] Pulling image <span class="string">"debian:buster"</span></span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r][Pulled] Successfully pulled image <span class="string">"debian:buster"</span> <span class="keyword">in</span> 2.210576896s</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r][Created] Created container debian</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r][Started] Started container debian</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r][Pulling] Pulling image <span class="string">"jenkins/inbound-agent:4.3-4-alpine"</span></span><br><span class="line">Still waiting to schedule task</span><br><span class="line">‘debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r’ is offline</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r][Pulled] Successfully pulled image <span class="string">"jenkins/inbound-agent:4.3-4-alpine"</span> <span class="keyword">in</span> 3.168311973s</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r][Created] Created container jnlp</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-9wm0r][Started] Started container jnlp</span><br><span class="line">Created Pod: kubernetes default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-qdw4m</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-qdw4m][Scheduled] Successfully assigned default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-qdw4m to jenkins</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-qdw4m][Pulled] Container image <span class="string">"debian:buster"</span> already present on machine</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-qdw4m][Created] Created container debian</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-qdw4m][Started] Started container debian</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-qdw4m][Pulled] Container image <span class="string">"jenkins/inbound-agent:4.3-4-alpine"</span> already present on machine</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-qdw4m][Created] Created container jnlp</span><br><span class="line">[Normal][default/debian-35a11b49-087b-4a8c-abac-bd97d7eb5a1f-fkmzq-qdw4m][Started] Started container jnlp</span><br></pre></td></tr></table></figure><p>这是因为 Jenkins pod 中的 jnlp 容器无法连接  Jenkins master。可以检查一下 Jenkins master 上 <code>系统管理 &gt; 节点管理 &gt; Configure Clouds</code> 中 <code>Jenkins 地址</code> 和 <code>Jenkins 通道</code> 这两个参数是否配置正确。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>到此为止，我们就完成了让 Jenkins 大叔与 kubernetes 船长手牵手🧑‍🤝‍🧑啦！上面使用了一个简单的例子来展示了如何将 Jenkins 的 Job 任务运行在 kubernetes 集群上，但在实际工作中遇到的情形可能比这要复杂一些，流水线需要配置的参数也要多一些。那么我将会在下一篇博客中再讲一下高级的用法：使用 Jenkins 完成 kubespray 离线安装包打包。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://jenkins-zh.cn/wechat/articles/2020/03/2020-03-10-create-a-ci-cd-pipeline-with-kubernetes-and-jenkins/" target="_blank" rel="noopener">使用 Kubernetes 和 Jenkins 创建一个 CI/CD 流水线</a></p></li><li><p><a href="https://www.qikqiak.com/k8s-book/docs/36.Jenkins%20Slave.html" target="_blank" rel="noopener">基于 Jenkins 的 CI/CD (一)</a></p></li><li><p><a href="https://a-wing.top/kubernetes/2021/01/27/jenkins_and_kubernetes.html" target="_blank" rel="noopener">PingCAP 面试：Jenkins 和 Kubernetes</a></p></li><li><p><a href="https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html" target="_blank" rel="noopener">基于 Kubernetes 的 Jenkins 服务也可以去 Docker 了</a></p></li><li><p><a href="https://www.chenshaowen.com/blog/jenkins-pipeline-usging-and-debug.html" target="_blank" rel="noopener">Jenkins Pipeline 使用及调试</a></p></li><li><p><a href="https://www.chenshaowen.com/blog/creating-jenkins-slave-dynamically-on-kubernetes.html" target="_blank" rel="noopener">在 Kubernetes 上动态创建 Jenkins Slave</a></p></li><li><p><a href="https://www.chenshaowen.com/blog/jenkins-x-is-not-jenkins-but-stack.html" target="_blank" rel="noopener">Jenkins X 不是 Jenkins ，而是一个技术栈</a></p></li><li><p><a href="https://atbug.com/using-role-based-authorization-strategy-in-jenkins/" target="_blank" rel="noopener">Jenkins CI/CD (一) 基于角色的授权策略</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="Jenkins" scheme="https://blog.k8s.li/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>overlay2 在打包发布流水线中的应用</title>
    <link href="https://blog.k8s.li/overlay2-on-package-pipline.html"/>
    <id>https://blog.k8s.li/overlay2-on-package-pipline.html</id>
    <published>2021-03-01T16:00:00.000Z</published>
    <updated>2021-03-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>自从去年五月份入职后一直在负责公司 PaaS toB 产品的打包发布及部署运维工作，工作性质上有点类似于 Kubernetes 社区的 <a href="https://github.com/kubernetes/sig-release" target="_blank" rel="noopener">SIG Release  团队</a>。试用期的主要工作就是优化我们先有的打包发布流程。在这期间产品打包发布流水线做了很多优化，其中最突出的是镜像同步的优化，将镜像同步的速度提升了 5 到 15 倍。大大缩短了整个产品的发布耗时，也得到了同事们的一致好评。于是今天就想着把这项优化和背后的原理分享出来。</p><p>我们的产品打包时会有一个镜像列表，并根据这个镜像列表在 CI/CD 的流水线镜像仓库里将镜像同步到一个发布归档的镜像仓库和一个打包的镜像仓库。最终会将打包的镜像仓库的 registry 存储目录打包一个未经 gzip 压缩的 tar 包。最终在客户环境部署的时候将这个 tar 包解压到部署的镜像仓库存储目录中，供集群部署和组件部署使用。至于部署的时候为什么可以这样做，其中的原理可以参考我之前写过的文章 <a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a>。</p><p>在打包的过程中镜像同步会进行两次，每次都会根据一个 images.list 列表将镜像同步到不同的镜像仓库中，同步的方式使用的是  <code>docker pull –&gt; docker tag –&gt; docker push</code>。其镜像同步的流程如下图所示：</p><p><img src="https://p.k8s.li/2021-03-01-001.jpeg" alt="img"></p><p>第一次是从CI/CD 流水线镜像仓库（cicd.registry.local）中拉取镜像并 push 到发布归档的镜像仓库(archive.registry.local)中，其目的是归档并备份我们已经发布的镜像，这一步称其为保存备份同步（save sync）。</p><p>第二次将镜像从发布归档的镜像仓库 (archive.registry.local) 同步镜像到打包镜像仓库（package.registry.local）中。不同于第一次的镜像同步，这次同步镜像的时候会对镜像仓库做清理的操作，首先清理打包镜像仓库的存储目录，然后容器 registry 容器让 registry 重新提取镜像的元数据信息到内存中。其目的是清理旧数据，防止历史的镜像带入本次发布版本的安装包中。</p><p>镜像同步完成之后会将整个打包镜像仓库的存储目录（/var/lib/registry）打包成一个 tar 包，并放到产品安装包中。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我刚入职的时候，我们的产品发布耗时最久的就是镜像同步阶段，记得最长的时候耗时 <code>2h30min</code>。耗时这么久的主要原因分析如下：</p><h3 id="docker-性能问题"><a href="#docker-性能问题" class="headerlink" title="docker 性能问题"></a>docker 性能问题</h3><p>在做镜像同步的时候使用的是  <code>docker pull –&gt; docker tag –&gt; docker push</code> 的方式。木子在<a href="https://blog.k8s.li/Exploring-container-image.html">《深入浅出容器镜像的一生》</a> 中分析过：在 docker pull 和 docker push 的过程中 docker 守护进程都会对镜像的 layer 做解压缩的操作，这是及其耗时和浪费 CPU 资源的。</p><p>又因为我们的内网机器的磁盘性能实在是太烂了，有时甚至连 USB 2.0 的速度（57MB/s）都不如！那慢的程度可想而知。这就导致了每次同步一两百个镜像时用时很久，最长的时候需要两个半小时。</p><h3 id="无法复用旧数据"><a href="#无法复用旧数据" class="headerlink" title="无法复用旧数据"></a>无法复用旧数据</h3><p>在第二次镜像同步时会对打包镜像仓库做清理的操作，导致无法复用历史的镜像。其实每次发布的时候，变更和新增的镜像很少，平均为原来的 1/10 左右，增量同步的镜像也就那么一丢丢。因为要保证这次打包发布的镜像仓库中只能包好这个需要的镜像，不能包含与本次无关的镜像，因此每次都需要清理打包镜像仓库，这无法避免。一直没有找到能够复用这些历史镜像的方法。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>根据上面提到的两个问题，经过反复的研究和测试终于都完美地解决了，并将镜像同步从原来最长需要两个半小时优化到了平均五分钟。</p><h3 id="skopeo-替代-docker"><a href="#skopeo-替代-docker" class="headerlink" title="skopeo 替代 docker"></a>skopeo 替代 docker</h3><p>针对  <code>docker pull –&gt; docker tag –&gt; docker push</code>  的性能问题，当时第一个方案想到的就是使用 skopeo 来替代它。使用 <code>skopeo copy</code> 直接将镜像从一个 registry 复制到另一个 registry 中。这样可以避免 docker 守护进程对镜像的 layer 进行解压缩而带来的性能损耗。关于 skopeo 的使用和其背后的原理可以参考我之前的博客 <a href="https://blog.k8s.li/skopeo.html">镜像搬运工 skopeo 初体验</a> 。使用 skopeo 之后镜像同步比之前快了很多，平均快了 5 倍左右。</p><h3 id="overlay2-复用旧数据"><a href="#overlay2-复用旧数据" class="headerlink" title="overlay2 复用旧数据"></a>overlay2 复用旧数据</h3><p>解决了 docker 的性能问题，剩下的就是无法复用旧数据的问题了。在如何保留历史镜像的问题上可煞费苦心。<strong>当时也不知道为什么就想到了 overlay2 的特性</strong>：<code>写时复制</code>。就好比如 docker run 启动一个容器，在容器内进行修改和删除文件的操作，这些操作并不会影响到镜像本身。因为 docker 使用 overlay2 联合挂载的方式将镜像的每一层挂载为一个 merged 的层。在容器内看到的就是这个 merged 的层，在容器内对 merged 层文件的修改和删除操作是通过 overlay2 的 upper 层完成的，并不会影响到处在 lower 层的镜像本身。从 docker 官方文档 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/" target="_blank" rel="noopener">Use the OverlayFS storage driver</a> 里偷来的一张图片：</p><p><img src="https://p.k8s.li/overlay_constructs.jpg" alt="img"></p><p>关于上图中这些 Dir 的作用，下面是一段从 <a href="https://stackoverflow.com/questions/56550890/docker-image-merged-diff-work-lowerdir-components-of-graphdriver" target="_blank" rel="noopener">StackOverflow</a> 上搬运过来的解释。如果想对 overlayfs 文件系统有详细的了解，可以参考 Linux 内核官网上的这篇文档 <a href="https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt" target="_blank" rel="noopener">overlayfs.txt</a> 。</p><blockquote><p><strong>LowerDir</strong>: these are the read-only layers of an overlay filesystem. For docker, these are the image layers assembled in order.</p><p><strong>UpperDir</strong>: this is the read-write layer of an overlay filesystem. For docker, that is the equivalent of the container specific layer that contains changes made by that container.</p><p><strong>WorkDir</strong>: this is a required directory for overlay, it needs an empty directory for internal use.</p><p><strong>MergedDir</strong>: this is the result of the overlay filesystem. Docker effectively chroot’s into this directory when running the container.</p></blockquote><p>总之 overlay2 大法好！根据 overlay2 的特性，我们可以将历史的数据当作 overlay2 里的 lowerdir 来使用。而 upperdir 则是本次镜像同步的增量数据，merged 则是最终实际需要的数据。</p><h2 id="overlay2"><a href="#overlay2" class="headerlink" title="overlay2"></a>overlay2</h2><p>虽然在上文中提到了使用 overlay2 的方案，但到目前为止还是没有一个成熟的解决方案。需要解决的问题如下：</p><ul><li><p>如何清理旧数据</p></li><li><p>如何复用历史的镜像？</p></li><li><p>如何区分出历史的镜像和本次的镜像？</p></li><li><p>如何保障本次镜像同步的结果只包含本次需要的镜像？</p></li></ul><h3 id="registry-存储结构"><a href="#registry-存储结构" class="headerlink" title="registry 存储结构"></a>registry 存储结构</h3><p>既然要使用历史的镜像仓库数据来作为 overlay2 的 lowerdir。那么如何解决之前提到的清理旧数据问题，以及如何使用历史的镜像的问题？那么还是需要再次回顾一下 registry 存储目录结构。</p><p><img src="https://p.k8s.li/registry-storage.jpeg" alt="img"></p><p>根据 registry 的存储结构可以得知：在 blobs 目录下保存的是镜像的 blob 的文件。blob 文件大体上有三种：镜像的 manifests；镜像的 image config 文件；以及镜像的 layer 层文件。其中 manifests 和 images config 文件都是 json 格式的文本文件，镜像的 layer 层文件则是经过压缩的 tar 包文件(一般为 gzip)。如果要复用历史的镜像，很大程度上复用的是镜像的 layer 层文件，因为这些文件是镜像当中最大的，在 docker pull 和 docker push 的时候就是对镜像的 layer 层文件进行解压缩的。</p><p>而且对于同一个镜像仓库来讲，blobs 下的文件都是由 repositories 下的 link 文件指向对应的 data 文件的。这就意味着，多个镜像可以使用相同的 layer。比如假如多个镜像的 base 镜像使用的都是  <code>debian:buster</code>，那么对于整个 registry 镜像仓库而言，只需要存一份 <code>debian:buster</code> 镜像即可。</p><p>同理，在使用历史的镜像时，我们是否可以只使用它的 layer 呢？这一点可能比较难理解 😂。我们使用下面这个例子来简单说明下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">k8s.gcr.io/kube-apiserver:v1.18.3</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.18.3</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.18.3</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.v1.18.3</span><br></pre></td></tr></table></figure><p>当我们使用  skopeo copy 将这些镜像从 <code>k8s.gcr.io</code> 复制到本地的一个镜像仓库时，复制完第一个镜像后，在 copy 后面的镜像时都会提示 <code>Copying blob 83b4483280e5 skipped: already exists</code> 的日志信息。这是因为这些镜像使用的是同一个 base 镜像，这个 base 镜像只包含了一个 layer，也就是 <code>83b4483280e5</code> 这一个 blob 文件。虽然本地的镜像仓库中没有这些镜像的 base 镜像，但是有 base 镜像的 layer，skopeo 也就不会再 copy 这个相同的 blob。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─<span class="comment"># skopeo copy docker://k8s.gcr.io/kube-apiserver:v1.18.3 docker://localhost/kube-apiserver:v1.18.3 --dest-tls-verify=false                                                     </span></span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob 83b4483280e5 <span class="keyword">done</span></span><br><span class="line">Copying blob 2bfb66b13a96 <span class="keyword">done</span></span><br><span class="line">Copying config 7e28efa976 <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─<span class="comment"># skopeo copy docker://k8s.gcr.io/kube-controller-manager:v1.18.3 docker://localhost/kube-controller-manager:v1.18.3 --dest-tls-verify=false</span></span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob 83b4483280e5 skipped: already exists</span><br><span class="line">Copying blob 7a73c2c3b85e <span class="keyword">done</span></span><br><span class="line">Copying config da26705ccb <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─<span class="comment"># skopeo copy docker://k8s.gcr.io/kube-scheduler:v1.18.3 docker://localhost/kube-scheduler:v1.18.3 --dest-tls-verify=false</span></span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob 83b4483280e5 skipped: already exists</span><br><span class="line">Copying blob 133c4d2f432a <span class="keyword">done</span></span><br><span class="line">Copying config 76216c34ed <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─<span class="comment"># skopeo copy docker://k8s.gcr.io/kube-proxy:v1.18.3 docker://localhost/kube-proxy:v1.18.3 --dest-tls-verify=false</span></span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob 83b4483280e5 skipped: already exists</span><br><span class="line">Copying blob ffa39a529ef3 <span class="keyword">done</span></span><br><span class="line">Copying config 3439b7546f <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><p>从上面的实验我们可以得知，只要 registry 中存在相同的 blob，skopeo 就不会 copy 这个相同的 blob。那么如何让 skopeo 和 registry 知道存在这些 layer 了呢？</p><p>这时需要再次回顾以下 registry 存储结构。在 repositories 下，每个镜像的文件夹中都会有 <code>_layers</code> 这个目录，而这个目录下的内容正是指向镜像 layer 和 image config 的 link 文件。也就是说：只要某个镜像的 <code>_layers</code> 下有指向 blob 的 link 文件，并且该 link 文件指向的 blobs 下的 data 文件确实存在，那么在 push 镜像的时候 registry 就会向客户端返回该 blob 已经存在，而 skopeo 就会略过处理已经存在的 blob 。以此，我们就可以达到复用历史数据的目的。</p><p><img src="https://p.k8s.li/registry-storage.jpeg" alt="img"></p><p>在历史镜像仓库文件中：blobs 目录是全部都要的； repositories 目录下只需要每个镜像的 <code>_layers</code> 目录即可；<code>_manifests</code> 目录下是镜像的 tag 我们并不需要他们； <code>_uploads</code> 目录则是 push 镜像时的临时目录也不需要。那么我们最终需要的历史镜像仓库中的文件就如下图所示：</p><p><img src="https://p.k8s.li/2021-03-01_09-18-19.jpg" alt="img"></p><p>到此为止已经解决掉了如何清理旧数据和如何如何复用历史的镜像的问题了。接下来要做的如何使用 overlay2  去构建这个镜像仓库所需的文件系统了。</p><h3 id="套娃：镜像里塞镜像？"><a href="#套娃：镜像里塞镜像？" class="headerlink" title="套娃：镜像里塞镜像？"></a>套娃：镜像里塞镜像？</h3><p>提到 overlay2 第一个想到的方案就是容器镜像：使用套娃的方式，将历史的镜像仓库存储目录复制到一个 registry 的镜像里，然后用这个镜像来启动打包镜像仓库的 registry 容器。这个镜像仓库的 <code>Dockerfile</code> 如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> registry:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将历史镜像仓库的目录打包成 tar 包，放到 registry 的镜像中， ADD 指令会自动解开这个 tar 包</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> docker.tar /var/lib/registry/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除掉所有镜像的 _manifests 目录，让 registry 认为里面没有镜像只有 blobs 数据</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> find /var/lib/registry/docker/registry/v2/repositories -<span class="built_in">type</span> d -name <span class="string">"_manifests"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span></span><br></pre></td></tr></table></figure><ul><li>然后使用这个 <code>Dockerfile</code> 构建一个镜像，并命名为 <code>registry:v0.1.0-base</code> ，使用这个镜像来 docker run 一个容器。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name registry -p 127.0.0.1:443:5000 registry:v0.1.0-base</span><br></pre></td></tr></table></figure><ul><li>接着同步镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat images.list | xargs -L1 -I &#123;&#125; skopeo copy  docker://cidi.registry.local/&#123;&#125; docker://package.registry.local/&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>同步完成镜像之后，需要删除掉 repositories 下没有生成 _manifests 目录的镜像。因为如果本次同步镜像有该镜像的话，会在 repositories 目录下重新生成 _manifests 目录，如果没有生成的话就说明本次同步的列表中不包含该镜像。以此可以解决如何区分出历史的镜像和本次的镜像的问腿，这样又能何保障本次镜像同步的结果只包含本次需要的镜像。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> project <span class="keyword">in</span> $(ls repositories/); <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> image <span class="keyword">in</span> $(ls repositories/<span class="variable">$&#123;project&#125;</span>); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ ! -d <span class="string">"repositories/<span class="variable">$&#123;project&#125;</span>/<span class="variable">$&#123;image&#125;</span>/_manifests"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    rm -rf repositories/<span class="variable">$&#123;project&#125;</span>/<span class="variable">$&#123;image&#125;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>最后还需要使用 registry GC 来删除掉 blobs 目录下没有被引用的文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it registry registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure><ul><li>再使用 docker cp 的方式将镜像从容器里复制出来并打包成一个 tar 包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp registry:/var/lib/registry/docker docker</span><br><span class="line">tar -cf docker.tar docker</span><br></pre></td></tr></table></figure><p>使用这种办法做了一下简单的测试，因为使用 skopeo copy 镜像的时候会提示很多 blobs 已经存在了，所以实际上复制的镜像只是一小部分，性能上的确比之前快了很多。但是这种方案也存在很多的弊端：一是这个 registry 的镜像需要手动维护和构建；二是使用 docker cp 的方式将容器内的 registry 存储目录复制到容器宿主机，性能上有点差；三是不同的产品需要不同的 base 镜像，维护起来比较麻烦。所以我们还需要更为简单一点使用 overlay2 技术。</p><h3 id="容器挂载-overlay2-merged-目录"><a href="#容器挂载-overlay2-merged-目录" class="headerlink" title="容器挂载 overlay2 merged 目录"></a>容器挂载 overlay2 merged 目录</h3><p>仔细想一下，将历史的镜像数据放到 registry 镜像中，用它来启动一个 registry 容器。同步镜像和进行 registry gc 这两部实际上是对 overlay2 的 merged 层进行读写删除操作。那我们为何不直接在宿主机上创建好 overlay2 需要的目录，然后再使用 overlay2 联合挂载的方式将这些目录挂载为一个 merged 目录。在启动 registry 容器的时候通过 <code>docker run -v</code> 参数将这个 merged 目录以 bind 的方式挂载到 registry 容器内呢？下面我们就做一个简单的验证和测试：</p><ul><li>首先创建 overlay2 需要的目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/registry</span><br><span class="line">mkdir -p lower upper work merged</span><br></pre></td></tr></table></figure><ul><li>将历史镜像仓库数据放到 lower 目录内</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cf docker.tar -C /var/lib/registry/lower</span><br></pre></td></tr></table></figure><ul><li>删除 所有镜像的 _manifests 目录，让 registry 认为里面没有镜像只有 blobs 数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /var/lib/registry/lower/docker/registry/v2/repositories -<span class="built_in">type</span> d -name <span class="string">"_manifests"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><ul><li>模拟容器的启动，使用 overlay2 联合挂载为一层 merged 层</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t overlay overlay -o lowerdir=lower,upperdir=upper,workdir=work merged</span><br></pre></td></tr></table></figure><ul><li>docker run 启动一个 registry ，并将 merged 目录挂载到容器内的 <code>/var/lib/registry/docker</code> 目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -name registry -p 127.0.0.1:443:5000 \</span><br><span class="line">-v /var/lib/registry/merged/docker:/var/lib/registry/docker</span><br></pre></td></tr></table></figure><ul><li>同步镜像，将本次发布需要的镜像同步到 registry 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat images.list | xargs -L1 -I &#123;&#125; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> docker://cicd.registry.local/&#123;&#125; docker://package.registry.local/&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>同步完成镜像后，进行 registry gc ，删除无用的 blob 数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it registry registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure><ul><li>最后打包 merged 目录，就是本次最终的结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/registry/merged</span><br><span class="line">tar -cf docker.tar docker</span><br></pre></td></tr></table></figure><p>在本地按照上述步骤进行了简单的验证，确实可以！在第二次同步镜像的时候会提示很多 blob 已经存在，镜像同步的速度比之前又快了 5 倍左右。那么将上述步骤写成一个脚本就能反复使用了。</p><h3 id="registry-gc-问题-？"><a href="#registry-gc-问题-？" class="headerlink" title="registry gc 问题 ？"></a>registry gc 问题 ？</h3><p>在使用的过程中遇到过 registry GC 清理不干净的问题：在进行 GC 之后，一些镜像 layer 和 config 文件已经在 blobs 存储目录下删除了，但指向它的 link 文件依旧保存在 repositories 目录下🙄。GitHub 上有个 PR <a href="https://github.com/docker/distribution/issues/2288" target="_blank" rel="noopener">Remove the layer’s link by garbage-collect #2288</a> 就是专门来清理这些无用的 layer link 文件的，最早的一个是三年前的，但是还没有合并😂。</p><p>解决办法就是使用我在 <a href="https://blog.k8s.li/registry-gc.html">docker registry GC 原理分析</a> 文章中提到的方案：自制 registry GC 脚本🙃。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">v2=<span class="variable">$1</span></span><br><span class="line">v2=<span class="variable">$&#123;v2:="/var/lib/registry/docker/registry/v2"&#125;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;v2&#125;</span></span><br><span class="line">all_blobs=/tmp/all_blobs.list</span><br><span class="line">: &gt; <span class="variable">$&#123;all_blobs&#125;</span></span><br><span class="line"><span class="comment"># delete unlink blob's link file in _layers</span></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> $(find repositories -<span class="built_in">type</span> f -name <span class="string">"link"</span> | grep -E <span class="string">"_layers\/sha256\/.*"</span>); <span class="keyword">do</span></span><br><span class="line">    link_sha256=$(<span class="built_in">echo</span> <span class="variable">$&#123;link&#125;</span> | grep -Eo <span class="string">"_layers\/sha256\/.*"</span> | sed <span class="string">'s/_layers\/sha256\///g;s/\/link//g'</span>)</span><br><span class="line">    link_short=<span class="variable">$&#123;link:0:2&#125;</span></span><br><span class="line">    link_dir=$(<span class="built_in">echo</span> <span class="variable">$&#123;link&#125;</span> | sed <span class="string">'s/\/link//'</span>)</span><br><span class="line">    data_file=blobs/sha256/<span class="variable">$&#123;link_short&#125;</span>/<span class="variable">$&#123;link&#125;</span></span><br><span class="line">    <span class="keyword">if</span> [[ ! -d <span class="variable">$&#123;data_file&#125;</span> ]]; <span class="keyword">then</span> rm -rf <span class="variable">$&#123;link_dir&#125;</span>; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#marking all the blob by all images manifest</span></span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> $(find repositories -name <span class="string">"link"</span> | grep current); <span class="keyword">do</span></span><br><span class="line">    link=$(cat <span class="variable">$&#123;tag&#125;</span> | cut -c8-71)</span><br><span class="line">    mfs=blobs/sha256/<span class="variable">$&#123;link:0:2&#125;</span>/<span class="variable">$&#123;link&#125;</span>/data</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;link&#125;</span> &gt;&gt; <span class="variable">$&#123;all_blobs&#125;</span></span><br><span class="line">    grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> <span class="variable">$&#123;mfs&#125;</span> | sort -n | uniq | cut -c1-12 &gt;&gt; <span class="variable">$&#123;all_blobs&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#delete blob if the blob doesn't exist in all_blobs.list</span></span><br><span class="line"><span class="keyword">for</span> blob <span class="keyword">in</span> $(find blobs -name <span class="string">"data"</span> | cut -d <span class="string">"/"</span> -f4); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! grep <span class="variable">$&#123;blob&#125;</span> <span class="variable">$&#123;all_blobs&#125;</span>; <span class="keyword">then</span></span><br><span class="line">        rm -rf blobs/sha256/<span class="variable">$&#123;blob:0:2&#125;</span>/<span class="variable">$&#123;blob&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>好了，至此最终的优化方案已经定下来了，其流程上如下：</p><p><img src="https://p.k8s.li/2021-03-01-002.jpeg" alt="img"></p><ul><li>第一次同步镜像的时候不再将镜像同步归档备份的镜像仓库（archive.registry.local） 而是同步到 overlay2 的镜像仓库，这个镜像仓库中的镜像将作为第二次镜像同步的 lower 层。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat images.list | xargs -L1 -I &#123;&#125; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> docker://cicd.registry.local/&#123;&#125; docker://overlay2.registry.local/&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>第一次镜像同步完成之后，先清理掉 overlay2 的 merged、upper、work 这三层，只保留 lower 层。因为 lower 层里保留着第一次镜像同步的结果。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umount /var/lib/registry/merged</span><br><span class="line">rm -rf /var/lib/registry/&#123;merged,upper,work&#125;</span><br></pre></td></tr></table></figure><ul><li>接下来就是使用 mount 挂载 overlay2，挂载完成之后进入到 merged 层删除掉所有的 _manifests 目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount -t overlay overlay -o lowerdir=lower,upperdir=upper,workdir=work merged</span><br><span class="line"><span class="built_in">cd</span> /var/lib/registry/merged</span><br><span class="line">find registry/v2/repositories -<span class="built_in">type</span> d -name <span class="string">"_manifests"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><ul><li>接着进行第二次的镜像同步，这一次的同步目的是重新建立  _manifests 目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat images.list | xargs -L1 -I &#123;&#125; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> docker://overlay2.registry.local/&#123;&#125; docker://package.registry.local/&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>第二次同步完成之后再使用自制的 registry GC 脚本来删除不必要的 blob 文件和 link 文件。</li><li>最后将镜像仓库存储目录打包就得到了本次需要的镜像啦。</li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>虽然比之前的流程复杂了很多，但优化的结果是十分明显，比以往快了 5 到 15 倍，并在我们的生产环境中已经稳稳地使用了大半年。</p><p>读完这篇文章可能你会觉得一头雾水，不知道究竟在讲什么。什么镜像同步、镜像 blob、layer、overlay2、联合挂载、写时复制等等，被这一堆复杂的背景和概念搞混了😂。本文确实不太好理解，因为背景可能较特殊和复杂，很少人会遇到这样的场景。为了很好地理解本文所讲到的内容和背后的原理，过段时间我会单独写一篇博客，通过最佳实践来理解本文提到的技术原理。敬请期待😝</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul><li><a href="https://github.com/containers/image" target="_blank" rel="noopener">image</a></li><li><a href="https://github.com/opencontainers/image-spec" target="_blank" rel="noopener">OCI Image Manifest Specification</a></li><li><a href="https://github.com/opencontainers/distribution-spec" target="_blank" rel="noopener">distribution-spec</a></li><li><a href="https://doi-janky.infosiftr.net/job/tianon/job/debuerreotype/" target="_blank" rel="noopener">debuerreotype/</a></li><li><a href="https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt" target="_blank" rel="noopener">overlayfs.txt</a></li></ul><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="http://open.daocloud.io/allen-tan-docker-xi-lie-zhi-tu-kan-jin-docker-rong-qi-wen-jian-xi-tong/" target="_blank" rel="noopener">看尽 docker 容器文件系统</a></li><li><a href="https://supereagle.github.io/2018/04/24/docker-registry/" target="_blank" rel="noopener">镜像仓库中镜像存储的原理解析</a></li><li><a href="https://segmentfault.com/a/1190000014284289" target="_blank" rel="noopener">Docker镜像的存储机制</a></li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生🤔</a></li><li><a href="https://blog.k8s.li/skopeo.html">镜像搬运工 skopeo 初体验</a></li><li><a href="https://blog.k8s.li/mount-bind.html">mount 命令之 –bind 挂载参数</a></li><li><a href="https://blog.k8s.li/registry-gc.html">docker registry GC 原理分析</a></li><li><a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="images" scheme="https://blog.k8s.li/tags/images/"/>
    
  </entry>
  
  <entry>
    <title>同步 docker hub library 镜像到本地 registry</title>
    <link href="https://blog.k8s.li/sync-dockerhub-library-images.html"/>
    <id>https://blog.k8s.li/sync-dockerhub-library-images.html</id>
    <published>2021-02-09T16:00:00.000Z</published>
    <updated>2021-02-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="恰烂钱？"><a href="#恰烂钱？" class="headerlink" title="恰烂钱？"></a>恰烂钱？</h2><p>自从去年 11 月份开始，docker 公司为了恰点烂钱就对 docker hub 上 pull 镜像的策略进行限制：</p><ul><li><strong>未登录用户，每 6 小时只允许 pull 100 次</strong></li><li><strong>已登录用户，每 6 小时只允许 pull 200 次</strong></li></ul><p>而且，限制的手段也非常地粗暴，通过判断请求镜像的 manifest 文件的次数，请求一个镜像的 manifest 文件就算作一次 pull 镜像。即便你 pull 失败了，也会算作一次。</p><p>随后也有很多大佬分享绕过 docker hub 限制的办法，比如搭建私有的镜像仓库，然后再给客户端配置上 <code>registry-mirrors</code> 参数，就可以通过本地的镜像仓库来拉取镜像。</p><ul><li><a href="https://moelove.info/2020/09/20/%E7%AA%81%E7%A0%B4-DockerHub-%E9%99%90%E5%88%B6%E5%85%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">突破 DockerHub 限制，全镜像加速服务</a></li><li><a href="https://nova.moe/bypass-docker-hub-429/" target="_blank" rel="noopener">绕过从 Docker Hub pull 镜像时的 429 toomanyrequests</a></li><li><a href="https://www.chenshaowen.com/blog/how-to-cross-the-limit-of-dockerhub.html" target="_blank" rel="noopener">如何绕过 DockerHub 拉取镜像限制</a></li></ul><p>但是呢，以上方法都比较局限：首先镜像需要挨个手动 push 到本地镜像仓库；其次本地镜像仓库中的镜像无法和官方镜像保持同步更新，如果要使用新的 tag 好的镜像仍然需要手动将镜像从 docker hub 上 pull 下来，然后再 push 到本地镜像仓库；还有手动 push 镜像是比较混乱的，如果使用的镜像比较多，比如公有云容器服务，这时候再手动 push 的话管理起来是及其不方便的。</p><p>因此经过一番折腾终于摸索出了一个方案：将 docker hub 上 library repo 的镜像同步到本地镜像仓库，最终要做到上游如果更新了镜像 tag 也能自动地将镜像同步到本地镜像仓库。</p><h2 id="获取镜像-tag"><a href="#获取镜像-tag" class="headerlink" title="获取镜像 tag"></a>获取镜像 tag</h2><p>对于 docker hub 上的镜像，我们使用到最多的就是 library 这个 repo 即 <a href="https://docs.docker.com/docker-hub/official_images/" target="_blank" rel="noopener">Official Images on Docker Hub</a>，里面包含着大部分开源软件和 Linux 发行版的基础镜像。</p><blockquote><ul><li>Provide essential base OS repositories (for example, <a href="https://hub.docker.com/_/ubuntu/" target="_blank" rel="noopener">ubuntu</a>, <a href="https://hub.docker.com/_/centos/" target="_blank" rel="noopener">centos</a>) that serve as the starting point for the majority of users.</li><li>Provide drop-in solutions for popular programming language runtimes, data stores, and other services, similar to what a Platform as a Service (PAAS) would offer.</li><li>Exemplify <a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/" target="_blank" rel="noopener"><code>Dockerfile</code> best practices</a> and provide clear documentation to serve as a reference for other <code>Dockerfile</code> authors.</li><li>Ensure that security updates are applied in a timely manner. This is particularly important as Official Images are some of the most popular on Docker Hub.</li></ul></blockquote><p>library 的镜像常见的特点就是当我们使用 docker 客户端去 pull 一个镜像时，无需指定该镜像的 repo ，比如 <code>ubuntu:latest</code>，其他非 library 的镜像需要指定镜像所属的 repo ，比如 <code>jenkins/slave:latest</code>。这部分代码是硬编码在 docker 的源码当中的。</p><blockquote><p>我们虽然日常访问的是 <code>https://hub.docker.com</code> ，但是我们在 <a href="https://github.com/docker/distribution/blob/master/reference/normalize.go#L13" target="_blank" rel="noopener">https://github.com/docker/distribution/blob/master/reference/normalize.go#L13</a> 中可以看到实际 <code>docker</code> 使用的地址是一个硬编码的 <code>docker.io</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">legacyDefaultDomain = <span class="string">"index.docker.io"</span></span><br><span class="line">defaultDomain       = <span class="string">"docker.io"</span></span><br><span class="line">officialRepoName    = <span class="string">"library"</span></span><br><span class="line">defaultTag          = <span class="string">"latest"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></blockquote><p>我们可以通过如下几种办法来获取 docker hub 上 library repo 的镜像列表。</p><h3 id="通过-docker-registry-命令行"><a href="#通过-docker-registry-命令行" class="headerlink" title="通过 docker registry 命令行"></a>通过 docker registry 命令行</h3><p>在 docker 官方文档中 <a href="https://docs.docker.com/engine/reference/commandline/registry/" target="_blank" rel="noopener">docker registry</a> 有提到可以列出某个 registry 中的镜像，但这个功能仅限于 <a href="https://docs.docker.com/ee/supported-platforms/" target="_blank" rel="noopener">Docker Enterprise Edition.</a> 版本，而社区的版本中未有该命令。遂放弃……</p><blockquote><p>This command is only available on Docker Enterprise Edition.</p><p>Learn more about <a href="https://docs.docker.com/ee/supported-platforms/" target="_blank" rel="noopener">Docker Enterprise products</a>.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker registry ls <span class="comment"># List registry images</span></span><br></pre></td></tr></table></figure><h3 id="通过-registry-v2-API"><a href="#通过-registry-v2-API" class="headerlink" title="通过 registry v2 API"></a>通过 registry v2 API</h3><ul><li><code>get-images.list</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">DOCKER_HUB_URL=<span class="string">"https://hub.docker.com/v2/repositories/library"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_images_list</span></span>() &#123;</span><br><span class="line">    ALL_IMAGES=<span class="string">""</span></span><br><span class="line">    URL=<span class="string">"<span class="variable">$&#123;DOCKER_HUB_URL&#125;</span>/?page_size=100"</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> ; <span class="keyword">do</span></span><br><span class="line">        ALL_IMAGES=<span class="string">"<span class="variable">$(curl -sSL $&#123;URL&#125; | jq -r '.results[].name' | tr '\n' ' ')</span> <span class="variable">$&#123;ALL_IMAGES&#125;</span>"</span></span><br><span class="line">        URL=<span class="string">"<span class="variable">$(curl -sSL $&#123;URL&#125; | jq -r '.next')</span>"</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;URL&#125;</span>"</span> = <span class="string">"null"</span> ]; <span class="keyword">then</span> <span class="built_in">break</span>; <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    : &gt; all_library_images.list</span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> <span class="variable">$&#123;ALL_IMAGES&#125;</span>;<span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> skopeo list-tags docker://<span class="variable">$&#123;image&#125;</span> &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">            skopeo list-tags docker://<span class="variable">$&#123;image&#125;</span> | jq <span class="string">".Tags"</span> | tr -d <span class="string">'[],\" '</span> | tr -s <span class="string">'\n'</span> | sed <span class="string">"s|^|<span class="variable">$&#123;image&#125;</span>:|g"</span> &gt;&gt; all_library_images.list</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">get_images_list</span><br></pre></td></tr></table></figure><p>通过 docker hub 的  API 获取到的镜像 tag 实在是太多了，截至今日 docker hub 上整个 <a href="https://hub.docker.com/u/library" target="_blank" rel="noopener">library repo</a> 的项目一共有 162 个，而这 162 个项目中的镜像 tag 数量多达<strong>五万两千</strong>多个。总的镜像仓库存储占用空间的大小预计至少 5TB 。其中的镜像我们真正需要用到的估计也不到 <strong>0.1%</strong>，因此需要想个办法减少这个镜像列表的数量，获得的镜像列表更精确一些，通用一些。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /opt/official-images ‹sync*›</span><br><span class="line">╰─<span class="comment"># cat all_library_images.list|cut -d ':' -f1 | sort -u | wc</span></span><br><span class="line">    162     162    1353</span><br><span class="line">╭─root@sg-02 /opt/official-images ‹sync*›</span><br><span class="line">╰─<span class="comment"># cat all_library_images.list | wc</span></span><br><span class="line">  52094   52094 1193973</span><br></pre></td></tr></table></figure><h3 id="通过-official-images-repo"><a href="#通过-official-images-repo" class="headerlink" title="通过 official-images repo"></a>通过 official-images repo</h3><p>以 <a href="https://hub.docker.com/_/debian" target="_blank" rel="noopener">debian</a> 为例，在 docker hub 上镜像的 tag 基本上都是这样子的：</p><blockquote><p><strong>Supported tags and respective <code>Dockerfile</code> links</strong></p><ul><li><a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/bullseye/Dockerfile" target="_blank" rel="noopener"><code>bullseye</code>, <code>bullseye-20210208</code></a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/bullseye/backports/Dockerfile" target="_blank" rel="noopener"><code>bullseye-backports</code></a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/bullseye/slim/Dockerfile" target="_blank" rel="noopener"><code>bullseye-slim</code>, <code>bullseye-20210208-slim</code></a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/buster/Dockerfile" target="_blank" rel="noopener"><code>buster</code>, <code>buster-20210208</code>, <code>10.8</code>, <code>10</code>, <code>latest</code></a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/buster/backports/Dockerfile" target="_blank" rel="noopener"><code>buster-backports</code></a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/buster/slim/Dockerfile" target="_blank" rel="noopener"><code>buster-slim</code>, <code>buster-20210208-slim</code>, <code>10.8-slim</code>, <code>10-slim</code></a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/experimental/Dockerfile" target="_blank" rel="noopener"><code>experimental</code>, <code>experimental-20210208</code></a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/jessie/Dockerfile" target="_blank" rel="noopener"><code>jessie</code>, <code>jessie-20210208</code>, <code>8.11</code>, <code>8</code></a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/jessie/slim/Dockerfile" target="_blank" rel="noopener"><code>jessie-slim</code>, <code>jessie-20210208-slim</code>, <code>8.11-slim</code>, <code>8-slim</code></a></li></ul></blockquote><p>每一行都代表着同一个镜像，如： <a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/b05117a87fbd32f977b4909e399fe368c75767ad/buster/Dockerfile" target="_blank" rel="noopener"><code>buster</code>, <code>buster-20210208</code>, <code>10.8</code>, <code>10</code>, <code>latest</code></a> 。一行中镜像虽然有多个 tag，但这些 tag 指向的 manifest 其实都是一致的。镜像 tag 的关系有点类似于 C 语言里的指针变量，是引用的关系。</p><p>但这么多的信息是如何高效地管理的呢？于是顺藤摸瓜发现了：由于 library repo 里的镜像构建信息都是由 <a href="https://github.com/docker-library/official-images" target="_blank" rel="noopener">official-images</a> 这个 repo 来管理的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># buster -- Debian 10.8 Released 06 February 2021</span></span><br><span class="line">Tags: buster, buster-20210208, 10.8, 10, latest</span><br><span class="line">Architectures: amd64, arm32v5, arm32v7, arm64v8, i386, mips64le, ppc64le, s390x</span><br><span class="line">Directory: buster</span><br><span class="line"></span><br><span class="line">Tags: buster-backports</span><br><span class="line">Architectures: amd64, arm32v5, arm32v7, arm64v8, i386, mips64le, ppc64le, s390x</span><br><span class="line">Directory: buster/backports</span><br><span class="line"></span><br><span class="line">Tags: buster-slim, buster-20210208-slim, 10.8-slim, 10-slim</span><br><span class="line">Architectures: amd64, arm32v5, arm32v7, arm64v8, i386, mips64le, ppc64le, s390x</span><br><span class="line">Directory: buster/slim</span><br></pre></td></tr></table></figure><p>在这个 <a href="https://github.com/docker-library/official-images" target="_blank" rel="noopener">official-images</a>  repo 里  library 目录下有以镜像 name 命名的文件，而文件的内容正是记录着与 docker hub 相对应的 tag 信息。由此我们可以根据这个 repo 获取 library repo 镜像的 tag。好处在于虽然这样得到的镜像列表并不是全面的，但这个 repo 里记录的镜像 tag 都是官方还在维护的，并不会包含一些旧的或者 CI 测试的镜像。这样获得的镜像列表更通用一些。</p><p>拿出 Linux 文本处理三剑客，一顿操作搓出了个脚本来生成镜像以及镜像的数量。惊奇的发现，通过这种方式获取到的镜像数量为 docker hub 的 registry API 获取到的镜像数量的十分之一左右。根据如下数据可以得出，docker hub 真实需要的镜像数量为 1517 个，而 5590 个镜像中包含了多个 tag 指向同一个镜像的情况，因此，我们只需要将这些相同镜像的 tag pull 一次即可，其余的镜像通过 retag 的方式打上 tag 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取镜像列表</span></span><br><span class="line">$ grep -Er <span class="string">"^Tags:|^SharedTags:"</span> library | sed <span class="string">'s|library/||g;s|:Tags||g;s|:SharedTags||g;s| ||g'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取镜像数量，也就是 manifests 的数量</span></span><br><span class="line">$ grep -Er <span class="string">"^Tags:|^SharedTags:"</span> library | sed <span class="string">'s|library/||g;s|:Tags||g;s|:SharedTags||g;s| ||g'</span> | wc</span><br><span class="line">   1518    1518   95999</span><br><span class="line"><span class="comment"># 获取所有镜像 tag 数量，包含了所有的 tag</span></span><br><span class="line">$ grep -Er <span class="string">"^Tags:|^SharedTags:"</span> library | sed <span class="string">'s|library/||g;s|:Tags||g;s|:SharedTags||g;s| ||g'</span> | tr <span class="string">','</span> <span class="string">'\n'</span> | wc</span><br><span class="line">   5590    5590   95999</span><br></pre></td></tr></table></figure><h2 id="本地同步镜像"><a href="#本地同步镜像" class="headerlink" title="本地同步镜像"></a>本地同步镜像</h2><p>获取到镜像列表之后，我们就可用使用 <a href="https://github.com/containers/skopeo/blob/master/docs/skopeo-copy.1.md" target="_blank" rel="noopener">skopeo copy</a> 直接将镜像 copy 到本地的镜像仓库中啦。结合上述步骤，使用不到 20 行的脚本就能完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ALL_IMAGES=$(grep -Er <span class="string">"^Tags:|^SharedTags:"</span> library \</span><br><span class="line">| sed <span class="string">'s|library/||g;s|:Tags||g;s|:SharedTags||g;s| ||g'</span>)</span><br><span class="line">IFS=$<span class="string">'\n'</span></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> <span class="variable">$&#123;ALL_IMAGES&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    name=<span class="string">"<span class="variable">$(echo $&#123;image&#125; | cut -d ':' -f1)</span>"</span></span><br><span class="line">    tags=<span class="string">"<span class="variable">$(echo $&#123;image&#125; | cut -d ':' -f2 | cut -d ',' -f1)</span>"</span></span><br><span class="line">    <span class="keyword">if</span> skopeo copy docker://<span class="variable">$&#123;name&#125;</span>:<span class="variable">$&#123;tags&#125;</span> docker://registry.local/library/<span class="variable">$&#123;name&#125;</span>:<span class="variable">$&#123;tags&#125;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> $(<span class="built_in">echo</span> <span class="variable">$&#123;image&#125;</span> | cut -d <span class="string">':'</span> -f2 | tr <span class="string">','</span> <span class="string">'\n'</span>); <span class="keyword">do</span></span><br><span class="line">        skopeo copy docker://<span class="variable">$&#123;name&#125;</span>:<span class="variable">$&#123;tag&#125;</span> docker://registry.local/library/<span class="variable">$&#123;name&#125;</span>:<span class="variable">$&#123;tags&#125;</span>;</span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>但，没我想象中的那么简单，在自己的机器上 pull 了不到 150 个镜像的时候就报错退出了，提示 <code>toomanyrequests: You have reached your pull rate limit.</code> 错误。心里 mmp，docker inc 啊，干啥啥不行（如今 Docker Machine，Docker Swarm，docker-compose 三驾马车哪儿去了？），<strong>恰烂钱可还行</strong>😡。</p><blockquote><p>ime=”2021-02-12T07:08:51Z” level=fatal msg=”Error parsing image name &quot;docker://ubuntu:latest&quot;:</p><p>Error reading manifest latest in docker.io/library/ubuntu: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: <a href="https://www.docker.com/increase-rate-limit&quot;" target="_blank" rel="noopener">https://www.docker.com/increase-rate-limit&quot;</a></p></blockquote><h2 id="Dockerfile-里同步镜像？"><a href="#Dockerfile-里同步镜像？" class="headerlink" title="Dockerfile 里同步镜像？"></a>Dockerfile 里同步镜像？</h2><p>既然在本地有 pull 次数的限制，那什么地方不会有这种限制呢？首先想到的是 docker hub 上 build 镜像肯定不会限制吧。应该是的……。不如在 Dockerfile 里塞一个脚本，用它来同步镜像如何？于是一顿操作猛如虎，不一会儿就搓出来个 Dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:unstable-slim</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -xue ;\</span></span><br><span class="line"><span class="bash">    apt update -y ;\</span></span><br><span class="line"><span class="bash">    apt install ca-certificates skopeo git curl jq -y --no-install-recommends ;\</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apt/lists/* ;\</span></span><br><span class="line"><span class="bash">    git <span class="built_in">clone</span> -b sync https://github.com/muzi502/official-images /build</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -xue ;\</span></span><br><span class="line"><span class="bash">    skopeo login hub.k8s.li -u admin -p Harbor123456 ;\</span></span><br><span class="line"><span class="bash">    bash /build/sync-images.sh</span></span><br></pre></td></tr></table></figure><p>然……事实证明是我太天真了，在同步了不到 100 多个镜像后，同样也出现了 429 toomanyrequests 的限制。掀桌儿！在 docker hub 上构建镜像，也会被限制？自己限制自己？？这什么鸡儿玩意。</p><p><del>假如有一个多阶段构建的 Dockerfile，就有可能因为拉不到镜像而导致镜像构建失败。那么这种智障的设计没想到过？</del></p><p>想到一种可能是 docker hub 内部是通过 token 来进行验证的，而不是根据客户端访问源 IP 。build 镜像的宿主机上会有 docker login 的 token 文件，但 build 镜像的容器里是没有这个 token 文件的，所以在 dockerfile 里 pull 镜像同样会被限制。看来 dockerfile 里同步镜像的方案也就不行了🙃，只能另寻他路啦。</p><h2 id="GitHub-Action-来同步镜像"><a href="#GitHub-Action-来同步镜像" class="headerlink" title="GitHub Action 来同步镜像"></a>GitHub Action 来同步镜像</h2><h3 id="ssh-连接-runner"><a href="#ssh-连接-runner" class="headerlink" title="ssh 连接 runner"></a>ssh 连接 runner</h3><p>在刚开始写这篇博客的时候也没有想到使用 GitHub Action，在刷 GitHub 动态的时候无意间发现了它。于是又一顿操作看看 GitHub Action 是否能用来同步镜像。</p><p>首先参考 <a href="https://p3terx.com/archives/ssh-to-the-github-actions-virtual-server-environment.html" target="_blank" rel="noopener">SSH 连接到 GitHub Actions 虚拟服务器</a> 连接到 runner 的机器上:</p><ul><li><code>.github/workflows/ssh.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Ubuntu</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">tmate</span> <span class="string">session</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">mxschmitt/action-tmate@v1</span></span><br></pre></td></tr></table></figure><p>使用 ssh 连接到 action runner 的机器里意外发现，在 <code>~/.docker/config.json</code> 文件里竟然已经有了个 login 的 docker hub 账户。<code>哦豁.jpg</code>。由于 docker login 的配置文件只是简单的 base64 加密，解码后拿到真实的 user 和 token。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">runner@fv-az60-303:~$ cat .docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">        "auths": &#123;</span><br><span class="line">                "https://index.docker.io/v1/": &#123;</span><br><span class="line">                        "auth": "Z2l0aHViYWN0aW9uczozZDY0NzJiOS0zZDQ5LTRkMTctOWZjOS05MGQyNDI1ODA0M2I="</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;runner@fv-az60-303:~$ echo "Z2l0aHViYWN0aW9uczozZDY0NzJiOS0zZDQ5LTRkMTctOWZjOS05MGQyNDI1ODA0M2I=" | base64 -d</span><br><span class="line">githubactions:3d6472b9-3d49-4d17-9fc9-90d24258043b</span><br></pre></td></tr></table></figure><p><img src="https://p.k8s.li/image-20210216173039196.png" alt=""></p><p>于是想着可以验证一下这个账户是否有限制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --user <span class="string">'githubactions:3d6472b9-3d49-4d17-9fc9-90d24258043'</span> <span class="string">"https://auth.docker.io/token?service=registry.docker.io&amp;scope=repository:ratelimitpreview/test:pull"</span></span><br></pre></td></tr></table></figure><p>但失败了，提示 <code>{&quot;details&quot;:&quot;incorrect username or password&quot;}</code> ，估计这个账户是个 bot 账户，只能用于 pull 镜像，其他的 api 请求都没权限使用。至于这个账户有没有限制，还需要做下测试。</p><p>另外意外地发现 runner 的机器里集成了很多工具，其中  skopeo 也包含在内，实在是太方便了。GitHub 牛皮，微软爸爸我爱你😘！那就方便了，我们就使用 skopeo inspect 去请求镜像的 manifests 文件。看看最多能请求多少会被限制。于是花了点时间搓了个脚本用于去获取 docker hub 上 library repo 中的所有镜像的 manifests 文件。</p><ul><li><code>get-manifests.sh</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">DOCKER_HUB_URL=<span class="string">"https://hub.docker.com/v2/repositories/library"</span></span><br><span class="line">IMAGES_LIST=<span class="string">"images.list"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_images_list</span></span>() &#123;</span><br><span class="line">    ALL_IMAGES=<span class="string">""</span></span><br><span class="line">    URL=<span class="string">"<span class="variable">$&#123;DOCKER_HUB_URL&#125;</span>/?page_size=100"</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> ; <span class="keyword">do</span></span><br><span class="line">        ALL_IMAGES=<span class="string">"<span class="variable">$(curl -sSL $&#123;URL&#125; | jq -r '.results[].name' | tr '\n' ' ')</span> <span class="variable">$&#123;ALL_IMAGES&#125;</span>"</span></span><br><span class="line">        URL=<span class="string">"<span class="variable">$(curl -sSL $&#123;URL&#125; | jq -r '.next')</span>"</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;URL&#125;</span>"</span> = <span class="string">"null"</span> ]; <span class="keyword">then</span> <span class="built_in">break</span>; <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    : &gt; <span class="variable">$&#123;IMAGES_LIST&#125;</span></span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> <span class="variable">$&#123;ALL_IMAGES&#125;</span>;<span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> skopeo list-tags docker://<span class="variable">$&#123;image&#125;</span> &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">            skopeo list-tags docker://<span class="variable">$&#123;image&#125;</span> | jq -c <span class="string">".Tags"</span> | tr -d <span class="string">'[]\"'</span> \</span><br><span class="line">            | tr <span class="string">','</span> <span class="string">'\n'</span> | sed <span class="string">"s|^|<span class="variable">$&#123;image&#125;</span>:|g"</span> &gt;&gt; <span class="variable">$&#123;IMAGES_LIST&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_manifests</span></span>() &#123;</span><br><span class="line">    mkdir -p manifests</span><br><span class="line">    IFS=$<span class="string">'\n'</span></span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> $(cat <span class="variable">$&#123;IMAGES_LIST&#125;</span>); <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> skopeo inspect --raw docker://<span class="variable">$&#123;image&#125;</span> | jq  -r <span class="string">'.manifests[].digest'</span> &amp;&gt; /dev/null ; <span class="keyword">then</span></span><br><span class="line">            skopeo inspect --raw docker://<span class="variable">$&#123;image&#125;</span> | jq  -r <span class="string">'.manifests[].digest'</span> \</span><br><span class="line">            |  xargs -L1 -P8 -I % sh -c <span class="string">"skopeo inspect --raw docker://<span class="variable">$&#123;image/:*/&#125;</span>@% &gt; manifests/<span class="variable">$&#123;image&#125;</span>@%.json"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            skopeo inspect --raw docker://<span class="variable">$&#123;image&#125;</span> &gt; manifests/<span class="variable">$&#123;image&#125;</span>.json</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get_images_list</span><br><span class="line">get_manifests</span><br></pre></td></tr></table></figure><p>经过一番长时间的刺测试，在获取了 20058   个镜像的 manifest 文件之后依旧没有被限制，于是大胆猜测，runner 里内置的 docker hub 账户 pull library 镜像是没有限制的。估计是 GitHub 和 docker inc 达成了  py 交易，用这个账户去 pull 公共镜像没有限制。</p><p><img src="https://p.k8s.li/image-20210216173003436.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runner@fv-az212-267:~/work/runner-test/runner-test$ ls manifests/ | wc</span><br><span class="line">  20058   20058 1875861</span><br></pre></td></tr></table></figure><h3 id="定时同步镜像"><a href="#定时同步镜像" class="headerlink" title="定时同步镜像"></a>定时同步镜像</h3><p>从上述步骤一可知在 GitHub Action runner 机器里自带的 docker login 账户是没有限制，那我们最终就选定使用它来同步镜像到本地 registry 吧。参照 GitHub Action 照葫芦画瓢搓了个 action 的配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">sync-images</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sync</span></span><br><span class="line">  <span class="comment"># 设置定时任务，每 6 小时运行一次</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">"* */6 * * *"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">sync-images:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clone</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">github-actions</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">github-actions@github.com</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">images</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">REGISTRY_DOMAIN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REGISTRY_DOMAIN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">REGISTRY_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REGISTRY_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">REGISTRY_PASSWORD:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REGISTRY_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">skopeo</span> <span class="string">login</span> <span class="string">$&#123;REGISTRY_DOMAIN&#125;</span>  <span class="string">-u</span> <span class="string">$&#123;REGISTRY_USER&#125;</span> <span class="string">-p</span> <span class="string">$&#123;REGISTRY_PASSWORD&#125;</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">bash</span> <span class="string">sync-images.sh</span> <span class="string">$&#123;REGISTRY_DOMAIN&#125;</span></span><br></pre></td></tr></table></figure><p>既然 GitHub runner 的机器里有 docker login 的配置文件，不如把它<strong>偷</strong>过来，复制粘贴到自家的机器上使用😜？不过我认为这种行为有点不厚道😂，还是别干了。在这里只提供一个思路，实际上可行性还待验证。</p><h3 id="增量同步"><a href="#增量同步" class="headerlink" title="增量同步"></a>增量同步</h3><p>默认设置的为 6 小时同步一次上游最新的代码，由于定时更新是使用的增量同步，即通过 git diff 的方式将当前分支最新的 commit 和上游 docker hub 官方的 repo 最新 commit 进行比较，找出变化的镜像。因此如果是首次同步，需要全量同步，在同步完成之后会给 repo 打上一个时间戳的 tag ，下次同步的时候就用这个 tag 和上游 repo 最新 commit 做差异比较。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IMAGES=$(git diff --name-only --ignore-space-at-eol --ignore-space-change \</span><br><span class="line">    --diff-filter=AM $&#123;LAST_TAG&#125; $&#123;CURRENT_COMMIT&#125; library | xargs -L1 -I &#123;&#125; sed "s|^|&#123;&#125;:|g" &#123;&#125; \</span><br><span class="line">    | sed -n "s| ||g;s|library/||g;s|:Tags:|:|p;s|:SharedTags:|:|p" | sort -u | sed "/$&#123;SKIPE_IMAGES&#125;/d")</span><br></pre></td></tr></table></figure><h2 id="如何食用？"><a href="#如何食用？" class="headerlink" title="如何食用？"></a>如何食用？</h2><p>如果你也想将 docker hub 上 library repo 的镜像搞到本地镜像仓库，可以参考如下方法：</p><h3 id="劝退三连😂"><a href="#劝退三连😂" class="headerlink" title="劝退三连😂"></a>劝退三连😂</h3><ul><li>首先要本地部署好镜像仓库并配置好 SSL 证书。镜像仓库建议使用 docker registry 或者 harbor，具体的部署方法可以在互联网上找到。</li><li>需要个大盘鸡（大硬盘机器），当前 docker hub 上还在维护的 tag 镜像总大小为 128 GB 左右。</li><li>如果是长期使用，本地镜像仓库的存储空间至少 1TB 以上。</li><li>由于是使用 GitHub action 的机器将镜像 push 到本地镜像仓库，因此本地镜像仓库需要有个公网IP以及域名 + SSL 证书</li></ul><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><p>首先 fork 官方的 repo <a href="https://github.com/docker-library/official-images" target="_blank" rel="noopener">docker-library/official-images</a>  到自己的 GitHub 账户下；</p><p>然后 fork 这个 repo <a href="https://github.com/muzi502/sync-library-images" target="_blank" rel="noopener">muzi502/sync-library-images</a> 到自己的 GitHub 账户下；</p><p>最后在自己的 sync-library-images 这个 repo 的 <code>Settings &gt;  Secrets</code> 中配置好如下三个变量：</p><ul><li>REGISTRY_DOMAIN 设置为本地镜像仓库的域名</li><li>REGISTRY_USER 本地镜像仓库的用户名</li><li>REGISTRY_PASSWORD 设置为本地镜像仓库的密码</li></ul><p><img src="https://p.k8s.li/image-20210216163441719.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://docs.docker.com/docker-hub/official_images/" target="_blank" rel="noopener">Official Images on Docker Hub</a></p></li><li><p><a href="https://hub.docker.com/support/doc/how-do-i-authenticate-with-the-v2-api" target="_blank" rel="noopener">How do I authenticate with the V2 API?</a></p></li><li><p><a href="https://docs.docker.com/docker-hub/download-rate-limit/" target="_blank" rel="noopener">Download rate limit</a></p></li><li><p><a href="https://moelove.info/2020/09/20/%E7%AA%81%E7%A0%B4-DockerHub-%E9%99%90%E5%88%B6%E5%85%A8%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">突破 DockerHub 限制，全镜像加速服务</a></p></li><li><p><a href="https://nova.moe/bypass-docker-hub-429/" target="_blank" rel="noopener">绕过从 Docker Hub pull 镜像时的 429 toomanyrequests</a></p></li><li><p><a href="https://www.chenshaowen.com/blog/how-to-cross-the-limit-of-dockerhub.html" target="_blank" rel="noopener">如何绕过 DockerHub 拉取镜像限制</a></p></li><li><p><a href="https://p3terx.com/archives/ssh-to-the-github-actions-virtual-server-environment.html" target="_blank" rel="noopener">SSH 连接到 GitHub Actions 虚拟服务器</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;恰烂钱？&quot;&gt;&lt;a href=&quot;#恰烂钱？&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="images" scheme="https://blog.k8s.li/tags/images/"/>
    
  </entry>
  
</feed>
