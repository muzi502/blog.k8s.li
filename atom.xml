<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子</title>
  <icon>https://blog.k8s.li/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.k8s.li/"/>
  <updated>2021-08-25T16:00:00.000Z</updated>
  <id>https://blog.k8s.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 GitHub Actions 编译 kubernetes 组件</title>
    <link href="https://blog.k8s.li/build-k8s-binary-by-github-actions.html"/>
    <id>https://blog.k8s.li/build-k8s-binary-by-github-actions.html</id>
    <published>2021-08-25T16:00:00.000Z</published>
    <updated>2021-08-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 kubernetes 过程中由于某些需求往往要修改一下 k8s 官方的源码，然后重新编译才行。本文就以修改 kubeadm 生成证书为默认 10 年为例，来讲解如何使用 GitHub Actions 来编译和发布生成的二进制文件。</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h3 id="clone-repo"><a href="#clone-repo" class="headerlink" title="clone repo"></a>clone repo</h3><p>将 kubernetes 官方源码 fork 到自己的 repo 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/k8sli/kubernetes.git</span><br><span class="line">$ <span class="built_in">cd</span> kubernetes</span><br><span class="line">$ git remote add upstream https://github.com/kubernetes/kubernetes.git</span><br><span class="line">$ git fetch --all</span><br><span class="line">$ git checkout upstream/release-1.21</span><br><span class="line">$ git checkout -B kubeadm-1.21</span><br></pre></td></tr></table></figure><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><ul><li><code>.github/workflows/kubeadm.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">kubeadm</span> <span class="string">binary</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tag:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'v*'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="comment"># 这里我们选择以 tag 的方式惩触发 job 的运行</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">startsWith(github.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">kubeadm</span> <span class="string">binary</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># 运行 build/run.sh 构建脚本来编译相应平台上的二进制文件</span></span><br><span class="line">          <span class="string">build/run.sh</span> <span class="string">make</span> <span class="string">kubeadm</span> <span class="string">KUBE_BUILD_PLATFORMS=linux/amd64</span></span><br><span class="line">          <span class="string">build/run.sh</span> <span class="string">make</span> <span class="string">kubeadm</span> <span class="string">KUBE_BUILD_PLATFORMS=linux/arm64</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 构建好的二进制文件存放在 _output/dockerized/bin/ 中</span></span><br><span class="line">      <span class="comment"># 我们根据二进制目标文件的系统名称+CPU体系架构名称进行命名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">for</span> <span class="string">upload</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">_output/dockerized/bin/linux/amd64/kubeadm</span> <span class="string">kubeadm-linux-amd64</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">_output/dockerized/bin/linux/arm64/kubeadm</span> <span class="string">kubeadm-linux-arm64</span></span><br><span class="line">          <span class="string">sha256sum</span> <span class="string">kubeadm-linux-&#123;amd64,arm64&#125;</span> <span class="string">&gt;</span> <span class="string">sha256sum.txt</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 使用 softprops/action-gh-release 来将构建产物上传到 GitHub release 当中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span> <span class="string">and</span> <span class="string">upload</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">files:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">sha256sum.txt</span></span><br><span class="line">            <span class="string">kubeadm-linux-amd64</span></span><br><span class="line">            <span class="string">kubeadm-linux-arm64</span></span><br></pre></td></tr></table></figure><ul><li><code>build/run.sh</code></li></ul><blockquote><p>: Run a command in a build docker container. Common invocations:</p><ul><li><code>build/run.sh make</code>: Build just linux binaries in the container. Pass options and packages as necessary.</li><li><code>build/run.sh make cross</code>: Build all binaries for all platforms. To build only a specific platform, add <code>KUBE_BUILD_PLATFORMS=&lt;os&gt;/&lt;arch&gt;</code></li><li><code>build/run.sh make kubectl KUBE_BUILD_PLATFORMS=darwin/amd64</code>: Build the specific binary for the specific platform (<code>kubectl</code> and <code>darwin/amd64</code> respectively in this example)</li><li><code>build/run.sh make test</code>: Run all unit tests</li><li><code>build/run.sh make test-integration</code>: Run integration test</li><li><code>build/run.sh make test-cmd</code>: Run CLI tests</li></ul></blockquote><h3 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h3><ul><li><code>cmd/kubeadm/app/constants/constants.go</code></li></ul><p>找到 <code>CertificateValidity</code> 变量将它在 375 天后面加个 0，就将证书续命为 10 年了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// CertificateValidity defines the validity for all the signed certificates generated by kubeadm</span></span><br><span class="line">-CertificateValidity = time.Hour * <span class="number">24</span> * <span class="number">365</span></span><br><span class="line">+CertificateValidity = time.Hour * <span class="number">24</span> * <span class="number">3650</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// CACertAndKeyBaseName defines certificate authority base name</span></span><br><span class="line"> CACertAndKeyBaseName = <span class="string">"ca"</span></span><br></pre></td></tr></table></figure><ul><li><code>git diff</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/.github/workflows/kubeadm.yaml b/.github/workflows/kubeadm.yaml</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..376f37c0edf</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/.github/workflows/kubeadm.yaml</span><br><span class="line">@@ -0,0 +1,37 @@</span><br><span class="line">+---</span><br><span class="line">+name: Build kubeadm binary image</span><br><span class="line">+</span><br><span class="line">+on:</span><br><span class="line">+  push:</span><br><span class="line">+    tag:</span><br><span class="line">+      - <span class="string">'v*'</span></span><br><span class="line">+<span class="built_in">jobs</span>:</span><br><span class="line">+  build:</span><br><span class="line">+    runs-on: ubuntu-20.04</span><br><span class="line">+    <span class="keyword">if</span>: startsWith(github.ref, <span class="string">'refs/tags/'</span>)</span><br><span class="line">+    steps:</span><br><span class="line">+      - name: Checkout</span><br><span class="line">+        uses: actions/checkout@v2</span><br><span class="line">+</span><br><span class="line">+      - name: Build kubeadm binary</span><br><span class="line">+        shell: bash</span><br><span class="line">+        run: |</span><br><span class="line">+          build/run.sh make kubeadm KUBE_BUILD_PLATFORMS=linux/amd64</span><br><span class="line">+          build/run.sh make kubeadm KUBE_BUILD_PLATFORMS=linux/arm64</span><br><span class="line">+</span><br><span class="line">+      - name: Prepare <span class="keyword">for</span> upload</span><br><span class="line">+        shell: bash</span><br><span class="line">+        run: |</span><br><span class="line">+          mv _output/dockerized/bin/linux/amd64/kubeadm kubeadm-linux-amd64</span><br><span class="line">+          mv _output/dockerized/bin/linux/arm64/kubeadm kubeadm-linux-arm64</span><br><span class="line">+          sha256sum kubeadm-linux-&#123;amd64,arm64&#125; &gt; sha256sum.txt</span><br><span class="line">+</span><br><span class="line">+      - name: Release and upload packages</span><br><span class="line">+        uses: softprops/action-gh-release@v1</span><br><span class="line">+        env:</span><br><span class="line">+          GITHUB_TOKEN: <span class="variable">$&#123;&#123; secrets.GITHUB_TOKEN &#125;</span>&#125;</span><br><span class="line">+        with:</span><br><span class="line">+          files: |</span><br><span class="line">+            sha256sum.txt</span><br><span class="line">+            kubeadm-linux-amd64</span><br><span class="line">+            kubeadm-linux-arm64</span><br><span class="line">diff --git a/cmd/kubeadm/app/constants/constants.go b/cmd/kubeadm/app/constants/constants.go</span><br><span class="line">index aed3a713020..08a24d237f8 100644</span><br><span class="line">--- a/cmd/kubeadm/app/constants/constants.go</span><br><span class="line">+++ b/cmd/kubeadm/app/constants/constants.go</span><br><span class="line">@@ -46,7 +46,7 @@ const (</span><br><span class="line"> TempDirForKubeadm = <span class="string">"tmp"</span></span><br><span class="line"></span><br><span class="line"> // CertificateValidity defines the validity <span class="keyword">for</span> all the signed certificates generated by kubeadm</span><br><span class="line">-CertificateValidity = time.Hour * 24 * 365</span><br><span class="line">+CertificateValidity = time.Hour * 24 * 3650</span><br><span class="line"></span><br><span class="line"> // CACertAndKeyBaseName defines certificate authority base name</span><br><span class="line"> CACertAndKeyBaseName = <span class="string">"ca"</span></span><br></pre></td></tr></table></figure><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><p>在分支上完成修改之后，我们将这个修改 cherry-pick 到其他的 tag 上面去，下面以 v1.21.4 为例子：在 v1.21.4 tag 的基础之上将上述的修改 cherry-pick 过来，重新打上新的 tag。</p><ul><li>获取上述修改的 commit id</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ COMMIT_ID=$(git rev-parse HEAD)</span><br></pre></td></tr></table></figure><ul><li>checkout 到 v1.21.4 这个 tag 上</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout v1.21.4</span><br><span class="line">Note: checking out <span class="string">'v1.21.4'</span>.</span><br><span class="line"></span><br><span class="line">You are <span class="keyword">in</span> <span class="string">'detached HEAD'</span> state. You can look around, make experimental</span><br><span class="line">changes and commit them, and you can discard any commits you make <span class="keyword">in</span> this</span><br><span class="line">state without impacting any branches by performing another checkout.</span><br><span class="line"></span><br><span class="line">If you want to create a new branch to retain commits you create, you may</span><br><span class="line"><span class="keyword">do</span> so (now or later) by using -b with the checkout <span class="built_in">command</span> again. Example:</span><br><span class="line"></span><br><span class="line">HEAD is now at 3cce4a82b44 Release commit <span class="keyword">for</span> Kubernetes v1.21.4</span><br></pre></td></tr></table></figure><ul><li>将修改 cherry-pick 到当前 tag 上</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick <span class="variable">$COMMIT_ID</span></span><br><span class="line">[detached HEAD baadbe03458] Update kubeadm CertificateValidity time to ten years</span><br><span class="line"> Date: Tue Aug 24 16:32:49 2021 +0800</span><br><span class="line"> 2 files changed, 38 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 .github/workflows/kubeadm.yaml</span><br></pre></td></tr></table></figure><ul><li>重新打上新的 tag，如 <code>v1.21.4-patch-1.0</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.21.4-patch-1.0 -f</span><br><span class="line">Updated tag <span class="string">'v1.21.4-patch-1.0'</span> (was 70bcbd6de6c)</span><br></pre></td></tr></table></figure><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-1.png" alt="image-20210826020226785"></p><ul><li>将 tag push 到 repo 中触发 workflow</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags -f</span><br><span class="line">Enumerating objects: 17, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (17/17), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (9/9), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (10/10), 1.13 KiB | 192.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 10 (delta 7), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (7/7), completed with 7 <span class="built_in">local</span> objects.</span><br><span class="line">To github.com:k8sli/kubernetes.git</span><br><span class="line"> + c2a633e07ec...baadbe03458 v1.21.4-patch-1.0 -&gt; v1.21.4-patch-1.0 (forced update)</span><br></pre></td></tr></table></figure><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-2.png" alt="image-20210826020837194"></p><ul><li>整个构建过程大概需要 7 分钟左右，效率还是蛮高的。</li></ul><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-3.png" alt="image-20210826021451447"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面只展示了以一个 tag 为单位进行构建的流程，想要构建其他版本的 kubeadm ，可以按照同样的流程和方法来完成。其实写一个 shell 脚本来处理也是十分简单。</p><p>使用 GitHub Actions 的好处就是能够为我们解决代码管理和产物管理，构建好的二进制文件存放在 GitHub release 当中，下载和使用起来十分方便，不用在自己搞一台单独的机器或者存储服务器，节省很多人力维护成本。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在使用 kubernetes
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="k8s" scheme="https://blog.k8s.li/tags/k8s/"/>
    
      <category term="GitHub" scheme="https://blog.k8s.li/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>搬砖常用的 shell 片段记录</title>
    <link href="https://blog.k8s.li/shell-snippet.html"/>
    <id>https://blog.k8s.li/shell-snippet.html</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2021-07-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然间看到了 <a href="https://izsk.me/" target="_blank" rel="noopener"><strong>Z.S.K.’s Records</strong></a> 大佬的一篇博客 《<a href="https://izsk.me/2021/03/21/shell-funny-snippet/" target="_blank" rel="noopener">有趣的Shell Snippet</a>》，突发奇想也准备写篇文章来记录一下常用的一些 shell 代码。</p><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><h3 id="展开"><a href="#展开" class="headerlink" title="{} 展开"></a>{} 展开</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;hack,build&#125;</span><br><span class="line">hack build</span><br></pre></td></tr></table></figure><h3 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h3><blockquote><p><a href="http://cn.linux.vbird.org/linux_basic/0320bash_2.php#variable_other" target="_blank" rel="noopener">http://cn.linux.vbird.org/linux_basic/0320bash_2.php#variable_other</a></p><p>我们将这部份作个总结说明一下：</p><table><thead><tr><th>变量配置方式</th><th>说明</th></tr></thead><tbody><tr><td>${变量#关键词} ${变量##关键词}</td><td>若变量内容从头开始的数据符合『关键词』，则将符合的最短数据删除 若变量内容从头开始的数据符合『关键词』，则将符合的最长数据删除</td></tr><tr><td>${变量%关键词} ${变量%%关键词}</td><td>若变量内容从尾向前的数据符合『关键词』，则将符合的最短数据删除 若变量内容从尾向前的数据符合『关键词』，则将符合的最长数据删除</td></tr><tr><td>${变量/旧字符串/新字符串} ${变量//旧字符串/新字符串}</td><td>若变量内容符合『旧字符串』则『第一个旧字符串会被新字符串取代』 若变量内容符合『旧字符串』则『全部的旧字符串会被新字符串取代』</td></tr></tbody></table></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ image=<span class="string">"library/nginx:1.19"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如要获取镜像的 tag 常用的是 echo 然后 awk/cut 的方式</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;image&#125;</span> | awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span> 方式</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以直接使用 bash 内置的变量替换功能，截取特定字符串</span></span><br><span class="line">$ image_name=<span class="variable">$&#123;image%%:*&#125;</span></span><br><span class="line">$ image_tag=<span class="variable">$&#123;image##*:&#125;</span></span><br><span class="line">$ image_repo=<span class="variable">$&#123;image%%/*&#125;</span></span><br></pre></td></tr></table></figure><h3 id="变量配置方式"><a href="#变量配置方式" class="headerlink" title="变量配置方式"></a>变量配置方式</h3><table><thead><tr><th>变量配置方式</th><th>str 没有配置</th><th>str 为空字符串</th><th>str 已配置非为空字符串</th></tr></thead><tbody><tr><td>var=${str-expr}</td><td>var=expr</td><td>var=</td><td>var=$str</td></tr><tr><td>var=${str:-expr}</td><td>var=expr</td><td>var=expr</td><td>var=$str</td></tr><tr><td>var=${str+expr}</td><td>var=</td><td>var=expr</td><td>var=expr</td></tr><tr><td>var=${str:+expr}</td><td>var=</td><td>var=</td><td>var=expr</td></tr><tr><td>var=${str=expr}</td><td>str=expr var=expr</td><td>str 不变 var=</td><td>str 不变 var=$str</td></tr><tr><td>var=${str:=expr}</td><td>str=expr var=expr</td><td>str=expr var=expr</td><td>str 不变 var=$str</td></tr><tr><td>var=${str?expr}</td><td>expr 输出至 stderr</td><td>var=</td><td>var=$str</td></tr><tr><td>var=${str:?expr}</td><td>expr 输出至 stderr</td><td>expr 输出至 stderr</td><td>var=$str</td></tr></tbody></table><h3 id="判断字符串中是否包含子串"><a href="#判断字符串中是否包含子串" class="headerlink" title="判断字符串中是否包含子串"></a>判断字符串中是否包含子串</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 ** 匹配</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;var&#125;</span>"</span> == *<span class="string">"<span class="variable">$&#123;sub_string&#125;</span>"</span>* ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"sub_string is in var."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 bash 内置的 =~ 判断</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;sub_string&#125;</span>"</span> =~ <span class="string">"<span class="variable">$&#123;var&#125;</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"sub_string is in var."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><h3 id="安装-docker-ce"><a href="#安装-docker-ce" class="headerlink" title="安装 docker-ce"></a>安装 docker-ce</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">$ bash get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>另外可通过传入 DRY_RUN 的参数来输出际会执行的内容，这个输出的内容可以用来配置 docker-ce 的源，而不安装 docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ DRY_RUN=1 sh ./get-docker.sh --mirror Aliyun &gt; install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executing docker install script, commit: 7cae5f8b0decc17d6571f9f52eb840fbc13b2737</span></span><br><span class="line">apt-get update -qq &gt;/dev/null</span><br><span class="line">DEBIAN_FRONTEND=noninteractive apt-get install -y -qq apt-transport-https ca-certificates curl &gt;/dev/null</span><br><span class="line">curl -fsSL <span class="string">"https://mirrors.aliyun.com/docker-ce/linux/debian/gpg"</span> | apt-key add -qq - &gt;/dev/null</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/debian buster stable"</span> &gt; /etc/apt/sources.list.d/docker.list</span><br><span class="line">apt-get update -qq &gt;/dev/null</span><br><span class="line">apt-get install -y -qq --no-install-recommends docker-ce &gt;/dev/null</span><br><span class="line">DEBIAN_FRONTEND=noninteractive apt-get install -y -qq docker-ce-rootless-extras &gt;/dev/null</span><br></pre></td></tr></table></figure><h3 id="安装-helm"><a href="#安装-helm" class="headerlink" title="安装 helm"></a>安装 helm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash</span><br></pre></td></tr></table></figure><h3 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><h3 id="匹配行的下一行插入"><a href="#匹配行的下一行插入" class="headerlink" title="匹配行的下一行插入"></a>匹配行的下一行插入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">"/kube-node/a <span class="variable">$&#123;ip&#125;</span>"</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="输出两个匹配行之间的内容"><a href="#输出两个匹配行之间的内容" class="headerlink" title="输出两个匹配行之间的内容"></a>输出两个匹配行之间的内容</h3><p>在不使用 yq 或者 jq 的情况下，需要输出 <code>downloads</code> 列表中的所有内容，即 <code>download:</code> 和 <code>download_defaults:</code>之间的内容</p><ul><li><a href="https://github.com/kubernetes-sigs/kubespray/blob/master/roles/download/defaults/main.yml" target="_blank" rel="noopener">download.yml</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dashboard_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_image_repo &#125;&#125;</span>/kubernetesui/dashboard-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">dashboard_image_tag:</span> <span class="string">"v2.2.0"</span></span><br><span class="line"><span class="attr">dashboard_metrics_scraper_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_image_repo &#125;&#125;</span>/kubernetesui/metrics-scraper"</span></span><br><span class="line"><span class="attr">dashboard_metrics_scraper_tag:</span> <span class="string">"v1.0.6"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">downloads:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_enabled &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">container:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_image_repo &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_image_tag &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">sha256:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_digest_checksum|default(None) &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube_control_plane</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboard_metrics_scrapper:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_enabled &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">container:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_metrics_scraper_repo &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_metrics_scraper_tag &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">sha256:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_digest_checksum|default(None) &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube_control_plane</span></span><br><span class="line"></span><br><span class="line"><span class="attr">download_defaults:</span></span><br><span class="line">  <span class="attr">container:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">file:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">None</span></span><br></pre></td></tr></table></figure><p>可使用 sed 的方式进行匹配输出 <code>sed -n &#39;/$VAR1/,/$VAR2/p&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">'/^downloads:/,/download_defaults:/p'</span></span><br></pre></td></tr></table></figure><h3 id="奇偶行合并"><a href="#奇偶行合并" class="headerlink" title="奇偶行合并"></a>奇偶行合并</h3><p>接着上一个问题，通过 <code>sed -n &quot;s/repo: //p;s/tag: //p&quot;</code> 匹配出镜像的 repo 和 tag，但一个完整的镜像的格式是 <code>repo:tag</code>，因此需要将 repo 和 tag 行进行合并。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_image_repo &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_image_tag &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_metrics_scraper_repo &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_metrics_scraper_tag &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>可使用 <code>sed &#39;N;s#\n# #g&#39;</code> 进行奇偶行合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/^downloads:/,/download_defaults:/p'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| sed -n <span class="string">"s/repo: //p;s/tag: //p"</span> | tr -d <span class="string">' '</span> | sed <span class="string">'s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> \</span><br><span class="line">| sed <span class="string">'N;s#\n# #g'</span> | tr <span class="string">' '</span> <span class="string">':'</span> | sed <span class="string">'s/^/echo /g'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/generate.sh</span><br></pre></td></tr></table></figure><h3 id="去除换行符"><a href="#去除换行符" class="headerlink" title="去除换行符"></a>去除换行符</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">':a;N;$!ba;s/\n/ /g'</span></span><br></pre></td></tr></table></figure><h2 id="grep-egrep"><a href="#grep-egrep" class="headerlink" title="grep/egrep"></a>grep/egrep</h2><h3 id="统计匹配行行数"><a href="#统计匹配行行数" class="headerlink" title="统计匹配行行数"></a>统计匹配行行数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -i | grep sshd | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># grep 通过 -c 参数即可统计匹配行，不需要使用 wc 来统计</span></span><br><span class="line">$ lsof -i | grep -c sshd</span><br></pre></td></tr></table></figure><h3 id="匹配-IPv4-地址"><a href="#匹配-IPv4-地址" class="headerlink" title="匹配 IPv4 地址"></a>匹配 IPv4 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ egrep --only-matching -E <span class="string">'([[:digit:]]&#123;1,3&#125;\.)&#123;3&#125;[[:digit:]]&#123;1,3&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="将镜像构建到本地目录"><a href="#将镜像构建到本地目录" class="headerlink" title="将镜像构建到本地目录"></a>将镜像构建到本地目录</h3><p>和 <code>FROM scratch</code>搭配起来使用，就可以将构建产物 build 到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DOCKER_BUILDKIT=1 docker build -o <span class="built_in">type</span>=<span class="built_in">local</span>,dest=<span class="variable">$PWD</span> -f Dockerfile .</span><br></pre></td></tr></table></figure><p>比如使用 Dockerfile 构建 skopeo 静态链接文件</p><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nixos/nix:<span class="number">2.3</span>.<span class="number">11</span> as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /build</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> nix build -f nix</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /build/result/bin/skopeo /skopeo</span></span><br></pre></td></tr></table></figure><ul><li>build</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_BUILDKIT=1 docker build -o <span class="built_in">type</span>=<span class="built_in">local</span>,dest=<span class="variable">$PWD</span> .</span><br></pre></td></tr></table></figure><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><ul><li>获取集群中所有 pod 运行需要的镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -A -o=custom-columns=<span class="string">'IMAGE:spec.containers[*].image'</span> | tr <span class="string">','</span> <span class="string">'\n'</span> | sort -u</span><br></pre></td></tr></table></figure><ul><li>获取所有 namespace 的 events 日志并按照时间戳排序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get events --all-namespaces -o wide --sort-by=.metadata.creationTimestamp</span><br></pre></td></tr></table></figure><ul><li>导出一个 namespaces 下所有 pod 的日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -n kube-system | awk <span class="string">'&#123;print $1&#125;'</span> | xargs -L1 -I &#123;&#125; bash -c <span class="string">"kubectl -n kube-system logs &#123;&#125; &gt; &#123;&#125;.log"</span></span><br></pre></td></tr></table></figure><ul><li>导出 k8s 组件的 pod 日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -n kube-system | grep -E <span class="string">"kube-apiserver|kube-controller|kube-proxy|kube-scheduler|coredns"</span> | awk <span class="string">'&#123;print $1&#125;'</span> | xargs -L1 -I &#123;&#125; sh -c <span class="string">"kubectl -n kube-system logs &#123;&#125; &gt; &#123;&#125;.log"</span></span><br></pre></td></tr></table></figure><ul><li>获取集群中节点的 IP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes -o jsonpath=<span class="string">'&#123; $.items[*].status.addresses[?(@.type=="InternalIP")].address &#125;'</span></span><br></pre></td></tr></table></figure><ul><li>获取所有 Pod 的 IP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o jsonpath=<span class="string">'&#123; $.items[*].status.podIP &#125;'</span></span><br></pre></td></tr></table></figure><ul><li>获取所有 node 节点的子网信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes -o jsonpath=<span class="string">'&#123;.items[*].spec.podCIDR&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>获取所有 service 的 IP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc --no-headers --all-namespaces -o jsonpath=<span class="string">'&#123;$.items[*].spec.clusterIP&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>根据 CPU/RAM 占用排序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cpu</span></span><br><span class="line">kubectl top pods --all-namespaces | sort --reverse --key 3 --numeric</span><br><span class="line"><span class="comment"># memory</span></span><br><span class="line">kubectl top pods --all-namespaces | sort --reverse --key 4 --numeric</span><br></pre></td></tr></table></figure><h2 id="yq-jq"><a href="#yq-jq" class="headerlink" title="yq/jq"></a>yq/jq</h2><h3 id="yq-根据某个-key-获取某个-value"><a href="#yq-根据某个-key-获取某个-value" class="headerlink" title="yq 根据某个 key 获取某个 value"></a>yq 根据某个 key 获取某个 value</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker registry for offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">docker.io/library/registry</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># helm chartmuseum for offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">ghcr.io/helm/chartmuseum</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/chartmuseum</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yq <span class="built_in">eval</span> <span class="string">'.[]|select(.dest=="library/chartmuseum") | .src'</span> images_origin.yaml</span><br></pre></td></tr></table></figure><h3 id="替换数组中的元素"><a href="#替换数组中的元素" class="headerlink" title="替换数组中的元素"></a>替换数组中的元素</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.20-alpine</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./resources/nginx:/usr/share/nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:5000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx_http_port=<span class="string">"<span class="variable">$&#123;NGINX_HTTP_PORT&#125;</span>:8080"</span> yq <span class="built_in">eval</span> --inplace <span class="string">'.services.nginx.ports[0] = strenv(nginx_http_port)'</span> <span class="variable">$&#123;COMPOSE_YAML_FILE&#125;</span></span><br><span class="line">registry_https_port=<span class="string">"<span class="variable">$&#123;REGISTRY_HTTPS_PORT&#125;</span>:443"</span> yq <span class="built_in">eval</span> --inplace <span class="string">'.services.nginx.ports[1] = strenv(registry_https_port)'</span> <span class="variable">$&#123;COMPOSE_YAML_FILE&#125;</span></span><br><span class="line">registry_push_port=<span class="string">"<span class="variable">$&#123;REGISTRY_PUSH_PORT&#125;</span>:5000"</span> yq <span class="built_in">eval</span> --inplace <span class="string">'.services.nginx.ports[2] = strenv(registry_push_port)'</span> <span class="variable">$&#123;COMPOSE_YAML_FILE&#125;</span></span><br></pre></td></tr></table></figure><h3 id="jq-遍历-json-数组-列表元素"><a href="#jq-遍历-json-数组-列表元素" class="headerlink" title="jq 遍历 json 数组/列表元素"></a>jq 遍历 json 数组/列表元素</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pmd_name <span class="keyword">in</span> $(kubectl <span class="variable">$&#123;KUBECONFIG_ARG&#125;</span> get cpm --no-headers | cut -d <span class="string">' '</span> -f1); <span class="keyword">do</span></span><br><span class="line">    CPMD_NAME=<span class="string">"<span class="variable">$&#123;pmd_name&#125;</span>"</span></span><br><span class="line">    JSON=<span class="string">"<span class="variable">$&#123;RCTL_TMP_PATH&#125;</span>/<span class="variable">$&#123;pmd_name&#125;</span>.json"</span></span><br><span class="line">    kubectl <span class="variable">$&#123;KUBECONFIG_ARG&#125;</span> get cpm <span class="variable">$&#123;pmd_name&#125;</span> -o jsonpath=<span class="string">'&#123;.spec&#125;'</span> &gt; <span class="variable">$&#123;JSON&#125;</span></span><br><span class="line">    ((moudles_num=$(jq <span class="string">'.modules|length'</span> <span class="variable">$&#123;JSON&#125;</span>)-1))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 <span class="variable">$&#123;moudles_num&#125;</span>); <span class="keyword">do</span></span><br><span class="line">        ((addons_num=$(jq <span class="string">".modules[<span class="variable">$&#123;i&#125;</span>].addons|length"</span> <span class="variable">$&#123;JSON&#125;</span>)-1))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> $(seq 0 <span class="variable">$&#123;addons_num&#125;</span>); <span class="keyword">do</span></span><br><span class="line">            addon_name=$(jq -r <span class="string">".modules[<span class="variable">$&#123;i&#125;</span>].addons[<span class="variable">$&#123;j&#125;</span>].name"</span> <span class="variable">$&#123;JSON&#125;</span>)</span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;CHART_NAME&#125;</span>"</span> = <span class="string">"<span class="variable">$&#123;addon_name&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                PATCH_DATA=$(jq -c <span class="string">".modules[<span class="variable">$&#123;i&#125;</span>].addons[<span class="variable">$&#123;j&#125;</span>].version = \"<span class="variable">$&#123;VERSION&#125;</span>\""</span> <span class="variable">$&#123;JSON&#125;</span>)</span><br><span class="line">                <span class="built_in">break</span> 3</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="判断两个版本号大小"><a href="#判断两个版本号大小" class="headerlink" title="判断两个版本号大小"></a>判断两个版本号大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">printf</span> <span class="string">"%s\\n%s\\n"</span> v1.21 <span class="variable">$&#123;kube_version%.*&#125;</span> | sort --check=quiet --version-sort; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$&#123;coredns_version&#125;</span>;<span class="keyword">else</span> <span class="built_in">echo</span> -n <span class="variable">$&#123;coredns_version/v/&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="查看-x509-证书"><a href="#查看-x509-证书" class="headerlink" title="查看 x509 证书"></a>查看 x509 证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -noout -text -<span class="keyword">in</span> ca.cert</span><br></pre></td></tr></table></figure><h3 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">stat</span> -c <span class="string">'%s'</span> file</span><br></pre></td></tr></table></figure><h3 id="获取本机-IP"><a href="#获取本机-IP" class="headerlink" title="获取本机 IP"></a>获取本机 IP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ip r get 1 | awk <span class="string">'NR==1 &#123;print $NF&#125;'</span></span><br><span class="line">$ ip r get 1 | sed <span class="string">"s/uid.*//g"</span> | awk <span class="string">'NR==1 &#123;print $NF&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>一些 shell 脚本中常用的函数</p><h3 id="tar-进度条"><a href="#tar-进度条" class="headerlink" title="tar 进度条"></a>tar 进度条</h3><p>避免 tar 解压文件的时候污染终端，建议使用进度条的方式展示解压过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">untar</span></span>() &#123;</span><br><span class="line">  file_size=$(<span class="built_in">stat</span> -c <span class="string">'%s'</span> <span class="variable">$1</span>)</span><br><span class="line">  block_size=$(expr <span class="variable">$file_size</span> / 51200); block_size=$(expr <span class="variable">$block_size</span> + 1)</span><br><span class="line">  tar_info=<span class="string">"Untar <span class="variable">$1</span> progress:"</span></span><br><span class="line">  tar --blocking-factor=<span class="variable">$block_size</span> --checkpoint=1 --checkpoint-action=ttyout=<span class="string">"<span class="variable">$&#123;tar_info&#125;</span> %u%  \r"</span> -xpf <span class="variable">$1</span> -C <span class="variable">$2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则匹配-IP"><a href="#正则匹配-IP" class="headerlink" title="正则匹配 IP"></a>正则匹配 IP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># regular match ip</span></span><br><span class="line"><span class="function"><span class="title">match_ip</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> INPUT_IPS=$*</span><br><span class="line">    <span class="built_in">local</span> IPS=<span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> ! <span class="built_in">echo</span> <span class="variable">$&#123;INPUT_IPS&#125;</span> | egrep --only-matching -E <span class="string">'([[:digit:]]&#123;1,3&#125;\.)&#123;3&#125;[[:digit:]]&#123;1,3&#125;-[[:digit:]]&#123;1,3&#125;'</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">        IPS=<span class="string">"<span class="variable">$(echo $&#123;INPUT_IPS&#125; | egrep --only-matching -E '([[:digit:]]&#123;1,3&#125;\.)</span>&#123;3&#125;[[:digit:]]&#123;1,3&#125;' | tr '\n' ' ')"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ip_prefix=<span class="string">"<span class="variable">$(echo $&#123;INPUT_IPS&#125; | egrep --only-matching -E '([[:digit:]]&#123;1,3&#125;\.)</span>&#123;3&#125;[[:digit:]]&#123;1,3&#125;-[[:digit:]]&#123;1,3&#125;' | cut -d '.' -f1-3)"</span></span><br><span class="line">        ip_suffix=<span class="string">"<span class="variable">$(echo $&#123;INPUT_IPS&#125; | egrep --only-matching -E '([[:digit:]]&#123;1,3&#125;\.)</span>&#123;3&#125;[[:digit:]]&#123;1,3&#125;-[[:digit:]]&#123;1,3&#125;' | cut -d '.' -f4 | tr '-' ' ')"</span></span><br><span class="line">        <span class="keyword">for</span> suffix <span class="keyword">in</span> $(seq <span class="variable">$&#123;ip_suffix&#125;</span>); <span class="keyword">do</span> IPS=<span class="string">"<span class="variable">$&#123;IPS&#125;</span> <span class="variable">$&#123;ip_prefix&#125;</span>.<span class="variable">$&#123;suffix&#125;</span>"</span>; <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;IPS&#125;</span> | egrep --only-matching -E <span class="string">'([[:digit:]]&#123;1,3&#125;\.)&#123;3&#125;[[:digit:]]&#123;1,3&#125;'</span> | tr <span class="string">'\n'</span> <span class="string">' '</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ssh-登录配置"><a href="#ssh-登录配置" class="headerlink" title="ssh 登录配置"></a>ssh 登录配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">  StrictHostKeyChecking no</span><br><span class="line">    UserKnownHostsFile=/dev/null</span><br><span class="line">    ForwardAgent yes</span><br><span class="line">    ServerAliveInterval 10</span><br><span class="line">    ServerAliveCountMax 10000</span><br><span class="line">    TCPKeepAlive no</span><br><span class="line">    ControlMaster auto</span><br><span class="line">    ControlPath ~/.ssh/session/%h-%p-%r</span><br><span class="line">    ControlPersist 12h</span><br><span class="line"></span><br><span class="line">Host nas</span><br><span class="line">    Hostname 172.20.0.10</span><br><span class="line">    Port 22</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/<span class="built_in">local</span>-node.pem</span><br><span class="line"></span><br><span class="line">Host 172.20.0.*</span><br><span class="line">    Port 22</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/<span class="built_in">local</span>-node.pem</span><br><span class="line"></span><br><span class="line">Host *github.com</span><br><span class="line">    Hostname github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/github_muzi.pem</span><br></pre></td></tr></table></figure><ul><li><code>StrictHostKeyChecking no</code>：略过 HostKey 检查，避免出现 <a href="https://superuser.com/questions/125324/how-can-i-avoid-sshs-host-verification-for-known-hosts" target="_blank" rel="noopener">How can I avoid SSH’s host verification for known hosts?</a></li></ul><h3 id="ssh-密码登录"><a href="#ssh-密码登录" class="headerlink" title="ssh 密码登录"></a>ssh 密码登录</h3><p>日常工作中常常需要 ssh 登录到机房的一些虚拟机上，又因为不同的机器密码不同，遂使用该脚本 ssh 登录到节点上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IP=<span class="variable">$&#123;1&#125;</span></span><br><span class="line">CMD=<span class="variable">$&#123;2&#125;</span></span><br><span class="line">USER=root</span><br><span class="line">ARGS=<span class="string">"-o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=12h -o ConnectionAttempts=100"</span></span><br><span class="line">PASSWORDS=<span class="string">"admin123456 test123456 centos1234"</span></span><br><span class="line">ssh-keygen -R <span class="variable">$&#123;1&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">PASS=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> pass <span class="keyword">in</span> <span class="variable">$&#123;PASSWORDS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> sshpass -p <span class="variable">$&#123;pass&#125;</span> ssh <span class="variable">$&#123;ARGS&#125;</span> <span class="variable">$&#123;USER&#125;</span>@<span class="variable">$&#123;IP&#125;</span> <span class="string">"hostname"</span>; <span class="keyword">then</span> PASS=<span class="variable">$&#123;pass&#125;</span>; <span class="built_in">break</span> ; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">sshpass -p <span class="variable">$&#123;PASS&#125;</span> ssh <span class="variable">$&#123;ARGS&#125;</span> <span class="variable">$&#123;USER&#125;</span>@<span class="variable">$&#123;IP&#125;</span> <span class="variable">$&#123;CMD&#125;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h3 id="脚本中统计函数耗时"><a href="#脚本中统计函数耗时" class="headerlink" title="脚本中统计函数耗时"></a>脚本中统计函数耗时</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">reset_global_timer</span></span>() &#123;</span><br><span class="line"><span class="built_in">export</span> SEC0=$(date --utc +%s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reset_function_timer</span></span>()&#123;</span><br><span class="line">    <span class="built_in">export</span> SEC1=$(date --utc +%s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">running_time()</span><br><span class="line">&#123;</span><br><span class="line">    SEC2=$(date --utc +%s); DIFFSEC=$((<span class="variable">$&#123;SEC2&#125;</span> - <span class="variable">$&#123;SEC1&#125;</span>)); <span class="built_in">printf</span> <span class="string">"\nSection Time: <span class="variable">$(date +%H:%M:%S -ud @$&#123;DIFFSEC&#125;)</span>\n"</span></span><br><span class="line">    SEC2=$(date --utc +%s); DIFFSEC=$((<span class="variable">$&#123;SEC2&#125;</span> - <span class="variable">$&#123;SEC0&#125;</span>)); <span class="built_in">printf</span> <span class="string">"Elapsed Time: <span class="variable">$(date +%H:%M:%S -ud @$&#123;DIFFSEC&#125;)</span>\n\n"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reset_global_timer</span><br><span class="line">reset_function_timer</span><br><span class="line">running_time</span><br></pre></td></tr></table></figure><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><ul><li>dpkg 获取系统已经安装的包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg-query -W -f=<span class="string">'$&#123;binary:Package&#125;=$&#123;Version&#125;\n'</span></span><br></pre></td></tr></table></figure><ul><li>获取 CPU 架构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARCHITECTURE=$(uname -m)</span><br><span class="line">host_architecture=$(dpkg --<span class="built_in">print</span>-architecture)</span><br></pre></td></tr></table></figure><h3 id="替换系统-OS-源"><a href="#替换系统-OS-源" class="headerlink" title="替换系统 OS 源"></a>替换系统 OS 源</h3><p> 使用华为云 yum 源</p><ul><li>CentOS 7</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装华为云 EPEL 源</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line">sed -i <span class="string">"s/#baseurl/baseurl/g"</span> /etc/yum.repos.d/epel.repo</span><br><span class="line">sed -i <span class="string">"s/metalink/#metalink/g"</span> /etc/yum.repos.d/epel.repo</span><br><span class="line">sed -i <span class="string">"s@https\?://download.fedoraproject.org/pub@https://mirrors.huaweicloud.com@g"</span> /etc/yum.repos.d/epel.repo</span><br></pre></td></tr></table></figure><ul><li>Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">'s/deb.debian.org/mirrors.huaweicloud.com/g'</span> /etc/apt/sources.list</span><br><span class="line">$ sed -i <span class="string">'s|security.debian.org/debian-security|mirrors.huaweicloud.com/debian-security|g'</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><ul><li>Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">'s/archive.ubuntu.com/mirrors.huaweicloud.com/g'</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><ul><li>Alpine</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/main/"</span> &gt; /etc/apk/repositories</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/community/"</span> &gt;&gt; /etc/apk/repositories</span><br></pre></td></tr></table></figure><h3 id="CA-证书信任"><a href="#CA-证书信任" class="headerlink" title="CA 证书信任"></a>CA 证书信任</h3><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ update-ca-trust force-enable</span><br><span class="line">$ cp domain.crt /etc/pki/ca-trust/<span class="built_in">source</span>/anchors/domain.crt</span><br><span class="line">$ update-ca-trust</span><br></pre></td></tr></table></figure><ul><li>Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp domain.crt /usr/share/ca-certificates/domain.crt</span><br><span class="line">$ <span class="built_in">echo</span> domain.crt &gt;&gt; /etc/ca-certificates.conf</span><br><span class="line">$ update-ca-certificates</span><br></pre></td></tr></table></figure><ul><li>Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp domain.crt /usr/<span class="built_in">local</span>/share/ca-certificates/domain.crt</span><br><span class="line">$ update-ca-certificates</span><br></pre></td></tr></table></figure><h3 id="Git-操作"><a href="#Git-操作" class="headerlink" title="Git 操作"></a>Git 操作</h3><h4 id="修改历史-commit-信息"><a href="#修改历史-commit-信息" class="headerlink" title="修改历史 commit 信息"></a>修改历史 commit 信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter <span class="string">'</span></span><br><span class="line"><span class="string">OLD_EMAIL="github-actions@github.com"</span></span><br><span class="line"><span class="string">CORRECT_NAME="github-actions"</span></span><br><span class="line"><span class="string">CORRECT_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">'</span> --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure><h4 id="获取当前-repo-的最新-git-tag"><a href="#获取当前-repo-的最新-git-tag" class="headerlink" title="获取当前 repo 的最新 git tag"></a>获取当前 repo 的最新 git tag</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git describe --tags --always</span><br></pre></td></tr></table></figure><h4 id="删除-remote-repo-中的-tag"><a href="#删除-remote-repo-中的-tag" class="headerlink" title="删除 remote repo 中的 tag"></a>删除 remote repo 中的 tag</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push --delete origin tag_name</span><br><span class="line"><span class="comment"># 删除所有</span></span><br><span class="line">$ git tag -l | xargs -L1 -I &#123;&#125; git push --delete origin &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="govc"><a href="#govc" class="headerlink" title="govc"></a>govc</h2><ul><li>批量还原快照</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">: <span class="variable">$&#123;SP_NAME:="init"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;NODES:="kube-control-01 kube-control-02 kube-control-03 kube-node-01"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> <span class="variable">$&#123;NODES&#125;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> govc snapshot.revert -vm <span class="variable">$&#123;node&#125;</span> <span class="variable">$&#123;SP_NAME&#125;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;node&#125;</span> snapshot revert successfully"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  govc vm.info <span class="variable">$&#123;node&#125;</span> | grep -q poweredOn || govc vm.power -on <span class="variable">$&#123;node&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/dylanaraps/pure-bash-bible" target="_blank" rel="noopener">pure-bash-bible</a></li><li><a href="http://cn.linux.vbird.org/linux_basic/0320bash_2.php#variable_other" target="_blank" rel="noopener">鸟哥 Linux 私房菜</a></li><li><a href="https://mozillazg.com/2018/01/jq-use-examples-cookbook.html" target="_blank" rel="noopener">jq 常用操作</a></li><li><a href="https://lyyao09.github.io/2019/08/02/tools/The-usage-of-yq-read-write/" target="_blank" rel="noopener">YAML处理工具yq之读写篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;偶然间看到了 &lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://blog.k8s.li/tags/Linux/"/>
    
      <category term="Bash" scheme="https://blog.k8s.li/tags/Bash/"/>
    
      <category term="shell" scheme="https://blog.k8s.li/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>镜像搬运工 skopeo</title>
    <link href="https://blog.k8s.li/skopeo.html"/>
    <id>https://blog.k8s.li/skopeo.html</id>
    <published>2021-07-10T16:00:00.000Z</published>
    <updated>2021-07-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搬砖工具"><a href="#搬砖工具" class="headerlink" title="搬砖工具"></a>搬砖工具</h2><p>作为公司内部 PaaS toB 产品的打包发布人员，容器镜像对我们打工人而言就像是工地上的砖头 🧱，而我的一部分工作就是将这些砖头在各个仓库之间搬来搬去，最终将这些砖头打包放在产品的安装包中，形成一个完整的 PaaS 产品安装包。</p><p>而选择一个好的搬砖工具能节省我们大量的人力和 CPU 算力，在日常开发工作中我们也常常会使用 docker push 和 docker pull 来推拉镜像，虽然本地 push &amp;&amp; pull 一个镜像并不是什么难事儿，但对于一些特定的场景如产品打包发布流水线中，还继续再使用 docker 这个笨重的工具来推拉镜像的话，是十分费时费力的，具体的原理可以参考我之前写的博客《<a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生🤔</a>》。</p><p>自从 Kubernetes 1.20 之后，K8s 社区也弃用了 Docker 作为容器运行时，docker-shim 相关的代码将在 kubelet 中不再维护，随后掀起了一波去 docker 的浪潮。那么现在有没有一种能够替代 docker-cli 的工具来传输镜像呢？今天给大家介绍一个能够完全替代 docker-cli 来搬运镜像的工具：skopeo。这玩意儿比 docker-cli 高到不知道哪里去了！</p><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>官方的安装方式参考安装文档即可 <a href="https://github.com/containers/skopeo/blob/main/install.md" target="_blank" rel="noopener">https://github.com/containers/skopeo/blob/main/install.md</a></p><p>由于我的 VPS 机器是 Ubuntu 1804 的 OS ，配置 apt 源并没成功，当场翻车。在官方的 Makefile 里只提供了在 nixos 下构建静态连接的方式，其他 Linux 发相版只能使用动态链接的方式来编译。但动态链接的方式通用性太差，比如在 ubuntu 18.04 上使用动态链接编译的 skopeo 只能在 ubuntu 上使用，无法在 centos 上使用。因为动态链接编译的二进制文件在不同的 OS 上所依赖的库文件是不一样的。所以还是另辟蹊径，亲自编译一个。</p><ul><li>Clone repo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ SKOPEO_VERSION=v1.3.0</span><br><span class="line">$ git <span class="built_in">clone</span> --branch <span class="variable">$&#123;SKOPEO_VERSION&#125;</span> https://github.com/containers/skopeo</span><br><span class="line">$ <span class="built_in">cd</span> skopeo</span><br></pre></td></tr></table></figure><ul><li>docker  build</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ BUILD_IMAGE=nixos/nix:2.3.12</span><br><span class="line">$ docker run --rm -t -v <span class="variable">$PWD</span>:/build <span class="variable">$&#123;BUILD_IMAGE&#125;</span> \</span><br><span class="line">sh -c <span class="string">"cd /build &amp;&amp; nix build -f nix &amp;&amp; cp ./result/bin/skopeo skopeo"</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>nixos/nix:2.3.12</code> 来构建静态链接的 skopeo 二进制文件需要完整构建 skopeo 所有的依赖，比如 glibc、systemd、golang 等，所以构建十分耗时。在一台 4c8G 的机器上构建用了将近半个小时，在 GitHub Action 的 runner 机器上构建需要将近<a href="https://github.com/k8sli/skopeo/actions/runs/1010266302" target="_blank" rel="noopener">一个小时</a>。</li></ul><p><img src="https://p.k8s.li/skopeo-github-action-build.png" alt="img"></p><ul><li>使用 GitHub Action 构建</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">build</span> <span class="string">static</span> <span class="string">binary</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">BUILD_IMAGE:</span> <span class="string">"nixos/nix:2.3.12"</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">static</span> <span class="string">binary</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">run</span> <span class="string">--rm</span> <span class="string">-t</span> <span class="string">-v</span> <span class="string">$PWD:/build</span> <span class="string">--name</span> <span class="string">builder</span> <span class="string">$&#123;BUILD_IMAGE&#125;</span> <span class="string">\</span></span><br><span class="line">          <span class="string">sh</span> <span class="string">-c</span> <span class="string">"cd /build &amp;&amp; nix build -f nix &amp;&amp; cp ./result/bin/skopeo skopeo-linux-amd64"</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">files:</span> <span class="string">skopeo-linux-amd64</span></span><br></pre></td></tr></table></figure><p>不过也可以使用 go build 的方式构建出静态链接的二进制文件，如下 <code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.14</span>-buster as skopeo-builder</span><br><span class="line"><span class="keyword">ARG</span> SKOPEO_VERSION=v1.<span class="number">2.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y -qq libdevmapper-dev libgpgme11-dev </span></span><br><span class="line"><span class="keyword">ENV</span> GOPATH=/</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /src/github.com/containers/skopeo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git <span class="built_in">clone</span> --branch <span class="variable">$&#123;SKOPEO_VERSION&#125;</span> https://github.com/containers/skopeo . \</span></span><br><span class="line"><span class="bash"> &amp;&amp; CGO_ENABLE=0 GO111MODULE=on go build -mod=vendor <span class="string">"-buildmode=pie"</span> -ldflags <span class="string">'-extldflags "-static"'</span> -gcflags <span class="string">""</span> \</span></span><br><span class="line"><span class="bash"> -tags <span class="string">"exclude_graphdriver_devicemapper exclude_graphdriver_btrfs containers_image_openpgp"</span> -o /usr/bin/skopeo ./cmd/skopeo</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.12</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=skopeo-builder /usr/bin/skopeo /usr/bin/skopeo</span></span><br><span class="line"><span class="comment"># FROM scratch</span></span><br><span class="line"><span class="comment"># COPY --from=skopeo-builder /usr/bin/skopeo /skopeo</span></span><br><span class="line"><span class="comment"># DOCKER_BUILDKIT=1 docker build -o type=local,dest=$PWD -f Dockerfile .</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/k8sli/skopeo/blob/main/.github/workflows/build-static-binary.yaml" target="_blank" rel="noopener">通过 GitHub Action 来编译</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">build</span> <span class="string">static</span> <span class="string">binary</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'v*'</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">BUILDER_IMAGE:</span> <span class="string">ghcr.io/k8sli/nixos-nix:v2.3.12</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-linux-amd64:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">ARCH:</span> <span class="string">"amd64"</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">QEMU</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-qemu-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Docker</span> <span class="string">Buildx</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-buildx-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">skopeo</span> <span class="string">binary</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">DIGEST=$(skopeo</span> <span class="string">--insecure-policy</span> <span class="string">--override-arch</span> <span class="string">$&#123;ARCH&#125;</span> <span class="string">inspect</span> <span class="string">docker://$&#123;BUILDER_IMAGE&#125;</span> <span class="string">|</span> <span class="string">jq</span> <span class="string">-r</span> <span class="string">'.Digest'</span><span class="string">)</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">run</span> <span class="string">--rm</span> <span class="string">-t</span> <span class="string">-v</span> <span class="string">$PWD:/build</span> <span class="string">$&#123;BUILDER_IMAGE&#125;@$&#123;DIGEST&#125;</span> <span class="string">\</span></span><br><span class="line">          <span class="string">sh</span> <span class="string">-c</span> <span class="string">"cd /build &amp;&amp; nix build -f nix &amp;&amp; cp ./result/bin/skopeo skopeo-linux-$<span class="template-variable">&#123;&#123; env.ARCH &#125;&#125;</span>"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binary</span> <span class="string">artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">skopeo-linux-$&#123;&#123;</span> <span class="string">env.ARCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">skopeo-binary-$&#123;&#123;</span> <span class="string">github.run_number</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">env.ARCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build-linux-arm64:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">ARCH:</span> <span class="string">"arm64"</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">QEMU</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-qemu-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Docker</span> <span class="string">Buildx</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-buildx-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">skopeo</span> <span class="string">binary</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">DIGEST=$(skopeo</span> <span class="string">--insecure-policy</span> <span class="string">--override-arch</span> <span class="string">$&#123;ARCH&#125;</span> <span class="string">inspect</span> <span class="string">docker://$&#123;BUILDER_IMAGE&#125;</span> <span class="string">|</span> <span class="string">jq</span> <span class="string">-r</span> <span class="string">'.Digest'</span><span class="string">)</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">run</span> <span class="string">--rm</span> <span class="string">-t</span> <span class="string">-v</span> <span class="string">$PWD:/build</span> <span class="string">$&#123;BUILDER_IMAGE&#125;@$&#123;DIGEST&#125;</span> <span class="string">\</span></span><br><span class="line">          <span class="string">sh</span> <span class="string">-c</span> <span class="string">"cd /build &amp;&amp; nix build -f nix &amp;&amp; cp ./result/bin/skopeo skopeo-linux-$<span class="template-variable">&#123;&#123; env.ARCH &#125;&#125;</span>"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binary</span> <span class="string">artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">skopeo-linux-$&#123;&#123;</span> <span class="string">env.ARCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">skopeo-binary-$&#123;&#123;</span> <span class="string">github.run_number</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">env.ARCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">[build-linux-amd64,build-linux-arm64]</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">artifact</span> <span class="string">from</span> <span class="string">build-linux-amd64</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/download-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">skopeo-binary-$&#123;&#123;</span> <span class="string">github.run_number</span> <span class="string">&#125;&#125;-amd64</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">artifact</span> <span class="string">from</span> <span class="string">build-linux-arm64</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/download-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">skopeo-binary-$&#123;&#123;</span> <span class="string">github.run_number</span> <span class="string">&#125;&#125;-arm64</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span> <span class="string">and</span> <span class="string">upload</span> <span class="string">binary</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">files:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">skopeo-linux-amd64</span></span><br><span class="line">            <span class="string">skopeo-linux-arm64</span></span><br></pre></td></tr></table></figure><h2 id="上手体验"><a href="#上手体验" class="headerlink" title="上手体验"></a>上手体验</h2><ul><li>copy：复制一个镜像从 A 到 B，这里的 A 和 B 可以为本地 docker 镜像或者 registry 上的镜像；</li><li>inspect：查看一个镜像的 manifest 或者 image config 详细信息；</li><li>delete：删除一个镜像 tag，可以是本地 docker 镜像或者 registry 上的镜像；</li><li>list-tags：列出一个 registry 上某个镜像的所有 tag；</li><li>login：登录到某个 registry，和 docker login 类似；</li><li>logout： 退出已经登录到某个 registry 的 auth 信息，和 docker logout 类似；</li><li>manifest-digest：几圈一个文件的 sha256sum 值；</li><li>standalone-sign、standalone-verify 这两个是和镜像加密相关的，使用的不是很多；</li><li>sync：同步一个镜像从 A 到 B，感觉和 copy 一样，但 sync 支持的参数更多，功能更强大；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">completion             generate the autocompletion script <span class="keyword">for</span> the specified shell</span><br><span class="line">copy                   Copy an IMAGE-NAME from one location to another</span><br><span class="line">delete                 Delete image IMAGE-NAME</span><br><span class="line"><span class="built_in">help</span>                   Help about any <span class="built_in">command</span></span><br><span class="line">inspect                Inspect image IMAGE-NAME</span><br><span class="line">list-tags              List tags <span class="keyword">in</span> the transport/repository specified by the REPOSITORY-NAME</span><br><span class="line">login                  Login to a container registry</span><br><span class="line"><span class="built_in">logout</span>                 Logout of a container registry</span><br><span class="line">manifest-digest        Compute a manifest digest of a file</span><br><span class="line">standalone-sign        Create a signature using <span class="built_in">local</span> files</span><br><span class="line">standalone-verify      Verify a signature using <span class="built_in">local</span> files</span><br><span class="line">sync                   Synchronize one or more images</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>command-timeout：命令超时时间</li><li>debug：开启 debug 模式，输出详细的日志</li><li>insecure-policy： 使用非安全的 policy，如果没有配置 policy 的话，需要加上该参数</li><li>override-arch：处理镜像时覆盖客户端 CPU 体系架构，如在 amd64 的机器上用 skopeo 处理 arm64 的镜像</li><li>override-os： 处理镜像时覆盖客户端 OS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Flags:</span><br><span class="line">      --<span class="built_in">command</span>-timeout duration   timeout <span class="keyword">for</span> the <span class="built_in">command</span> execution</span><br><span class="line">      --debug                      <span class="built_in">enable</span> debug output</span><br><span class="line">  -h, --<span class="built_in">help</span>                       <span class="built_in">help</span> <span class="keyword">for</span> skopeo</span><br><span class="line">      --insecure-policy            run the tool without any policy check</span><br><span class="line">      --override-arch ARCH         use ARCH instead of the architecture of the machine <span class="keyword">for</span> choosing images</span><br><span class="line">      --override-os OS             use OS instead of the running OS <span class="keyword">for</span> choosing images</span><br><span class="line">      --override-variant VARIANT   use VARIANT instead of the running architecture variant <span class="keyword">for</span> choosing images</span><br><span class="line">      --policy string              Path to a trust policy file</span><br><span class="line">      --registries.d DIR           use registry configuration files <span class="keyword">in</span> DIR (e.g. <span class="keyword">for</span> container signature storage)</span><br><span class="line">      --tmpdir string              directory used to store temporary files</span><br><span class="line">  -v, --version                    Version <span class="keyword">for</span> Skopeo</span><br></pre></td></tr></table></figure><p>一下是我在使用 skopeo 命令时候的一些参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="IMAGE-NAMES-镜像格式🤔️"><a href="#IMAGE-NAMES-镜像格式🤔️" class="headerlink" title="IMAGE NAMES 镜像格式🤔️"></a>IMAGE NAMES 镜像格式🤔️</h3><p>在使用 skopeo 之前，我们首先要知道在命令行中镜像的格式，下面是官方详细的文档格式。无论我们的 src 镜像还是 dest 镜像都要满足以下格式才可以。</p><blockquote><p>Most commands refer to container images, using a <em>transport<em><code>:</code></em>details</em> format. The following formats are supported:</p></blockquote><blockquote><p><strong>containers-storage:*</strong>docker-reference* An image located in a local containers/storage image store. Both the location and image store are specified in /etc/containers/storage.conf. (Backend for Podman, CRI-O, Buildah and friends)</p></blockquote><blockquote><p><strong>dir:*</strong>path* An existing local directory <em>path</em> storing the manifest, layer tarballs and signatures as individual files. This is a non-standardized format, primarily useful for debugging or noninvasive container inspection.</p></blockquote><blockquote><p><strong>docker://*</strong>docker-reference* An image in a registry implementing the “Docker Registry HTTP API V2”. By default, uses the authorization state in either <code>$XDG_RUNTIME_DIR/containers/auth.json</code>, which is set using <code>(skopeo login)</code>. If the authorization state is not found there, <code>$HOME/.docker/config.json</code> is checked, which is set using <code>(docker login)</code>.</p></blockquote><blockquote><p><strong>docker-archive:*</strong>path<strong>***[</strong>:<em>*<em>docker-reference</em>] An image is stored in the <code>docker save</code> formatted file. *docker-reference</em> is only used when creating such a file, and it must not contain a digest.</p></blockquote><blockquote><p><strong>docker-daemon:*</strong>docker-reference* An image <em>docker-reference</em> stored in the docker daemon internal storage. <em>docker-reference</em> must contain either a tag or a digest. Alternatively, when reading images, the format can be docker-daemon:algo:digest (an image ID).</p></blockquote><blockquote><p><strong>oci:*</strong>path<strong><em>:</em></strong>tag* An image <em>tag</em> in a directory compliant with “Open Container Image Layout Specification” at <em>path</em>.</p></blockquote><p>需要注意的是，这几种镜像的名字，对应着镜像存在的方式，不同存在的方式对镜像的 layer 处理的方式也不一样，比如 <code>docker://</code> 这种方式是存在 registry 上的，<code>docker-daemon:</code> 是存在本地 docker pull 下来的，再比如 <code>docker-archive</code> 是通过 docker save 出来的镜像。同一个镜像有这几种存在的方式就像水分子有气体、液体、固体一样。可以这样去理解，他们表述的都是同一个镜像，只不过是存在的方式不一样而已。</p><p>IMAGE NAMES（镜像格式）examplecontainers-storage:containers-storage:dir:dir:/PATHdocker://docker://k8s.gcr.io/kube-apiserver:v1.17.5docker-daemon:docker-daemon:alpine:latestdocker-archive:docker-archive:alpine.tar (docker save)oci:oci:alpine:latest</p><h3 id="skopeo-login"><a href="#skopeo-login" class="headerlink" title="skopeo login"></a>skopeo login</h3><p>在使用 skopeo 前如果 src 或 dest 镜像是在 registry 中的，如果非 public 的镜像需要相应的 auth 认证，可以使用 docker login 或者 skopeo login 的方式登录到 registry，生成如下格式的 registry 登录配置文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ jq "." ~/.docker/config.json                                                             </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"auths"</span>: &#123;</span><br><span class="line">    <span class="attr">"https://index.docker.io/v1/"</span>: &#123;</span><br><span class="line">      <span class="attr">"auth"</span>: <span class="string">"d2sdwdaqWMasss7bSVlJFpmQE43Sw=="</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"HttpHeaders"</span>: &#123;</span><br><span class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"Docker-Client/19.03.5 (linux)"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"experimental"</span>: <span class="string">"enabled"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skopeo-copy"><a href="#skopeo-copy" class="headerlink" title="skopeo copy"></a>skopeo copy</h3><blockquote><p>Copy an IMAGE-NAME from one location to another</p></blockquote><blockquote><p>将一个镜像从 A 复制到 B</p></blockquote><p>注意一下，这里的 location 就是指的上面提到的 <code>IMAGE NAMES</code> ，也就是说 <code>skopeo copy src dest</code> 可以有6*6=36 种组合！比如我可以将一个镜像从一个 registry 复制到另一个 registry：<code>skopeo copy docker://IMAGE_NAME docker://IMAGE_NAME</code>；或者将一个镜像从 registry 中复制到一个本地目录 <code>skopeo copy docker://k8s.gcr.io/pause:3.3 dir:pause:3.3</code></p><ul><li>从 regsitry A 到 registry B 复制镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo copy docker://k8s.gcr.io/kube-apiserver:v1.17.5 docker://hub.k8s.li/kube-apiserver:v1.17.5 --dest-authfile /root/.docker/config.json</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob 597de8ba0c30 <span class="keyword">done</span></span><br><span class="line">Copying blob e13a88fa950c <span class="keyword">done</span></span><br><span class="line">Copying config f640481f6d <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><blockquote><p>skopeo 输出的日志显示是 Copying blob 597de8ba0c30 done.可以看到 skopeo 是直接从 registry 中 copy 镜像 layer 的 blob 文件，传输是镜像在 registry 中存储的原始格式。</p></blockquote><ul><li>将镜像从 registry 复制到本地目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo copy docker://k8s.gcr.io/pause:3.3 dir:pause:3.3</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob aeab776c4837 <span class="keyword">done</span></span><br><span class="line">Copying config 0184c1613d <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">$ tree pause:3.3</span><br><span class="line">pause:3.3</span><br><span class="line">├── 0184c1613d92931126feb4c548e5da11015513b9e4c104e7305ee8b53b50a9da</span><br><span class="line">├── aeab776c48375e1a61810a0a5f59e982e34425ff505a01c2b57dcedc6799c17b</span><br><span class="line">├── manifest.json</span><br><span class="line">└── version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像的 manifest 文件</span></span><br><span class="line"></span><br><span class="line">$ jq <span class="string">'.'</span> pause:3.3/manifest.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"schemaVersion"</span>: 2,</span><br><span class="line">  <span class="string">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">  <span class="string">"config"</span>: &#123;</span><br><span class="line">    <span class="string">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 743,</span><br><span class="line">    <span class="string">"digest"</span>: <span class="string">"sha256:0184c1613d92931126feb4c548e5da11015513b9e4c104e7305ee8b53b50a9da"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"layers"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">      <span class="string">"size"</span>: 296517,</span><br><span class="line">      <span class="string">"digest"</span>: <span class="string">"sha256:aeab776c48375e1a61810a0a5f59e982e34425ff505a01c2b57dcedc6799c17b"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 manifest 文件查看镜像的 image config 文件</span></span><br><span class="line"></span><br><span class="line">$ jq <span class="string">'.'</span> pause:3.3/0184c1613d92931126feb4c548e5da11015513b9e4c104e7305ee8b53b50a9da</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">  <span class="string">"config"</span>: &#123;</span><br><span class="line">    <span class="string">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"Entrypoint"</span>: [</span><br><span class="line">      <span class="string">"/pause"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"WorkingDir"</span>: <span class="string">"/"</span>,</span><br><span class="line">    <span class="string">"OnBuild"</span>: null</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"created"</span>: <span class="string">"2020-05-02T09:46:29.068489061Z"</span>,</span><br><span class="line">  <span class="string">"history"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"created"</span>: <span class="string">"2020-05-02T09:46:29.068489061Z"</span>,</span><br><span class="line">      <span class="string">"created_by"</span>: <span class="string">"ARG ARCH"</span>,</span><br><span class="line">      <span class="string">"comment"</span>: <span class="string">"buildkit.dockerfile.v0"</span>,</span><br><span class="line">      <span class="string">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"created"</span>: <span class="string">"2020-05-02T09:46:29.068489061Z"</span>,</span><br><span class="line">      <span class="string">"created_by"</span>: <span class="string">"ADD bin/pause-amd64 /pause # buildkit"</span>,</span><br><span class="line">      <span class="string">"comment"</span>: <span class="string">"buildkit.dockerfile.v0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"created"</span>: <span class="string">"2020-05-02T09:46:29.068489061Z"</span>,</span><br><span class="line">      <span class="string">"created_by"</span>: <span class="string">"ENTRYPOINT [\"/pause\"]"</span>,</span><br><span class="line">      <span class="string">"comment"</span>: <span class="string">"buildkit.dockerfile.v0"</span>,</span><br><span class="line">      <span class="string">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">  <span class="string">"rootfs"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">    <span class="string">"diff_ids"</span>: [</span><br><span class="line">      <span class="string">"sha256:48a5e87615149095fad57d5db80f2cd9728b5562900eccb32842a45e8e8a61ae"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将镜像从 registry 复制到本地目录，以 OCI 格式保存</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo copy docker://k8s.gcr.io/pause:3.3 oci:images</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob aeab776c4837 <span class="keyword">done</span></span><br><span class="line">Copying config fa5df7713f <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">$ tree images</span><br><span class="line">images</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 3450ba84b8fbfd12cbf58710c0b5678f4311a888d4d5c42b053faefa1af4f8be</span><br><span class="line">│       ├── aeab776c48375e1a61810a0a5f59e982e34425ff505a01c2b57dcedc6799c17b</span><br><span class="line">│       └── fa5df7713fc78f96e377d236b353d33815073105bbacd381e50705e576ce4da5</span><br><span class="line">├── index.json</span><br><span class="line">└── oci-layout</span><br></pre></td></tr></table></figure><ul><li>替代 docker push 功能，将镜像从 docker 本地存储 push 到 registry 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo copy docker-daemon:alpine:3.12 docker://hub.k8s.li/library/alpine:3.12</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob 32f366d666a5 <span class="keyword">done</span></span><br><span class="line">Copying config 13621d1b12 <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><h3 id="skopeo-sync"><a href="#skopeo-sync" class="headerlink" title="skopeo sync"></a>skopeo sync</h3><p>Skopeo sync 的功能基本上等同于阿里云的 <a href="https://github.com/AliyunContainerService/image-syncer" target="_blank" rel="noopener">image-syncer</a> 工具，不过个人觉着 skopeo 要比 image-syncer 更强大，灵活性更强一些，汝还在使用 image-syncer 的话，强烈建议你使用 skopeo sync 替代它😂。</p><ul><li>skopeo sync 镜像同步文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">registry.example.com:</span></span><br><span class="line">    <span class="attr">images:</span></span><br><span class="line">        <span class="attr">busybox:</span> <span class="string">[]</span></span><br><span class="line">        <span class="attr">redis:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"1.0"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2.0"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"sha256:111111"</span></span><br><span class="line">    <span class="attr">images-by-tag-regex:</span></span><br><span class="line">        <span class="attr">nginx:</span> <span class="string">^1\.13\.[12]-alpine-perl$</span></span><br><span class="line">    <span class="attr">credentials:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">john</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">a</span> <span class="string">secret</span></span><br><span class="line">    <span class="attr">tls-verify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cert-dir:</span> <span class="string">/home/john/certs</span></span><br><span class="line"><span class="attr">quay.io:</span></span><br><span class="line">    <span class="attr">tls-verify:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">images:</span></span><br><span class="line">        <span class="attr">coreos/etcd:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">latest</span></span><br></pre></td></tr></table></figure><ul><li>Image-syncer 镜像同步配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># registry 登录配置</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"quay.io":</span> <span class="string">&#123;</span>        <span class="string">//</span> <span class="string">This</span> <span class="string">"registry"</span> <span class="string">or</span> <span class="string">"registry/namespace"</span> <span class="string">string</span> <span class="string">should</span> <span class="string">be</span> <span class="string">the</span> <span class="string">same</span> <span class="string">as</span> <span class="string">registry</span> <span class="string">or</span> <span class="string">registry/namespace</span> <span class="string">used</span> <span class="string">below</span> <span class="string">in</span> <span class="string">"images"</span> <span class="string">field.</span>  </span><br><span class="line">                            <span class="string">//</span> <span class="string">The</span> <span class="string">format</span> <span class="string">of</span> <span class="string">"registry/namespace"</span> <span class="string">will</span> <span class="string">be</span> <span class="string">more</span> <span class="string">prior</span> <span class="string">matched</span> <span class="string">than</span> <span class="string">"registry"</span></span><br><span class="line">        <span class="attr">"username":</span> <span class="string">"xxx"</span><span class="string">,</span>             </span><br><span class="line">        <span class="attr">"password":</span> <span class="string">"xxxxxxxxx"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"insecure":</span> <span class="literal">true</span>         <span class="string">//</span> <span class="string">"insecure"</span> <span class="string">field</span> <span class="string">needs</span> <span class="string">to</span> <span class="string">be</span> <span class="literal">true</span> <span class="string">if</span> <span class="string">this</span> <span class="string">registry</span> <span class="string">is</span> <span class="string">a</span> <span class="string">http</span> <span class="string">service,</span> <span class="string">default</span> <span class="string">value</span> <span class="string">is</span> <span class="literal">false</span><span class="string">,</span> <span class="string">version</span> <span class="string">of</span> <span class="string">image-syncer</span> <span class="string">need</span> <span class="string">to</span> <span class="string">be</span> <span class="string">later</span> <span class="string">than</span> <span class="string">v1.0.1</span> <span class="string">to</span> <span class="string">support</span> <span class="string">this</span> <span class="string">field</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"registry.cn-beijing.aliyuncs.com":</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">"username":</span> <span class="string">"xxx"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"password":</span> <span class="string">"xxxxxxxxx"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"registry.hub.docker.com":</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">"username":</span> <span class="string">"xxx"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"password":</span> <span class="string">"xxxxxxxxxx"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"quay.io/coreos":</span> <span class="string">&#123;</span>     <span class="string">//</span> <span class="string">"registry/namespace"</span> <span class="string">format</span> <span class="string">is</span> <span class="string">supported</span> <span class="string">after</span> <span class="string">v1.0.3</span> <span class="string">of</span> <span class="string">image-syncer</span>     </span><br><span class="line">        <span class="attr">"username":</span> <span class="string">"abc"</span><span class="string">,</span>              </span><br><span class="line">        <span class="attr">"password":</span> <span class="string">"xxxxxxxxx"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"insecure":</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="comment"># 镜像配置</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"quay.io/coreos/kube-rbac-proxy":</span> <span class="string">"quay.io/ruohe/kube-rbac-proxy"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"xxxx"</span><span class="string">:"xxxxx",</span></span><br><span class="line">    <span class="string">"xxx/xxx/xx:tag1,tag2,tag3"</span><span class="string">:"xxx/xxx/xx"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>将镜从 registry A 同步到 registry B</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo sync --src docker --dest docker k8s.gcr.io/pause:3.3 hub.k8s.li</span><br><span class="line">INFO[0000] Tag presence check                            imagename=<span class="string">"k8s.gcr.io/pause:3.3"</span> tagged=<span class="literal">true</span></span><br><span class="line">INFO[0000] Copying image tag 1/1                         from=<span class="string">"docker://k8s.gcr.io/pause:3.3"</span> to=<span class="string">"docker://hub.k8s.li/pause:3.3"</span></span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob aeab776c4837 <span class="keyword">done</span></span><br><span class="line">Copying config 0184c1613d <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">INFO[0000] Synced 1 images from 1 sources</span><br></pre></td></tr></table></figure><ul><li>将一个镜像从 registry 中同步到本地目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo sync --src docker --dest dir k8s.gcr.io/pause:3.3 images</span><br><span class="line">images</span><br><span class="line">└── pause:3.3</span><br><span class="line">    ├── 0184c1613d92931126feb4c548e5da11015513b9e4c104e7305ee8b53b50a9da</span><br><span class="line">    ├── aeab776c48375e1a61810a0a5f59e982e34425ff505a01c2b57dcedc6799c17b</span><br><span class="line">    ├── manifest.json</span><br><span class="line">    └── version</span><br></pre></td></tr></table></figure><ul><li>将镜像从本地目录同步到 registry 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo sync --src dir --dest docker images hub.k8s.li</span><br><span class="line">INFO[0000] Copying image ref 1/1                         from=<span class="string">"dir:images/pause:3.3"</span> to=<span class="string">"docker://hub.k8s.li/pause:3.3"</span></span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob aeab776c4837 [--------------------------------------] 0.0b / 0.0b</span><br><span class="line">Copying config 0184c1613d <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">INFO[0002] Synced 1 images from 1 sources</span><br></pre></td></tr></table></figure><h3 id="skopeo-inspect"><a href="#skopeo-inspect" class="headerlink" title="skopeo inspect"></a>skopeo inspect</h3><p>这个命令可以查看一个镜像的 image config 或者 manifests 文件，和 docker inspect 命令差不多。不加 –raw 参数默认是查看镜像的 image config 文件，加上 –raw 参数就是查看镜像的 manifest 文件。</p><ul><li>查看 docker 本地存储中的一个镜像的 image config 文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo inspect docker-daemon:alpine:latest</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Name"</span>: <span class="string">"docker.io/library/alpine"</span>,</span><br><span class="line">    <span class="attr">"Digest"</span>: <span class="string">"sha256:ab84514e85b179ff569fd0042969b04f68812f23e187a927cb84664b417e0d3e"</span>,</span><br><span class="line">    <span class="attr">"RepoTags"</span>: [],</span><br><span class="line">    <span class="attr">"Created"</span>: <span class="string">"2021-04-14T19:19:49.594730611Z"</span>,</span><br><span class="line">    <span class="attr">"DockerVersion"</span>: <span class="string">"19.03.12"</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">    <span class="attr">"Os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">    <span class="attr">"Layers"</span>: [</span><br><span class="line">        <span class="string">"sha256:32f366d666a541852cad754ee1cdb53a736110b550f0c2d5a46bc5ba519896b6"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">        <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看 registry 中一个镜像的 manifests 文件，可以通过这种方式来判断镜像是否存在</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">skopeo inspect docker://alpine:latest --raw | jq '.'</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"manifests"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:1775bebec23e1f3ce486989bfc9ff3c4e951690df84aa9f926497d82f2ffca9d"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:1f66b8f3041ef8575260056dedd437ed94e7bfeea142ee39ff0d795f94ff2287"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"arm"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="attr">"variant"</span>: <span class="string">"v6"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:8d99168167baa6a6a0d7851b9684625df9c1455116a9601835c2127df2aaa2f5"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"arm"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="attr">"variant"</span>: <span class="string">"v7"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:53b74ddfc6225e3c8cc84d7985d0f34666e4e8b0b6892a9b2ad1f7516bc21b54"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"arm64"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="attr">"variant"</span>: <span class="string">"v8"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:52a197664c8ed0b4be6d3b8372f1d21f3204822ba432583644c9ce07f7d6448f"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"386"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:b421672fe4e74a3c7eff2775736e854d69e8d38b2c337063f8699de9c408ddd3"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"ppc64le"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:8a22269106a31264874cc3a719c1e280e76d42dff1fa57bd9c7fe68dab574023"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"s390x"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.list.v2+json"</span>,</span><br><span class="line">  <span class="attr">"schemaVersion"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skopeo-delete"><a href="#skopeo-delete" class="headerlink" title="skopeo delete"></a>skopeo delete</h3><p>使用这个命令可以删除镜像 tag。需要注意的是，通过  registry API 来删除镜像的 tag 仅仅是删除了 tag 对 manifests 文件的引用，并非真正将镜像删除掉。如果想要删除镜像的 layer 还是需要通过 registry GC 的方式，可参考之前写过的一篇博客《<a href="https://blog.k8s.li/registry-gc.html">docker registry GC 原理分析</a>》</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo delete docker:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;pause:3.2 --debug</span><br><span class="line">DEBU[0000] Returning credentials from &#x2F;home&#x2F;release&#x2F;.docker&#x2F;config.json</span><br><span class="line">DEBU[0000] Using registries.d directory &#x2F;etc&#x2F;containers&#x2F;registries.d for sigstore configuration</span><br><span class="line">DEBU[0000]  No signature storage configuration found for hub.k8s.li&#x2F;library&#x2F;pause:3.2</span><br><span class="line">DEBU[0000] Looking for TLS certificates and private keys in &#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;hub.k8s.li&#x2F;library</span><br><span class="line">DEBU[0000] Loading registries configuration &quot;&#x2F;etc&#x2F;containers&#x2F;registries.conf&quot;</span><br><span class="line">DEBU[0000] GET https:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;v2&#x2F;</span><br><span class="line">DEBU[0000] Ping https:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;v2&#x2F; status 401</span><br><span class="line">DEBU[0000] GET https:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;v2&#x2F;library&#x2F;pause&#x2F;manifests&#x2F;3.2</span><br><span class="line">DEBU[0000] DELETE https:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;v2&#x2F;library&#x2F;pause&#x2F;manifests&#x2F;sha256:4a1c4b21597c1b4415bdbecb28a3296c6b5e23ca4f9feeb599860a1dac6a0108</span><br></pre></td></tr></table></figure><h3 id="skopeo-list-tags"><a href="#skopeo-list-tags" class="headerlink" title="skopeo list-tags"></a>skopeo list-tags</h3><p>这个命令可用于列出 registry 上的某个镜像的所有 tag ，使用标准的 registry API 来获取镜像 tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo list-tags docker:&#x2F;&#x2F;k8s.gcr.io&#x2F;pause</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Repository&quot;: &quot;k8s.gcr.io&#x2F;pause&quot;,</span><br><span class="line">    &quot;Tags&quot;: [</span><br><span class="line">        &quot;0.8.0&quot;,</span><br><span class="line">        &quot;1.0&quot;,</span><br><span class="line">        &quot;2.0&quot;,</span><br><span class="line">        &quot;3.0&quot;,</span><br><span class="line">        &quot;3.1&quot;,</span><br><span class="line">        &quot;3.2&quot;,</span><br><span class="line">        &quot;3.3&quot;,</span><br><span class="line">        &quot;3.4.1&quot;,</span><br><span class="line">        &quot;3.5&quot;,</span><br><span class="line">        &quot;go&quot;,</span><br><span class="line">        &quot;latest&quot;,</span><br><span class="line">        &quot;test&quot;,</span><br><span class="line">        &quot;test2&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>一下给出几个 skopeo 工具的最佳实践 😊</p><h3 id="镜像同步"><a href="#镜像同步" class="headerlink" title="镜像同步"></a>镜像同步</h3><p>假如给你一个镜像列表，如 <a href="https://github.com/kubesphere/ks-installer/blob/master/scripts/images-list.txt。如何将它快速地从一个" target="_blank" rel="noopener">https://github.com/kubesphere/ks-installer/blob/master/scripts/images-list.txt。如何将它快速地从一个</a> registry 同步到另一个 registry 中呢？还是 skopeo copy 走起！</p><ul><li>images-list.txt</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">##k8s-images</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.20.6</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.20.6</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.20.6</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.20.6</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.19.8</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.19.8</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.19.8</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.19.8</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.19.9</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.19.9</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.19.9</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.19.9</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.18.8</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.18.8</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.18.8</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.18.8</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.17.9</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.17.9</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.17.9</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.17.9</span><br><span class="line">kubesphere&#x2F;pause:3.1</span><br><span class="line">kubesphere&#x2F;pause:3.2</span><br><span class="line">kubesphere&#x2F;etcd:v3.4.13</span><br><span class="line">calico&#x2F;cni:v3.16.3</span><br><span class="line">calico&#x2F;kube-controllers:v3.16.3</span><br><span class="line">calico&#x2F;node:v3.16.3</span><br><span class="line">calico&#x2F;pod2daemon-flexvol:v3.16.3</span><br><span class="line">calico&#x2F;typha:v3.16.3</span><br><span class="line">kubesphere&#x2F;flannel:v0.12.0</span><br><span class="line">coredns&#x2F;coredns:1.6.9</span><br><span class="line">kubesphere&#x2F;k8s-dns-node-cache:1.15.12</span><br><span class="line">openebs&#x2F;provisioner-localpv:2.10.1</span><br><span class="line">openebs&#x2F;linux-utils:2.10.0</span><br><span class="line">kubesphere&#x2F;nfs-client-provisioner:v3.1.0-k8s1.11</span><br><span class="line">##csi-images</span><br><span class="line">csiplugin&#x2F;csi-neonsan:v1.2.0</span><br><span class="line">csiplugin&#x2F;csi-neonsan-ubuntu:v1.2.0</span><br><span class="line">csiplugin&#x2F;csi-neonsan-centos:v1.2.0</span><br><span class="line">csiplugin&#x2F;csi-provisioner:v1.5.0</span><br><span class="line">csiplugin&#x2F;csi-attacher:v2.1.1</span><br><span class="line">csiplugin&#x2F;csi-resizer:v0.4.0</span><br><span class="line">csiplugin&#x2F;csi-snapshotter:v2.0.1</span><br><span class="line">csiplugin&#x2F;csi-node-driver-registrar:v1.2.0</span><br><span class="line">csiplugin&#x2F;csi-qingcloud:v1.2.0</span><br><span class="line">##kubesphere-images</span><br><span class="line">kubesphere&#x2F;ks-apiserver:v3.1.1</span><br><span class="line">kubesphere&#x2F;ks-console:v3.1.1</span><br><span class="line">kubesphere&#x2F;ks-controller-manager:v3.1.1</span><br><span class="line">kubesphere&#x2F;ks-installer:v3.1.1</span><br><span class="line">kubesphere&#x2F;kubectl:v1.20.0</span><br><span class="line">kubesphere&#x2F;kubectl:v1.19.0</span><br><span class="line">redis:5.0.12-alpine</span><br><span class="line">alpine:3.14</span><br><span class="line">haproxy:2.0.22-alpine</span><br><span class="line">nginx:1.14-alpine</span><br><span class="line">minio&#x2F;minio:RELEASE.2019-08-07T01-59-21Z</span><br><span class="line">minio&#x2F;mc:RELEASE.2019-08-07T23-14-43Z</span><br><span class="line">mirrorgooglecontainers&#x2F;defaultbackend-amd64:1.4</span><br><span class="line">kubesphere&#x2F;nginx-ingress-controller:v0.35.0</span><br><span class="line">osixia&#x2F;openldap:1.3.0</span><br><span class="line">csiplugin&#x2F;snapshot-controller:v3.0.3</span><br><span class="line">kubesphere&#x2F;kubefed:v0.7.0</span><br><span class="line">kubesphere&#x2F;tower:v0.2.0</span><br><span class="line">kubesphere&#x2F;prometheus-config-reloader:v0.42.1</span><br><span class="line">kubesphere&#x2F;prometheus-operator:v0.42.1</span><br><span class="line">prom&#x2F;alertmanager:v0.21.0</span><br><span class="line">prom&#x2F;prometheus:v2.26.0</span><br><span class="line">prom&#x2F;node-exporter:v0.18.1</span><br><span class="line">kubesphere&#x2F;ks-alerting-migration:v3.1.0</span><br><span class="line">jimmidyson&#x2F;configmap-reload:v0.3.0</span><br><span class="line">kubesphere&#x2F;notification-manager-operator:v1.0.0</span><br><span class="line">kubesphere&#x2F;notification-manager:v1.0.0</span><br><span class="line">kubesphere&#x2F;metrics-server:v0.4.2</span><br><span class="line">kubesphere&#x2F;kube-rbac-proxy:v0.8.0</span><br><span class="line">kubesphere&#x2F;kube-state-metrics:v1.9.7</span><br><span class="line">openebs&#x2F;provisioner-localpv:2.3.0</span><br><span class="line">thanosio&#x2F;thanos:v0.18.0</span><br><span class="line">grafana&#x2F;grafana:7.4.3</span><br><span class="line">##kubesphere-logging-images</span><br><span class="line">kubesphere&#x2F;elasticsearch-oss:6.7.0-1</span><br><span class="line">kubesphere&#x2F;elasticsearch-curator:v5.7.6</span><br><span class="line">kubesphere&#x2F;fluentbit-operator:v0.5.0</span><br><span class="line">kubesphere&#x2F;fluentbit-operator:migrator</span><br><span class="line">kubesphere&#x2F;fluent-bit:v1.6.9</span><br><span class="line">elastic&#x2F;filebeat:6.7.0</span><br><span class="line">kubesphere&#x2F;kube-auditing-operator:v0.1.2</span><br><span class="line">kubesphere&#x2F;kube-auditing-webhook:v0.1.2</span><br><span class="line">kubesphere&#x2F;kube-events-exporter:v0.1.0</span><br><span class="line">kubesphere&#x2F;kube-events-operator:v0.1.0</span><br><span class="line">kubesphere&#x2F;kube-events-ruler:v0.2.0</span><br><span class="line">kubesphere&#x2F;log-sidecar-injector:1.1</span><br><span class="line">docker:19.03</span><br><span class="line">##istio-images</span><br><span class="line">istio&#x2F;pilot:1.6.10</span><br><span class="line">istio&#x2F;proxyv2:1.6.10</span><br><span class="line">jaegertracing&#x2F;jaeger-agent:1.17</span><br><span class="line">jaegertracing&#x2F;jaeger-collector:1.17</span><br><span class="line">jaegertracing&#x2F;jaeger-es-index-cleaner:1.17</span><br><span class="line">jaegertracing&#x2F;jaeger-operator:1.17.1</span><br><span class="line">jaegertracing&#x2F;jaeger-query:1.17</span><br><span class="line">kubesphere&#x2F;kiali:v1.26.1</span><br><span class="line">kubesphere&#x2F;kiali-operator:v1.26.1</span><br><span class="line">##kubesphere-devops-images</span><br><span class="line">kubesphere&#x2F;ks-jenkins:2.249.1</span><br><span class="line">jenkins&#x2F;jnlp-slave:3.27-1</span><br><span class="line">kubesphere&#x2F;s2ioperator:v3.1.0</span><br><span class="line">kubesphere&#x2F;s2irun:v2.1.1</span><br><span class="line">kubesphere&#x2F;builder-base:v3.1.0</span><br><span class="line">kubesphere&#x2F;builder-nodejs:v3.1.0</span><br><span class="line">kubesphere&#x2F;builder-maven:v3.1.0</span><br><span class="line">kubesphere&#x2F;builder-go:v3.1.0</span><br><span class="line">kubesphere&#x2F;s2i-binary:v2.1.0</span><br><span class="line">kubesphere&#x2F;tomcat85-java11-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;tomcat85-java11-runtime:v2.1.0</span><br><span class="line">kubesphere&#x2F;tomcat85-java8-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;tomcat85-java8-runtime:v2.1.0</span><br><span class="line">kubesphere&#x2F;java-11-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;java-8-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;java-8-runtime:v2.1.0</span><br><span class="line">kubesphere&#x2F;java-11-runtime:v2.1.0</span><br><span class="line">kubesphere&#x2F;nodejs-8-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;nodejs-6-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;nodejs-4-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;python-36-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;python-35-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;python-34-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;python-27-centos7:v2.1.0</span><br><span class="line">##openpitrix-images</span><br><span class="line">kubespheredev&#x2F;openpitrix-jobs:v3.1.1</span><br><span class="line">##weave-scope-images</span><br><span class="line">weaveworks&#x2F;scope:1.13.0</span><br><span class="line">##kubeedge-images</span><br><span class="line">kubeedge&#x2F;cloudcore:v1.6.2</span><br><span class="line">kubesphere&#x2F;edge-watcher:v0.1.0</span><br><span class="line">kubesphere&#x2F;kube-rbac-proxy:v0.5.0</span><br><span class="line">kubesphere&#x2F;edge-watcher-agent:v0.1.0</span><br><span class="line">##example-images-images</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-productpage-v1:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-reviews-v1:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-reviews-v2:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-reviews-v3:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-details-v1:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-ratings-v1:1.16.3</span><br><span class="line">busybox:1.31.1</span><br><span class="line">joosthofman&#x2F;wget:1.0</span><br><span class="line">kubesphere&#x2F;netshoot:v1.0</span><br><span class="line">nginxdemos&#x2F;hello:plain-text</span><br><span class="line">wordpress:4.8-apache</span><br><span class="line">mirrorgooglecontainers&#x2F;hpa-example:latest</span><br><span class="line">java:openjdk-8-jre-alpine</span><br><span class="line">fluent&#x2F;fluentd:v1.4.2-2.0</span><br><span class="line">perl:latest</span><br></pre></td></tr></table></figure><ul><li>sync.sh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">GREEN_COL=<span class="string">"\\033[32;1m"</span></span><br><span class="line">RED_COL=<span class="string">"\\033[1;31m"</span></span><br><span class="line">NORMAL_COL=<span class="string">"\\033[0;39m"</span></span><br><span class="line">SOURCE_REGISTRY=<span class="variable">$1</span></span><br><span class="line">TARGET_REGISTRY=<span class="variable">$2</span></span><br><span class="line">: <span class="variable">$&#123;IMAGES_LIST_FILE:="images-list.txt"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;TARGET_REGISTRY:="hub.k8s.li"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;SOURCE_REGISTRY:="docker.io"&#125;</span></span><br><span class="line"></span><br><span class="line">BLOBS_PATH=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">REPO_PATH=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">CURRENT_NUM=0</span><br><span class="line">ALL_IMAGES=<span class="string">"<span class="variable">$(sed -n '/#/d;s/:/:/p' $&#123;IMAGES_LIST_FILE&#125; | sort -u)</span>"</span></span><br><span class="line">TOTAL_NUMS=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;ALL_IMAGES&#125;</span>"</span> | wc -l)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">skopeo_copy</span></span>() &#123;</span><br><span class="line"> <span class="keyword">if</span> skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> \</span><br><span class="line"> --override-arch amd64 --override-os linux -q docker://<span class="variable">$1</span> docker://<span class="variable">$2</span>; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$GREEN_COL</span> Progress: <span class="variable">$&#123;CURRENT_NUM&#125;</span>/<span class="variable">$&#123;TOTAL_NUMS&#125;</span> sync <span class="variable">$1</span> to <span class="variable">$2</span> successful <span class="variable">$NORMAL_COL</span>"</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$RED_COL</span> Progress: <span class="variable">$&#123;CURRENT_NUM&#125;</span>/<span class="variable">$&#123;TOTAL_NUMS&#125;</span> sync <span class="variable">$1</span> to <span class="variable">$2</span> failed <span class="variable">$NORMAL_COL</span>"</span></span><br><span class="line"> <span class="built_in">exit</span> 2</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> <span class="variable">$&#123;ALL_IMAGES&#125;</span>; <span class="keyword">do</span></span><br><span class="line"> <span class="built_in">let</span> CURRENT_NUM=<span class="variable">$&#123;CURRENT_NUM&#125;</span>+1</span><br><span class="line"> skopeo_copy <span class="variable">$&#123;SOURCE_REGISTRY&#125;</span>/<span class="variable">$&#123;image&#125;</span> <span class="variable">$&#123;TARGET_REGISTRY&#125;</span>/<span class="variable">$&#123;image&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><code>bash sync.sh docker.io ``localhost:5000</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ bash sync.sh docker.io localhost:5000</span><br><span class="line">Progress: 1/143 sync docker.io/alpine:3.14 to localhost:5000/alpine:3.14 successful</span><br><span class="line">Progress: 2/143 sync docker.io/busybox:1.31.1 to localhost:5000/busybox:1.31.1 successful</span><br><span class="line">Progress: 3/143 sync docker.io/calico/cni:v3.16.3 to localhost:5000/calico/cni:v3.16.3 successful</span><br><span class="line">Progress: 4/143 sync docker.io/calico/kube-controllers:v3.16.3 to localhost:5000/calico/kube-controllers:v3.16.3 successful</span><br><span class="line">Progress: 141/143 sync docker.io/thanosio/thanos:v0.18.0 to localhost:5000/thanosio/thanos:v0.18.0 successful</span><br><span class="line">Progress: 142/143 sync docker.io/weaveworks/scope:1.13.0 to localhost:5000/weaveworks/scope:1.13.0 successful</span><br><span class="line">Progress: 143/143 sync docker.io/wordpress:4.8-apache to localhost:5000/wordpress:4.8-apache successful</span><br></pre></td></tr></table></figure><h3 id="使用-registry-存储特性"><a href="#使用-registry-存储特性" class="headerlink" title="使用 registry 存储特性"></a>使用 registry 存储特性</h3><p>将镜像从 registry 中同步到本地目录，使用 registry 存储的特性，将本地目录中的镜像转换成 registry 存储的格式。这样子的好处就是可以去除一些 skopeo dir 中重复的 layers，减少镜像的总大小。具体的原理可以参考我之前写过的 《<a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a>》</p><ul><li>sync.sh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">GREEN_COL=<span class="string">"\\033[32;1m"</span></span><br><span class="line">RED_COL=<span class="string">"\\033[1;31m"</span></span><br><span class="line">NORMAL_COL=<span class="string">"\\033[0;39m"</span></span><br><span class="line">SOURCE_REGISTRY=<span class="variable">$1</span></span><br><span class="line">TARGET_REGISTRY=<span class="variable">$2</span></span><br><span class="line">IMAGES_DIR=<span class="variable">$2</span></span><br><span class="line">: <span class="variable">$&#123;IMAGES_DIR:="images"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;IMAGES_LIST_FILE:="images-list.txt"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;TARGET_REGISTRY:="hub.k8s.li"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;SOURCE_REGISTRY:="docker.io"&#125;</span></span><br><span class="line">BLOBS_PATH=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">REPO_PATH=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line">CURRENT_NUM=0</span><br><span class="line">ALL_IMAGES=<span class="string">"<span class="variable">$(sed -n '/#/d;s/:/:/p' $&#123;IMAGES_LIST_FILE&#125; | sort -u)</span>"</span></span><br><span class="line">TOTAL_NUMS=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;ALL_IMAGES&#125;</span>"</span> | wc -l)</span><br><span class="line"><span class="function"><span class="title">skopeo_sync</span></span>() &#123;</span><br><span class="line"> <span class="keyword">if</span> skopeo sync --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> \</span><br><span class="line"> --override-arch amd64 --override-os linux --src docker --dest dir <span class="variable">$1</span> <span class="variable">$2</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$GREEN_COL</span> Progress: <span class="variable">$&#123;CURRENT_NUM&#125;</span>/<span class="variable">$&#123;TOTAL_NUMS&#125;</span> sync <span class="variable">$1</span> to <span class="variable">$2</span> successful <span class="variable">$NORMAL_COL</span>"</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$RED_COL</span> Progress: <span class="variable">$&#123;CURRENT_NUM&#125;</span>/<span class="variable">$&#123;TOTAL_NUMS&#125;</span> sync <span class="variable">$1</span> to <span class="variable">$2</span> failed <span class="variable">$NORMAL_COL</span>"</span></span><br><span class="line"> <span class="built_in">exit</span> 2</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">convert_images</span></span>() &#123;</span><br><span class="line"> rm -rf <span class="variable">$&#123;IMAGES_DIR&#125;</span>; mkdir -p <span class="variable">$&#123;IMAGES_DIR&#125;</span></span><br><span class="line"> <span class="keyword">for</span> image <span class="keyword">in</span> <span class="variable">$&#123;ALL_IMAGES&#125;</span>; <span class="keyword">do</span></span><br><span class="line"> <span class="built_in">let</span> CURRENT_NUM=<span class="variable">$&#123;CURRENT_NUM&#125;</span>+1</span><br><span class="line"> image_name=<span class="variable">$&#123;image%%:*&#125;</span></span><br><span class="line"> image_tag=<span class="variable">$&#123;image##*:&#125;</span></span><br><span class="line"> image_repo=<span class="variable">$&#123;image%%/*&#125;</span></span><br><span class="line"> skopeo_sync <span class="variable">$&#123;SOURCE_REGISTRY&#125;</span>/<span class="variable">$&#123;image&#125;</span> <span class="variable">$&#123;IMAGES_DIR&#125;</span>/<span class="variable">$&#123;image_repo&#125;</span></span><br><span class="line"> manifest=<span class="string">"<span class="variable">$&#123;IMAGES_DIR&#125;</span>/<span class="variable">$&#123;image&#125;</span>/manifest.json"</span></span><br><span class="line"> manifest_sha256=$(sha256sum <span class="variable">$&#123;manifest&#125;</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"> mkdir -p <span class="variable">$&#123;BLOBS_PATH&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line"> ln -f <span class="variable">$&#123;manifest&#125;</span> <span class="variable">$&#123;BLOBS_PATH&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br><span class="line"> <span class="comment"># make image repositories dir</span></span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/&#123;_uploads,_layers,_manifests&#125;</span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line"> <span class="comment"># create image tag manifest link file</span></span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line"> <span class="comment"># link image layers file to registry blobs dir</span></span><br><span class="line"> <span class="keyword">for</span> layer <span class="keyword">in</span> $(sed <span class="string">'/v1Compatibility/d'</span> <span class="variable">$&#123;manifest&#125;</span> | grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span>); <span class="keyword">do</span></span><br><span class="line"> mkdir -p <span class="variable">$&#123;BLOBS_PATH&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;layer&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span>/link</span><br><span class="line"> ln -f <span class="variable">$&#123;IMAGES_DIR&#125;</span>/<span class="variable">$&#123;image&#125;</span>/<span class="variable">$&#123;layer&#125;</span> <span class="variable">$&#123;BLOBS_PATH&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convert_images</span><br></pre></td></tr></table></figure><ul><li>install.sh</li></ul><p>使用这个脚本将 registry 存储中的镜像转换成 skopeo dir 的方式，然后再将镜像同步到 registry 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">REGISTRY_DOMAIN=<span class="string">"harbor.k8s.li"</span></span><br><span class="line">REGISTRY_PATH=<span class="string">"/var/lib/registry"</span></span><br><span class="line"><span class="comment"># 切换到 registry 存储主目录下</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;REGISTRY_PATH&#125;</span></span><br><span class="line"><span class="function"><span class="title">gen_skopeo_dir</span></span>() &#123;</span><br><span class="line">   <span class="comment"># 定义 registry 存储的 blob 目录 和 repositories 目录，方便后面使用</span></span><br><span class="line">    BLOB_DIR=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">    REPO_DIR=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line">    <span class="comment"># 定义生成 skopeo 目录</span></span><br><span class="line">    SKOPEO_DIR=<span class="string">"docker/skopeo"</span></span><br><span class="line">    <span class="comment"># 通过 find 出 current 文件夹可以得到所有带 tag 的镜像，因为一个 tag 对应一个 current 目录</span></span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> $(find <span class="variable">$&#123;REPO_DIR&#125;</span> -<span class="built_in">type</span> d -name <span class="string">"current"</span>); <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 根据镜像的 tag 提取镜像的名字</span></span><br><span class="line">        name=$(<span class="built_in">echo</span> <span class="variable">$&#123;image&#125;</span> | awk -F <span class="string">'/'</span> <span class="string">'&#123;print $5"/"$6":"$9&#125;'</span>)</span><br><span class="line">        link=$(cat <span class="variable">$&#123;image&#125;</span>/link | sed <span class="string">'s/sha256://'</span>)</span><br><span class="line">        mfs=<span class="string">"<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;link:0:2&#125;</span>/<span class="variable">$&#123;link&#125;</span>/data"</span></span><br><span class="line">        <span class="comment"># 创建镜像的硬链接需要的目录</span></span><br><span class="line">        mkdir -p <span class="string">"<span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>"</span></span><br><span class="line">        <span class="comment"># 硬链接镜像的 manifests 文件到目录的 manifest 文件</span></span><br><span class="line">        ln <span class="variable">$&#123;mfs&#125;</span> <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>/manifest.json</span><br><span class="line">        <span class="comment"># 使用正则匹配出所有的 sha256 值，然后排序去重</span></span><br><span class="line">        layers=$(grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> <span class="variable">$&#123;mfs&#125;</span> | sort -n | uniq)</span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> <span class="variable">$&#123;layers&#125;</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="comment"># 硬链接 registry 存储目录里的镜像 layer 和 images config 到镜像的 dir 目录</span></span><br><span class="line">            ln <span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">sync_image</span></span>() &#123;</span><br><span class="line">    <span class="comment"># 使用 skopeo sync 将 dir 格式的镜像同步到 harbor</span></span><br><span class="line">    <span class="keyword">for</span> project <span class="keyword">in</span> $(ls <span class="variable">$&#123;SKOPEO_DIR&#125;</span>); <span class="keyword">do</span></span><br><span class="line">        skopeo sync --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> \</span><br><span class="line">        --src dir --dest docker <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;project&#125;</span> <span class="variable">$&#123;REGISTRY_DOMAIN&#125;</span>/<span class="variable">$&#123;project&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">gen_skopeo_dir</span><br></pre></td></tr></table></figure><h3 id="从-registry-存储中-select-出镜像"><a href="#从-registry-存储中-select-出镜像" class="headerlink" title="从 registry 存储中 select 出镜像"></a>从 registry 存储中 select 出镜像</h3><p>先将镜像同步到一个 registry 中，再将镜像从 registry 存储中捞出来。这个 registry 可以当作一个镜像存储的池子，我们使用 Linux 中硬链接的特性将镜像<code>&quot;复制&quot;</code>一份出来，然后再打一个 tar 包。这样做的好处就是每次打包镜像的时候都能复用历史的镜像数据，而且性能极快。具体的原理可以参考我之前的博客《<a href="https://blog.k8s.li/select-registry-images.html">什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</a>》</p><ul><li>先将镜像同步到一个固定的 registry 中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash sync.sh docker.io localhost:5000</span><br></pre></td></tr></table></figure><ul><li>再使用该脚本将镜像从 registry 存储中捞出来</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line">IMAGES_LIST=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">REGISTRY_PATH=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line">OUTPUT_DIR=<span class="string">"<span class="variable">$3</span>"</span></span><br><span class="line">BLOB_DIR=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">REPO_DIR=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line">rm -rf <span class="variable">$&#123;OUTPUT_DIR&#125;</span>; mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> $(find <span class="variable">$&#123;IMAGES_LIST&#125;</span> -<span class="built_in">type</span> f -name <span class="string">"*.list"</span> | xargs grep -Ev <span class="string">'^#|^/'</span> | grep <span class="string">':'</span>); <span class="keyword">do</span></span><br><span class="line">    image_tag=<span class="variable">$&#123;image##*:&#125;</span></span><br><span class="line">    image_name=<span class="variable">$&#123;image%%:*&#125;</span></span><br><span class="line">    tag_link=<span class="variable">$&#123;REGISTRY_PATH&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line">    manifest_sha256=$(sed <span class="string">'s/sha256://'</span> <span class="variable">$&#123;tag_link&#125;</span>)</span><br><span class="line">    manifest=<span class="variable">$&#123;REGISTRY_PATH&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">    ln -f <span class="variable">$&#123;manifest&#125;</span> <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br><span class="line">    <span class="comment"># make image repositories dir</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/&#123;_uploads,_layers,_manifests&#125;</span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">    <span class="comment"># create image tag manifest link file</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> $(sed <span class="string">'/v1Compatibility/d'</span> <span class="variable">$&#123;manifest&#125;</span> | grep -Eo <span class="string">'\b[a-f0-9]&#123;64&#125;\b'</span> | sort -u); <span class="keyword">do</span></span><br><span class="line">        mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        ln -f <span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;layer&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span>/link</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生🤔</a></li><li><a href="https://blog.k8s.li/registry-gc.html">docker registry GC 原理分析</a></li><li><a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a></li><li><a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a></li><li><a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a></li><li><a href="https://blog.k8s.li/select-registry-images.html">什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;搬砖工具&quot;&gt;&lt;a href=&quot;#搬砖工具&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="镜像" scheme="https://blog.k8s.li/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="skopeo" scheme="https://blog.k8s.li/tags/skopeo/"/>
    
  </entry>
  
  <entry>
    <title>云原生 PaaS 产品发布&amp;部署方案</title>
    <link href="https://blog.k8s.li/pass-platform-release.html"/>
    <id>https://blog.k8s.li/pass-platform-release.html</id>
    <published>2021-06-09T16:00:00.000Z</published>
    <updated>2021-06-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>对于一款基于 kubernetes 的容器云平台来讲，它需要给用户提供资源调度、服务编排、应用部署、监控日志、配置管理、镜像构建、CI/CD、存储和网络管理等功能。一个 PaaS 产品想要实现这些面面俱全的功能并不是一件轻松的事儿。从软件研发流程上来讲，不同于传统的单体应用或客户端应用，容器云平台本从底层的 Kubernetes 集群部署到上层的用户应用部署，所涉及到的技术栈十分复杂，最终导致平台的开发流程变得十分繁琐。</p><p>当然业界也有一些主流解决方案，比如平台组件容器化部署，以及使用微服务架构将平台拆分成若干个独立的模块，比如监控告警模块、应用管理模块、多集群管理模块等等。使用微服务架构可以解决容器云平台本身的复杂性，将平台拆分成单独的模块进行独立开发和部署，这样可以让某一特定的团队专门负责该模块的开发。</p><p>而使用微服务架构之后，也引入了新的问题：组件数量多了、对应模块开发人员多了、产品代码仓库多了、组件镜像多了、部署变得复杂了等。一个很好的例子就是 <a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">ks-installer</a>  这个开源项目，里面包含了 20 多个组件和 140 多个容器镜像。想要管理这么多的组件和镜像绝非易事儿，个人认为这需要从产品发布和平台部署两个维度去解决众多组件管理的难题，因此本文就梳理了个人在 PaaS 容器云平台产品发布和部署方面的一些经验总结。</p><h2 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a>术语定义</h2><p>本文中会有一些专业术语，在这先解释一下：</p><table><thead><tr><th><strong>术语</strong></th><th>定义</th></tr></thead><tbody><tr><td>Platform/平台</td><td>即平台，本文指基于 kubernetes 的 PaaS 容器云平台</td></tr><tr><td>Addon/组件</td><td>某个独立的模块，一个 PaaS 容器云平台由多个组件构成</td></tr><tr><td>Chart/Charts</td><td>指一个或多个 Helm Chart，里面包含定义组件部署所需要的 manifests 文件</td></tr><tr><td>Helm</td><td>部署组件 Charts 所使用的命令行工具</td></tr><tr><td>Release/发布</td><td>收集产品所包含所有组件的部署需要的文件和镜像列表到 git repo</td></tr><tr><td>Package/打包</td><td>根据发布流程中收集过来的部署文件和镜像列表将它们打包成离线安装包</td></tr><tr><td>helm-controller</td><td>基于 Helm 开发的控制器，用于部署平台组件</td></tr><tr><td>标准产品</td><td>指 PaaS 容器云平台本身，无任何定制化开发</td></tr><tr><td>OEM 产品</td><td>基于标准产品二次开发或使用 OEM 补丁包定制化开发的二开产品</td></tr><tr><td>Jenkins 流水线</td><td>Release 自动化打包发布产品包使用的工具</td></tr><tr><td>platform-release</td><td>产品发布专用的 git repo，收集和管理各个组件发布相关的配置</td></tr><tr><td>PR/MR</td><td>Pull Request / Merge Request</td></tr></tbody></table><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>对于一个基于 kubernetes 的 PaaS 平台来讲，整个平台的部署可以大致划分为平台底层的 Kubernetes 集群部署和平台组件的部署这两部分。比如 Kubesphere 3.x 这个产品，kubernetes 集群部署工具是使用 Golang 开发的  <a href="https://github.com/kubesphere/kubekey" target="_blank" rel="noopener">kubekey</a>，平台组件部署工具是使用 Ansible 开发的 <a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">ks-installer</a>。</p><p>个人认为 Kubesphere 的部署流程是比较合理的。平台底层的 Kubernetes 集群部署做的很简单（一个二进制可执行文件），平台组件部署工具依赖的也仅仅是一个已经部署好的 Kubernetes 集群和一个存储 StorageClass。这样就可以实现平台组件的部署与底层 Kubernetes 集群部署的解耦，使得平台组件可以部署在一个已经部署好的 kubernetes 集群中，比如 AKS。同时对于用户来讲，平台组件的部署也变得十分简单，只需要几条 kubectl 命令就能轻松完成。</p><p>因此在设计部署方案时，结合客户的需求，我们对部署方案做出如下几点要求：</p><ul><li>需要做到离线部署，即私有化部署时不能依赖任何在线的资源；</li><li>平台底层 Kubernetes 集群部署与平台组件部署进行解耦；</li><li>平台组件部署仅仅依赖于一个已经部署好的 Kubernetes 集群和存储 StorageClass；</li><li>平台组件部署的方式做到统一，比如 Helm Chart 部署；</li><li>尽量将上层的组件放到平台组件里，不要放在 Kubernetes 集群部署中，比如负载均衡器、持久化存储、镜像仓库等；</li></ul><p>为了满足以上几点部署的需求，我们又将整个平台的部署拆分成三部分，在产品发布的时候会使用 Jenkins 流水线自动化构建出对应的离线安装包：</p><ul><li>offline-resources：部署 nginx 服务和镜像仓库服务用于提供离线安装依赖的所有资源；</li><li>Kubernetes：基于 Kubespray 使用 offline-resources 提供的资源部署 Kubernetes 集群；</li><li>platform：在 Kubernetes 集群之上部署我们的 PaaS 容器云平台；</li></ul><p>Kubernetes 集群部署和平台部署是相互分开的，两者在部署的层面尽量地做到了解耦，发布的时候也做到了解耦，这样就可以避免 K8s 部署工具里更新一个镜像而又要将平台安装包跟着一起更新的情况。</p><p>两者可以作为独立的产品进行交付，而没有和我们的 PaaS 平台绑定在一起。因为公司内的其他团队也有 K8s 集群部署的需求，这样也能将我们的 K8s 集群部署工具单独交付给其他团队使用。平台组件多集群部署的工具，也是没有和平台自身绑定在一起。只要是部署在 K8s 上并且组件使用 Helm Chart 部署，都可以使用这个工具来实现多集群部署和更新。</p><h3 id="offline-resources-服务"><a href="#offline-resources-服务" class="headerlink" title="offline-resources 服务"></a>offline-resources 服务</h3><p>offline-resources  即离线资源服务，这一步很简单：就一个安装包，解压后修改配置文件，然后执行一条 <code>bash install.sh</code> 命令就能安装完成。由于在 Kubernetes 集群部署层面我们已经去除对 Docker 容器运行时的依赖，offline-resources 服务同样也要考虑去除对 Docker 的依赖。因此我们选择了 Containerd 官方的 CLI 工具 <a href="https://github.com/containerd/nerdctl" target="_blank" rel="noopener">nerdctl</a> ，使用 nerdctl-full 的安装包来配置好 Containerd 运行时所需的依赖，并使用 nerdctl compose 方式一键启动 Nginx 和镜像仓库服务。后续的 Kubernetes 集群部署和平台组件部署都会依赖 offline-resources 提供的 rpm/deb 包、二进制文件、容器镜像等资源。</p><h3 id="Kubernetes-集群部署"><a href="#Kubernetes-集群部署" class="headerlink" title="Kubernetes 集群部署"></a>Kubernetes 集群部署</h3><p>Kubernetes 集群部署采用的是 Kubernetes 社区的 <a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">Kubespray</a>，因为它比较适用于私有化交付的场景，相关特性如下：</p><ul><li>支持的 K8s 从 1.19.0～1.21.1 的所有版本；</li><li>支持 10 种主流的 Linux 发行版和公有云 Linux 发行版；</li><li>支持 10 种 CNI 插件；</li><li>支持 4 种容器运行时 (Docker, Containerd, CRI-O, Kata)。</li></ul><p>我们对 Kubespray 进行了二次开发，加入了离线部署需要适配的内容，比如配置系统 OS 的 yum/apt 的源为 offline-resources 服务所提供的源；将镜像仓库的域名 CA 证书在节点进行信任；将集群部署拆分成若干个子步骤；一些平台自身 self-host 特性等。</p><p>同时我们又对 Kubespray 进行容器化封装，在部署的时候会使用脚本调用 nerdctl CLI 工具来运行 Kubespray 容器，只需要传入集群节点 inventory 文件和一个集群配置文件就能一键完成 Kubernetes 集群部署。集群部署完成之后会将集群的一些信息如镜像仓库的域名、CA 证书、负载均衡 VIP 等信息保存为一个 system-info 的 configmap 为后续的平台部署使用。</p><h3 id="平台组件部署"><a href="#平台组件部署" class="headerlink" title="平台组件部署"></a>平台组件部署</h3><p>平台组件部署我们并没有像 <a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">ks-installer</a> 那样为每一个组件都单独写一个 Ansible 的 roles，然后 controller 通过调用 ansible-playbook 来部署这些组件。而是将所有平台组件的部署方式都统一成为 Helm Chart，没有对任何组件做特殊处理。在安装的时候使用 Helm CLI 或者基于 Helm SDK 开发的 helm controller 来将所有的平台组件进行统一的部署和更新。这样在发布的时候对这些组件也能通过 git repo 做到统一的管理。这样的设计对一些 OEM 定制化开发或者增量补丁包的发布也十分友好。</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>介绍完了平台部署的整体流程后我们再来谈一下发布流水线是如下设计和实现的。</p><p>根据内部产品版本迭代的流程要求，发布流水线大致可以划分为如下几部分：</p><ul><li>RD 在发布前一天完成冒烟测试，并在内部 DevOps 平台构建组件镜像和打 repo tag；</li><li>本次发布如有增删组件的情况，组件负责人提交 PR/MR 到发布 repo 修改发布配置；</li><li>RD 冒烟完成和所有准备工组就绪之后，PM 通知发布人员开始发布；</li><li>发布人员执行流水线任务，自动化收集组件最新的 repo tag，并发送群消息通知组件 Onwer 确认；</li><li>组件 repo tag 确认完毕之后，合并 PR/MR 到发布分支，自动化收集组件的 Chart 文件；</li><li>根据收集的 Chart 文件更新镜像列表和平台组件部署配置文件，以及检查镜像列表中的镜像是否存在；</li><li>将收集的 Chart 和镜像列表等文件提交 PR/MR 合并到发布分支；</li><li>剩下的就是打包了，打包可以看作是发布的收尾环节，将产品打包成离线安装包并上传到存储服务器；</li></ul><h3 id="offline-resources-安装包发布"><a href="#offline-resources-安装包发布" class="headerlink" title="offline-resources 安装包发布"></a>offline-resources 安装包发布</h3><p>对于平台部署而言，依赖的在线资源主要分为以下三种：</p><ul><li>第一类：一些 OS 依赖的包，比如用包管理器安装 Containerd, ceph-common, nfs-utils 等</li><li>第二类：二进制文件：比如 Kubelet, Kubeadm, Kubectl, CNI，还有一些工具类如 Helm, Skopeo 等</li><li>第三类：容器镜像，比如 kube-apiserver, CoreDNS, 平台组件镜像等</li></ul><p>对于这三种在线的资源，我们都统一成 Docker build 的方式，使用与之对应的自动化工具进行构建。</p><ul><li>对于第一种，我们采用配置文件 + Dockerfile 的方式进行一键构建出所有依赖的 yum/apt 包，制作成离线源。具体的实现细节可以参考我之前的博客 <a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a>；</li><li>对于第二种，我们会根据部署的配置文件自动生成一个在线的文件列表，并放到 Dockerfile 里进行构建下载；</li><li>对于第三种，我们也是根据部署的配置文件生成一些镜像列表，在一个 Dockerfile  里将镜像打包出来。</li></ul><p>最后我们将所有的 Dockerfile 合并成一个 all-in-one 的 Dockerfile，并使用 Docker 的多阶段构建和  <code>BUILDKIT</code>  的特性充分利用了构建缓存，使得构建效率比非 Docker build 的方式提高了很多。</p><h3 id="K8s-部署安装包发布"><a href="#K8s-部署安装包发布" class="headerlink" title="K8s 部署安装包发布"></a>K8s 部署安装包发布</h3><p>由于 Kubernetes 集群部署涉及的研发人员只有五六个，因此将发布流程涉及的十分轻量。大致可以分为如下几步：</p><ul><li>发布人员执行发布流水线，流水线根据部署的源码生成镜像列表和文件列表，若两者更新了就自动提交 PR/MR 到发布分支；</li><li>研发人员 review PR/MR 检查生成的镜像列表和文件列表是否正确。因为镜像列表和文件列表就是集群部署里所有组件的版本，可以根据这些列表判断组件版本是否正确；</li><li>流水线自动检查镜像列表中的镜像是否存在，流水线成功之后，repo 负责人合并 PR/MR；</li><li>合并完成 MR 之后，会打上相应版本的 repo tag，为后续补丁包发布使用；</li><li>流水线构建 Kubespray 镜像推送到公司内部的镜像仓库，并将镜像追加到镜像列表中；</li><li>流水线调用 offline-resources 构建工具，根据镜像列表打包镜像、根据文件列表下载二进制文件、根据配置文件打包离线安装依赖的 rpm/deb 包；</li><li>复制配置文件和 install.sh 脚本到安装包内，将上述内容打包成一个安装包，并上传至存储服务器；</li><li>发送群消息通知流水线发布完成。</li></ul><h3 id="平台安装包发布流程"><a href="#平台安装包发布流程" class="headerlink" title="平台安装包发布流程"></a>平台安装包发布流程</h3><p>由于平台组件数量比较多，所涉及的研发人员也较多，为了提高发布效率和团队整体的研发效率，我们将所有平台组件都统一使用 Helm Chart 的方式来部署。使用 Helm Chart 的好处就在于这些文件都是声明式的，组件的版本可以定义在这些 Chart.yaml 文件中，为后续维护平台各个组件的版本提供了便利。</p><p>为了管理这些平台组建的 Charts 文件，我们将所有组件部署的 Chart 使用自动化的工具统一收集到一个 Git repo 中，利用 Git 作为声明基础设施与应用程序的单一事实来源。使用 git tag 的方式管理和记录平台的版本和各个组件的版本；使用 git diff 的方式做差异比较，为增量的补丁包发布提供了便利；使用分支的方式来管理不同的 OEM 定制化开发项目。</p><h4 id="发布配置"><a href="#发布配置" class="headerlink" title="发布配置"></a>发布配置</h4><p>以下这些文件和目录记录了如何使用 git repo 来管理平台组件的：</p><table><thead><tr><th>目录/文件</th><th>作用</th><th>更新方式</th></tr></thead><tbody><tr><td>addons</td><td>用于存放平台组件部署需要的 Helm Chart</td><td>根据 repos 目录下的配置文件自动更新</td></tr><tr><td>repos</td><td>用于存放平台组件 git  repo 配置，根据它来收集组件指定 repo 指定版本号的 Chart 文件</td><td>增删组件需要手动添加相应配置，组件版本号自动更新</td></tr><tr><td>images</td><td>用于存放平台所需镜像的列表</td><td>根据 addons 目录下的组件自动更新</td></tr><tr><td>scripts</td><td>用于存放一些部署依赖脚本文件</td><td>手动更新或自动从其他 repo 中收集</td></tr><tr><td>configs</td><td>用于存放平台或组件需要的配置文件</td><td>手动更新或自动从其他 repo 中收集</td></tr><tr><td>version.yml</td><td>记录平台组件版本</td><td>根据组件 Chart 中的 version 自动更新</td></tr><tr><td>install.sh</td><td>平台安装脚本</td><td>手动更新</td></tr></tbody></table><p>Git Repo 的目录结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ tree platform-release</span><br><span class="line">platform-release</span><br><span class="line">├── addons</span><br><span class="line">│   ├── cyclone</span><br><span class="line">│   │   ├── Chart.yaml</span><br><span class="line">│   │   ├── templates</span><br><span class="line">│   │   └── values.yaml</span><br><span class="line">│   ├── mongo</span><br><span class="line">│   │   ├── Chart.yaml</span><br><span class="line">│   │   ├── templates</span><br><span class="line">│   │   └── values.yaml</span><br><span class="line">│   ├── rook-ceph</span><br><span class="line">│   │   ├── Chart.yaml</span><br><span class="line">│   │   ├── crds</span><br><span class="line">│   │   ├── templates</span><br><span class="line">│   │   └── values.yaml</span><br><span class="line">│   └── swagger-ui</span><br><span class="line">│       ├── Chart.yaml</span><br><span class="line">│       ├── templates</span><br><span class="line">│       └── values.yaml</span><br><span class="line">├── configs</span><br><span class="line">│   ├── mongo-config-secret.yaml.j2</span><br><span class="line">│   ├── platform-config.yaml.j2</span><br><span class="line">│   └── platform-info.yaml.j2</span><br><span class="line">├── env.yml</span><br><span class="line">├── images</span><br><span class="line">│   ├── images_app_store.list</span><br><span class="line">│   ├── images_base.list</span><br><span class="line">│   ├── images_extra.list</span><br><span class="line">│   └── images_platform.list</span><br><span class="line">├── install.sh</span><br><span class="line">├── repos</span><br><span class="line">│   ├── app.yaml</span><br><span class="line">│   ├── auth.yaml</span><br><span class="line">│   ├── common.yaml</span><br><span class="line">│   ├── devops.yaml</span><br><span class="line">│   ├── insight.yaml</span><br><span class="line">│   ├── net.yaml</span><br><span class="line">│   ├── resource.yaml</span><br><span class="line">│   └── web.yaml</span><br><span class="line">└── scripts</span><br><span class="line"></span><br><span class="line">    └── init.sh</span><br></pre></td></tr></table></figure><h4 id="修改-repo-配置文件"><a href="#修改-repo-配置文件" class="headerlink" title="修改 repo 配置文件"></a>修改 repo 配置文件</h4><p>版本发布前，如果有增删组件的情况，需要对应组件的负责人修改自己负责模块的发布配置文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub 上repo 的名称，如：muzi502/xxx</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">repositoryFullName:</span> <span class="string">muzi502/cyclone</span> </span><br><span class="line">  <span class="comment"># 组件的最新 tag</span></span><br><span class="line">  <span class="attr">currentTag:</span> <span class="string">v0.5.3</span></span><br><span class="line">  <span class="comment"># 从指定 repo 拉取 helm chart 的目录</span></span><br><span class="line">  <span class="attr">chartPaths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">manifests/cyclone</span>       <span class="comment"># 拉取 chart 的路径，可以配置多条</span></span><br><span class="line">  <span class="attr">targetChartPath:</span> <span class="string">addons</span></span><br></pre></td></tr></table></figure><p>比如<code>repos/devops.yaml</code> 中用于配置收集流水线组件的 helm Chart。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">A</span> <span class="string">set</span> <span class="string">of</span> <span class="string">files</span> <span class="string">to</span> <span class="string">collect.</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">collect</span> <span class="string">set</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">repositoryFullName:</span> <span class="string">muzi502/cyclone</span></span><br><span class="line">  <span class="attr">baseVersion:</span> <span class="string">v1.2</span></span><br><span class="line">  <span class="attr">currentTag:</span> <span class="string">v1.2.0</span></span><br><span class="line">  <span class="attr">chartPaths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">manifests/cyclone</span></span><br><span class="line">  <span class="attr">targetChartPath:</span> <span class="string">addons</span></span><br></pre></td></tr></table></figure><p>这一步只需要添加一次即可，后续无增删组件的情况无需再关心这些配置，配置中的 repo 版本也会使用自动化的工具来完成自动更新，无需手动维护，这样能减少研发们的维护成本。</p><h4 id="更新组件-repo-版本"><a href="#更新组件-repo-版本" class="headerlink" title="更新组件 repo 版本"></a>更新组件 repo 版本</h4><p>发布前置工作都完成之后，PM 会通知发布人员开始发布。因为参数化构建和 Job 集中式管理等强依赖的特性其他 CI 工具无法很好地替代，目前我们的发布流水线依旧是使用的 Jenkins 。</p><p>发布人员在 Jenkins 上执行发布流水线的任务，流水线中首先使用自动化工具解析 repo 配置文件，根据组件打 repo tag 时候的 message 信息收集最新的 tag 版本号。收集完毕之后发布流水线自动提交一个 PR/MR 到 repo 的发布分支。并通自动发送群消息通知让所有 repo 的负责人确认收集到的 repo tag 是否正确。确认无误之后，将 PR/MR 自动合并到发布分支。</p><h4 id="更新组件-Chart-文件"><a href="#更新组件-Chart-文件" class="headerlink" title="更新组件 Chart 文件"></a>更新组件 Chart 文件</h4><p>更新完组件 repo 的 tag 之后，这样就能确定本次发布需要到哪些 repo 的哪个 repo tag 下去收集组件部署的 Chart 文件，在这一步会使用自动化工具，根据 repos 目录下的配置文件，收集对应组件的 Chart 文件到发布 repo 的指定目录下，一般默认为 addons 目录。</p><h4 id="更新组件版本配置文件"><a href="#更新组件版本配置文件" class="headerlink" title="更新组件版本配置文件"></a>更新组件版本配置文件</h4><p>根据收集到的组件 Chart 版本号更新 <code>version.yml</code>这个组件版本配置文件中对应的版本，部署的时候会根据这个文件去部署哪些组件以及部署组件的版本是什么。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">modules:</span> <span class="comment"># 模块列表，一个平台可以有多个 modules</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="comment"># 模块名</span></span><br><span class="line">    <span class="attr">description:</span> <span class="comment"># 模块的描述信息</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="comment"># 是否启用模块</span></span><br><span class="line">    <span class="attr">addons:</span> <span class="comment"># 模块中的组件列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="comment"># 组件的名称， 必须和组件名以及 Chart.yaml name 保持一致</span></span><br><span class="line">      <span class="attr">description:</span> <span class="comment"># 组件的描述信息</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="comment"># 是否启用模块</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="comment"># 组件运行的 namespace</span></span><br><span class="line">      <span class="attr">version:</span> <span class="comment"># 组件的版本号，必须和 repo tag Chart.yaml version 保持一致</span></span><br></pre></td></tr></table></figure><h4 id="更新平台镜像列表"><a href="#更新平台镜像列表" class="headerlink" title="更新平台镜像列表"></a>更新平台镜像列表</h4><p>使用 Helm Template 渲染出原生的 K8s YAML内容，使用 grep 过滤出平台组件部署所需要的镜像，并将输出的结果重定向到 <code>images/images_platform.list</code> 文件中，这些镜像是部署部署组件必须用到的镜像。另外还有三种其他的镜像如下：</p><ul><li>images_extra.list：一些额外的镜像第三方镜像。</li><li>images_base.list：一些平台 DevOps 组件用到的 base 镜像，比如 golang, nodejs, maven 等。</li><li>images_app_store.list： 平台应用商店中应用部署需要的镜像，比如 Wordpress，GitLab，Harbor 等。</li></ul><p>处理这些镜像列表时也很简单，即使用 find 查找各个组件 Chart 中的 images_xxx.list 文件，将这些镜像统一合并到 images 目录下对应的文件中。</p><p>在发布 repo 中这些镜像列表都是自动化完成了，并且禁止个人手动在发布 repo 中进行更新，这样能避免一些人为的低级错误，比如镜像版本错误。我们使用这种方式来管理平台所需要的 200 多个镜像，很少因为镜像列表的错误而导致发布事故，极大地提高了版本发布的效率。</p><h4 id="提交收集产物"><a href="#提交收集产物" class="headerlink" title="提交收集产物"></a>提交收集产物</h4><p>上述步骤都完成之后会将这些收集的文件提交一个 PR/MR 到发布 repo，发布 repo 会触发一个额外的流水线去检查镜像列表中的镜像是否存在于内部的镜像仓库中，如果不存在则会发送群消息通知研发准备好镜像。</p><p>等镜像都准备完毕之后，会将这个 PR/MR 合并到发布 repo 相应的分支。合并完 PR/MR 之后至此研发需要参与的发布流程已经完毕，repo 的发布分支无需再修改其他的内容，这时会给当前发布分支的最新 commit 打上一个 repo tag，repo tag 的名称就是产品的版本号，比如 <code>v2.10.2</code> 。</p><p>到此为止完成了发布环节的绝大多数任务，剩下的只有打包安装包这个收尾工作。</p><h4 id="打包流程"><a href="#打包流程" class="headerlink" title="打包流程"></a>打包流程</h4><p>以上发布流程需要众多研发来参与确保发布环节收集到的组件 Chart 和镜像是正确的，收集完成这些文件之后就继续进行打包操作。打包的目的是将产品部署依赖的文件和镜像打包在一起，制作成一个离线安装包。打包流程很简单，大致可分为三部分：</p><ul><li>打包 Helm Chart</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p charts &amp;&amp; rm -rf charts/* || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> $(find <span class="variable">$&#123;ADDONS_PATH&#125;</span> -<span class="built_in">type</span> f | sed -n <span class="string">'s/Chart.yaml//p'</span>); <span class="keyword">do</span> helm package <span class="variable">$&#123;dir&#125;</span> -d charts; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">chown -R 10000:10000 charts &amp;&amp; tar -cpvf charts.tar.gz charts</span><br></pre></td></tr></table></figure><ul><li>打包镜像</li></ul><p>根据 images 目录下的镜像列表将镜像同步到一个指定的 Registry 中，为了提升打包效率，这个 Registry 长期保留。然后使用硬连接的方式将镜像文件直接从这个 Registry 存储目录中直接提取出来，并打包成一个 tar 格式的文件放到产品安装包中。关于镜像同步的详细原理和一些之前做的优化可以参考 <a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a> 和 <a href="https://blog.k8s.li/select-registry-images.html">什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</a>这两篇文章。</p><ul><li>打包上传</li></ul><p>镜像和组件 Chart 都打包完成之后，再将一些安装脚本和配置文件复制到安装包中。最后将这些内容一并打包在一起，并将它上传特性的存储服务器上。之后会有专门的测试团队来对打出来安装包进行测试，测试通过之后就可以对外发布交付给客户使用。</p><h4 id="发布-release-分支"><a href="#发布-release-分支" class="headerlink" title="发布 release 分支"></a>发布 release 分支</h4><p>至此平台组件发布流程到此完毕，当一个正式的版本发布完成之后，我们会采用 Kubernetes 社区版本管理的方式给发布 repo 创建一个 release 分支，比如 release-2.10 分支。后续所有的补丁包和一些 OEM 定制化开发的项目都会基于这种 release 分支来进行开发。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h3><p>为了适配这套发布流程，我们将 Kubernetes 集群部署和平台组部署将所使用的镜像收敛到 library 和 release 两个 project：</p><ul><li>对于开源的镜像，即直接使用 docker.io、k8s.gcr.io、quay.io 这些官方 registry 中的镜像，将会统一使用 library 这个 project，比如 <code>library/nginx:1.19.0</code>。</li><li>对于平台组件自身的镜像，如自研组件使用自己的 Dockerfile build 出来的镜像则统一使用 release 这个 project，比如 <code>release/cyclone:v1.2.0</code> 。</li></ul><p>release project 中的镜像是我们平台组件的镜像，能很方便地知道该镜像来自哪个组件以及是如何构建的。但将一些上游官方的镜像统一到 library 这个 project 之后，就很难知道该镜像的原镜像是什么了。比如 <code>library/coredns:1.7.0</code> 这个镜像，仅仅通过这个名字很难辨别出它是来自 docker.io 还是 k8s.gcr.io。因此为了解决这类问题和方便追溯上游原镜像，我们使用了统一的镜像同步配置文件来处理这种转换关系，在打包发布的时候我们会将这些镜像进行自动地转换和处理，这样避免了很多手动 push 镜像的麻烦和使用镜像错误的问题。</p><ul><li>images_origin.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># kubeadm core images</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-apiserver</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/kube-apiserver</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-controller-manager</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/kube-controller-manager</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-proxy</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/kube-proxy</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-scheduler</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/kube-scheduler</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/coredns</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/coredns</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/pause</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/pause</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubernetes addons</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/dns/k8s-dns-node-cache</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/k8s-dns-node-cache</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/cluster-proportional-autoscaler-amd64</span></span><br><span class="line"><span class="comment"># network plugin</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/cni</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/calico-cni</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/kube-controllers</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/calico-kube-controllers</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/node</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/calico-node</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/typha</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/calico-typha</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/coreos/flannel</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/flannel</span></span><br><span class="line"><span class="comment"># nginx for daemonset and offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">docker.io/library/nginx</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/nginx</span></span><br><span class="line"><span class="comment"># docker registry for offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">docker.io/library/registry</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/registry</span></span><br><span class="line"><span class="comment"># helm chartmuseum for offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">ghcr.io/helm/chartmuseum</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/chartmuseum</span></span><br><span class="line"><span class="comment"># yq eval -j images.yml | jq -r '.[]|select(.dest=="'"$&#123;image&#125;"'") | .src'</span></span><br></pre></td></tr></table></figure><h3 id="补丁包管理"><a href="#补丁包管理" class="headerlink" title="补丁包管理"></a>补丁包管理</h3><p>产品的正式版本在发布不久之后，在客户使用的过程中如果发现新的 bug 或者客户提出一些新的需求。我们这时会基于这些需求发布一个热更新补丁包，而不是发布一个新版本。因为热更新补丁包所涉及修改的组件比较少，需要参与的研发人员也比较少，这样能够节省很多人力成本。同时采用补丁包的方式进行热更新能够保障客户环境的稳定运行，平台稳定性也能够得到保障。</p><p>在发布流程中我们曾提到，发布过程中会给 repo 打上一个产品版本的 tag，比如 <code>v2.10.2</code>，在这里需要强调一下，<strong>这版本号特别重要。</strong>后续所有的补丁包发布都会强依赖于此版本号，因此我们会在 repo 的保护 tag 里将这种正式发布的 repo tag 进行锁定保护起来，禁止<code>--force</code> 方式覆盖。在部署的时候，这个版本号也会以 configmap 的方式记录起来，用于在前端 web 页面上展示平台版本和后续安装补丁包时进行版本校验。</p><p>补丁包发布的频率也是蛮高的，从去年五月份到现在一年左右的时间里，自己负责的补丁包发布数量大约有 50 个左右，平均每周一个。同一个版本或 OEM 项目，补丁包发布的数量也大不相同（少则三四个，多则十七八个）。当补丁包的数量越来越多时，就需要一套机制来管理这些复杂环境的补丁包。不然的话版本发布将会变得十分混乱，导致客户生产环境安装上错误版本的组件，由此可能导致生产事故。</p><p>因此在设计补丁包发布方案的时候，我们依旧和标准产品的发布流程结合起来，使用 git repo tag + 分支的方式来管理这些补丁包的发布工作。整体的发布流程如下：</p><ul><li>PM 安排研发人员修复组件 bug；</li><li>组件负责人完成冒烟测试，并在内部 DevOps 平台打镜像和 repo tag；</li><li>组件负责人修改发布 repo 中 addons 目录下对应组件的 chart 文件；</li><li>PM 通知发布人员开始发布补丁包；</li><li>发布人员运行流水线任务自动化打补丁包；</li><li>测试人员验证补丁包的质量；</li></ul><p>在打包补丁包的时候我们采用 git diff 的方式，将本次补丁包发布所修改的组件 Chart 文件筛选出来，只对这些修改的组件进行打包操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chart <span class="keyword">in</span> $(git diff --name-only --diff-filter=AM --ignore-space-at-eol --ignore-space-change <span class="variable">$&#123;DENPENDENCY_VERSION&#125;</span> <span class="variable">$&#123;NEW_VERSION&#125;</span> <span class="variable">$&#123;ADDONS_PATH&#125;</span> | sed -n <span class="string">'s/Chart.yaml//p'</span> | sort -u );<span class="keyword">do</span> cp -rf <span class="variable">$&#123;chart&#125;</span> <span class="variable">$&#123;HOTFIX_YAML_DIR&#125;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>对于一些 OEM 项目，我们会基于产品版本的分支创建一个与该 OEM 产品相对应的发布分支，如 <code>release-2.10/muzi502</code>，即代表 muzi502 这个客户使用的产品版本是基于 2.10 版本的。在这个分支上我们基于上述步骤进行 OEM 补丁包的发布。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="PaaS" scheme="https://blog.k8s.li/tags/PaaS/"/>
    
      <category term="toB" scheme="https://blog.k8s.li/tags/toB/"/>
    
  </entry>
  
  <entry>
    <title>2021 五一假期环太湖骑行之旅</title>
    <link href="https://blog.k8s.li/taihu.html"/>
    <id>https://blog.k8s.li/taihu.html</id>
    <published>2021-05-29T16:00:00.000Z</published>
    <updated>2021-05-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>调休两天终于迎来了五天的五一假期，实际上仅仅放了一天假期，也有网友调侃到 <strong>人们 996 连续工作 12 天从而换取 5 天假期去纪念这个工人获得 8 小时工作制的节日</strong>。</p><p>春节的时候就地过年没有回家，独自一人在杭州呆了 7 天，这 7 天一直宅在家里看书和追番，甚至连小区的门都没出去过。为了不让宝贵的五一假期烂在家里，在 4 月初的时候就开始计划环太湖的骑行之旅。</p><p>记得上一次长远的骑行还是高考完的那个暑假，也是独自一人从家骑车去北京，来回用了五天时间。简单估计了一下从杭州骑行到太湖，然后环太湖骑行一周，总的路程大概 520 公里，也正好五天的时间。等到回来的时候如果身体吃不消再调休几天也没啥大碍。于是，一个环太湖骑行的计划慢慢在脑中酝酿了，那么开始回顾这段骑行之旅吧：</p><h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>山地车是去年刚来杭州时就买的，在闲鱼上花了 800 块钱买的 2012 款 GIANT 捷安特 ATX770-D，到现在也是有些年头了。上下班骑行用了一年多也没啥大毛病，这一年间就后轮塔基里的轴承坏了一次，自己买来工具拆开给轴承补上缺损的珠子并上好黄油密封就修好了。</p><p><img src="https://p.k8s.li/20210501_021308214_iOS.jpg" alt=""></p><p>在五月的最后两周一直在准备骑行的装备，把后轮的外胎换了一条新的，因为旧的磨损太严重了，中间部分基本磨平了，如果不换掉的话保不准这一路会爆胎。另外又准备了两条内胎以应对爆胎的情况。又买了一个二氧化碳充气泵和 4 瓶二氧化碳补气瓶，以及多功能扳手。将这一些维修工具全部放到了车架的三角包里面。</p><p>另外在此强烈推荐车架上挂的三角包。它的空间放下修车常用的工具和一条内胎绰绰有余，这样即便是一到两天的短途骑行也能带齐装备轻装上阵，唯一不足的就是要牺牲掉水壶位。</p><p>为了放下后座架的驼包，又花了三十多块钱买了后车架，将驼包固定在上面。驼包里面带的东西还蛮多的：几件换洗的衣服、雨衣和雨伞、充电宝、毛巾纸巾等。水没有带太多，在路上随便买着喝就行。</p><h2 id="出发篇"><a href="#出发篇" class="headerlink" title="出发篇"></a>出发篇</h2><p>出发前天晚上一直睡不着，脑子实在是太兴奋了，这种感觉就像是高中放寒暑假的前天晚上一样，终于可以痛快地放松一下了。五一当天早上 8 点起床的，本计划着 6 点起床出发的，因为早上凉快车少比较适合骑行。收拾一下装备下楼准备出发，离开小区没多久后就发现：我艹，保命头盔没带！这怎么能行，于是屁颠颠地返回家里拿头盔。虽然头盔是几十块钱的破烂货，但关键时刻还是能保小命一条滴，还是要戴上滴。</p><p>第一天准备先骑行到湖州，因为临近太湖的城市中，湖州是距离杭州最近的一个，正好可以把湖州当作环太湖骑行的出发点，最终再返回这里。从地图上看，杭州到太湖适合骑行的的最佳路线就是沿着笤（tiao）溪旁的公路直达湖州，我们这里暂定它条路为笤溪路。只要进入到这条沿溪公路基本上无需导航和地图就能到达湖州，而且这条路上的路绿灯特别少，车辆相对于国道和省道也少很多，路边有大片的绿化带树林可以遮阴，以及临近水边空气质量和湿度都十分安逸。</p><p><img src="https://p.k8s.li/20210501_031349626_iOS.jpg" alt=""></p><p><img src="https://p.k8s.li/20210501_040031464_iOS.jpg" alt=""></p><h2 id="Day-1-杭州-–-gt-湖州-–-gt-长兴"><a href="#Day-1-杭州-–-gt-湖州-–-gt-长兴" class="headerlink" title="Day 1 杭州 –&gt; 湖州 –&gt; 长兴"></a>Day 1 杭州 –&gt; 湖州 –&gt; 长兴</h2><p>大概上午九点左右就进入到笤溪路，当时随身携带的一瓶矿泉水也一口闷喝完了。后面一直沿着这条路骑行路两个小时依旧没有在路边找到任何一家超市，十分僵硬。只好看地图找到德清县的一个小乡镇，于是绕道这个这个小乡镇里买水和吃饭。中午吃完饭之后感觉实在是太热，扰扰头发现头发好长，大概有三个月没有理发 🥲，是我太懒了，平时很少在意这件事儿。这么热的天头发头顶着这么长也不是个好办法，于是在路边随便找路一家理发点剪短了头发。</p><ul><li>理完发之后已经中午十二点半了，应该找个地方稍作休息一下。于是还是返回到笤溪路，在路边的绿化带树林里找到路个合适的大石头。将随身携带的换洗衣服当作枕头，雨衣在石头上一摊就是个简易的小床了，躺着休息一个半小时再出发。</li></ul><p><img src="https://p.k8s.li/20210501_050737596_iOS.jpg" alt=""></p><ul><li>在笤溪路路边的绿化带树林里有特别多的大树被风吹断，心疼树树 🥺</li></ul><p><img src="https://p.k8s.li/20210501_064702113_iOS.jpg" alt=""></p><ul><li>到了下午五点左右到达湖州的太湖风景区，拍摄地点为湖滨路附近的公园</li></ul><p><img src="https://p.k8s.li/20210501_092945406_iOS.jpg" alt=""></p><p>在景区休息了半个多小时之后，天已经快黑了，原本准备当晚住在湖州，但发现附近五公里内的酒价格普遍在 3k～5k 之间。毕竟是临近太湖风景区，而且是五一黄金周，价格高的离谱可不是咱这种韭菜和低端人口能够享受的 🥲。于是在搜一下十公里外的城区，虽然价格能够接受。但要骑行十多公里，而且在城区骑行红绿灯特别多，十分浪费时间。第二天早上又得骑行十多公里返回环太湖公路，感觉来回二十多公里还不如往前面接着骑行，在远一点的地方找一个合适的酒店住下。于是在地图上发现长兴火车站距离太湖十分近，火车站附近肯定有酒店。于是接着找了距离环太湖路最近的酒店。距离当前地点二十公里左右，如果现在骑行的话，一小时左右应该就能骑到酒店。应该没问题，因为天已经快黑了，不再赶紧骑行的话将要夜间骑行，很不安全。</p><p>于是当时做了一个很蠢的决定，继续骑行，忘记了吃晚饭。本来午饭吃的就比较少，也没有及时补充能量，体力已经快到达了极限。于是在体力不堪的情况下又继续骑行了二十公里。到达长兴火车站附近后，距离酒店就不到两公里的路程了。令我意想不到的是，刚过火车站不久后，就出突然出现头晕恶心的不适。停下来歇息了半个小时才缓过来，以至于最后的两周里基本上是推着车子走了半个小时才到的酒店。到达酒店已经八点半了，已经快九个小时没吃东西了，感觉特别累、全身无力。</p><p>把车子推到房间里简单洗漱了一下，就去楼下的夜市吃点饭。点了一盘凉拌黄瓜和干锅包菜，没想到等了半个小时……</p><p>吃完饭后在超市买了几瓶水和水果，回到房间看了一集 <a href="">BBC：冰冻星球·如履薄冰</a> 纪录片就睡着了。</p><p><img src="https://p.k8s.li/20210501_141353000_iOS.png" alt=""></p><h2 id="Day-2-长兴-–-gt-无锡-–-gt-苏州"><a href="#Day-2-长兴-–-gt-无锡-–-gt-苏州" class="headerlink" title="Day 2 长兴 –&gt; 无锡 –&gt; 苏州"></a>Day 2 长兴 –&gt; 无锡 –&gt; 苏州</h2><p>第二天早上七点半起床，在楼下的早餐店吃早饭，也是酒店附赠的一顿早餐。在酒店们口发现了很多驴友的山地车和公路车，估计他们昨晚也是在这里休息的。吃完饭之后收拾东西出发，下一站是苏州，本想着要去无锡，但由于时间缘故还是不去无锡了，今天要骑行 150 多公里到达苏州的西山风景区。</p><p><img src="https://p.k8s.li/20210502_004340465_iOS.jpg" alt=""></p><p>刚刚出来酒店门口到达 302 国道后就发现今天天气十分不妙，逆风！骑行起来特别费劲，平均时速只能维持在 18公里/小时，只能奋力骑行了。中午的时候到达了宜兴的一个小镇，在那里吃了顿午饭，之后继续骑行到了无锡市的十八湾湿地公园，在公园里的一个湖边休息了一个小时候就继续骑行。到达无锡之后没有继续沿着太湖公路骑行，而是选择了最短的路线到达苏州西山风景区。</p><p><img src="https://p.k8s.li/20210502_010036044_iOS.jpg" alt=""></p><p>晚上到达西山风景区已经八点左右了，到达凤凰台景点所在的小岛之后，在景区里的一家饭店吃顿晚饭，一个人三菜一汤吃得特别饱。之后又继续骑行到西山风景区里面的一家民宿。在美团上订的价格是 108¥ 一个大床大间。</p><p><img src="https://p.k8s.li/20210502_110411190_iOS.jpg" alt=""></p><h2 id="Day-3-太湖风景区-–-gt-苏州城区"><a href="#Day-3-太湖风景区-–-gt-苏州城区" class="headerlink" title="Day 3 太湖风景区 –&gt; 苏州城区"></a>Day 3 太湖风景区 –&gt; 苏州城区</h2><p>早上七点半起床，将驼包从山地车上卸了下来放在了房间里。今天上午只在西山风景区玩儿，不需要带这些行李，这样在山里骑行起来也能放飞自我。</p><ul><li>去的第一个景点是林屋洞，价格是 50¥，在林屋洞山上的一座塔的内部拍摄太湖沿岸的风景</li></ul><p><img src="https://p.k8s.li/20210503_005522469_iOS.jpg" alt=""></p><p>上午的时候就在西山风景区沿着湖边骑行玩儿了一圈，退房之后也十二点多了，于是在附近的一家兰州拉面吃了顿蛋炒饭。</p><ul><li>随后又骑行到太湖周边休息一段时间</li></ul><p><img src="https://p.k8s.li/20210503_044026640_iOS.jpg" alt=""></p><p>下午继续骑行，三号号和四号这两晚定的民宿在平江历史街区附近。从西山风景区到那里大概有 65 公里的骑行路程。下午五点左右到达住的地方。价格是 512¥ 两晚，感觉还是比较贵的，而且是三人间，凑活住两晚吧。其实本人对和陌生人合住并不是很介意，还是能接受。在我大学刚毕业之后，也是住在公司附近的一家民宿。当时一个不到十五平米的房间里，两个上下铺的床，和四个人住一块。虽然十分拥挤也又很多不便，但价格十分便宜，每个月 300¥ 包所有费用，十分适合当时刚毕业手无分文的我。</p><ul><li>晚上的时候自己一个人去吃了顿海底捞火锅，总感觉在外面自己一个人吃饭十分尴尬 😅 。如今毕业也快两年了，这两年基本上是独自一个人生活的，这种独处的感觉也慢慢适应了，也越来越享受这种独处的生活了。</li></ul><p><img src="https://p.k8s.li/20210503_114832550_iOS.jpg" alt=""></p><ul><li>平江历史街区夜景</li></ul><p><img src="https://p.k8s.li/20210503_124849278_iOS.jpg" alt=""></p><ul><li>平江历史街区夜景</li></ul><p><img src="https://p.k8s.li/20210503_125244682_iOS.jpg" alt=""></p><h2 id="Day-4-苏州游玩"><a href="#Day-4-苏州游玩" class="headerlink" title="Day 4 苏州游玩"></a>Day 4 苏州游玩</h2><p>早上七点半就起床了，上午游玩的第一站是留园，预定的是早上 8 点到 9 点的门票，早上下起了丝丝细雨，感觉天气不太好。在留园逛完之后又去了狮子林，感觉这两个园子还可以，景区的人并不是特别多。</p><p><img src="https://p.k8s.li/20210504_010754779_iOS.jpg" alt=""></p><p>本想着下午去拙政园，但当天已经没有门票了，只能预定到五号上午的。于是下午就去了虎丘风景区。</p><p><img src="https://p.k8s.li/20210504_084847466_iOS.jpg" alt=""></p><ul><li>虎丘风景区附近</li></ul><p><img src="https://p.k8s.li/20210504_085354580_iOS.jpg" alt=""></p><p><img src="https://p.k8s.li/20210504_085413326_iOS.jpg" alt=""></p><h2 id="Day-5-苏州-–-gt-湖州"><a href="#Day-5-苏州-–-gt-湖州" class="headerlink" title="Day 5 苏州 –&gt; 湖州"></a>Day 5 苏州 –&gt; 湖州</h2><p>早上八点就出发去了拙政园，在里面逛的时间比较长，等到十点半的时候才从里面出来。</p><p><img src="https://p.k8s.li/20210505_010850949_iOS.jpg" alt=""></p><ul><li>感觉这棵树特别像人的手 🖐️ 🤔️</li></ul><p><img src="https://p.k8s.li/20210505_011052002_iOS.jpg" alt=""></p><p>逛完拙政园之后已经快十一点了，回到住的地方收拾完行李，在附近的一家素食餐厅吃了顿午饭。之后继续骑行，准备返回了，晚上准备住在湖州。</p><p><img src="https://p.k8s.li/20210505_082143685_iOS.jpg" alt=""></p><ul><li>下午五点半的时候到达湖州滨湖大道，再次来到了出发点，环太湖骑行总算顺利结束了，只剩下明天一天返回杭州的路程了。明天到家后再在家休息一天，因此给 TL 申请了两天年假，也很顺利滴批准了。</li></ul><p><img src="https://p.k8s.li/20210505_093503000_iOS.png" alt=""></p><ul><li>滨湖大道旁的公园，湖边夕阳西下的景色</li></ul><p><img src="https://p.k8s.li/20210505_095106128_iOS.jpg" alt=""></p><h2 id="Day-6-湖州-–-gt-杭州"><a href="#Day-6-湖州-–-gt-杭州" class="headerlink" title="Day 6 湖州 –&gt; 杭州"></a>Day 6 湖州 –&gt; 杭州</h2><p>最后一天就是从湖州返回杭州了，还是沿着原路返回，下午临近六点顺利到达杭州。</p><p>感觉这几天吃的太多了 😤</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>住宿</td><td>866</td></tr><tr><td>门票</td><td>295</td></tr><tr><td>食物</td><td>750</td></tr><tr><td>其他</td><td>182</td></tr><tr><td>总计</td><td>2093</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;调休两天终于迎来了五天的五一假期，实际上仅仅放了一天假期，
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.k8s.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="骑行" scheme="https://blog.k8s.li/tags/%E9%AA%91%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>使用 docker build 制作 yum/apt 离线源</title>
    <link href="https://blog.k8s.li/make-offline-mirrors.html"/>
    <id>https://blog.k8s.li/make-offline-mirrors.html</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2021-05-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="离线部署"><a href="#离线部署" class="headerlink" title="离线部署"></a>离线部署</h2><p>对于 PaaS toB 产品来讲，客户往往会要求产品的部署方案必须做到离线安装，即在部署时不能依赖任何在线的资源，比如安装一些 OS 软件包时依赖的 yum/apt 源；docker.io、k8s.gcr.io 、quay.io 上面的容器镜像；GitHub 上开源软件的二进制下载文件等。</p><p>作为平台部署工具的开发者，始终被离线部署这个难题困扰着。在线的容器镜像和二进制文件比较好解决，因为这些资源是与 OS 无关的，只要下载下来放到安装包里，部署的时候启动一个 HTTP 服务器和镜像仓库服务提供这些资源的下载即可。</p><p>但是对于 yum/apt 之类的软件来讲并不那么简单：</p><ul><li>首先由于各个包之间的依赖关系比较复杂，并不能将它们直接下载下来；</li><li>其次即便下载下来之后也无法直接通过 yum/apt 的方式安装指定的软件包，虽然也可以使用 scp 的方式将这些包复制到部署节点，通过 rpm 或 dpkg 的方式来安装上，但这样并不是很优雅，而且通用性能也不是很好；</li><li>最后需要适配的 Linux 发行版和包管理器种类也有多种，而且有些包的包名或者版本号在不同的包管理之间也相差甚大，无法做到统一管理。</li></ul><p>综上，将平台部署依赖的在线 yum/apt 之类的软件包资源制作成离线安装包是一件很棘手的事情。个人就这个问题折腾了一段时间，终于找到了一个比较合适的解决方案：即通过一个 YAML 配置文件来管理包，然后使用 Dockerfile 来构建成离线的 tar 包或者容器镜像。如果有类似需求的小伙伴，可以参考一下本方案。</p><h2 id="Docker-build"><a href="#Docker-build" class="headerlink" title="Docker build"></a>Docker build</h2><p>传统制作离线源的方式是找一台相应的 Linux 机器，在上面通过包管理器下载这些软件包，然后再创建这些软件包的 repo 索引文件。</p><p>可以看出这种方式十分不灵活，假如我想要制作 Debian 9 的 apt 离线源，我就需要一台 Debian 9 的机器。如果要适配多个 Linux 发行版就需要多个相应的 OS 机器。要管理和使用这么多种类的 OS 不是一件容易的事儿，而如今已经十分普遍使用的容器技术恰恰能帮助我们解决这类问题。比如我想运行一个 Debian9 的操作系统，我只需要运行一个 Debian 9 镜像的容器即可，而且不需要额外的管理成本，使用起来也十分地轻量。</p><p>日常工作中我们常使用容器来构建一些 Golang 写的后端组件，那么构建离线源是不是也可以这样做？实践证明确实可以，我们只需要为不同的 OS 和包管理器写一个相应的 Dockerfile 即可。使用 docker build 多阶段构建的特性，可以将多个 Dockerfile 合并成一个，然后最后使用 COPY –from 的方式将这个构建的产物复制到同一个镜像中，比如提供 HTTP 的 nginx 容器，或者使用 BuildKit 的特性将这些构建产物导出为 tar包 或者为本地目录。</p><h2 id="适配-OS"><a href="#适配-OS" class="headerlink" title="适配 OS"></a>适配 OS</h2><p>根据自己的 PaaS toB 从业经验可知，目前国内的私有云客户生产环境中使用的 OS 中， CentOS 应该是最多的，其次是 Ubuntu 和 Debian。至于 RedHat 则需要付费订阅才能使用，DockerHub 上更是没有免费可使用的镜像，因此本方案无法确保适用于 RedHat。产品方面 CentOS 需要的版本只有 7.9；Ubuntu 需要支持 18.04 和 20.04；Debian 需要支持 9 和 10。因为时间和精力有限，本方案支持的 Linux 发行版和相应的版本只有 CentOS 7, Debian 9/10, Ubuntu 18.04/20.04 这五个。如果要支持其他 OS 的离线源比如 OpenSUSE，也可以参考本方案编写一个 Dockerfile 文件来实现适配。</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>构建的过程十分简单，使用一个 YAML 格式的配置文件来管理不同的包管理器或 Linux 发行版安装不同的包，并在一个 Dockerfile 里完成所有的构建操作。实现源码在 <a href="https://github.com/muzi502/scripts/tree/master/build-packages-repo" target="_blank" rel="noopener">github.com/muzi502/scripts/build-packages-repo</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">build</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── Dockerfile.centos</span><br><span class="line">├── Dockerfile.debian</span><br><span class="line">├── Dockerfile.ubuntu</span><br><span class="line">└── packages.yaml</span><br></pre></td></tr></table></figure><h3 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h3><p>使用 docker build 的方式构建离线源大致可以分为如下几个步骤：</p><ul><li>在构建容器内配置 yum/apt 源，安装构建时需要工具；</li><li>生成系统内的 rpm/deb 包的列表和需要下载的包列表，解决一些软件包依赖的问题；</li><li>根据生成的包列表使用相应的包管理器工具下载需要的软件包；</li><li>生用相应的包管理器生成这些包的 index 文件，如 repodata 或 Packages.gz 文件；</li><li>将上述的构建产物 COPY 到同一个容器镜像里，比如 nginx ；也可以导出为 tar 包或目录；</li></ul><h3 id="packages-yaml"><a href="#packages-yaml" class="headerlink" title="packages.yaml"></a>packages.yaml</h3><p>这个文件用来管理不同的包管理器或者 Linux 发行版需要安装的软件包。根据不同的包管理器和发行版我们可以将这些包大致划分为 4 类。</p><ul><li><p>common：适用于一些所有包管理器中包名相同或者对版本无要求的包，比如 vim 、curl、wget 这类工具。一般情况下使用这些工具我们并不关心它的版本，并且这类包的包名在所有的包管理器中都是相同的，所以这类可以划分为公共包。</p></li><li><p>yum/apt/dnf：适用于不同的发行版使用相同的包管理器。比如 nfs 的包，在 yum 中包名为 nfs-utils 但在 apt 中为 nfs-common，这类软件包可以划分为一类。</p></li><li><p>OS：适用于一些该 OS 独有的包，比如安装一个 Ubuntu 中有但 Debian 中没有的包（比如 debian-builder 或 ubuntu-dev-tools）。</p></li><li><p>OS-发行版代号：这类包的版本和发行版代号绑定在一起，比如 <code>docker-ce=5:19.03.15~3-0~debian-stretch。</code></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wget</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tree</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lvm2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">yum:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfs-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yum-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">createrepo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">centos-release-gluster</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">epel-release</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apt:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfs-common</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apt-transport-https</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ca-certificates</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lsb-release</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">software-properties-common</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">aptitude</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dpkg-dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">centos:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">centos-release</span></span><br><span class="line"></span><br><span class="line"><span class="attr">debian:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">debian-builder</span></span><br><span class="line"></span><br><span class="line"><span class="attr">debian-buster:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">docker-ce=5:19.03.15~3-0~debian-buster</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ubuntu:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ubuntu-dev-tools</span></span><br></pre></td></tr></table></figure><p>在这里需要额外注意一下，在不同的包管理器之间指定包版本的方式也各不相同，比如在 yum 中如果要安装 19.03.15 版本的 docker-ce 包名为 <code>docker-ce-19.03.15</code>，而在 debian 中包名则为 <code>docker-ce=5:19.03.15~3-0~debian-stretch</code>。可以使用包管理器查看相同的一个包如 docker-ce 在不同的包管理器之前的差异，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos:]<span class="comment"># yum list docker-ce --showduplicates | grep 19.03.15</span></span><br><span class="line">docker-ce.x86_64            3:19.03.15-3.el7                    docker-ce-stable</span><br><span class="line"></span><br><span class="line">root@debian:/<span class="comment"># apt-cache policy docker-ce</span></span><br><span class="line">docker-ce:</span><br><span class="line">  Installed: (none)</span><br><span class="line">  Candidate: 5:19.03.15~3-0~debian-stretch</span><br><span class="line">  Version table:</span><br><span class="line">     5:19.03.15~3-0~debian-stretch 500</span><br><span class="line">        500 https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br></pre></td></tr></table></figure><p>这个版本号的问题在 kubespray 的源码中也是同样做了特殊处理，目前确实没有太好的方案来解决，只能手动维护这个版本号。</p><ul><li>roles/container-engine/docker/vars/redhat.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># https://docs.docker.com/engine/installation/linux/centos/#install-from-a-package</span></span><br><span class="line"><span class="comment"># https://download.docker.com/linux/centos/&lt;centos_version&gt;&gt;/x86_64/stable/Packages/</span></span><br><span class="line"><span class="comment"># or do 'yum --showduplicates list docker-engine'</span></span><br><span class="line"><span class="attr">docker_versioned_pkg:</span></span><br><span class="line">  <span class="attr">'latest':</span> <span class="string">docker-ce</span></span><br><span class="line">  <span class="attr">'18.09':</span> <span class="string">docker-ce-18.09.9-3.el7</span></span><br><span class="line">  <span class="attr">'19.03':</span> <span class="string">docker-ce-19.03.15-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'20.10':</span> <span class="string">docker-ce-20.10.5-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'stable':</span> <span class="string">docker-ce-19.03.15-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'edge':</span> <span class="string">docker-ce-19.03.15-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker_cli_versioned_pkg:</span></span><br><span class="line">  <span class="attr">'latest':</span> <span class="string">docker-ce-cli</span></span><br><span class="line">  <span class="attr">'18.09':</span> <span class="string">docker-ce-cli-18.09.9-3.el7</span></span><br><span class="line">  <span class="attr">'19.03':</span> <span class="string">docker-ce-cli-19.03.15-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'20.10':</span> <span class="string">docker-ce-cli-20.10.5-3.el&#123;&#123;</span> <span class="string">ansible_distribution_major_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker_package_info:</span></span><br><span class="line">  <span class="attr">enablerepo:</span> <span class="string">"docker-ce"</span></span><br><span class="line">  <span class="attr">pkgs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; containerd_versioned_pkg[containerd_version | string] &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_cli_versioned_pkg[docker_cli_version | string] &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_versioned_pkg[docker_version | string] &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><ul><li>roles/container-engine/docker/vars/ubuntu.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://download.docker.com/linux/ubuntu/</span></span><br><span class="line"><span class="attr">docker_versioned_pkg:</span></span><br><span class="line">  <span class="attr">'latest':</span> <span class="string">docker-ce</span></span><br><span class="line">  <span class="attr">'18.09':</span> <span class="string">docker-ce=5:18.09.9~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'19.03':</span> <span class="string">docker-ce=5:19.03.15~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'20.10':</span> <span class="string">docker-ce=5:20.10.5~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'stable':</span> <span class="string">docker-ce=5:19.03.15~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'edge':</span> <span class="string">docker-ce=5:19.03.15~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker_cli_versioned_pkg:</span></span><br><span class="line">  <span class="attr">'latest':</span> <span class="string">docker-ce-cli</span></span><br><span class="line">  <span class="attr">'18.09':</span> <span class="string">docker-ce-cli=5:18.09.9~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'19.03':</span> <span class="string">docker-ce-cli=5:19.03.15~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">'20.10':</span> <span class="string">docker-ce-cli=5:20.10.5~3-0~ubuntu-&#123;&#123;</span> <span class="string">ansible_distribution_release|lower</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker_package_info:</span></span><br><span class="line">  <span class="attr">pkgs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; containerd_versioned_pkg[containerd_version | string] &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_cli_versioned_pkg[docker_cli_version | string] &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_versioned_pkg[docker_version | string] &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h3><p>介绍完上述的包配置文件之后，接下来我们就根据这个 packages.yml 配置文件使用 Dockerfile 构建这些包的离线源。以下是构建 CentOS 7 离线源的 Dockerfile。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 centos 7.9 作为 base 构建镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7.9</span>.<span class="number">2009</span> as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 centos 的版本和处理器体系架构</span></span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=<span class="number">7</span></span><br><span class="line"><span class="keyword">ARG</span> ARCH=x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这里定义一些构建时需要的软件包</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_TOOLS=<span class="string">"yum-utils createrepo centos-release-gluster epel-release curl"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建工具和配置一些软件源 repo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -q -y <span class="variable">$BUILD_TOOLS</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum makecache &amp;&amp; yum update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安装 yq 个工具来处理 packages.yaml 配置文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析 packages.yml 配置文件，生成所需要的 packages.list 文件</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /centos/<span class="variable">$OS_VERSION</span>/os/<span class="variable">$ARCH</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 yq 先将 YAML 文件转换成 json 格式的内容，再使用 jq 过滤出所需要的包，输出为一个列表</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> <span class="string">'.common[],.yum[],.centos[]'</span> packages.yaml | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rpm -qa &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 packages.list 中的软件包，并生成 repo 索引文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cat packages.list | xargs yumdownloader --resolve \</span></span><br><span class="line"><span class="bash">    &amp;&amp; createrepo -d .</span></span><br><span class="line"><span class="comment"># 将构建产物复制到一层空的镜像中，方便导出为 tar 包或目录的格式</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=centos7 /centos /centos</span></span><br></pre></td></tr></table></figure><p>在最后的一个 FROM 镜像中，这里指定的是 <code>scratch</code>，这是一个特殊的镜像名，它代表的是一个空的镜像 layer。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将构建产物复制到一层空的镜像中，方便导出为 tar 包或目录的格式</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=centos7 /centos /centos</span></span><br></pre></td></tr></table></figure><p>也可以直接将构建出来的产物放到 nginx 容器中，这样直接运行 nginx 容器就能提供 yum/apt 源的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx:1.19</span><br><span class="line">COPY --from=centos7 /centos /usr/share/nginx/html</span><br></pre></td></tr></table></figure><ul><li>如果要构建为 tar 包或者本地目录的方式，需要为 Docker 开启 <code>DOCKER_BUILDKIT=1</code> 这个特性</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建为本地目录</span></span><br><span class="line">root@debian: ~ <span class="comment"># DOCKER_BUILDKIT=1 docker build -o type=local,dest=$PWD -f Dockerfile.centos .</span></span><br><span class="line"><span class="comment"># 构建为 tar 包</span></span><br><span class="line">root@debian: ~ <span class="comment"># DOCKER_BUILDKIT=1 docker build -o type=tar,dest=$PWD/centos7.tar -f Dockerfile.centos .</span></span><br></pre></td></tr></table></figure><ul><li>构建日志如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[+] Building 30.9s (13/13) FINISHED</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                                                                                                            0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 109B                                                                                                                                            0.0s</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile.centos                                                                                                                  0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 979B                                                                                                                                         0.0s</span><br><span class="line"> =&gt; [internal] load metadata <span class="keyword">for</span> docker.io/library/centos:7.9.2009                                                                                                           2.6s</span><br><span class="line"> =&gt; [centos7 1/7] FROM docker.io/library/centos:7.9.2009@sha256:0f4ec88e21daf75124b8a9e5ca03c37a5e937e0e108a255d890492430789b60e                                             0.0s</span><br><span class="line"> =&gt; [internal] load build context                                                                                                                                            0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 818B                                                                                                                                            0.0s</span><br><span class="line"> =&gt; CACHED [centos7 2/7] RUN yum install -q -y yum-utils createrepo centos-release-gluster epel-release curl     &amp;&amp; yum-config-manager --add-repo https://download.docker.c  0.0s</span><br><span class="line"> =&gt; [centos7 3/7] WORKDIR /centos/7/os/x86_64                                                                                                                                0.0s</span><br><span class="line"> =&gt; [centos7 4/7] RUN curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64     &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq     &amp;&amp; curl   3.2s</span><br><span class="line"> =&gt; [centos7 5/7] COPY packages.yaml packages.yaml                                                                                                                           0.1s</span><br><span class="line"> =&gt; [centos7 6/7] RUN yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.yum[],.centos[]'</span> | sort -u &gt; packages.list     &amp;&amp; rpm -qa &gt;&gt; packages.list                                1.0s</span><br><span class="line"> =&gt; [centos7 7/7] RUN cat packages.list | xargs yumdownloader --resolve     &amp;&amp; createrepo -d .                                                                              21.6s</span><br><span class="line"> =&gt; [stage-1 1/1] COPY --from=centos7 /centos /centos                                                                                                                        0.5s</span><br><span class="line"> =&gt; exporting to client                                                                                                                                                      0.7s</span><br><span class="line"> =&gt; =&gt; copying files 301.37MB</span><br></pre></td></tr></table></figure><ul><li>构建产物如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/build <span class="comment"># tree centos</span></span><br><span class="line">centos</span><br><span class="line">└── 7</span><br><span class="line">    └── os</span><br><span class="line">        └── x86_64</span><br><span class="line">            ├── acl-2.2.51-15.el7.x86_64.rpm</span><br><span class="line">            ├── ansible-2.9.21-1.el7.noarch.rpm</span><br><span class="line">            ├── at-3.1.13-24.el7.x86_64.rpm</span><br><span class="line">            ├── attr-2.4.46-13.el7.x86_64.rpm</span><br><span class="line">            ├── audit-libs-2.8.5-4.el7.x86_64.rpm</span><br><span class="line">            ├── audit-libs-python-2.8.5-4.el7.x86_64.rpm</span><br><span class="line">            ├── avahi-libs-0.6.31-20.el7.x86_64.rpm</span><br><span class="line">            ├── basesystem-10.0-7.el7.centos.noarch.rpm</span><br><span class="line">            ├── bash-4.2.46-34.el7.x86_64.rpm</span><br><span class="line">            ……………………………………</span><br><span class="line">            ├── redhat-lsb-submod-security-4.1-27.el7.centos.1.x86_64.rpm</span><br><span class="line">            ├── repodata</span><br><span class="line">            │   ├── 28d2fe2d1dbd9b76d3e5385d42cf628ac9fc34d69e151edfe8d134fe6ac6a6d9-primary.xml.gz</span><br><span class="line">            │   ├── 5264ca1af13ec7c870f25b2a28edb3c2843556ca201d07ac681eb4af7a28b47c-primary.sqlite.bz2</span><br><span class="line">            │   ├── 591d9c2d5be714356e8db39f006d07073f0e1e024a4a811d5960d8e200a874fb-other.xml.gz</span><br><span class="line">            │   ├── c035d2112d55d23a72b6d006b9e86a2f67db78c0de45345e415884aa0782f40c-other.sqlite.bz2</span><br><span class="line">            │   ├── cd756169c3718d77201d08590c0613ebed80053f84a2db7acc719b5b9bca866f-filelists.xml.gz</span><br><span class="line">            │   ├── ed0c5a36b12cf1d4100f90b4825b93dac832e6e21f83b23ae9d9753842801cee-filelists.sqlite.bz2</span><br><span class="line">            │   └── repomd.xml</span><br><span class="line">            ├── yum-utils-1.1.31-54.el7_8.noarch.rpm</span><br><span class="line">            └── zlib-1.2.7-19.el7_9.x86_64.rpm</span><br><span class="line"></span><br><span class="line">4 directories, 368 files</span><br></pre></td></tr></table></figure><h3 id="Debian9"><a href="#Debian9" class="headerlink" title="Debian9"></a>Debian9</h3><p>下面是 Debian9 构建 Dockerfile，流程上和 CentOS 相差不多，只是包管理器的使用方式不太相同而已，这里就不再做详细的源码介绍。</p><ul><li>Dockerfile.debian</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch-slim as stretch</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=stretch</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /debian/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> <span class="string">'.common[],.apt[],.debian[]'</span> packages.yaml | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /debian/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /debian /debian</span></span><br></pre></td></tr></table></figure><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>Ubuntu 离线源的制作步骤和 Debian 差不太多，只需要简单修改一下 Debian 的 Dockerfile 应该就 OK ，比如 <code>&#39;s/debian/ubuntu/g&#39;</code> ，毕竟 Debian 是 Ubuntu 的爸爸嘛～～，所以 apt 使用的方式和包名几乎一模一样，这里就不再赘述了。</p><h3 id="All-in-Oone"><a href="#All-in-Oone" class="headerlink" title="All-in-Oone"></a>All-in-Oone</h3><p>将上述几个 Linux 发行版的 Dockerfile 整合成一个，这样只需要一个 docker build 命令就能构建出所需要的所有 OS 的离线源了。</p><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 7.9 2009</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7.9</span>.<span class="number">2009</span> as centos7</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=<span class="number">7</span></span><br><span class="line"><span class="keyword">ARG</span> ARCH=x86_64</span><br><span class="line"><span class="keyword">ARG</span> BUILD_TOOLS=<span class="string">"yum-utils createrepo centos-release-gluster epel-release curl"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -q -y <span class="variable">$BUILD_TOOLS</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum makecache &amp;&amp; yum update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /centos/<span class="variable">$OS_VERSION</span>/os/<span class="variable">$ARCH</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.yum[],.centos[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rpm -qa &gt;&gt; packages.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cat packages.list | xargs yumdownloader --resolve \</span></span><br><span class="line"><span class="bash">    &amp;&amp; createrepo -d .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian 9 stretch</span></span><br><span class="line"><span class="keyword">FROM</span> debian:stretch-slim as stretch</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=stretch</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /debian/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.apt[],.debian[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /debian/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian 10 buster</span></span><br><span class="line"><span class="keyword">FROM</span> debian:buster-slim as buster</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=buster</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /debian/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.apt[],.debian[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /debian/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 18.04 bionic</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:bionic as bionic</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=bionic</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /ubuntu/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.apt[],.ubuntu[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /ubuntu/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 20.04 focal</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:focal as focal</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=focal</span><br><span class="line"><span class="keyword">ARG</span> ARCH=amd64</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DEP_PACKAGES=<span class="string">"apt-transport-https ca-certificates curl gnupg aptitude dpkg-dev"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y -q \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt install -y --no-install-recommends <span class="variable">$DEP_PACKAGES</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="variable">$&#123;OS_VERSION&#125;</span> stable"</span> \</span></span><br><span class="line"><span class="bash">    | tee /etc/apt/sources.list.d/docker.list &gt; /dev/null \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt update -y -q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL -o /usr/<span class="built_in">local</span>/bin/yq https://github.com/mikefarah/yq/releases/download/v4.9.3/yq_linux_amd64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/yq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL -o /usr/<span class="built_in">local</span>/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /ubuntu/<span class="variable">$&#123;OS_VERSION&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml packages.yaml</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> packages.yaml -j | jq -r <span class="string">'.common[],.apt[],.ubuntu[]'</span> | sort -u &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; dpkg --get-selections | grep -v deinstall | cut -f1 &gt;&gt; packages.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R _apt /ubuntu/<span class="variable">$OS_VERSION</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cat packages.list | xargs -L1 -I &#123;&#125; apt-cache depends --recurse --no-recommends --no-suggests \</span></span><br><span class="line"><span class="bash">    --no-conflicts --no-breaks --no-replaces --no-enhances &#123;&#125;  | grep <span class="string">'^\w'</span> | sort -u | xargs apt-get download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ../ &amp;&amp; dpkg-scanpackages <span class="variable">$OS_VERSION</span> | gzip -9c &gt; <span class="variable">$OS_VERSION</span>/Packages.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=centos7 /centos /centos</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=stretch /debian /debian</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=buster /debian /debian</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=bionic /ubuntu /ubuntu</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=focal /ubuntu /ubuntu</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>构建好了离线源之后，在部署的机器上运行一个 Nginx 服务，用于提供 HTTP 方式下载这些软件包，同时需要配置一下机器的包管理器 repo 配置文件。</p><ul><li>CentOS 7</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Inra-Mirror]</span><br><span class="line">name=Infra Mirror Repository</span><br><span class="line">baseurl=http://172.20.0.10/centos/7/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><ul><li>Debian 9 stretch</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb [trusted=yes] http://172.20.0.10:8080/debian stretch/</span><br></pre></td></tr></table></figure><ul><li>Debian 10 buster</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb [trusted&#x3D;yes] http:&#x2F;&#x2F;172.20.0.10:8080&#x2F;debian buster&#x2F;</span><br></pre></td></tr></table></figure><ul><li>Ubuntu 18.04 bionic</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb [trusted=yes] http://172.20.0.10:8080/ubuntu bionic/</span><br></pre></td></tr></table></figure><ul><li>Ubuntu 20.04 focal</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb [trusted&#x3D;yes] http:&#x2F;&#x2F;172.20.0.10:8080&#x2F;debian focal&#x2F;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>可以考虑将 Dockerfile 中的构建过程合并成一个 shell 脚本，然后在 Dockerfile 中调用这个脚本即可，这样可优化 Dockerfile 代码的可维护性，同时后续适配多种 OS 的时候也可以复用部分相同的代码，但这样可能会导致 docker build 缓存的失效问题。</p><p>当然也可以使用脚本将多个 Dockerfile 合并成一个，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Merge all Dockerfile.xx to an all-in-one file</span></span><br><span class="line">ls Dockerfile.* | xargs -L1 grep -Ev 'FROM scratch|COPY --from=' &gt; Dockerfile</span><br><span class="line">echo "FROM scratch" &gt;&gt; Dockerfile</span><br><span class="line">ls Dockerfile.* | xargs -L1 grep 'COPY --from=' &gt;&gt; Dockerfile</span><br></pre></td></tr></table></figure><h3 id="Package-version"><a href="#Package-version" class="headerlink" title="Package version"></a>Package version</h3><p>对于一些版本中包含 Linux 发行版本代号的包来讲，手动维护这个代号不太方便，可以考虑将它魔改成占位变量的方式，在构建容器内生成 package.list 文件后统一使用 sed 把这些占位的变量给替换一下，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt:</span><br><span class="line">  - docker-ce=5:19.03.15~3-0~__ID__-__VERSION_CODENAME__</span><br></pre></td></tr></table></figure><p>使用 sed 处理一下生成的 packages.list 中的这些占位符变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">"s|__ID__|<span class="variable">$(sed -n 's|^ID=||p' /etc/os-release)</span>|;s|__VERSION_CODENAME__|<span class="variable">$(sed -n 's|^VERSION_CODENAME=||p' /etc/os-release)</span>|"</span> packages.list</span><br></pre></td></tr></table></figure><p>虽然这样做很不美观，但这种方式确实可行 😂，最终能够的到正确的版本号。总之我们尽量地少维护一些包的版本，比如使用这种方式就可以将某个版本的 docker-ce 包放在配置文件的 apt 中，而不是 debian/ubuntu 中，通过一些环境变量或者 shell 脚本自动添加上这些特殊项，这样能减少一些维护成本。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.aptly.info/tutorial/mirror/" target="_blank" rel="noopener">aptly.info</a></li><li><a href="https://mozillazg.com/2018/01/jq-use-examples-cookbook.html" target="_blank" rel="noopener">jq 常用操作</a></li><li><a href="https://lyyao09.github.io/2019/08/02/tools/The-usage-of-yq-read-write/" target="_blank" rel="noopener">yq 之读写篇</a></li><li><a href="https://docs.docker.com/develop/develop-images/build_enhancements/" target="_blank" rel="noopener">Build images with BuildKit</a></li><li><a href="https://github.com/kubernetes-sigs/kubespray/pull/6766" target="_blank" rel="noopener">kubernetes-sigs/kubespray/pull/6766</a></li><li><a href="https://moelove.info/2021/03/14/万字长文彻底搞懂容器镜像构建/" target="_blank" rel="noopener">万字长文：彻底搞懂容器镜像构建</a></li><li><a href="https://www.xiaocoder.com/2017/09/12/offline-local-source/" target="_blank" rel="noopener">为 CentOS 与 Ubuntu 制作离线本地源</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;离线部署&quot;&gt;&lt;a href=&quot;#离线部署&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="centos" scheme="https://blog.k8s.li/tags/centos/"/>
    
      <category term="ubuntu" scheme="https://blog.k8s.li/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>kubespray 部署常见问题和优化汇总</title>
    <link href="https://blog.k8s.li/kubespray-tips.html"/>
    <id>https://blog.k8s.li/kubespray-tips.html</id>
    <published>2021-05-12T16:00:00.000Z</published>
    <updated>2021-05-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>kubespray v2.16 版本即将发布，整理一下自己在使用 kubespray 过程中遇到的问题和一些优化建议。</p><h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><p>在 kubespray 上游的 <a href="https://github.com/kubernetes-sigs/kubespray/pull/7561" target="_blank" rel="noopener">#7561</a>  PR 中实现了根据 kubespray 的源码生成需要的文件列表和镜像列表。只需要在 repo 的 <code>contrib/offline</code> 目录下执行 <code>bash generate_list.sh</code> 就可以生成一个 files.list 和一个 images.list  文件。然后就可以根据这个文件来下载依赖的文件和镜像。如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> contrib/offline</span><br><span class="line">$ bash generate_list.sh</span><br><span class="line">$ tree temp</span><br><span class="line">temp</span><br><span class="line">├── files.list</span><br><span class="line">├── generate.sh</span><br><span class="line">└── images.list</span><br></pre></td></tr></table></figure><ul><li>files.list 内容如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat temp/files.list</span><br><span class="line">https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz</span><br><span class="line">https://github.com/containerd/nerdctl/releases/download/v0.8.0/nerdctl-0.8.0-linux-amd64.tar.gz</span><br><span class="line">https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">https://github.com/containers/crun/releases/download/0.19/crun-0.19-linux-amd64</span><br><span class="line">https://github.com/coreos/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">https://github.com/kata-containers/runtime/releases/download/1.12.1/kata-static-1.12.1-x86_64.tar.xz</span><br><span class="line">https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.20.0/crictl-v1.20.0-linux-amd64.tar.gz</span><br><span class="line">https://github.com/kubernetes-sigs/krew/releases/download/v0.4.1/krew.tar.gz</span><br><span class="line">https://github.com/projectcalico/calico/archive/v3.17.4.tar.gz</span><br><span class="line">https://github.com/projectcalico/calicoctl/releases/download/v3.17.4/calicoctl-linux-amd64</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.20.6/bin/linux/amd64/kubeadm</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.20.6/bin/linux/amd64/kubectl</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.20.6/bin/linux/amd64/kubelet</span><br></pre></td></tr></table></figure><p>然后通过 wget 进行下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -x -P temp/files -i temp/files.list</span><br></pre></td></tr></table></figure><ul><li>下载后的文件如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> tree temp/files</span><br><span class="line">temp/files</span><br><span class="line">├── get.helm.sh</span><br><span class="line">│   └── helm-v3.5.4-linux-amd64.tar.gz</span><br><span class="line">├── github.com</span><br><span class="line">│   ├── containerd</span><br><span class="line">│   │   └── nerdctl</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.8.0</span><br><span class="line">│   │                   └── nerdctl-0.8.0-linux-amd64.tar.gz</span><br><span class="line">│   ├── containernetworking</span><br><span class="line">│   │   └── plugins</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.9.1</span><br><span class="line">│   │                   └── cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">│   ├── containers</span><br><span class="line">│   │   └── crun</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── 0.19</span><br><span class="line">│   │                   └── crun-0.19-linux-amd64</span><br><span class="line">│   ├── coreos</span><br><span class="line">│   │   └── etcd</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v3.4.13</span><br><span class="line">│   │                   └── etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">│   ├── kata-containers</span><br><span class="line">│   │   └── runtime</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── 1.12.1</span><br><span class="line">│   │                   └── kata-static-1.12.1-x86_64.tar.xz</span><br><span class="line">│   ├── kubernetes-sigs</span><br><span class="line">│   │   ├── cri-tools</span><br><span class="line">│   │   │   └── releases</span><br><span class="line">│   │   │       └── download</span><br><span class="line">│   │   │           └── v1.20.0</span><br><span class="line">│   │   │               └── crictl-v1.20.0-linux-amd64.tar.gz</span><br><span class="line">│   │   └── krew</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.4.1</span><br><span class="line">│   │                   └── krew.tar.gz</span><br><span class="line">│   └── projectcalico</span><br><span class="line">│       ├── calico</span><br><span class="line">│       │   └── archive</span><br><span class="line">│       │       └── v3.17.4.tar.gz</span><br><span class="line">│       └── calicoctl</span><br><span class="line">│           └── releases</span><br><span class="line">│               └── download</span><br><span class="line">│                   └── v3.17.4</span><br><span class="line">│                       └── calicoctl-linux-amd64</span><br><span class="line">└── storage.googleapis.com</span><br><span class="line">    └── kubernetes-release</span><br><span class="line">        └── release</span><br><span class="line">            └── v1.20.6</span><br><span class="line">                └── bin</span><br><span class="line">                    └── linux</span><br><span class="line">                        └── amd64</span><br><span class="line">                            ├── kubeadm</span><br><span class="line">                            ├── kubectl</span><br><span class="line">                            └── kubelet</span><br></pre></td></tr></table></figure><p>保持这个目录结构不变，把它们上传到自己的文件服务器上，然后再修改这个文件的下载参数，只需要在前面加上文件服务器的 URL 即可，比如我的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Download URLs</span></span><br><span class="line"><span class="attr">download_url:</span> <span class="string">"https://dl.k8s.li"</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kubeadm_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubeadm"</span></span><br><span class="line"><span class="attr">etcd_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/coreos/etcd/releases/download/<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>/etcd-<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">cni_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containernetworking/plugins/releases/download/<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>/cni-plugins-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>-<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>.tgz"</span></span><br><span class="line"><span class="attr">calicoctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calicoctl/releases/download/<span class="template-variable">&#123;&#123; calico_ctl_version &#125;&#125;</span>/calicoctl-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_crds_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calico/archive/<span class="template-variable">&#123;&#123; calico_version &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crictl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kubernetes-sigs/cri-tools/releases/download/<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>/crictl-<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">helm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/get.helm.sh/helm-<span class="template-variable">&#123;&#123; helm_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crun_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containers/crun/releases/download/<span class="template-variable">&#123;&#123; crun_version &#125;&#125;</span>/crun-<span class="template-variable">&#123;&#123; crun_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kata_containers_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kata-containers/runtime/releases/download/<span class="template-variable">&#123;&#123; kata_containers_version &#125;&#125;</span>/kata-static-<span class="template-variable">&#123;&#123; kata_containers_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_architecture &#125;&#125;</span>.tar.xz"</span></span><br><span class="line"><span class="attr">nerdctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containerd/nerdctl/releases/download/v<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>/nerdctl-<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br></pre></td></tr></table></figure><ul><li>images.list 是 kubespray 所有可能会用到的镜像，如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat temp/images.list</span></span><br><span class="line">docker.io/amazon/aws-alb-ingress-controller:v1.1.9</span><br><span class="line">docker.io/amazon/aws-ebs-csi-driver:v0.5.0</span><br><span class="line">docker.io/cloudnativelabs/kube-router:v1.2.2</span><br><span class="line">docker.io/integratedcloudnative/ovn4nfv-k8s-plugin:v1.1.0</span><br><span class="line">docker.io/k8scloudprovider/cinder-csi-plugin:v1.20.0</span><br><span class="line">docker.io/kubeovn/kube-ovn:v1.6.2</span><br><span class="line">docker.io/kubernetesui/dashboard-amd64:v2.2.0</span><br><span class="line">docker.io/kubernetesui/metrics-scraper:v1.0.6</span><br><span class="line">docker.io/library/haproxy:2.3</span><br><span class="line">docker.io/library/nginx:1.19</span><br><span class="line">docker.io/library/registry:2.7.1</span><br><span class="line">docker.io/nfvpe/multus:v3.7</span><br><span class="line">docker.io/rancher/<span class="built_in">local</span>-path-provisioner:v0.0.19</span><br><span class="line">docker.io/weaveworks/weave-kube:2.8.1</span><br><span class="line">docker.io/weaveworks/weave-npc:2.8.1</span><br><span class="line">docker.io/xueshanf/install-socat:latest</span><br><span class="line">k8s.gcr.io/addon-resizer:1.8.11</span><br><span class="line">k8s.gcr.io/coredns:1.7.0</span><br><span class="line">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64:1.8.3</span><br><span class="line">k8s.gcr.io/dns/k8s-dns-node-cache:1.17.1</span><br><span class="line">k8s.gcr.io/ingress-nginx/controller:v0.43.0</span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-registry-proxy:0.4</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.20.6</span><br><span class="line">k8s.gcr.io/metrics-server/metrics-server:v0.4.2</span><br><span class="line">k8s.gcr.io/pause:3.3</span><br><span class="line">quay.io/calico/cni:v3.17.4</span><br><span class="line">quay.io/calico/kube-controllers:v3.17.4</span><br><span class="line">quay.io/calico/node:v3.17.4</span><br><span class="line">quay.io/calico/typha:v3.17.4</span><br><span class="line">quay.io/cilium/cilium-init:2019-04-05</span><br><span class="line">quay.io/cilium/cilium:v1.8.9</span><br><span class="line">quay.io/cilium/operator:v1.8.9</span><br><span class="line">quay.io/coreos/etcd:v3.4.13</span><br><span class="line">quay.io/coreos/flannel:v0.13.0-amd64</span><br><span class="line">quay.io/datawire/ambassador-operator:v1.2.9</span><br><span class="line">quay.io/external_storage/cephfs-provisioner:v2.1.0-k8s1.11</span><br><span class="line">quay.io/external_storage/<span class="built_in">local</span>-volume-provisioner:v2.3.4</span><br><span class="line">quay.io/external_storage/rbd-provisioner:v2.1.1-k8s1.11</span><br><span class="line">quay.io/jetstack/cert-manager-cainjector:v1.0.4</span><br><span class="line">quay.io/jetstack/cert-manager-controller:v1.0.4</span><br><span class="line">quay.io/jetstack/cert-manager-webhook:v1.0.4</span><br><span class="line">quay.io/k8scsi/csi-attacher:v2.2.0</span><br><span class="line">quay.io/k8scsi/csi-node-driver-registrar:v1.3.0</span><br><span class="line">quay.io/k8scsi/csi-provisioner:v1.6.0</span><br><span class="line">quay.io/k8scsi/csi-resizer:v0.5.0</span><br><span class="line">quay.io/k8scsi/csi-snapshotter:v2.1.1</span><br><span class="line">quay.io/k8scsi/snapshot-controller:v2.0.1</span><br><span class="line">quay.io/l23network/k8s-netchecker-agent:v1.0</span><br><span class="line">quay.io/l23network/k8s-netchecker-server:v1.0</span><br></pre></td></tr></table></figure><p>可使用 skopeo 将镜像同步到自己的 registry 中，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> $(cat temp/images.list); <span class="keyword">do</span> skopeo copy docker://<span class="variable">$&#123;image&#125;</span> docker://hub.k8s.li/<span class="variable">$&#123;image#*/&#125;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p>当时写这个脚本的时候一堆蛇皮 sed 替换操作写得想 🤮，比如有些变量会有 ansible 的 if else 判断，这就意味着也要用 shell 去实现它的判断逻辑。比如使用 shell 处理的时候需要将这下面坨转换成 shell 的 if else，而且还不能换行：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">coredns_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span><span class="template-variable">&#123;&#123;'/coredns/coredns' if (coredns_image_is_namespaced | bool) else '/coredns' &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">coredns_image_tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; coredns_version if (coredns_image_is_namespaced | bool) else (coredns_version | regex_replace('^v', '')) &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># special handling for https://github.com/kubernetes-sigs/kubespray/pull/7570</span></span><br><span class="line">sed -i <span class="string">'s#^coredns_image_repo=.*#coredns_image_repo=$&#123;kube_image_repo&#125;$(if printf "%s\\n%s\\n" v1.21 $&#123;kube_version%.*&#125; | sort --check=quiet --version-sort; then echo -n /coredns/coredns;else echo -n /coredns; fi)#'</span> <span class="variable">$&#123;TEMP_DIR&#125;</span>/generate.sh</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">'s#^coredns_image_tag=.*#coredns_image_tag=$(if printf "%s\\n%s\\n" v1.21 $&#123;kube_version%.*&#125; | sort --check=quiet --version-sort; then echo -n $&#123;coredns_version&#125;;else echo -n $&#123;coredns_version/v/&#125;; fi)#'</span> <span class="variable">$&#123;TEMP_DIR&#125;</span>/generate.sh</span><br></pre></td></tr></table></figure><p>当时还学会了一手，在 shell 中使用 <code>printf &quot;%s\\n%s\\n&quot; $v1 $v2 | sort --check=quiet --version-sort</code> 这种方式可以判断两个版本号的大小，而且是最简单便捷的。</p><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p>之前提到的是根据镜像列表将需要的镜像同步到自己的 registry 中，但对于本地开发测试来讲，这种手动导入比较费事费力。在看了大佬写的 <a href="https://fuckcloudnative.io/posts/docker-registry-proxy/" target="_blank" rel="noopener">Docker 镜像加速教程</a> 和 <a href="https://www.chenshaowen.com/blog/how-to-run-a-private-registry-mirror.html" target="_blank" rel="noopener">如何搭建一个私有的镜像仓库 mirror</a>  就想到了可以使用 docker registry 的 proxy 特性来部署几个 kubespray 需要的镜像仓库。如下</p><table><thead><tr><th>origin</th><th>mirror</th></tr></thead><tbody><tr><td>docker.io</td><td>hub.k8s.li</td></tr><tr><td>k8s.gcr.io</td><td>gcr.k8s.li</td></tr><tr><td>quay.io</td><td>quay.k8s.li</td></tr></tbody></table><ul><li>config.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">accesskeyid:</span> <span class="string">xxxx</span> <span class="comment"># 这里配置阿里云 OSS 的 accesskeyid</span></span><br><span class="line">    <span class="attr">accesskeysecret:</span> <span class="string">xxxx</span> <span class="comment"># 这里配置阿里云 OSS 的 accesskeysecret</span></span><br><span class="line">    <span class="attr">region:</span> <span class="string">oss-cn-beijing</span> <span class="comment"># 配置 OSS bucket 的区域，比如 oss-cn-beijing</span></span><br><span class="line">    <span class="attr">internal:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">fileserver</span> <span class="comment"># 配置存储 bucket 的名称</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/kubespray/registry</span> <span class="comment"># 配置路径</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>docker-compose.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gcr-registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gcr-registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yml:/etc/docker/registry/config.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5001:5001</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_HTTP_ADDR=0.0.0.0:5001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_PROXY_REMOTEURL=https://k8s.gcr.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hub-registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hub-registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yml:/etc/docker/registry/config.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5002:5002</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_HTTP_ADDR=0.0.0.0:5002</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_PROXY_REMOTEURL=https://docker.io</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">quay-registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">quay-registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yml:/etc/docker/registry/config.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5003:5003</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_HTTP_ADDR=0.0.0.0:5003</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_PROXY_REMOTEURL=https://quay.io</span></span><br></pre></td></tr></table></figure><ul><li>nginx.conf</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  gcr.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> domain.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> domain.key;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100000m</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET|HEAD)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:5001;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  hub.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> domain.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> domain.key;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100000m</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET|HEAD)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:5002;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  quay.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> domain.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> domain.key;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">100000m</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET|HEAD)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:5003;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关配置文件在 <a href="https://github.com/muzi502/registry-mirrors" target="_blank" rel="noopener">registry-mirrors</a> 这个 repo 中。</p><h2 id="优化-kubespray-镜像大小"><a href="#优化-kubespray-镜像大小" class="headerlink" title="优化 kubespray 镜像大小"></a>优化 kubespray 镜像大小</h2><p>kubespray v1.25.1 版本官方构建的镜像大小为 <code>1.41GB</code>，对于一些场景下希望镜像小一些，可以通过如下方法构建一个体积较小的镜像。</p><ul><li>首先构建一个 base 镜像，对于不经常变动的我们把它封装在一个 base 镜像里，只有当相关依赖更新了才需要重新构建这个 base 镜像，<code>Dockerfile.base</code> 如下：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span>-slim</span><br><span class="line"><span class="keyword">ENV</span> KUBE_VERSION v1.<span class="number">20.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update -y \</span></span><br><span class="line"><span class="bash"> &amp;&amp; apt install -y \</span></span><br><span class="line"><span class="bash"> libssl-dev sshpass apt-transport-https jq moreutils vim moreutils iputils-ping \</span></span><br><span class="line"><span class="bash"> ca-certificates curl gnupg2 software-properties-common rsync wget tcpdump \</span></span><br><span class="line"><span class="bash"> &amp;&amp; rm -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="bash"> &amp;&amp; wget -q https://dl.k8s.io/<span class="variable">$KUBE_VERSION</span>/bin/linux/amd64/kubectl -O /usr/<span class="built_in">local</span>/bin/kubectl \</span></span><br><span class="line"><span class="bash"> &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/kubectl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /kubespray</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> python3 -m pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><p>构建 kubespray 镜像：FROM 的 base 镜像就使用我们刚刚构建好的镜像，对于 kubespray 来讲，相关依赖已经在 base 镜像中安装好了，这里构建的时候只需要把 repo 复制到 /kubespray 目录下即可，如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> kubespray:v2.<span class="number">16.0</span>-base-kube-v1.<span class="number">20.6</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /kubespray</span></span><br></pre></td></tr></table></figure><p>这样构建出来的镜像大小不到 600MB，比之前小了很多，而且每次构建镜像的时候也比较快。只不过当 <code>requirements.txt</code>  文件更新后需要重新构建 base 镜像，并修改 kubespray 的 FROM 镜像为新的 base 镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubespray     v2.15.1                  73294562105a    1.41GB</span><br><span class="line">kubespray     v2.16-kube-v1.20.6-1.0   80b735995e48    579MB</span><br></pre></td></tr></table></figure><ul><li>kubespray 默认没有加如 <code>.dockerignore</code>，这就意味着构建镜像的时候会把当前目录下的所有内容复制到镜像里，会导致镜像工作目录下可能很混乱，在容器里 debug 的时候不太美观，强迫症患者可以在 repo 中加入如下的 <code>.dockerignore</code> 文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.ansible-lint</span><br><span class="line">.editorconfig</span><br><span class="line">.git</span><br><span class="line">.github</span><br><span class="line">.gitignore</span><br><span class="line">.gitlab-ci</span><br><span class="line">.gitlab-ci.yml</span><br><span class="line">.gitmodules</span><br><span class="line">.markdownlint.yaml</span><br><span class="line">.nojekyll</span><br><span class="line">CNAME</span><br><span class="line">CONTRIBUTING.md</span><br><span class="line">Dockerfile</span><br><span class="line">Makefile</span><br><span class="line">OWNERS</span><br><span class="line">README.md</span><br><span class="line">RELEASE.md</span><br><span class="line">SECURITY_CONTACTS</span><br><span class="line">build</span><br><span class="line">code-of-conduct.md</span><br><span class="line">docs</span><br><span class="line">index.html</span><br><span class="line">logo</span><br></pre></td></tr></table></figure><h2 id="docker-registry-禁止-push-镜像"><a href="#docker-registry-禁止-push-镜像" class="headerlink" title="docker registry 禁止 push 镜像"></a>docker registry 禁止 push 镜像</h2><p>默认直接使用 docker registry 来部署镜像仓库的话，比如我的 hub.k8s.li ，因为没有权限限制会导致任何可访问该镜像仓库的客户端可以 push 镜像，这有点不安全，需要安全加固一下。因为 pull 镜像的时候客户端走的都是 HTTP GET 请求，可以通过 nginx 禁止 POST、PUT 这种请求方法，这样就可以禁止 push 镜像。在 nginx 的server 字段中添加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在 push 镜像的时候会返回 403 的错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root # docker pull hub.k8s.li/calico/node:v3.17.3</span><br><span class="line">v3.17.3: Pulling from calico/node</span><br><span class="line">282bf12aa8be: Pull complete</span><br><span class="line">4ac1bb9354ad: Pull complete</span><br><span class="line">Digest: sha256:3595a9a945a7ba346a12ee523fc7ae15ed35f1e6282b76bce7fec474d28d68bb</span><br><span class="line">Status: Downloaded newer image for hub.k8s.li/calico/node:v3.17.3</span><br><span class="line">root@debian:/root # docker push !$</span><br><span class="line">root@debian:/root # docker push hub.k8s.li/calico/node:v3.17.3</span><br><span class="line">The push refers to repository [hub.k8s.li/calico/node]</span><br><span class="line">bc19ae092bb4: Preparing</span><br><span class="line">94333d52d45d: Preparing</span><br><span class="line">error parsing HTTP 403 response body: invalid character '&lt;' looking for beginning of value: "&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;\r\n&lt;body bgcolor=\"white\"&gt;\r\n&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;\r\n&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n"</span><br></pre></td></tr></table></figure><p>那么需要 push 镜像的时候怎么办？</p><p>docker registry 启动的时候 bind 在 127.0.0.1 上，而不是 0.0.0.0，通过 localhost:5000 来 push 镜像。</p><h2 id="镜像仓库自签证书"><a href="#镜像仓库自签证书" class="headerlink" title="镜像仓库自签证书"></a>镜像仓库自签证书</h2><p>如果镜像仓库使用的是自签证书，可以跑下面这个 playbook 将自签证书添加到所有节点的 trusted CA dir 中，这样无需配置 <code>insecure-registries</code> 也能拉取镜像。</p><p><code>add-registry-ca.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">target</span> <span class="string">ca-certificate</span> <span class="string">store</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">set_fact:</span></span><br><span class="line">        <span class="attr">ca_cert_path:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">&#123;%</span> <span class="string">if</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"Debian"</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/usr/local/share/ca-certificates/registry-ca.crt</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">elif</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"RedHat"</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/etc/pki/ca-trust/source/anchors/registry-ca.crt</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">elif</span> <span class="string">ansible_os_family</span> <span class="string">in</span> <span class="string">["Flatcar</span> <span class="string">Container</span> <span class="string">Linux</span> <span class="string">by</span> <span class="string">Kinvolk"]</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/etc/ssl/certs/registry-ca.pem</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">elif</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"Suse"</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/etc/pki/trust/anchors/registry-ca.pem</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">elif</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"ClearLinux"</span> <span class="string">-%&#125;</span></span><br><span class="line">          <span class="string">/usr/share/ca-certs/registry-ca.pem</span></span><br><span class="line">          <span class="string">&#123;%-</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">facts</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">add</span> <span class="string">CA</span> <span class="string">to</span> <span class="string">trusted</span> <span class="string">CA</span> <span class="string">dir</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_cert_path &#125;&#125;</span>"</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">"<span class="template-variable">&#123;&#123; ca_cert_path &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">registry_ca_cert</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">update</span> <span class="string">ca-certificates</span> <span class="string">(Debian/Ubuntu/SUSE/Flatcar)</span>  <span class="comment"># noqa 503</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">update-ca-certificates</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">registry_ca_cert.changed</span> <span class="string">and</span> <span class="string">ansible_os_family</span> <span class="string">in</span> <span class="string">["Debian",</span> <span class="string">"Flatcar Container Linux by Kinvolk"</span><span class="string">,</span> <span class="string">"Suse"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">update</span> <span class="string">ca-certificates</span> <span class="string">(RedHat)</span>  <span class="comment"># noqa 503</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">update-ca-trust</span> <span class="string">extract</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">registry_ca_cert.changed</span> <span class="string">and</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"RedHat"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gen_certs</span> <span class="string">|</span> <span class="string">update</span> <span class="string">ca-certificates</span> <span class="string">(ClearLinux)</span>  <span class="comment"># noqa 503</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">clrtrust</span> <span class="string">add</span> <span class="string">"<span class="template-variable">&#123;&#123; ca_cert_path &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">registry_ca_cert.changed</span> <span class="string">and</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"ClearLinux"</span></span><br></pre></td></tr></table></figure><ul><li>将自签的 registry 证书放到本地，执行 playbook 并指定 <code>registry_cert_path</code> 为正确的路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/kubespray# ansible-playbook -i deploy/inventory -e registry_cert_path=/kubespray/registry_ca.pem add-registry-ca.yml</span><br><span class="line"></span><br><span class="line">PLAY [all] **********************************************************************************</span><br><span class="line">Thursday 29 April 2021  08:18:25 +0000 (0:00:00.077)       0:00:00.077 ********</span><br><span class="line"></span><br><span class="line">TASK [Gen_certs | target ca-certificate store file] *****************************************</span><br><span class="line">ok: [kube-control-2]</span><br><span class="line">ok: [kube-control-3]</span><br><span class="line">ok: [kube-control-1]</span><br><span class="line">ok: [kube-node-1]</span><br><span class="line">Thursday 29 April 2021  08:18:25 +0000 (0:00:00.389)       0:00:00.467 ********</span><br><span class="line"></span><br><span class="line">TASK [Gen_certs | add CA to trusted CA dir] *************************************************</span><br><span class="line">changed: [kube-control-2]</span><br><span class="line">changed: [kube-control-3]</span><br><span class="line">changed: [kube-control-1]</span><br><span class="line">changed: [kube-node-1]</span><br><span class="line">Thursday 29 April 2021  08:18:29 +0000 (0:00:04.433)       0:00:04.901 ********</span><br><span class="line">Thursday 29 April 2021  08:18:30 +0000 (0:00:00.358)       0:00:05.259 ********</span><br><span class="line"></span><br><span class="line">TASK [Gen_certs | update ca-certificates (RedHat)] ******************************************</span><br><span class="line">changed: [kube-control-1]</span><br><span class="line">changed: [kube-control-3]</span><br><span class="line">changed: [kube-control-2]</span><br><span class="line">changed: [kube-node-1]</span><br><span class="line">Thursday 29 April 2021  08:18:33 +0000 (0:00:02.938)       0:00:08.197 ********</span><br><span class="line"></span><br><span class="line">PLAY RECAP **********************************************************************************</span><br><span class="line">kube-control-1             : ok=3    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0</span><br><span class="line">kube-control-2             : ok=3    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0</span><br><span class="line">kube-control-3             : ok=3    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0</span><br><span class="line">kube-node-1                : ok=3    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0</span><br><span class="line"></span><br><span class="line">Thursday 29 April 2021  08:18:33 +0000 (0:00:00.355)  0:00:08.553 ********</span><br><span class="line">================================================================</span><br><span class="line">Gen_certs | add CA to trusted CA dir ------------------------------------------------------------- 4.43s</span><br><span class="line">Gen_certs | update ca-certificates (RedHat) ------------------------------------------------------------- 2.94s</span><br><span class="line">Gen_certs | target ca-certificate store file ------------------------------------------------------------- 0.39s</span><br><span class="line">Gen_certs | update ca-certificates (Debian/Ubuntu/SUSE/Flatcar) ------------------------------------------------------------- 0.36s</span><br><span class="line">Gen_certs | update ca-certificates (ClearLinux) -------------------------------------------------------------- 0.36s</span><br></pre></td></tr></table></figure><h2 id="containerd-无法加载-CNI-配置导致节点-NotReady"><a href="#containerd-无法加载-CNI-配置导致节点-NotReady" class="headerlink" title="containerd 无法加载 CNI 配置导致节点 NotReady"></a>containerd 无法加载 CNI 配置导致节点 NotReady</h2><p>偶现问题，重启一下 containerd 就可以了，具体原因还没排查出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/kubespray<span class="comment"># ansible all -i deploy/inventory -m service -a "name=containerd state=restarted"</span></span><br></pre></td></tr></table></figure><h2 id="优化部署速度"><a href="#优化部署速度" class="headerlink" title="优化部署速度"></a>优化部署速度</h2><p>Kubespray 部署的时候有个 task 专门用来下载部署需要的镜像，由于是操作的所有节点，会将一些不需要的镜像拉取到该节点上。比如 kube-apiserver、kube-controller-manager、kube-scheduler 这些在 node 节点上不会用到的镜像也会在 node 节点上拉取，这样会导致 download 的 task 比较耗时。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">TASK [download : set_container_facts | Display the name of the image being processed] ********************************************************************************************</span><br><span class="line">ok: [kube-control-3] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-controller-manager"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-control-2] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-controller-manager"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-control-1] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-controller-manager"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-node-1] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-controller-manager"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ok: [kube-control-3] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-scheduler"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-control-2] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-scheduler"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-control-1] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-scheduler"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [kube-node-1] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"gcr.k8s.li/kube-scheduler"</span></span><br></pre></td></tr></table></figure><p>可用通过 <code>download_container: false</code> 这个参数来禁用 download container 这个 task，这样在 pod 启动的时候只拉取需要的镜像，可以节省一些部署耗时。</p><h2 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h2><p>Kubespray 官方支持的插件列表如下，默认是 false 禁用了插件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Kubernetes dashboard</span></span><br><span class="line"><span class="comment"># RBAC required. see docs/getting-started.md for access details.</span></span><br><span class="line"><span class="attr">dashboard_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Addons which can be enabled</span></span><br><span class="line"><span class="attr">helm_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">krew_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">registry_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">metrics_server_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">enable_network_policy:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">local_path_provisioner_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">local_volume_provisioner_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">local_volume_provisioner_directory_mode:</span> <span class="number">0700</span></span><br><span class="line"><span class="attr">cinder_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">aws_ebs_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">azure_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">gcp_pd_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">vsphere_csi_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">persistent_volumes_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cephfs_provisioner_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">rbd_provisioner_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">ingress_nginx_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">ingress_ambassador_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">ingress_alb_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cert_manager_enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">expand_persistent_volumes:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">metallb_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># containerd official CLI tool</span></span><br><span class="line"><span class="attr">nerdctl_enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在部署的时候如果想启动某些插件可以在自己本地对应的 inventory 目录下的 <code>group_vars/k8s_cluster/addons.yml</code> 文件中选择开启相应的插件，比如 <code>inventory/sample/group_vars/k8s_cluster/addons.yml</code>。</p><h2 id="分层部署"><a href="#分层部署" class="headerlink" title="分层部署"></a>分层部署</h2><p>这个是我们对 kubespray 二开的一个优化项。kubespray 在部署集群的时候运行的 playbook 是 <code>cluster.yml</code>，在集群部署的过程中可能会因为你一些不稳定因素导致集群部署失败，失败后再次尝试部署的话，kubespray 会从头开始再跑一遍已经成功运行的 task，这样的效率会比较低。因此需要使用某种方法记录一下已经成功执行的 task 或 roles，失败后重新部署的时候就跳过这些已经成功运行的 task，然后从上次失败的地方开始运行。</p><p>大体的思路是根据 <code>cluster.yml</code> 中的 roles 拆分为不同的层即 layer，如 bootstrap-os、download、kubernetes、network、apps ，在部署的过程中每运行完一个 layer 就将它记录在一个文件中，部署的时候会根据这个文件来判断是否需要部署，如果文件中记录存在的话就说明已经成功部署完成了，就跳过它，继续执行未执行的 layer。</p><p>至于拆分的方式大概有两种，一种是根据 tag 、一种是将 <code>cluster.yml</code> 文件拆分成若干个 playbook 文件。通过 tag 的方式可能会比较复杂一些，在这里还是选择拆分的方式。拆分的粒度有大有小，以下是我认为比较合理的拆封方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">playbooks</span><br><span class="line">├── 00-default-ssh-config.yml <span class="comment"># 默认需要运行的 playbook，用于配置堡垒机和配置 ssh 认证</span></span><br><span class="line">├── 01-cluster-bootstrap-os.yml <span class="comment"># 初始化集群节点 OS，安装容器运行时，下载部署依赖的文件</span></span><br><span class="line">├── 02-cluster-etcd.yml <span class="comment"># 部署 etcd 集群</span></span><br><span class="line">├── 03-cluster-kubernetes.yml <span class="comment"># 部署 kubernetes 集群</span></span><br><span class="line">├── 04-cluster-network.yml <span class="comment"># 部署网络插件</span></span><br><span class="line">├── 05-cluster-apps.yml <span class="comment"># 部署一些 addons 组件，如 coredns 等</span></span><br><span class="line">├── 06-cluster-self-host.yml <span class="comment"># 平台 self-host 自托管的部分</span></span><br><span class="line">└── 11-reset-reset.yml <span class="comment"># 移除集群</span></span><br></pre></td></tr></table></figure><ul><li>00-default-ssh-config.yml</li></ul><p>该 playbook 用于配置堡垒机和 ssh 认证，kubespray 需要使用  public key 的方式 ssh 连接到部署节点，如果部署节点没有配置 ssh public key 的方式，可以指定 <code>ssh_cert_path</code> 这个变量的路径，将公钥添加到主机的 authorized_key 中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">bastion[0]</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">bastion-ssh-config,</span> <span class="attr">tags:</span> <span class="string">["localhost",</span> <span class="string">"bastion"</span><span class="string">]</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster:etcd</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setting</span> <span class="string">up</span> <span class="string">ssh</span> <span class="string">public</span> <span class="string">key</span> <span class="string">authentication</span></span><br><span class="line">      <span class="attr">authorized_key:</span> <span class="string">"user=<span class="template-variable">&#123;&#123; ansible_user &#125;&#125;</span> key=<span class="template-variable">&#123;&#123; lookup('file', '&#123;&#123; ssh_cert_path &#125;&#125;</span>') &#125;&#125;"</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ssh_cert_path</span> <span class="string">is</span> <span class="string">defined</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">ssh-config</span></span><br></pre></td></tr></table></figure><ul><li>01-cluster-bootstrap-os.yml</li></ul><p>这个 playbook 用于初始化部署节点 OS、安装一些依赖的 rpm/deb 包、安装容器运行时、下载二进制文件等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster:etcd</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">linear</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">bootstrap-os,</span> <span class="attr">tags:</span> <span class="string">bootstrap-os&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster:etcd</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/preinstall,</span> <span class="attr">tags:</span> <span class="string">preinstall</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">"container-engine"</span><span class="string">,</span> <span class="attr">tags:</span> <span class="string">"container-engine"</span><span class="string">,</span> <span class="attr">when:</span> <span class="string">deploy_container_engine|default(true)</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">download,</span> <span class="attr">tags:</span> <span class="string">download,</span> <span class="attr">when:</span> <span class="string">"not skip_downloads"</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>02-cluster-etcd.yml</li></ul><p>这个主要是部署 etcd 集群和分发 etcd 集群的证书到集群节点。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">etcd</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">etcd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">etcd</span></span><br><span class="line">      <span class="attr">vars:</span></span><br><span class="line">        <span class="attr">etcd_cluster_setup:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">etcd_events_cluster_setup:</span> <span class="string">"<span class="template-variable">&#123;&#123; etcd_events_cluster_enabled &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">not</span> <span class="string">etcd_kubeadm_enabled|</span> <span class="string">default(false)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">etcd</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">etcd</span></span><br><span class="line">      <span class="attr">vars:</span></span><br><span class="line">        <span class="attr">etcd_cluster_setup:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">etcd_events_cluster_setup:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">not</span> <span class="string">etcd_kubeadm_enabled|</span> <span class="string">default(false)</span></span><br></pre></td></tr></table></figure><ul><li>03-cluster-kubernetes.yml</li></ul><p>这个主要是部署 kubernetes 集群，虽然这里的 roles 很多，但并没有做过多的拆分，个人还是觉着这部分可以作为一个整体。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/node,</span> <span class="attr">tags:</span> <span class="string">node</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/control-plane,</span> <span class="attr">tags:</span> <span class="string">master</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/client,</span> <span class="attr">tags:</span> <span class="string">client</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/cluster_roles,</span> <span class="attr">tags:</span> <span class="string">cluster-roles</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/kubeadm,</span> <span class="attr">tags:</span> <span class="string">kubeadm&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes/node-label,</span> <span class="attr">tags:</span> <span class="string">node-label</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>04-cluster-network.yml</li></ul><p>这个主要是部署网络插件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">k8s_cluster</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">network_plugin,</span> <span class="attr">tags:</span> <span class="string">network</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/network_plugin,</span> <span class="attr">tags:</span> <span class="string">network</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/policy_controller,</span> <span class="attr">tags:</span> <span class="string">policy-controller</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>05-cluster-apps.yml</li></ul><p>这个主要是部署一些 addons 插件，必须 coredns, ingress-controller，以及一些外置的 provisioner 等。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Gather</span> <span class="string">facts</span></span><br><span class="line">  <span class="attr">import_playbook:</span> <span class="string">../facts.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/external_cloud_controller,</span> <span class="attr">tags:</span> <span class="string">external-cloud-controller</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/ingress_controller,</span> <span class="attr">tags:</span> <span class="string">ingress-controller</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps/external_provisioner,</span> <span class="attr">tags:</span> <span class="string">external-provisioner</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubernetes-apps,</span> <span class="attr">tags:</span> <span class="string">apps</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>拆分的时候可以根据自己的实际情况去除一些不必要的 roles，比如 <code>calico_rr</code> , <code>win_nodes</code> ，我们的产品本身就不支持 calico 路由反射器、也不支持 windows 节点，因此直接将这两部分给去除了，这样也能避免去执行这些 task 的判断，能节省一定的时间。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">calico_rr</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">network_plugin/calico/rr,</span> <span class="attr">tags:</span> <span class="string">['network',</span> <span class="string">'calico_rr'</span><span class="string">]</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">kube_control_plane[0]</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line">  <span class="attr">any_errors_fatal:</span> <span class="string">"<span class="template-variable">&#123;&#123; any_errors_fatal | default(true) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">"<span class="template-variable">&#123;&#123; proxy_disable_env &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">kubespray-defaults</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">role:</span> <span class="string">win_nodes/kubernetes_patch,</span> <span class="attr">tags:</span> <span class="string">["master",</span> <span class="string">"win_nodes"</span><span class="string">]</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;kubespray v2.16
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="kubespray" scheme="https://blog.k8s.li/tags/kubespray/"/>
    
  </entry>
  
  <entry>
    <title>使用 Kubespray 本地开发测试部署 kubernetes 集群</title>
    <link href="https://blog.k8s.li/deploy-k8s-by-kubespray.html"/>
    <id>https://blog.k8s.li/deploy-k8s-by-kubespray.html</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2021-04-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司 PaaS 平台底层的 kubernetes 集群部署采用的开源的 kubespray，正好我在参与 kubespray 二开工作。在这段时主要完成了 kubespray 自动化打包发布流水线、私有化部署、增加自研 CNI 部署、以及一些 bugfix 等。最近抽空整理并总结一下使用 kubespray 在本地开发测试部署 kubernetes 集群踩的一些坑。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>劝退三连😂：</p><ul><li>需要一个部署镜像仓库和 nginx</li><li>需要一个域名，最好已经设置好 DNS 解析和 SSL 证书</li><li>集群节点需要至少两台机器，并且可以访问外网</li></ul><p>虽然手头里有一大批开发机器，但由于我的域名 <code>k8s.li</code> 比较特殊，国内很难进行备案（也不想备案），所以无法将 DNS 解析到这些国内的服务器上。因此我打算将域名解析到一台国外的服务器上，然后再使用 nginx rewrite 重写将请求转发到阿里云的 OSS ；另外 docker registry 的后端存储也可以选择使用阿里云 OSS，这样客户端在拉取镜像的时候，只会通过我的域名获取镜像的 manifest 文件，镜像的 blobs 数据将会转发到阿里云 OSS。在集群部署的时候，下载文件和镜像最主要的流量都会通过阿里云 OSS，这样可以节省集群部署耗时，提高部署效率，同时又能剩下一笔服务器的流量费用。</p><h3 id="域名-SSL-证书制作"><a href="#域名-SSL-证书制作" class="headerlink" title="域名 SSL 证书制作"></a>域名 SSL 证书制作</h3><p>域名 SSL 证书主要是给镜像仓库使用的，假如证书是自签的或者镜像仓库使用的是 HTTP 协议，这样会导致 docker 或者 containerd 无法拉取镜像，需要为集群所有节点配置 <code>insecure-registries</code>  这个参数。搞起来比较麻烦，因此还是推荐给镜像仓库加一个非自签的 SSL 证书，这样能减少一些不必要的麻烦。如果有现成的镜像仓库并且配置好了 SSL 证书，可以略过此步。</p><p>制作域名证书的方式有很多种，个人比较推荐使用 acme.sh 。它实现了 acme 协议支持的所有验证协议，并且支持支持数十种域名解析商。由于我的域名是托管在 cloudflare 上的，使用 acme.sh 来签发证书特别方便，只需要配置两个参数即可。下面就给 k8s.li 这个域名签发一个泛域名证书。</p><ul><li>安装  acme.sh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br><span class="line">~/.acme.sh/acme.sh --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><ul><li>签发证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CF_Email=<span class="string">"muzi502.li@gmail.com"</span> <span class="comment"># cloudflare 账户的邮箱</span></span><br><span class="line"><span class="built_in">export</span> CF_Key=<span class="string">"xxxxxx"</span> <span class="comment"># "cloudflare中查看你的key"</span></span><br><span class="line"></span><br><span class="line">~/.acme.sh/acme.sh --issue --dns dns_cf -d k8s.li -d *.k8s.li</span><br><span class="line"></span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] Cert success.</span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] Your cert is <span class="keyword">in</span>  /root/.acme.sh/k8s.li/k8s.li.cer</span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] Your cert key is <span class="keyword">in</span>  /root/.acme.sh/k8s.li/k8s.li.key</span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] The intermediate CA cert is <span class="keyword">in</span>  /root/.acme.sh/k8s.li/ca.cer</span><br><span class="line">[Tue Apr 27 07:32:52 UTC 2021] And the full chain certs is there:  /root/.acme.sh/k8s.li/fullchain.cer</span><br></pre></td></tr></table></figure><blockquote><p>前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方。</p><p>注意，默认生成的证书都放在安装目录下<code>~/.acme.sh/</code>， 请不要直接使用此目录下的文件，例如: 不要直接让<code>nginx/apache</code>的配置文件使用这下面的文件。这里面的文件都是内部使用，而且目录结构可能会变化。</p><p>正确的使用方法是使用<code>--installcert</code> 命令，并指定目标位置，然后证书文件会被 copy 到相应的位置</p></blockquote><ul><li>安装证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert -d k8s.li \</span><br><span class="line">--cert-file      /etc/nginx/ssl/k8s.li.cer  \</span><br><span class="line">--key-file       /etc/nginx/ssl/k8s.li.key  \</span><br><span class="line">--fullchain-file /etc/nginx/ssl/fullchain.cer</span><br></pre></td></tr></table></figure><h3 id="搭建镜像仓库"><a href="#搭建镜像仓库" class="headerlink" title="搭建镜像仓库"></a>搭建镜像仓库</h3><ul><li>config.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">accesskeyid:</span> <span class="string">xxxx</span> <span class="comment"># 这里配置阿里云 OSS 的 accesskeyid</span></span><br><span class="line">    <span class="attr">accesskeysecret:</span> <span class="string">xxxx</span> <span class="comment"># 这里配置阿里云 OSS 的 accesskeysecret</span></span><br><span class="line">    <span class="attr">region:</span> <span class="string">oss-cn-beijing</span> <span class="comment"># 配置 OSS bucket 的区域，比如 oss-cn-beijing</span></span><br><span class="line">    <span class="attr">internal:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">fileserver</span> <span class="comment"># 配置存储 bucket 的名称</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/kubespray/registry</span> <span class="comment"># 配置路径</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:5000</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>docker-compose</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">hub-registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2.7.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hub-registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yml:/etc/docker/registry/config.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5000:5000</span></span><br></pre></td></tr></table></figure><ul><li>nginx.conf</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span>       [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  hub.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/fullchain.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/k8s.li.key;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">4096m</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> !<span class="regexp">~* GET)</span> &#123;</span><br><span class="line">         <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:5000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h3><p>文件服务器用于存放一些 kubeadm、kubectl、kubelet 等二进制文件，kubespray 默认的下载地址在国内访问特别慢，因此需要搭建一个 http/https 服务器，用于给集群部署下载这些二进制文件使用。</p><ul><li>nginx.conf</li></ul><p>需要注意，这里的 nginx 配置使用的是 rewrite 而不是 proxy_pass，这样客户端在想我的服务器请求文件时，会重写客户端的请求，让客户端去请求阿里云 OSS 的地址。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>   dl.k8s.li;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/fullchain.cer;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/k8s.li.key;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> https://fileserver.oss-cn-beijing.aliyuncs.com/kubespray/files/<span class="variable">$1</span>;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> Content-Disposition;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-request-id;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-object-type;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-hash-crc64ecma;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-storage-class;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-force-download;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> x-oss-server-time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译安装-skopeo"><a href="#编译安装-skopeo" class="headerlink" title="编译安装 skopeo"></a>编译安装 skopeo</h3><p>安装 skopeo 用来同步一些使用的镜像到私有镜像仓库，性能上比 docker 快很多，强烈推荐。skopeo 的安装方式可参考官方文档 <a href="https://github.com/containers/skopeo/blob/master/install.md" target="_blank" rel="noopener">Installing from packages</a> 。不过个人还是使用 go buid 编译一个静态链接的可执行文件，这样在 Linux 发行版都可以使用。不然在 Debian 上编译的可执行文件无法拿到 CentOS 上使用，因为二者使用的动态链接库不一样！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/skopeo git:(master*) <span class="comment"># git clone https://github.com/containers/skopeo &amp;&amp; cd skopeo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地开发机器已经安装并配置好了 golang 编译环境</span></span><br><span class="line">root@debian:/root/skopeo git:(master*) <span class="comment"># CGO_ENABLE=0 GO111MODULE=on go build -mod=vendor "-buildmode=pie" -ldflags '-extldflags "-static"' -gcflags "" -tags "exclude_graphdriver_devicemapper exclude_graphdriver_btrfs containers_image_openpgp" -o bin/skopeo ./cmd/skopeo</span></span><br><span class="line"></span><br><span class="line">root@debian:/root/skopeo git:(master*) <span class="comment"># ldd bin/skopeo</span></span><br><span class="line">not a dynamic executable</span><br></pre></td></tr></table></figure><h3 id="获取部署需要的二进制文件"><a href="#获取部署需要的二进制文件" class="headerlink" title="获取部署需要的二进制文件"></a>获取部署需要的二进制文件</h3><p>kubespray 部署的时候需要到 github.com 或 storage.googleapis.com 下载一些二进制文件，这些地址在国内都都被阻断了，因此需要将部署时依赖的文件上传到自己的文件服务器上。自己写了个脚本用于获取 kubespray 部署需要的二进制文件，在 kubespray repo 的根目录下执行,下载的文件默认会存放在 <code>temp/files</code> 目录下。下载完成之后将该目录下的所有子目录上传到自己的文件服务器上。后面配置一些参数在这个地址的参数前面加上自己文件服务器的 URL 即可。</p><ul><li>首先 clone repo 到本地</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root<span class="comment"># git clone https://github.com/kubernetes-sigs/kubespray &amp;&amp; cd kubespray</span></span><br></pre></td></tr></table></figure><ul><li>将该脚本 <code>generate_list.sh</code> 保存到 repo 根目录下，并执行该脚下载需要的文件。</li></ul><blockquote><p>ps: 用 shell 脚本去处理 Jinja2 的 yaml， 写 sed 写得我想吐🤮</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">CURRENT_DIR=$(<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>); <span class="built_in">pwd</span>)</span><br><span class="line">TEMP_DIR=<span class="string">"<span class="variable">$&#123;CURRENT_DIR&#125;</span>/temp"</span></span><br><span class="line">REPO_ROOT_DIR=<span class="string">"<span class="variable">$&#123;CURRENT_DIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">: <span class="variable">$&#123;IMAGE_ARCH:="amd64"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;ANSIBLE_SYSTEM:="linux"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;ANSIBLE_ARCHITECTURE:="x86_64"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;DOWNLOAD_YML:="roles/download/defaults/main.yml"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;KUBE_VERSION_YAML:="roles/kubespray-defaults/defaults/main.yaml"&#125;</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$&#123;TEMP_DIR&#125;</span></span><br><span class="line"><span class="function"><span class="title">generate_versions</span></span>() &#123;</span><br><span class="line">    <span class="comment"># ARCH used in convert &#123;%- if image_arch != 'amd64' -%&#125;-&#123;&#123; image_arch &#125;&#125;&#123;%- endif -%&#125; to &#123;&#123;arch&#125;&#125;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;IMAGE_ARCH&#125;</span>"</span> != <span class="string">"amd64"</span> ]; <span class="keyword">then</span> ARCH=<span class="string">"<span class="variable">$&#123;IMAGE_ARCH&#125;</span>"</span>; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    cat &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh &lt;&lt; EOF</span><br><span class="line">arch=<span class="variable">$&#123;ARCH&#125;</span></span><br><span class="line">image_arch=<span class="variable">$&#123;IMAGE_ARCH&#125;</span></span><br><span class="line">ansible_system=<span class="variable">$&#123;ANSIBLE_SYSTEM&#125;</span></span><br><span class="line">ansible_architecture=<span class="variable">$&#123;ANSIBLE_ARCHITECTURE&#125;</span></span><br><span class="line">EOF</span><br><span class="line">    grep <span class="string">'kube_version:'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;KUBE_VERSION_YAML&#125;</span> \</span><br><span class="line">    | sed <span class="string">'s/: /=/g'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh</span><br><span class="line">    grep <span class="string">'_version:'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">    | sed <span class="string">'s/: /=/g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> | tr -d <span class="string">' '</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh</span><br><span class="line">    sed -i <span class="string">'s/kube_major_version=.*/kube_major_version=$&#123;kube_version%.*&#125;/g'</span> <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh</span><br><span class="line">    sed -i <span class="string">'s/crictl_version=.*/crictl_version=$&#123;kube_version%.*&#125;.0/g'</span> <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">generate_files_list</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"source <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh"</span> &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.sh</span><br><span class="line">    grep <span class="string">'download_url:'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">    | sed <span class="string">'s/: /=/g;s/ //g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g;s/|lower//g;s/^.*_url=/echo /g'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.sh</span><br><span class="line">    bash <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.sh | sort &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">generate_images_list</span></span>() &#123;</span><br><span class="line">    KUBE_IMAGES=<span class="string">"kube-apiserver kube-controller-manager kube-scheduler kube-proxy"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"source <span class="variable">$&#123;TEMP_DIR&#125;</span>/version.sh"</span> &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh</span><br><span class="line">    grep -E <span class="string">'_repo:|_tag:'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">    | sed <span class="string">"s#&#123;%- if image_arch != 'amd64' -%&#125;-&#123;&#123; image_arch &#125;&#125;&#123;%- endif -%&#125;#&#123;&#123;arch&#125;&#125;#g"</span> \</span><br><span class="line">    | sed <span class="string">'s/: /=/g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> | tr -d <span class="string">' '</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh</span><br><span class="line">    sed -n <span class="string">'/^downloads:/,/download_defaults:/p'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">    | sed -n <span class="string">"s/repo: //p;s/tag: //p"</span> | tr -d <span class="string">' '</span> | sed <span class="string">'s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> \</span><br><span class="line">    | sed <span class="string">'N;s#\n# #g'</span> | tr <span class="string">' '</span> <span class="string">':'</span> | sed <span class="string">'s/^/echo /g'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;KUBE_IMAGES&#125;</span>"</span> | tr <span class="string">' '</span> <span class="string">'\n'</span> | xargs -L1 -I &#123;&#125; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'echo $&#123;kube_image_repo&#125;/&#123;&#125;:$&#123;kube_version&#125;'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh</span><br><span class="line">    bash <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.sh | sort &gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/images.list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">generate_versions</span><br><span class="line">generate_files_list</span><br><span class="line">generate_images_list</span><br><span class="line">wget -x -P <span class="variable">$&#123;TEMP_DIR&#125;</span>/files -i <span class="variable">$&#123;TEMP_DIR&#125;</span>/files.list</span><br></pre></td></tr></table></figure><p>最终下载的结果如下，基本上保持了原有的 URL 路径，也方便后续的更新和版本迭代。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">temp/files</span><br><span class="line">├── get.helm.sh</span><br><span class="line">│   └── helm-v3.5.4-linux-amd64.tar.gz</span><br><span class="line">├── github.com</span><br><span class="line">│   ├── containerd</span><br><span class="line">│   │   └── nerdctl</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.8.0</span><br><span class="line">│   │                   └── nerdctl-0.8.0-linux-amd64.tar.gz</span><br><span class="line">│   ├── containernetworking</span><br><span class="line">│   │   └── plugins</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.9.1</span><br><span class="line">│   │                   └── cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">│   ├── containers</span><br><span class="line">│   │   └── crun</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── 0.19</span><br><span class="line">│   │                   └── crun-0.19-linux-amd64</span><br><span class="line">│   ├── coreos</span><br><span class="line">│   │   └── etcd</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v3.4.13</span><br><span class="line">│   │                   └── etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">│   ├── kata-containers</span><br><span class="line">│   │   └── runtime</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── 1.12.1</span><br><span class="line">│   │                   └── kata-static-1.12.1-x86_64.tar.xz</span><br><span class="line">│   ├── kubernetes-sigs</span><br><span class="line">│   │   └── cri-tools</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v1.20.0</span><br><span class="line">│   │                   └── crictl-v1.20.0-linux-amd64.tar.gz</span><br><span class="line">│   └── projectcalico</span><br><span class="line">│       ├── calico</span><br><span class="line">│       │   └── archive</span><br><span class="line">│       │       └── v3.17.3.tar.gz</span><br><span class="line">│       └── calicoctl</span><br><span class="line">│           └── releases</span><br><span class="line">│               └── download</span><br><span class="line">│                   └── v3.17.3</span><br><span class="line">│                       └── calicoctl-linux-amd64</span><br><span class="line">└── storage.googleapis.com</span><br><span class="line">    └── kubernetes-release</span><br><span class="line">        └── release</span><br><span class="line">            └── v1.20.6</span><br><span class="line">                └── bin</span><br><span class="line">                    └── linux</span><br><span class="line">                        └── amd64</span><br><span class="line">                            ├── kubeadm</span><br><span class="line">                            ├── kubectl</span><br><span class="line">                            └── kubelet</span><br></pre></td></tr></table></figure><h3 id="获取部署需要的镜像"><a href="#获取部署需要的镜像" class="headerlink" title="获取部署需要的镜像"></a>获取部署需要的镜像</h3><p>对于离线部署，kubespray 支持的并不是很友好。比如获取部署需要的镜像列表，目前的方案是需要先部署一个集群，然后通过 kubectl get 一些资源来获取 pod 使用到的镜像。个人觉得这个方式可以修改一下，比如通过 kubespray 源码来生成一个镜像列表。下面只是简单生成一个镜像列表，内容如下</p><ul><li>images.list</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker.io/nginx:1.19.0</span><br><span class="line">docker.io/calico/cni:v3.17.3</span><br><span class="line">docker.io/calico/node:v3.17.3</span><br><span class="line">docker.io/calico/kube-controllers:v3.17.3</span><br><span class="line">quay.io/coreos/flannel:v0.13.0</span><br><span class="line">quay.io/coreos/flannel:v0.13.0-amd64</span><br><span class="line">k8s.gcr.io/pause:3.2</span><br><span class="line">k8s.gcr.io/coredns:1.7.0</span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.20.6</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.20.6</span><br><span class="line">k8s.gcr.io/dns/k8s-dns-node-cache:1.17.1</span><br><span class="line">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64:1.8.3</span><br></pre></td></tr></table></figure><p>由于 master 分支的代码一直在更新，当前的 master 分支的版本可能和这里的不太一样，需要修改为自己需要的版本。</p><ul><li>根据上面的镜像列表，使用 skopeo 将镜像同步到自己的镜像仓库中，如我的 <code>hub.k8s.li</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> $(cat images.list); <span class="keyword">do</span> skopeo copy docker://<span class="variable">$&#123;image&#125;</span> docker://hub.k8s.li/<span class="variable">$&#123;image#*/&#125;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>同步到我的镜像仓库中，内容就如下，在部署的时候通过修改一些镜像仓库的地址即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hub.k8s.li/nginx:1.19.0</span><br><span class="line">hub.k8s.li/calico/cni:v3.17.3</span><br><span class="line">hub.k8s.li/calico/node:v3.17.3</span><br><span class="line">hub.k8s.li/calico/kube-controllers:v3.17.3</span><br><span class="line">hub.k8s.li/coreos/flannel:v0.13.0</span><br><span class="line">hub.k8s.li/coreos/flannel:v0.13.0-amd64</span><br><span class="line">hub.k8s.li/pause:3.2</span><br><span class="line">hub.k8s.li/coredns:1.7.0</span><br><span class="line">hub.k8s.li/kube-apiserver:v1.20.6</span><br><span class="line">hub.k8s.li/kube-controller-manager:v1.20.6</span><br><span class="line">hub.k8s.li/kube-proxy:v1.20.6</span><br><span class="line">hub.k8s.li/kube-scheduler:v1.20.6</span><br><span class="line">hub.k8s.li/dns/k8s-dns-node-cache:1.17.1</span><br><span class="line">hub.k8s.li/cpa/cluster-proportional-autoscaler-amd64:1.8.3</span><br></pre></td></tr></table></figure><p>至此准备工作大致都已经完成了，接下来开始配置 kubespray 的一些参数和 inventory 文件</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>按照 kubespray 文档说明，将 <code>inventory/sample</code> 目录复制一份，然后通过修改里面的参数来控制部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># cp -rf inventory/sample deploy</span></span><br></pre></td></tr></table></figure><h3 id="inventory"><a href="#inventory" class="headerlink" title="inventory"></a>inventory</h3><ul><li><code>deploy/inventory</code></li></ul><p>创建主机 inventory 文件，格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[all:vars]</span></span><br><span class="line"><span class="attr">ansible_port</span>=<span class="number">22</span></span><br><span class="line"><span class="attr">ansible_user</span>=root</span><br><span class="line"></span><br><span class="line"><span class="attr">ansible_ssh_private_key_file</span>=/kubespray/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="section">[all]</span></span><br><span class="line">kube-control-1 ansible_host=192.168.4.11</span><br><span class="line">kube-control-2 ansible_host=192.168.4.12</span><br><span class="line">kube-control-3 ansible_host=192.168.4.13</span><br><span class="line">kube-node-1 ansible_host=192.168.4.4</span><br><span class="line"></span><br><span class="line"><span class="section">[kube_control_plane]</span></span><br><span class="line">kube-control-1</span><br><span class="line">kube-control-2</span><br><span class="line">kube-control-3</span><br><span class="line"></span><br><span class="line"><span class="section">[etcd]</span></span><br><span class="line">kube-control-1</span><br><span class="line">kube-control-2</span><br><span class="line">kube-control-3</span><br><span class="line"></span><br><span class="line"><span class="section">[kube-node]</span></span><br><span class="line">kube-control-1</span><br><span class="line">kube-control-2</span><br><span class="line">kube-control-3</span><br><span class="line">kube-node-1</span><br><span class="line"></span><br><span class="line"><span class="section">[calico-rr]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[k8s-cluster:children]</span></span><br><span class="line">kube_control_plane</span><br><span class="line">kube-node</span><br><span class="line">calico-rr</span><br></pre></td></tr></table></figure><ul><li>ssh 互信</li></ul><p>Kubespray 用到了 ansible 的 <a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/synchronize_module.html" target="_blank" rel="noopener">synchronize</a> 模块来分发文件，基于 rsync 协议所以必须要使用 ssh 密钥对来连接集群节点。inventory 配置的是 kubespray 容器内的路径，因此需要将 ssh 公钥和私钥复制到 repo 的 .ssh 目录下。如果节点就没有进行 ssh 免密登录，可以用 ansible 的 authorized_key 模块将 ssh 公钥添加到主机的 authorized_key 中。操作步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># mkdir -p .ssh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 ssh 密钥对</span></span><br><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># ssh-keygen -t rsa -f .ssh/id_rsa -P ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ssh 公钥添加到所有主机</span></span><br><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># ansible -i deploy/inventory all -m authorized_key -a "user=&#123;&#123; ansible_user &#125;&#125; key='&#123;&#123; lookup('file', '&#123;&#123; ssh_cert_path &#125;&#125;') &#125;&#125;'" -e ssh_cert_path=./.ssh/id_rsa.pub -e ansible_ssh_pass=passwd</span></span><br></pre></td></tr></table></figure><h3 id="vars"><a href="#vars" class="headerlink" title="vars"></a>vars</h3><p>创建并修改以下配置文件</p><ul><li><code>deploy/env.yml</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 定义一些组件的版本</span></span><br><span class="line"><span class="attr">kube_version:</span> <span class="string">v1.20.6</span></span><br><span class="line"><span class="attr">calico_version:</span> <span class="string">"v3.17.3"</span></span><br><span class="line"><span class="attr">pod_infra_version:</span> <span class="string">"3.2"</span></span><br><span class="line"><span class="attr">nginx_image_version:</span> <span class="string">"1.19"</span></span><br><span class="line"><span class="attr">coredns_version:</span> <span class="string">"1.7.0"</span></span><br><span class="line"><span class="attr">image_arch:</span> <span class="string">"amd64"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker registry domain</span></span><br><span class="line"><span class="attr">registry_domain:</span> <span class="string">"hub.k8s.li"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file download server url</span></span><br><span class="line"><span class="attr">download_url:</span> <span class="string">"https://dl.k8s.li"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-ce-repo mirrors</span></span><br><span class="line"><span class="attr">docker_mirrors_url:</span> <span class="string">"https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">container_manager:</span> <span class="string">"containerd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于使用的是 containerd 作为 CRI，目前 etcd 不支持 containerd 容器化部署因此需要将该参数修改为 host ，使用 systemd 来部署</span></span><br><span class="line"><span class="attr">etcd_deployment_type:</span> <span class="string">host</span></span><br><span class="line"><span class="attr">etcd_cluster_setup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">etcd_events_cluster_setup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">etcd_events_cluster_enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubernetes CNI type 配置集群 CNI 使用的类型</span></span><br><span class="line"><span class="attr">kube_network_plugin:</span> <span class="string">canal</span></span><br></pre></td></tr></table></figure><ul><li><code>deploy/group_vars/all/download.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Container registry define</span></span><br><span class="line"><span class="attr">gcr_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_domain &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kube_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_domain &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">docker_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_domain &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">quay_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_domain &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Download URLs</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kubeadm_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubeadm"</span></span><br><span class="line"><span class="attr">etcd_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/coreos/etcd/releases/download/<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>/etcd-<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">cni_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containernetworking/plugins/releases/download/<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>/cni-plugins-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>-<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>.tgz"</span></span><br><span class="line"><span class="attr">calicoctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calicoctl/releases/download/<span class="template-variable">&#123;&#123; calico_ctl_version &#125;&#125;</span>/calicoctl-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_crds_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calico/archive/<span class="template-variable">&#123;&#123; calico_version &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crictl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kubernetes-sigs/cri-tools/releases/download/<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>/crictl-<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">helm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/get.helm.sh/helm-<span class="template-variable">&#123;&#123; helm_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crun_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containers/crun/releases/download/<span class="template-variable">&#123;&#123; crun_version &#125;&#125;</span>/crun-<span class="template-variable">&#123;&#123; crun_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kata_containers_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kata-containers/runtime/releases/download/<span class="template-variable">&#123;&#123; kata_containers_version &#125;&#125;</span>/kata-static-<span class="template-variable">&#123;&#123; kata_containers_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_architecture &#125;&#125;</span>.tar.xz"</span></span><br><span class="line"><span class="attr">nerdctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containerd/nerdctl/releases/download/v<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>/nerdctl-<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br></pre></td></tr></table></figure><h3 id="docker-ce-mirrors"><a href="#docker-ce-mirrors" class="headerlink" title="docker-ce mirrors"></a>docker-ce mirrors</h3><p>kubespray 安装 docker 或者 containerd 容器运行时，需要使用 docker-ce 的源，国内可以使用清华的镜像源。根据不同的 Linux 发行版，在 <code>deploy/group_vars/all/offline.yml</code> 文件中添加这些参数即可。其中 <code>docker_mirrors_url</code> 这个参数就是在 <code>env.yml</code> 里设置的参数。</p><ul><li>CentOS/Redhat</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## CentOS/Redhat</span></span><br><span class="line"><span class="comment">### For EL7, base and extras repo must be available, for EL8, baseos and appstream</span></span><br><span class="line"><span class="comment">### By default we enable those repo automatically</span></span><br><span class="line"><span class="comment"># rhel_enable_repos: false</span></span><br><span class="line"><span class="comment">### Docker / Containerd</span></span><br><span class="line">docker_rh_repo_base_url: <span class="string">"&#123;&#123; docker_mirrors_url &#125;&#125;/centos/&#123;&#123; ansible_distribution_major_version &#125;&#125;/&#123;&#123; ansible_architecture &#125;&#125;/stable"</span></span><br><span class="line">docker_rh_repo_gpgkey: <span class="string">"&#123;&#123; docker_mirrors_url &#125;&#125;/centos/gpg"</span></span><br></pre></td></tr></table></figure><ul><li>Fedora</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Fedora</span></span><br><span class="line"><span class="comment">### Docker</span></span><br><span class="line"><span class="attr">docker_fedora_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/fedora/<span class="template-variable">&#123;&#123; ansible_distribution_major_version &#125;&#125;</span>/<span class="template-variable">&#123;&#123; ansible_architecture &#125;&#125;</span>/stable"</span></span><br><span class="line"><span class="attr">docker_fedora_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/fedora/gpg"</span></span><br><span class="line"><span class="comment">### Containerd</span></span><br><span class="line"><span class="attr">containerd_fedora_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/fedora/<span class="template-variable">&#123;&#123; ansible_distribution_major_version &#125;&#125;</span>/<span class="template-variable">&#123;&#123; ansible_architecture &#125;&#125;</span>/stable"</span></span><br><span class="line"><span class="attr">containerd_fedora_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/fedora/gpg"</span></span><br></pre></td></tr></table></figure><ul><li>debian</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Debian</span></span><br><span class="line"><span class="comment">### Docker</span></span><br><span class="line"><span class="attr">docker_debian_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/debian"</span></span><br><span class="line"><span class="attr">docker_debian_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/debian/gpg"</span></span><br><span class="line"><span class="comment">### Containerd</span></span><br><span class="line"><span class="attr">containerd_debian_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/debian"</span></span><br><span class="line"><span class="attr">containerd_debian_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/debian/gpg"</span></span><br><span class="line"><span class="comment"># containerd_debian_repo_repokey: 'YOURREPOKEY'</span></span><br></pre></td></tr></table></figure><ul><li>ubuntu</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Ubuntu</span></span><br><span class="line"><span class="comment">### Docker</span></span><br><span class="line"><span class="attr">docker_ubuntu_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/ubuntu"</span></span><br><span class="line"><span class="attr">docker_ubuntu_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/ubuntu/gpg"</span></span><br><span class="line"><span class="comment">### Containerd</span></span><br><span class="line"><span class="attr">containerd_ubuntu_repo_base_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/ubuntu"</span></span><br><span class="line"><span class="attr">containerd_ubuntu_repo_gpgkey:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_mirrors_url &#125;&#125;</span>/ubuntu/gpg"</span></span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>经过以上准备好配置工作之后，接下来可以开始正式部署了。在使用 ansible 进行部署的时候，个人倾向于在 kubespray 容器里进行操作，而非在本地开发机器上安装 python3 等环境。对于离线部署而言，提前构建好镜像，使用 docker 容器更为方便一些。</p><ul><li>构建镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># docker build -t kubespray:v2.15.1-kube-v1.20.6 .</span></span><br></pre></td></tr></table></figure><ul><li>运行 kubespray 容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kubespray git:(master*) <span class="comment"># docker run --rm -it --net=host -v $PWD:/kubespray kubespray:v2.15.1-kube-v1.20.6 bash</span></span><br></pre></td></tr></table></figure><ul><li>测试主机是否连接正常</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/kubespray<span class="comment"># ansible -i cluster/inventory all -m ping</span></span><br><span class="line">kube-control-3 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">kube-control-1 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">kube-node-1 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">kube-control-2 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"discovered_interpreter_python"</span>: <span class="string">"/usr/bin/python"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开始部署集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/kubespray<span class="comment"># ansible-playbook -i deploy/inventory -e "@deploy/env.yml" cluster.yml</span></span><br></pre></td></tr></table></figure><ul><li>部署完成日志如下，当 failed 都为 0 时说明 tasks 都已经成功跑完了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PLAY RECAP ******************************************************************</span><br><span class="line">kube-control-1             : ok=526  changed=67   unreachable=0    failed=0    skipped=978  rescued=0    ignored=0</span><br><span class="line">kube-control-2             : ok=524  changed=66   unreachable=0    failed=0    skipped=980  rescued=0    ignored=0</span><br><span class="line">kube-control-3             : ok=593  changed=76   unreachable=0    failed=0    skipped=1125 rescued=0    ignored=1</span><br><span class="line">kube-node-1                : ok=366  changed=34   unreachable=0    failed=0    skipped=628  rescued=0    ignored=0</span><br><span class="line">localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br><span class="line"></span><br><span class="line">Wednesday 28 April 2021  10:57:57 +0000 (0:00:00.115)       0:15:21.190 *******</span><br><span class="line">===============================================================================</span><br><span class="line">kubernetes/control-plane : kubeadm | Initialize first master -------------- 65.88s</span><br><span class="line">kubernetes/control-plane : Joining control plane node to the cluster. ----- 50.05s</span><br><span class="line">kubernetes/kubeadm : Join to cluster -------------------------------------- 31.54s</span><br><span class="line">download_container | Download image <span class="keyword">if</span> required --------------------------- 24.38s</span><br><span class="line">reload etcd --------------------------------------------------------------- 20.56s</span><br><span class="line">Gen_certs | Write etcd member and admin certs to other etcd nodes --------- 19.32s</span><br><span class="line">Gen_certs | Write node certs to other etcd nodes -------------------------- 19.14s</span><br><span class="line">Gen_certs | Write etcd member and admin certs to other etcd nodes --------- 17.45s</span><br><span class="line">network_plugin/canal : Canal | Create canal node manifests ---------------- 15.41s</span><br><span class="line">kubernetes-apps/ansible : Kubernetes Apps | Lay Down CoreDNS Template ----- 13.27s</span><br><span class="line">kubernetes/control-plane : Master | <span class="built_in">wait</span> <span class="keyword">for</span> kube-scheduler --------------- 11.97s</span><br><span class="line">download_container | Download image <span class="keyword">if</span> required --------------------------- 11.76s</span><br><span class="line">Gen_certs | Write node certs to other etcd nodes -------------------------- 10.50s</span><br><span class="line">kubernetes-apps/ansible : Kubernetes Apps | Start Resources ---------------- 8.28s</span><br><span class="line">policy_controller/calico : Create calico-kube-controllers manifests -------- 7.61s</span><br><span class="line">kubernetes/control-plane : <span class="built_in">set</span> kubeadm certificate key --------------------- 6.32s</span><br><span class="line">download : extract_file | Unpacking archive -------------------------------- 5.51s</span><br><span class="line">Configure | Check <span class="keyword">if</span> etcd cluster is healthy ------------------------------- 5.41s</span><br><span class="line">Configure | Check <span class="keyword">if</span> etcd-events cluster is healthy ------------------------ 5.41s</span><br><span class="line">kubernetes-apps/network_plugin/canal : Canal | Start Resources ------------- 4.85s</span><br></pre></td></tr></table></figure><ul><li>集群状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@kube-control-1 ~]# kubectl get node -o wide</span><br><span class="line">NAME             STATUS   ROLES                  AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION           CONTAINER-RUNTIME</span><br><span class="line">kube-control-1   Ready    control-plane,master   5m24s   v1.20.6   192.168.4.11   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   containerd://1.4.4</span><br><span class="line">kube-control-2   Ready    control-plane,master   5m40s   v1.20.6   192.168.4.12   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   containerd://1.4.4</span><br><span class="line">kube-control-3   Ready    control-plane,master   6m28s   v1.20.6   192.168.4.13   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   containerd://1.4.4</span><br><span class="line">kube-node-1      Ready    &lt;none&gt;                 3m53s   v1.20.6   192.168.4.14   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   containerd://1.4.4</span><br></pre></td></tr></table></figure><ul><li>集群组件状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@kube-control-1 ~]<span class="comment"># kubectl get all -n kube-system</span></span><br><span class="line">NAME                                           READY   STATUS             RESTARTS   AGE</span><br><span class="line">pod/calico-kube-controllers-67d6cdb559-cwf62   0/1     CrashLoopBackOff   5          4m10s</span><br><span class="line">pod/canal-node-46x2b                           2/2     Running            0          4m25s</span><br><span class="line">pod/canal-node-5rkhq                           2/2     Running            0          4m25s</span><br><span class="line">pod/canal-node-fcsgn                           2/2     Running            0          4m25s</span><br><span class="line">pod/canal-node-nhkp8                           2/2     Running            0          4m25s</span><br><span class="line">pod/coredns-5d578c6f84-5nnp8                   1/1     Running            0          3m33s</span><br><span class="line">pod/coredns-5d578c6f84-w2kvf                   1/1     Running            0          3m39s</span><br><span class="line">pod/dns-autoscaler-6b675c8995-vp282            1/1     Running            0          3m34s</span><br><span class="line">pod/kube-apiserver-kube-control-1              1/1     Running            0          6m51s</span><br><span class="line">pod/kube-apiserver-kube-control-2              1/1     Running            0          7m7s</span><br><span class="line">pod/kube-apiserver-kube-control-3              1/1     Running            0          7m41s</span><br><span class="line">pod/kube-controller-manager-kube-control-1     1/1     Running            0          6m52s</span><br><span class="line">pod/kube-controller-manager-kube-control-2     1/1     Running            0          7m7s</span><br><span class="line">pod/kube-controller-manager-kube-control-3     1/1     Running            0          7m41s</span><br><span class="line">pod/kube-proxy-5dfx8                           1/1     Running            0          5m17s</span><br><span class="line">pod/kube-proxy-fvrqk                           1/1     Running            0          5m17s</span><br><span class="line">pod/kube-proxy-jd84p                           1/1     Running            0          5m17s</span><br><span class="line">pod/kube-proxy-l2mjk                           1/1     Running            0          5m17s</span><br><span class="line">pod/kube-scheduler-kube-control-1              1/1     Running            0          6m51s</span><br><span class="line">pod/kube-scheduler-kube-control-2              1/1     Running            0          7m7s</span><br><span class="line">pod/kube-scheduler-kube-control-3              1/1     Running            0          7m41s</span><br><span class="line">pod/nginx-proxy-kube-node-1                    1/1     Running            0          5m20s</span><br><span class="line">pod/nodelocaldns-77kq9                         1/1     Running            0          3m32s</span><br><span class="line">pod/nodelocaldns-fn5pd                         1/1     Running            0          3m32s</span><br><span class="line">pod/nodelocaldns-lfjzb                         1/1     Running            0          3m32s</span><br><span class="line">pod/nodelocaldns-xnc6n                         1/1     Running            0          3m32s</span><br><span class="line"></span><br><span class="line">NAME              TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">service/coredns   ClusterIP   10.233.0.3   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   3m38s</span><br><span class="line"></span><br><span class="line">NAME                          DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE</span><br><span class="line">daemonset.apps/canal-node     4         4         4       4            4           &lt;none&gt;                   4m25s</span><br><span class="line">daemonset.apps/kube-proxy     4         4         4       4            4           kubernetes.io/os=linux   7m53s</span><br><span class="line">daemonset.apps/nodelocaldns   4         4         4       4            4           &lt;none&gt;                   3m32s</span><br><span class="line"></span><br><span class="line">NAME                                      READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/calico-kube-controllers   0/1     1            0           4m12s</span><br><span class="line">deployment.apps/coredns                   2/2     2            2           3m39s</span><br><span class="line">deployment.apps/dns-autoscaler            1/1     1            1           3m34s</span><br><span class="line"></span><br><span class="line">NAME                                                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/calico-kube-controllers-67d6cdb559   1         1         0       4m12s</span><br><span class="line">replicaset.apps/coredns-5d578c6f84                   2         2         2       3m39s</span><br><span class="line">replicaset.apps/dns-autoscaler-6b675c8995            1         1         1       3m34s</span><br></pre></td></tr></table></figure><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>在国内这种十分糟糕的网络环境下，对于普通的开发者或者学生来讲，部署一个 kubernetes 集群是十分痛苦的事情，这也进一步阻碍了这门技术的普及和使用。也想起了几年前在一次 docker 技术分享时的 QA 问答：</p><blockquote><p>Q：如何摆脱网络的依赖来创建个 Docker 的 image 呢，我觉得这个是 Docker 用户自己的基本权利？</p></blockquote><p><strong>A：这个基本权利我觉得还是要问 GFW ，国外的开发人员是非常难理解有些他们认为跟水电一样普及的基础设施在某些地方还是很困难的。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;公司 PaaS 平台底层的 kubernetes
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="k8s" scheme="https://blog.k8s.li/tags/k8s/"/>
    
      <category term="kubespray" scheme="https://blog.k8s.li/tags/kubespray/"/>
    
  </entry>
  
  <entry>
    <title>什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</title>
    <link href="https://blog.k8s.li/select-registry-images.html"/>
    <id>https://blog.k8s.li/select-registry-images.html</id>
    <published>2021-04-27T16:00:00.000Z</published>
    <updated>2021-04-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="overlay2-优化"><a href="#overlay2-优化" class="headerlink" title="overlay2 优化"></a>overlay2 优化</h2><p>前段时间写过一篇 <a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a>，来介绍在产品发布流水线中使用 overlay2 和 registry 组合的技术来优化镜像同步的流程，感兴趣的小伙伴可以去阅读一下。最近<strong>忽然</strong>发现了一个可以完美替代 overlay2 的方案，而且性能更好，流程更简单。</p><p><img src="https://p.k8s.li/2021-03-01-002.jpeg" alt=""></p><p>根据在文章中提到的镜像同步流程可以得知：在打包发布流水线中，会进行两次镜像同步。第一次是根据一个镜像列表将镜像从 cicd.registry.local 仓库同步到 overlay2.registry.local；第二次是将 overlay2.registry.local 镜像同步到 package.registry.local。overlay2.registry.local 和 package.registry.local 这两个镜像仓库是在同一台机器上，而且 overlay2.registry.lcoal 的 registry 存储目录将作为 overlay2 挂载的 lower 给 package.registry.local 使用。</p><p>在 <a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a> 文章我提到过 skopeo dir 格式的镜像可以还原回 registry 存储的格式；在 <a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a> 文章中提到了可以将 registry 存储的格式转换为 skopeo dir 的格式，因此总结出 skopeo dir 和 docker registry 这两种镜像存储格式可以互相转换。</p><p>掌握了这两种镜像存储格式之间互相转换之后，突然意识到<strong>为何不直接从 registry 存储提取特定的镜像（镜像列表），并保取为 registry 存储的格式？</strong> 这样根本就不需要 overlay2 和 skopeo，可以直接对 registry 的存储进行操作，将镜像一个一个地硬链接出来。而且对 registry 文件系统的 I/O 操作从理论上来讲性能会远远高于 skopeo 这种通过 HTTP 协议传输。</p><h2 id="玩转-registry-存储"><a href="#玩转-registry-存储" class="headerlink" title="玩转 registry 存储"></a>玩转 registry 存储</h2><p>再一次搬来这张 registry 存储的结构图，如果想要看懂这系列的文章，一定要理解这张图：</p><p><img src="https://p.k8s.li/registry-storage.jpeg" alt=""></p><h3 id="registry-to-skopeo-dir"><a href="#registry-to-skopeo-dir" class="headerlink" title="registry to skopeo dir"></a>registry to skopeo dir</h3><p>之前在 <a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a>  文章中提到过将 registry 存储中的镜像转换为 skopeo dir 的格式，然后使用 skopeo 将转换后的镜像 push 到 harbor 中。大致流程如下：</p><ul><li>首先要得到镜像的 manifests 文件，从 manifests 文件中可以得到该镜像的所有 blob 文件。例如对于 registry 存储目录中的 <code>library/alpine:latest</code> 镜像来讲，它在 registry 中是这样存放的：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree</span><br><span class="line">.</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 21</span><br><span class="line">│       │   └── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── a1</span><br><span class="line">│       │   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">│       │       └── data</span><br><span class="line">│       └── be</span><br><span class="line">│           └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">│               └── data</span><br><span class="line">└── repositories</span><br><span class="line">    └── library</span><br><span class="line">        └── alpine</span><br><span class="line">            ├── _layers</span><br><span class="line">            │   └── sha256</span><br><span class="line">            │       ├── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">            │       │   └── link</span><br><span class="line">            │       └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">            │           └── link</span><br><span class="line">            ├── _manifests</span><br><span class="line">            │   ├── revisions</span><br><span class="line">            │   │   └── sha256</span><br><span class="line">            │   │       └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │   │           └── link</span><br><span class="line">            │   └── tags</span><br><span class="line">            │       └── latest</span><br><span class="line">            │           ├── current</span><br><span class="line">            │           │   └── link</span><br><span class="line">            │           └── index</span><br><span class="line">            │               └── sha256</span><br><span class="line">            │                   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │                       └── link</span><br><span class="line">            └── _uploads</span><br><span class="line"></span><br><span class="line">26 directories, 8 files</span><br></pre></td></tr></table></figure><ul><li>步骤一：通过 <code>repositories/library/alpine/_manifests/tags/latest/current/link</code> 文件得到 alpine 镜像 lasts 这个 tag 的 manifests 文件的 sha256 值，然后根据这个 sha256 值去 blobs 找到镜像的 manifests 文件;</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/alpine/_manifests/tags/latest/current/</span><br><span class="line">╰─# cat link</span><br><span class="line">sha256:39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01#</span><br></pre></td></tr></table></figure><ul><li>步骤二：根据 <code>current/link</code> 文件中的 sha256 值在 blobs 目录下找到与之对应的文件，blobs 目录下对应的 manifests 文件为 blobs/sha256/39/39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01/data;</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/alpine/_manifests/tags/latest/current</span><br><span class="line">╰─# cat /var/lib/registry/docker/registry/v2/blobs/sha256/39/39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01/data</span><br><span class="line">&#123;</span><br><span class="line">   "schemaVersion": 2,</span><br><span class="line">   "mediaType": "application/vnd.docker.distribution.manifest.v2+json",</span><br><span class="line">   "config": &#123;</span><br><span class="line">      "mediaType": "application/vnd.docker.container.image.v1+json",</span><br><span class="line">      "size": 1507,</span><br><span class="line">      "digest": "sha256:f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a"</span><br><span class="line">   &#125;,</span><br><span class="line">   "layers": [</span><br><span class="line">      &#123;</span><br><span class="line">         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",</span><br><span class="line">         "size": 2813316,</span><br><span class="line">         "digest": "sha256:cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08"</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>步骤三：使用正则匹配，过滤出 manifests 文件中的所有 sha256 值，这些 sha256 值就对应着 blobs 目录下的 image config 文件和 image layer 文件;</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/alpine/_manifests/tags/latest/current</span><br><span class="line">╰─# grep -Eo "\b[a-f0-9]&#123;64&#125;\b" /var/lib/registry/docker/registry/v2/blobs/sha256/39/39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01/data</span><br><span class="line">f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br></pre></td></tr></table></figure><ul><li>步骤四：根据 manifests 文件就可以得到 blobs 目录中镜像的所有 layer 和 image config 文件，然后将这些文件拼成一个 dir 格式的镜像，在这里使用 cp 的方式将镜像从 registry 存储目录里复制出来，过程如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先创建一个文件夹，为了保留镜像的 name 和 tag，文件夹的名称就对应的是 NAME:TAG</span></span><br><span class="line">╭─root@sg-02 /var/lib/registry/docker</span><br><span class="line">╰─# mkdir -p skopeo/library/alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制镜像的 manifest 文件</span></span><br><span class="line">╭─root@sg-02 /var/lib/registry/docker</span><br><span class="line">╰─# cp /var/lib/registry/docker/registry/v2/blobs/sha256/39/39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01/data skopeo/library/alpine:latest/manifest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制镜像的 blob 文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /var/lib/registry/docker/registry/v2/blobs/sha256/f7/f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a/data skopeo/library/alpine:latest/f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /var/lib/registry/docker/registry/v2/blobs/sha256/cb/cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08/data skopeo/library/alpine:latest/cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span></span><br></pre></td></tr></table></figure><p>最终得到的镜像格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker</span><br><span class="line">╰─# tree skopeo/library/alpine:latest</span><br><span class="line">skopeo/library/alpine:latest</span><br><span class="line">├── cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class="line">├── f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">└── manifest</span><br><span class="line"></span><br><span class="line">0 directories, 3 files</span><br></pre></td></tr></table></figure><h3 id="skopeo-dir-to-registry"><a href="#skopeo-dir-to-registry" class="headerlink" title="skopeo dir to registry"></a>skopeo dir to registry</h3><p>在 <a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a> 文章我提到过 skopeo dir 格式的镜像可以还原回 registry 存储的格式，大致流程如下：</p><p>将 <code>images/alpine:latest</code> 这个镜像在转换成 docker registry 存储目录的形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root # tree -h images/alpine:latest</span><br><span class="line">images/alpine:latest</span><br><span class="line">└── [4.0K]  alpine:latest</span><br><span class="line">    ├── [2.7M]  4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">    ├── [1.5K]  af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">    ├── [ 528]  manifest.json</span><br><span class="line">    └── [  33]  version</span><br></pre></td></tr></table></figure><p>根据镜像文件大小我们可以得知： <code>2.7M</code> 大小的 <code>4167d3e1497……</code> 文件就是镜像的 layer 文件，由于 alpine 是一个 base 镜像，该 layer 就是 alpine 的根文件系统；<code>1.5K</code> 大小的 <code>af341ccd2……</code> 显而易见就是镜像的 images config 文件；<code>manifest.json</code> 文件则是镜像在 registry 存储中的 manifest.json 文件。</p><ul><li>步骤一：先创建该镜像在 registry 存储中的目录结构</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root # mkdir -p docker/registry/v2/&#123;blobs/sha256,repositories/alpine&#125;</span><br><span class="line">root@debian:/root # tree docker</span><br><span class="line">docker</span><br><span class="line">└── registry</span><br><span class="line">    └── v2</span><br><span class="line">        ├── blobs</span><br><span class="line">        │   └── sha256</span><br><span class="line">        └── repositories</span><br><span class="line">            └── alpine</span><br></pre></td></tr></table></figure><ul><li>步骤二：构建镜像 layer 的 link 文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -Eo "\b[a-f0-9]&#123;64&#125;\b" images/alpine:latest/manifest.json | sort -u | xargs -L1 -I &#123;&#125; mkdir -p docker/registry/v2/repositories/alpine/_layers/sha256/&#123;&#125;</span><br><span class="line"></span><br><span class="line">grep -Eo "\b[a-f0-9]&#123;64&#125;\b" images/alpine:latest/manifest.json | sort -u | xargs -L1 -I &#123;&#125; sh -c "echo -n 'sha256:&#123;&#125;' &gt; docker/registry/v2/repositories/alpine/_layers/sha256/&#123;&#125;/link"</span><br></pre></td></tr></table></figure><ul><li>步骤三：构建镜像 tag 的 link 文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">manifests_sha256=$(sha256sum images/alpine:latest/manifest.json | awk '&#123;print $1&#125;')</span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/revisions/sha256/$&#123;manifests_sha256&#125;</span><br><span class="line">echo -n "sha256:$&#123;manifests_sha256&#125;" &gt; docker/registry/v2/repositories/alpine/_manifests/revisions/sha256/$&#123;manifests_sha256&#125;/link</span><br><span class="line"></span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/tags/latest/index/sha256/$&#123;manifests_sha256&#125;</span><br><span class="line">echo -n "sha256:$&#123;manifests_sha256&#125;" &gt; docker/registry/v2/repositories/alpine/_manifests/tags/latest/index/sha256/$&#123;manifests_sha256&#125;/link</span><br><span class="line"></span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/tags/latest/current</span><br><span class="line">echo -n "sha256:$&#123;manifests_sha256&#125;" &gt; docker/registry/v2/repositories/alpine/_manifests/tags/latest/current/link</span><br></pre></td></tr></table></figure><ul><li>步骤四：构建镜像的 blobs 目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p docker/registry/v2/blobs/sha256/$&#123;manifests_sha256:0:2&#125;/$&#123;manifests_sha256&#125;</span><br><span class="line">ln -f images/alpine:latest/manifest.json docker/registry/v2/blobs/sha256/$&#123;manifests_sha256:0:2&#125;/$&#123;manifests_sha256&#125;/data</span><br><span class="line"></span><br><span class="line">for layer in $(grep -Eo "\b[a-f0-9]&#123;64&#125;\b" images/alpine:latest/manifest.json); do</span><br><span class="line">    mkdir -p docker/registry/v2/blobs/sha256/$&#123;layer:0:2&#125;/$&#123;layer&#125;</span><br><span class="line">    ln -f  images/alpine:latest/$&#123;layer&#125; docker/registry/v2/blobs/sha256/$&#123;layer:0:2&#125;/$&#123;layer&#125;/data</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>最终得到的 registry 存储目录如下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker</span><br><span class="line">└── registry</span><br><span class="line">    └── v2</span><br><span class="line">        ├── blobs</span><br><span class="line">        │   └── sha256</span><br><span class="line">        │       ├── 41</span><br><span class="line">        │       │   └── 4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">        │       │       └── data</span><br><span class="line">        │       ├── af</span><br><span class="line">        │       │   └── af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">        │       │       └── data</span><br><span class="line">        │       └── de</span><br><span class="line">        │           └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">        │               └── data</span><br><span class="line">        └── repositories</span><br><span class="line">            └── alpine</span><br><span class="line">                ├── _layers</span><br><span class="line">                │   └── sha256</span><br><span class="line">                │       ├── 4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">                │       │   └── link</span><br><span class="line">                │       └── af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">                │           └── link</span><br><span class="line">                └── _manifests</span><br><span class="line">                    ├── revisions</span><br><span class="line">                    │   └── sha256</span><br><span class="line">                    │       └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">                    │           └── link</span><br><span class="line">                    └── tags</span><br><span class="line">                        └── latest</span><br><span class="line">                            ├── current</span><br><span class="line">                            │   └── link</span><br><span class="line">                            └── index</span><br><span class="line">                                └── sha256</span><br><span class="line">                                    └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">                                        └── link</span><br></pre></td></tr></table></figure><h3 id="registry-to-registry-by-images-list"><a href="#registry-to-registry-by-images-list" class="headerlink" title="registry to registry  by images list"></a>registry to registry  by images list</h3><p>熟悉了如何将 registry 存储转换为 skopeo dir 以及镜像 skopeo dir 转换为 registry 存储的流程之后，我们就可以根据一个镜像列表，将镜像从一个很大的 registry 存储中（里面几千个镜像）提取出一些特定的镜像。比如镜像列表如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">library/alpine:latest</span><br><span class="line">library/alpine:3.6</span><br><span class="line">library/alpine:3.7</span><br><span class="line">library/busybox:1.30.0</span><br><span class="line">library/centos:6.7</span><br><span class="line">library/centos:7.4.1708</span><br><span class="line">library/default-http-backend:v0.1.0</span><br><span class="line">library/elasticsearch:6.5.4</span><br><span class="line">library/examples-bookinfo-details-v1:1.8.0</span><br><span class="line">library/examples-bookinfo-productpage-v1:1.8.0</span><br><span class="line">library/examples-bookinfo-ratings-v1:1.8.0</span><br><span class="line">library/examples-bookinfo-reviews-v1:1.8.0</span><br><span class="line">library/examples-bookinfo-reviews-v2:1.8.0</span><br><span class="line">library/examples-bookinfo-reviews-v3:1.8.0</span><br><span class="line">library/galera:5.7.20</span><br><span class="line">library/gitlab-ce:10.3.3-ce.0</span><br><span class="line">library/golang:1.10.1-alpine3.7</span><br><span class="line">library/golang:1.9.5-alpine3.7</span><br><span class="line">library/gradle:5.5.1</span><br><span class="line">library/haproxy:1.6.14-alpine</span><br><span class="line">library/haproxy:1.7.10-alpine</span><br><span class="line">library/influxdb:1.4.2-alpine</span><br><span class="line">library/influxdb:1.4.3</span><br><span class="line">library/influxdb:1.5.2-alpine</span><br><span class="line">library/jenkins:2.101-alpine-enhanced</span><br><span class="line">library/kibana:6.5.4</span><br><span class="line">library/mariadb:10.2.12</span><br><span class="line">library/maven:3.5.3-ibmjava-8-alpine</span><br><span class="line">library/maven:3.5.3-jdk-8-alpine</span><br><span class="line">library/memcached:1.5.4-alpine</span><br><span class="line">library/mongo:3.4.14-jessie</span><br><span class="line">library/mongo:3.6.1</span><br><span class="line">library/mongo:3.6.13</span><br><span class="line">library/mongo:3.7.3-jessie</span><br><span class="line">library/mysql:5.6.39</span><br><span class="line">library/mysql:5.7.20</span><br><span class="line">library/nginx:1.11.12-alpine</span><br><span class="line">library/nginx:1.12.2</span><br><span class="line">library/nginx:1.13.8-alpine</span><br><span class="line">library/nginx-ingress-controller:0.23.0-cps-1.3</span><br><span class="line">library/node:9-alpine</span><br><span class="line">library/openjdk:8u151-alpine3.7</span><br><span class="line">library/openjdk:8u151-jre-alpine3.7</span><br><span class="line">library/php:7.1-apache</span><br><span class="line">library/python:2.7.14-alpine3.6</span><br><span class="line">library/python:3.6.5-alpine3.6</span><br><span class="line">library/rabbitmq:3.7.2-alpine</span><br><span class="line">library/redis:3.2.11-alpine</span><br><span class="line">library/redis:4.0.6-alpine</span><br><span class="line">library/redis:4.0.9-alpine</span><br><span class="line">library/redmine:3.4.4</span><br><span class="line">library/sbt:8u232_1.3.13</span><br><span class="line">library/wordpress:4.9.1</span><br></pre></td></tr></table></figure><p>我们先以单个镜像为例子如： <code>library/alpine:latest</code></p><ul><li>首先要得到镜像的 manifest 文件，从 manifest 文件中可以得到该镜像的所有 blob 文件。例如对于 registry 存储目录中的 <code>library/alpine:latest</code> 镜像来讲，它在 registry 中是这样存放的：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree</span><br><span class="line">.</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 21</span><br><span class="line">│       │   └── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── a1</span><br><span class="line">│       │   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">│       │       └── data</span><br><span class="line">│       └── be</span><br><span class="line">│           └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">│               └── data</span><br><span class="line">└── repositories</span><br><span class="line">    └── library</span><br><span class="line">        └── alpine</span><br><span class="line">            ├── _layers</span><br><span class="line">            │   └── sha256</span><br><span class="line">            │       ├── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">            │       │   └── link</span><br><span class="line">            │       └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">            │           └── link</span><br><span class="line">            ├── _manifests</span><br><span class="line">            │   ├── revisions</span><br><span class="line">            │   │   └── sha256</span><br><span class="line">            │   │       └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │   │           └── link</span><br><span class="line">            │   └── tags</span><br><span class="line">            │       └── latest</span><br><span class="line">            │           ├── current</span><br><span class="line">            │           │   └── link</span><br><span class="line">            │           └── index</span><br><span class="line">            │               └── sha256</span><br><span class="line">            │                   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │                       └── link</span><br><span class="line">            └── _uploads</span><br><span class="line"></span><br><span class="line">26 directories, 8 files</span><br></pre></td></tr></table></figure><ul><li>首先定义一些需要用到的变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义镜像列表</span></span><br><span class="line">IMAGES_LIST=<span class="string">"images.list"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 registry 存储目录的绝对路径</span></span><br><span class="line">REGISTRY_PATH=<span class="string">"/var/lib/registry"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输出的存储目录路径，要和 registay 存储在同一分区</span></span><br><span class="line">OUTPUT_DIR=<span class="string">"/var/lib/images"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义这两个固定变量</span></span><br><span class="line">BLOB_DIR=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">REPO_DIR=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义单个镜像</span></span><br><span class="line">image=<span class="string">"library/alpine:latest"</span></span><br><span class="line"><span class="comment"># 使用 bash 内置的变量替换截取出镜像的 name</span></span><br><span class="line">image_tag=<span class="variable">$&#123;image##*:&#125;</span></span><br><span class="line"><span class="comment"># 使用 bash 内置的变量替换截取出镜像的 tag</span></span><br><span class="line">image_name=<span class="variable">$&#123;image%%:*&#125;</span></span><br></pre></td></tr></table></figure><ul><li>步骤一：通过 <code>${REGISTRY_PATH}/${REPO_DIR}/${image_name}/_manifests/tags/${image_tag}/current/link</code> 文件得到 alpine 镜像 lasts 这个 tag 的 manifests 文件的 sha256 值，然后根据这个 sha256 值去 blobs 目录下找到镜像的 manifests 文件;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tag_link=<span class="variable">$&#123;REGISTRY_PATH&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line">manifest_sha256=$(sed <span class="string">'s/sha256://'</span> <span class="variable">$&#123;tag_link&#125;</span>)</span><br><span class="line">manifest=<span class="variable">$&#123;REGISTRY_PATH&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br></pre></td></tr></table></figure><ul><li>步骤二：找到镜像的 manifest 文件之后，在输出目录下创建相应的目录，并通过硬链接的方式将镜像的 manifest 链接到输出对应的目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">ln -f <span class="variable">$&#123;manifest&#125;</span> <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br></pre></td></tr></table></figure><ul><li>步骤三：参照 <strong>skopeo dir to registry</strong> 中的步骤三创建镜像 tag 的 link 文件，路径基本上保持一致，只不过前面需要加上输出目录的路径，步骤如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make image repositories dir</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/&#123;_uploads,_layers,_manifests&#125;</span><br><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class="line">mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create image tag manifest link file</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br></pre></td></tr></table></figure><ul><li>步骤四：通过正则匹配  sha256 值获取该镜像 manifest 文件中的所有 image layer 和 image config，并在一个 for 循环中将对应 sha256 值对应的 blob 文件硬链接到输出目录，并在 _layer 目录下创建相应的 link 文件。这一步和 <strong>skopeo dir to registry</strong> 中的步骤四及其相似。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> $(sed <span class="string">'/v1Compatibility/d'</span> <span class="variable">$&#123;manifest&#125;</span> | grep -Eo <span class="string">'\b[a-f0-9]&#123;64&#125;\b'</span> | sort -u); <span class="keyword">do</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">    ln -f <span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;layer&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span>/link</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>将上述步骤整合成一个 shell 脚本 <code>select_registry_images.sh</code> 如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -eo pipefail</span><br><span class="line"></span><br><span class="line">IMAGES_LIST="$1"</span><br><span class="line">REGISTRY_PATH="$2"</span><br><span class="line">OUTPUT_DIR="$3"</span><br><span class="line">BLOB_DIR="docker/registry/v2/blobs/sha256"</span><br><span class="line">REPO_DIR="docker/registry/v2/repositories"</span><br><span class="line"></span><br><span class="line">rm -rf $&#123;OUTPUT_DIR&#125;; mkdir -p $&#123;OUTPUT_DIR&#125;</span><br><span class="line">for image in $(find $&#123;IMAGES_LIST&#125; -type f -name "*.list" | xargs grep -Ev '^#|^/' | grep ':'); do</span><br><span class="line">    image_tag=$&#123;image##*:&#125;</span><br><span class="line">    image_name=$&#123;image%%:*&#125;</span><br><span class="line">    tag_link=$&#123;REGISTRY_PATH&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/current/link</span><br><span class="line">    manifest_sha256=$(sed 's/sha256://' $&#123;tag_link&#125;)</span><br><span class="line">    manifest=$&#123;REGISTRY_PATH&#125;/$&#123;BLOB_DIR&#125;/$&#123;manifest_sha256:0:2&#125;/$&#123;manifest_sha256&#125;/data</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;BLOB_DIR&#125;/$&#123;manifest_sha256:0:2&#125;/$&#123;manifest_sha256&#125;</span><br><span class="line">    ln -f $&#123;manifest&#125; $&#123;OUTPUT_DIR&#125;/$&#123;BLOB_DIR&#125;/$&#123;manifest_sha256:0:2&#125;/$&#123;manifest_sha256&#125;/data</span><br><span class="line"></span><br><span class="line">    # make image repositories dir</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/&#123;_uploads,_layers,_manifests&#125;</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/revisions/sha256/$&#123;manifest_sha256&#125;</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/&#123;current,index/sha256&#125;</span><br><span class="line">    mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/index/sha256/$&#123;manifest_sha256&#125;</span><br><span class="line"></span><br><span class="line">    # create image tag manifest link file</span><br><span class="line">    echo -n "sha256:$&#123;manifest_sha256&#125;" &gt; $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/current/link</span><br><span class="line">    echo -n "sha256:$&#123;manifest_sha256&#125;" &gt; $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/revisions/sha256/$&#123;manifest_sha256&#125;/link</span><br><span class="line">    echo -n "sha256:$&#123;manifest_sha256&#125;" &gt; $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_manifests/tags/$&#123;image_tag&#125;/index/sha256/$&#123;manifest_sha256&#125;/link</span><br><span class="line">    for layer in $(sed '/v1Compatibility/d' $&#123;manifest&#125; | grep -Eo '\b[a-f0-9]&#123;64&#125;\b' | sort -u); do</span><br><span class="line">        mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;BLOB_DIR&#125;/$&#123;layer:0:2&#125;/$&#123;layer&#125;</span><br><span class="line">        mkdir -p $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_layers/sha256/$&#123;layer&#125;</span><br><span class="line">        ln -f $&#123;BLOB_DIR&#125;/$&#123;layer:0:2&#125;/$&#123;layer&#125;/data $&#123;OUTPUT_DIR&#125;/$&#123;BLOB_DIR&#125;/$&#123;layer:0:2&#125;/$&#123;layer&#125;/data</span><br><span class="line">        echo -n "sha256:$&#123;layer&#125;" &gt; $&#123;OUTPUT_DIR&#125;/$&#123;REPO_DIR&#125;/$&#123;image_name&#125;/_layers/sha256/$&#123;layer&#125;/link</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行该脚本，将 images.list 中的 183 个镜像通过硬链接的方式，从 registry 存储中提取到另一个 registry 存储目录下，用时才 6s 左右。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@debian:~$ wc images.list</span><br><span class="line"> 183  183 5644 images.list</span><br><span class="line"></span><br><span class="line">root@debian:~$ time bash select_registry_images.sh images.list /var/lib/registry /var/lib/images</span><br><span class="line">bash select_registry_images.sh images.list /var/lib/registry   4.39s user 2.48s system 109% cpu 6.283 total</span><br></pre></td></tr></table></figure><h2 id="效果如何？"><a href="#效果如何？" class="headerlink" title="效果如何？"></a>效果如何？</h2><p>之前使用 overlay2 技术已经将流水线的镜像同步优化得很好了，由原来的最长 2h30min 缩短到了几分钟。</p><p>经过本次的优化，将流水线中第二次的镜像同步耗时从原来的  90s 缩短到了 6s，速度提升了 15 倍，而且过程比之前更简单了一些，也不再需要引入 overlay2 这种技术。看来之前被我吹了这么久的 overlay2 + registry 组合技术和这次优化相比也不过如此。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;overlay2-优化&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="images" scheme="https://blog.k8s.li/tags/images/"/>
    
      <category term="skopeo" scheme="https://blog.k8s.li/tags/skopeo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 registry 存储的特性</title>
    <link href="https://blog.k8s.li/skopeo-to-registry.html"/>
    <id>https://blog.k8s.li/skopeo-to-registry.html</id>
    <published>2021-04-16T16:00:00.000Z</published>
    <updated>2021-04-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="苦命打包工具人😭"><a href="#苦命打包工具人😭" class="headerlink" title="苦命打包工具人😭"></a>苦命打包工具人😭</h2><p>目前在负责公司 PaaS toB 产品的打包发布工作（苦命发版+打包工具人😣）。日常的一项工作就是跑完自动化打包流水线，再将打出来的安装包更新到 QA 测试环境中。因为打包环境和测试环境分布在两个不同的机房，产品的安装包需要跨公网从打包机器上同步到 QA 环境中，因此产品安装包的大小就决定着两者间同步的耗时。优化和减少产品安装包的大小就成为了提升流水线效率的途径之一。最近做的一项工作就是将产品补丁包的大小减少 30%～60%，大大节省了补丁包上传下载和安装的耗时，提升了产品打包流水线的效率。因此今天就总结一下从中学到的一点人生经验 👓。</p><h2 id="再次优化"><a href="#再次优化" class="headerlink" title="再次优化"></a>再次优化</h2><p>因为产品所有的组件都是容器化的形式部署的，所以产品的补丁包中最主要的就是镜像文件以及一些部署脚本，想要优化和见减小补丁包基本上等同于减小这些镜像的大小。众所周知 docker 镜像是由一层一层的 layer + 镜像的元数据信息构成的，其中镜像的元数据信息就是镜像的 image config + manifests，这些都是 json 格式的文本内容，相对于镜像的 layer 的大小，这些文本内容往往可以忽略不计。</p><p>其实去年的时候已经做过了一次优化，将补丁包镜像打包的方式由原来的 docker save 的方式替换成了 skopeo copy 到目录的方式，优化的效果就是：将补丁包的大小减少了 60%～80%；流水线的速度提升了 5 倍；补丁包安装速度也提升了 5 倍。这项优化的原理可以参考我之前的博客 <a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生</a>。虽然第一次已经有了这么明显的优化，但咱仍然觉得还有可以优化的空间。</p><p>经过第一次优化之后，产品补丁包中镜像存在的形式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kube <span class="comment"># tree images -h</span></span><br><span class="line">images</span><br><span class="line">├── [4.0K]  kube-apiserver:v1.20.5</span><br><span class="line">│   ├── [707K]  742efefc8a44179dcc376b969cb5e3f8afff66f87ab618a15164638ad07bf722</span><br><span class="line">│   ├── [ 28M]  98d681774b176bb2fd6b3499377d63ff4b1b040886dd9d3641bb93840815a1e7</span><br><span class="line">│   ├── [2.6K]  d7e24aeb3b10210bf6a2dc39f77c1ea835b22af06dfd2933c06e0421ed6d35ac</span><br><span class="line">│   ├── [642K]  fefd475334af8255ba693de12951b5176a2853c2f0d5d2b053e188a1f3b611d9</span><br><span class="line">│   ├── [ 949]  manifest.json</span><br><span class="line">│   └── [  33]  version</span><br><span class="line">├── [4.0K]  kube-controller-manager:v1.20.5</span><br><span class="line">│   ├── [ 27M]  454a7944c47b608efb657a1bef7f4093f63ceb2db14fd78c5ecd2a08333da7cf</span><br><span class="line">│   ├── [2.6K]  6f0c3da8c99e99bbe82920a35653f286bd8130f0662884e77fa9fcdca079c07f</span><br><span class="line">│   ├── [707K]  742efefc8a44179dcc376b969cb5e3f8afff66f87ab618a15164638ad07bf722</span><br><span class="line">│   ├── [642K]  fefd475334af8255ba693de12951b5176a2853c2f0d5d2b053e188a1f3b611d9</span><br><span class="line">│   ├── [ 949]  manifest.json</span><br><span class="line">│   └── [  33]  version</span><br><span class="line">└── [4.0K]  kube-scheduler:v1.20.5</span><br><span class="line">    ├── [ 12M]  565677e452d17c4e2841250bbf0cc010d906fbf7877569bb2d69bfb4e68db1b5</span><br><span class="line">    ├── [707K]  742efefc8a44179dcc376b969cb5e3f8afff66f87ab618a15164638ad07bf722</span><br><span class="line">    ├── [2.6K]  8d13f1db8bfb498afb0caff6bf3f8c599ecc2ace74275f69886067f6af8ffdf6</span><br><span class="line">    ├── [642K]  fefd475334af8255ba693de12951b5176a2853c2f0d5d2b053e188a1f3b611d9</span><br><span class="line">    ├── [ 949]  manifest.json</span><br><span class="line">    └── [  33]  version</span><br></pre></td></tr></table></figure><p>仔细分析可以发现这样打包出来的镜像要比它们在 registry 中的所占存储空间要大一些，这是因为每一个镜像存储目录下都保存在该镜像的所有 layer ，不能像 registry 存储那样可以复用相同的 layer。比如 <code>kube-apiserver</code>  <code>kube-controller-manager</code> <code>kube-scheduler</code> 这三个镜像都是使用的 <code>k8s.gcr.io/build-image/go-runner</code> 这个 base 镜像。在 registry 中，它只需要存储一份 <code>go-runner</code> base 镜像即可。而使用 skopeo copy 存储在目录中时，就需要分别存储一份这个 base 镜像了。</p><p>从文件名和文件大小也可以大致推断出 <code>707K</code> 大小的 742efefc8a 就是 <code>go-runner</code> 镜像的跟文件系统；<code>642K</code> 大小的 fefd47533 就是 go-runner 的二进制文件；<code>2.x</code> 左右大小的应该就是镜像的 image config 文件；剩下那个十几二十几 M 的就是  <code>kube-apiserver</code>  <code>kube-controller-manager</code> <code>kube-scheduler</code>  的二进制文件；manifest.json 文件就是镜像在 registry 存储中的 manifest 。</p><ul><li>使用 find 来统计这些文件的数量，经过去重之后可以发现镜像的 layer 文件和 config 文件总数量从原来的 12 个减少到 8 个。做一个简单的加法计算也就是：3 个 image config 文件 + 3 个二进制文件 + 1 个 base 镜像 layer 文件 + 1 个 go-runner 二进制文件，这不正好就是 8 嘛😂</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root/kube <span class="comment"># find images -type f | grep -Eo "\b[a-f0-9]&#123;64&#125;\b" | wc</span></span><br><span class="line">12</span><br><span class="line">root@debian:/root/kube <span class="comment"># find images -type f | grep -Eo "\b[a-f0-9]&#123;64&#125;\b" | sort -u | wc -l</span></span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>既然补丁包中的镜像文件有一些相同的 layer，那么去重这些相同的 layer 文件岂不就能减少补丁包的大小了？于是就拿了一个历史的补丁包测试一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root $ du -sh images</span><br><span class="line">3.3Gimages</span><br><span class="line">root@debian:/root $ find images -<span class="built_in">type</span> f ! -name <span class="string">'version'</span> ! -name <span class="string">'manifest.json'</span> | wc -l</span><br><span class="line">279</span><br><span class="line">root@debian:/root $ mkdir -p images2</span><br><span class="line">root@debian:/root $ find images -<span class="built_in">type</span> f -<span class="built_in">exec</span> mv &#123;&#125; images2 \;</span><br><span class="line">root@debian:/root $ du -sh images2</span><br><span class="line">1.3Gimages2</span><br><span class="line">root@debian:/root $ $ find images2 -<span class="built_in">type</span> f ! -name <span class="string">'version'</span> ! -name <span class="string">'manifest.json'</span> | wc -l</span><br><span class="line">187</span><br></pre></td></tr></table></figure><p>没有对比就没有伤害，经过测试之后发现：补丁包中镜像文件的总数量由原来的 279 个减小至 187 个，总大小从原来的 3.3G 减小到 1.3G，减小了 60%！当时兴奋得我拍案叫绝，如获珍宝。其实这得益于我们产品组件使用的 base 镜像基本上是相同的，因此可以去除掉很多相同的 base 镜像 layer 文件。</p><p>既然找到了减小补丁包中镜像大小的思路，那么只要找到一种方式来去重这些镜像 layer 就可以了。首先想到的就是使用 registry 存储：根据 registry 存储的特性，镜像在 registry 中是可以复用相同的 layer 的。所以大体的思路就是将这些补丁包中的镜像转换为 registry 存储的格式，在安装的时候再将 registry 存储的格式转换为 skopeo copy 支持的 dir 格式。</p><h2 id="构建-skopeo-dir-镜像存储"><a href="#构建-skopeo-dir-镜像存储" class="headerlink" title="构建 skopeo dir 镜像存储"></a>构建 skopeo dir 镜像存储</h2><ul><li>为了方便演示，需要找个合适的镜像列表，看了一下 <a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">ks-installer</a> 项目中有个镜像列表，看样子比较合适那就用它吧😃</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># curl -L -O https://github.com/kubesphere/ks-installer/releases/download/v3.0.0/images-list.txt</span></span><br></pre></td></tr></table></figure><ul><li>首先将镜像使用 skopeo sync 同步到本地目录，并统计一下镜像的大小和文件的数量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># for img in $(cat cat images-list.txt | grep -v "#");do skopeo sync --insecure-policy --src docker --dest dir $&#123;img&#125; images; done</span></span><br><span class="line"></span><br><span class="line">root@debian:/root <span class="comment"># tree images -d -L 1</span></span><br><span class="line">images</span><br><span class="line">├── alpine:3.10.4</span><br><span class="line">├── busybox:1.31.1</span><br><span class="line">├── calico</span><br><span class="line">├── coredns</span><br><span class="line">├── csiplugin</span><br><span class="line">├── docker:19.03</span><br><span class="line">├── elastic</span><br><span class="line">├── fluent</span><br><span class="line">├── haproxy:2.0.4</span><br><span class="line">├── istio</span><br><span class="line">├── jaegertracing</span><br><span class="line">├── java:openjdk-8-jre-alpine</span><br><span class="line">├── jenkins</span><br><span class="line">├── jimmidyson</span><br><span class="line">├── joosthofman</span><br><span class="line">├── kubesphere</span><br><span class="line">├── minio</span><br><span class="line">├── mirrorgooglecontainers</span><br><span class="line">├── mysql:8.0.11</span><br><span class="line">├── nginx:1.14-alpine</span><br><span class="line">├── nginxdemos</span><br><span class="line">├── openpitrix</span><br><span class="line">├── osixia</span><br><span class="line">├── perl:latest</span><br><span class="line">├── prom</span><br><span class="line">├── redis:5.0.5-alpine</span><br><span class="line">└── wordpress:4.8-apache</span><br></pre></td></tr></table></figure><ul><li>使用 skopeo sync 将镜像同步到本地 images 目录后，统计可得所有镜像的大小为 11G、总的文件为 1264 个。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># du -sh images</span></span><br><span class="line">11Gimages</span><br><span class="line">root@debian:/root <span class="comment"># find images -type f ! -name "version" | wc -l</span></span><br><span class="line">1264</span><br></pre></td></tr></table></figure><h2 id="转换成-registry-存储目录"><a href="#转换成-registry-存储目录" class="headerlink" title="转换成 registry 存储目录"></a>转换成 registry 存储目录</h2><p>根据下图所示的 registry 存储结构，我们要将镜像的 layer、image config、manifests 这三种文件根据它们的 sha256 值存放到 blobs/sha256 目录下，然后再在 repositories 目录下创建相应link 文件，这样就可以将镜像转换成 registry 存储的格式了。</p><p><img src="https://p.k8s.li/registry-storage.jpeg" alt=""></p><p>为方便演示我们先以单个镜像为例，将 <code>images/alpine:3.10.4</code> 这个镜像在转换成 docker registry 存储目录的形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># tree -h images/alpine:3.10.4</span></span><br><span class="line">images/alpine:3.10.4</span><br><span class="line">└── [4.0K]  alpine:3.10.4</span><br><span class="line">    ├── [2.7M]  4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">    ├── [1.5K]  af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">    ├── [ 528]  manifest.json</span><br><span class="line">    └── [  33]  version</span><br></pre></td></tr></table></figure><p> 根据镜像文件大小我们可以得知： <code>2.7M</code> 大小的 <code>4167d3e1497……</code> 文件就是镜像的 layer 文件，由于 alpine 是一个 base 镜像，该 layer 就是 alpine 的根文件系统；<code>1.5K</code> 大小的 <code>af341ccd2……</code> 显而易见就是镜像的 images config 文件；<code>manifest.json</code> 文件则是镜像在 registry 存储中的 manifest.json 文件。</p><ul><li>先创建该镜像在 registry 存储中的目录结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># mkdir -p docker/registry/v2/&#123;blobs/sha256,repositories/alpine&#125;</span></span><br><span class="line">root@debian:/root <span class="comment"># tree docker</span></span><br><span class="line">docker</span><br><span class="line">└── registry</span><br><span class="line">    └── v2</span><br><span class="line">        ├── blobs</span><br><span class="line">        │   └── sha256</span><br><span class="line">        └── repositories</span><br><span class="line">            └── alpine</span><br></pre></td></tr></table></figure><ul><li>构建镜像 layer 的 link 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> images/alpine:3.10.4/manifest.json | sort -u | xargs -L1 -I &#123;&#125; mkdir -p docker/registry/v2/repositories/alpine/_layers/sha256/&#123;&#125;</span><br><span class="line"></span><br><span class="line">grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> images/alpine:3.10.4/manifest.json | sort -u | xargs -L1 -I &#123;&#125; sh -c <span class="string">"echo -n 'sha256:&#123;&#125;' &gt; docker/registry/v2/repositories/alpine/_layers/sha256/&#123;&#125;/link"</span></span><br></pre></td></tr></table></figure><ul><li>构建镜像 tag 的 link 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">manifests_sha256=$(sha256sum images/alpine:3.10.4/manifest.json | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/revisions/sha256/<span class="variable">$&#123;manifests_sha256&#125;</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifests_sha256&#125;</span>"</span> &gt; docker/registry/v2/repositories/alpine/_manifests/revisions/sha256/<span class="variable">$&#123;manifests_sha256&#125;</span>/link</span><br><span class="line"></span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/tags/3.10.4/index/sha256/<span class="variable">$&#123;manifests_sha256&#125;</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifests_sha256&#125;</span>"</span> &gt; docker/registry/v2/repositories/alpine/_manifests/tags/3.10.4/index/sha256/<span class="variable">$&#123;manifests_sha256&#125;</span>/link</span><br><span class="line"></span><br><span class="line">mkdir -p docker/registry/v2/repositories/alpine/_manifests/tags/3.10.4/current</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifests_sha256&#125;</span>"</span> &gt; docker/registry/v2/repositories/alpine/_manifests/tags/3.10.4/current/link</span><br></pre></td></tr></table></figure><ul><li>构建镜像的 blobs 目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p docker/registry/v2/blobs/sha256/<span class="variable">$&#123;manifests_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifests_sha256&#125;</span></span><br><span class="line">ln -f images/alpine:3.10.4/manifest.json docker/registry/v2/blobs/sha256/<span class="variable">$&#123;manifests_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifests_sha256&#125;</span>/data</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> $(grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> images/alpine:3.10.4/manifest.json); <span class="keyword">do</span></span><br><span class="line">    mkdir -p docker/registry/v2/blobs/sha256/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">    ln -f  images/alpine:3.10.4/<span class="variable">$&#123;layer&#125;</span> docker/registry/v2/blobs/sha256/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>最终得到的 registry 存储目录如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker</span><br><span class="line">└── registry</span><br><span class="line">    └── v2</span><br><span class="line">        ├── blobs</span><br><span class="line">        │   └── sha256</span><br><span class="line">        │       ├── 41</span><br><span class="line">        │       │   └── 4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">        │       │       └── data</span><br><span class="line">        │       ├── af</span><br><span class="line">        │       │   └── af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">        │       │       └── data</span><br><span class="line">        │       └── de</span><br><span class="line">        │           └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">        │               └── data</span><br><span class="line">        └── repositories</span><br><span class="line">            └── alpine</span><br><span class="line">                ├── _layers</span><br><span class="line">                │   └── sha256</span><br><span class="line">                │       ├── 4167d3e149762ea326c26fc2fd4e36fdeb7d4e639408ad30f37b8f25ac285a98</span><br><span class="line">                │       │   └── link</span><br><span class="line">                │       └── af341ccd2df8b0e2d67cf8dd32e087bfda4e5756ebd1c76bbf3efa0dc246590e</span><br><span class="line">                │           └── link</span><br><span class="line">                └── _manifests</span><br><span class="line">                    ├── revisions</span><br><span class="line">                    │   └── sha256</span><br><span class="line">                    │       └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">                    │           └── link</span><br><span class="line">                    └── tags</span><br><span class="line">                        └── 3.10.4</span><br><span class="line">                            ├── current</span><br><span class="line">                            │   └── link</span><br><span class="line">                            └── index</span><br><span class="line">                                └── sha256</span><br><span class="line">                                    └── de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">                                        └── link</span><br></pre></td></tr></table></figure><ul><li>测试是否正常，本地 docker run 一个 registry 容器，将刚刚转换的 registry 存储目录挂载到容器的 /var/lib/registry，然后再使用 docker pull 的方式拉取镜像，在使用 docker run 测试一下能否正常使用。经过验证之后确实可以使用，那就说明这样的转换是没有问题的😊。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># docker pull localhost/alpine:3.10.4</span></span><br><span class="line">3.10.4: Pulling from alpine</span><br><span class="line">4167d3e14976: Pull complete</span><br><span class="line">Digest: sha256:de78803598bc4c940fc4591d412bffe488205d5d953f94751c6308deeaaa7eb8</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> localhost/alpine:3.10.4</span><br><span class="line">root@debian:/root <span class="comment"># docker run --rm -it localhost/alpine:3.10.4 cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">"Alpine Linux"</span></span><br><span class="line">ID=alpine</span><br><span class="line">VERSION_ID=3.10.4</span><br><span class="line">PRETTY_NAME=<span class="string">"Alpine Linux v3.10"</span></span><br><span class="line">HOME_URL=<span class="string">"https://alpinelinux.org/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.alpinelinux.org/"</span></span><br></pre></td></tr></table></figure><ul><li>将上述步骤整合成一个 shell 脚本，内容如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">IMAGES_DIR=<span class="string">"images"</span></span><br><span class="line">REGISTRY_DIR=<span class="string">"docker"</span></span><br><span class="line"></span><br><span class="line">rm -rf <span class="variable">$&#123;REGISTRY_DIR&#125;</span></span><br><span class="line">BLOBS_PATH=<span class="string">"<span class="variable">$&#123;REGISTRY_DIR&#125;</span>/registry/v2/blobs"</span></span><br><span class="line">REPO_PATH=<span class="string">"<span class="variable">$&#123;REGISTRY_DIR&#125;</span>/registry/v2/repositories"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> $(find <span class="variable">$&#123;IMAGES_DIR&#125;</span> -<span class="built_in">type</span> f | sed -n <span class="string">'s|/manifest.json||p'</span> | sort -u); <span class="keyword">do</span></span><br><span class="line">    image_name=$(<span class="built_in">echo</span> <span class="variable">$&#123;image%%:*&#125;</span> | sed <span class="string">"s|<span class="variable">$&#123;IMAGES_DIR&#125;</span>/||g"</span>)</span><br><span class="line">    image_tag=<span class="variable">$&#123;image##*:&#125;</span>; mfs=<span class="string">"<span class="variable">$&#123;image&#125;</span>/manifest.json"</span></span><br><span class="line">    mfs_sha256=$(sha256sum <span class="variable">$&#123;image&#125;</span>/manifest.json | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">    mkdir -p <span class="variable">$&#123;BLOBS_PATH&#125;</span>/sha256/<span class="variable">$&#123;mfs_sha256:0:2&#125;</span>/<span class="variable">$&#123;mfs_sha256&#125;</span></span><br><span class="line">    ln -f <span class="variable">$&#123;mfs&#125;</span> <span class="variable">$&#123;BLOBS_PATH&#125;</span>/sha256/<span class="variable">$&#123;mfs_sha256:0:2&#125;</span>/<span class="variable">$&#123;mfs_sha256&#125;</span>/data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make image repositories dir</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/&#123;_layers,_manifests/revisions&#125;/sha256</span><br><span class="line">    mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;mfs_sha256&#125;</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class="line">    mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;mfs_sha256&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># create image tag manifest link file</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;mfs_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;mfs_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;mfs_sha256&#125;</span>/link</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;mfs_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;mfs_sha256&#125;</span>/link</span><br><span class="line"></span><br><span class="line">    <span class="comment"># link image layers file to registry blobs file</span></span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> $(grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> <span class="variable">$&#123;mfs&#125;</span>); <span class="keyword">do</span></span><br><span class="line">        mkdir -p <span class="variable">$&#123;BLOBS_PATH&#125;</span>/sha256/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;layer&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span>/link</span><br><span class="line">        ln -f <span class="variable">$&#123;image&#125;</span>/<span class="variable">$&#123;layer&#125;</span> <span class="variable">$&#123;BLOBS_PATH&#125;</span>/sha256/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>使用该脚本对 images 中所有镜像进行一下转换，最终得到的 registry 存储大小为 8.3 G，比之前减少了 2.7G。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@debian:/root <span class="comment"># du -sh docker</span></span><br><span class="line">8.3Gdocker</span><br><span class="line">root@debian:/root <span class="comment"># find docker -type f -name "data" | wc -l</span></span><br><span class="line">1046</span><br></pre></td></tr></table></figure><h2 id="再还原回-Dir-格式"><a href="#再还原回-Dir-格式" class="headerlink" title="再还原回 Dir 格式"></a>再还原回 Dir 格式</h2><p>经过上述步骤一番折腾之后，将补丁包中镜像文件的总大小的确实减少了很多，但同时又引入了另一个问题：skopeo 无法直接使用 registry 存储的格式。因此我们还需要再做一次转换，将镜像由 registry 存储的格式还原回 skopeo 所支持的 dir 格式。至于还原的原理和方法我在 <a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a> 中有详细地介绍，感兴趣的小伙伴可以再去看一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">REGISTRY_DOMAIN=<span class="string">"harbor.k8s.li"</span></span><br><span class="line">REGISTRY_PATH=<span class="string">"/var/lib/registry"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 registry 存储主目录下</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;REGISTRY_PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">gen_skopeo_dir</span></span>() &#123;</span><br><span class="line">   <span class="comment"># 定义 registry 存储的 blob 目录 和 repositories 目录，方便后面使用</span></span><br><span class="line">    BLOB_DIR=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">    REPO_DIR=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line">    <span class="comment"># 定义生成 skopeo 目录</span></span><br><span class="line">    SKOPEO_DIR=<span class="string">"docker/skopeo"</span></span><br><span class="line">    <span class="comment"># 通过 find 出 current 文件夹可以得到所有带 tag 的镜像，因为一个 tag 对应一个 current 目录</span></span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> $(find <span class="variable">$&#123;REPO_DIR&#125;</span> -<span class="built_in">type</span> d -name <span class="string">"current"</span>); <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 根据镜像的 tag 提取镜像的名字</span></span><br><span class="line">        name=$(<span class="built_in">echo</span> <span class="variable">$&#123;image&#125;</span> | awk -F <span class="string">'/'</span> <span class="string">'&#123;print $5"/"$6":"$9&#125;'</span>)</span><br><span class="line">        link=$(cat <span class="variable">$&#123;image&#125;</span>/link | sed <span class="string">'s/sha256://'</span>)</span><br><span class="line">        mfs=<span class="string">"<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;link:0:2&#125;</span>/<span class="variable">$&#123;link&#125;</span>/data"</span></span><br><span class="line">        <span class="comment"># 创建镜像的硬链接需要的目录</span></span><br><span class="line">        mkdir -p <span class="string">"<span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>"</span></span><br><span class="line">        <span class="comment"># 硬链接镜像的 manifests 文件到目录的 manifest 文件</span></span><br><span class="line">        ln <span class="variable">$&#123;mfs&#125;</span> <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>/manifest.json</span><br><span class="line">        <span class="comment"># 使用正则匹配出所有的 sha256 值，然后排序去重</span></span><br><span class="line">        layers=$(grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> <span class="variable">$&#123;mfs&#125;</span> | sort -u)</span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> <span class="variable">$&#123;layers&#125;</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="comment"># 硬链接 registry 存储目录里的镜像 layer 和 images config 到镜像的 dir 目录</span></span><br><span class="line">            ln <span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sync_image</span></span>() &#123;</span><br><span class="line">    <span class="comment"># 使用 skopeo sync 将 dir 格式的镜像同步到 harbor</span></span><br><span class="line">    <span class="keyword">for</span> project <span class="keyword">in</span> $(ls <span class="variable">$&#123;SKOPEO_DIR&#125;</span>); <span class="keyword">do</span></span><br><span class="line">        skopeo sync --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> \</span><br><span class="line">        --src dir --dest docker <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;project&#125;</span> <span class="variable">$&#123;REGISTRY_DOMAIN&#125;</span>/<span class="variable">$&#123;project&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gen_skopeo_dir</span><br><span class="line">sync_image</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;苦命打包工具人😭&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="image" scheme="https://blog.k8s.li/tags/image/"/>
    
  </entry>
  
</feed>
