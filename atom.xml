<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reimu&#39;s blog</title>
  <icon>https://blog.k8s.li/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.k8s.li/"/>
  <updated>2022-05-24T16:00:00.000Z</updated>
  <id>https://blog.k8s.li/</id>
  
  <author>
    <name>Reimu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Packer 构建虚拟机镜像踩的坑</title>
    <link href="https://blog.k8s.li/packer-vsphere-example.html"/>
    <id>https://blog.k8s.li/packer-vsphere-example.html</id>
    <published>2022-05-24T16:00:00.000Z</published>
    <updated>2022-05-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>不久前写过一篇博客《<a href="https://blog.k8s.li/redfish-esxi-os-installer.html">使用 Redfish 自动化安装 ESXi OS</a>》分享了如何使用 Redfish 给物理服务器自动化安装 ESXi OS。虽然在我们内部做到了一键安装&#x2F;重装 ESXi OS，但想要将这套方案应用在客户的私有云机房环境中还是有很大的难度。</p><p>首先这套工具必须运行在 Linux 中才行，对于 Bare Metal 裸服务器来讲还没有安装任何 OS，这就引申出了鸡生蛋蛋生鸡的尴尬难题。虽然可以给其中的一台物理服务器安装上一个 Linux 发行版比如 CentOS，然后再将这套自动化安装 ESXi OS 的工具搭建上去，但这会额外占用一台物理服务器，客户也肯定不愿意接受。</p><p>真实的实施场景中，可行的方案就是将这套工具运行在实施人员的笔记本电脑或者客户提供的台式机上。这又引申出了一个另外的难题：实施人员的笔记本电脑或者客户提供的台式机运行的大都是 Windows 系统，在 Windows 上安装 Ansible、Make、Python3 等一堆依赖，想想就不太现实，而且稳定性和兼容性很难得到保障，以及开发环境和运行环境不一致导致一些其他的奇奇怪怪的问题。虽然该工具支持容器化运行能够解决开发环境和运行环境不一致的问题，但在 Windows 上安装 docker 也比较繁琐和麻烦。</p><p>这时候就要搬出计算机科学中的至理名言: <strong>计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决</strong>。</p><blockquote><p><strong>Any problem in computer science can be solved by another layer of indirection.</strong></p></blockquote><p>既然我们这套工具目前只能在 Linux 上稳定运行，那么我们不如就将这套工具和它所运行的环境封装在一个“中间容器”里，比如虚拟机。使用者只需要安装像 <a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">VMware Workstation</a> 或者 <a href="https://www.virtualbox.org/">Oracle VirtualBox</a> 虚拟化管理软件运行这台虚拟机不就行了。一切皆可套娃（🤣</p><p>其实原理就像 docker 容器那样，我们将这套工具和它所依赖的运行环境在构建虚拟机的时候将它们全部打包在一起，使用者只需要想办法将这个虚拟机运行起来，就能一键使用我们这个工具，不必再手动安装 Ansible 和 Python3 等一堆依赖了，真正做到开箱即用。</p><p>于是本文分享一下如何使用 <a href="https://www.packer.io/">Packer</a> 在 <a href="https://www.vmware.com/products/vsphere.html">VMware vSphere</a> 环境上构建虚拟机镜像的方案，以及如何在这个虚拟机中运行一个 k3s 集群，然后通过 <a href="https://github.com/argoproj/argo-workflows">argo-workflow</a> 工作流引擎运行 <a href="https://github.com/muzi502/redfish-esxi-os-installer">redfish-esxi-os-installer</a> 来对裸金属服务器进行自动化安装 ESXi OS 的操作。</p><h2 id="劝退三连-😂"><a href="#劝退三连-😂" class="headerlink" title="劝退三连 😂"></a>劝退三连 😂</h2><ul><li>提前下载好 Base OS 的 ISO 镜像，比如 <a href="https://mirrors.tuna.tsinghua.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso">CentOS-7-x86_64-Minimal-2009.iso</a></li><li>需要一个 <a href="https://www.vmware.com/products/vcenter-server.html">vCenter Server</a> 以及一台 <a href="https://www.vmware.com/products/esxi-and-esx.html">VMware ESXi</a> 主机</li><li>ESXi 的 VM Network 网络中需要有一台 DHCP 服务器用于给 VM 分配 IP</li></ul><h2 id="Packer"><a href="#Packer" class="headerlink" title="Packer"></a>Packer</h2><p>很早之前玩儿 VMware ESXi 的时候还没有接触到 Packer，那时候只能使用<a href="https://blog.k8s.li/esxi-vmbase.html">手搓虚拟机模版</a>的方式，费时费力还容易出错，下面就介绍一下这个自动化构建虚拟机镜像的工具。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/hashicorp/packer">Packer</a> 是 <a href="https://www.hashicorp.com/">hashicorp</a> 公司开源的一个虚拟机镜像构建工具，与它类似的工具还有 <a href="https://github.com/openstack/diskimage-builder">OpenStack diskimage-builder</a>、<a href="https://aws.amazon.com/image-builder/">AWS EC2 Image Builder</a> ，但是这两个只支持自家的平台。Packer 能够支持主流的公有云、私有云以及混合云，比它俩高到不知道哪里去了。可以这么来理解：Packer 在 IaaS 虚拟化领域的地位就像 Docker 在 PaaS 容器虚拟中那样重要，一个是虚拟机镜像的构建，另一个容器镜像的构建，有趣的是两者都是在 2013 年成立的项目。</p><p>Kubernetes 社区的 <a href="https://github.com/kubernetes-sigs/image-builder">image-builder</a> 项目就是使用 Packer 构建一些公有云及私有云的虚拟机模版提供给 <a href="https://github.com/kubernetes-sigs/cluster-api">cluster-api</a> 项目使用，十分推荐大家去看下这个项目的代码，刚开始我也是从这个项目熟悉 Packer 的，并从中抄袭借鉴了很多内容 😅。</p><p>下面就介绍一下 Packer 的基本使用方法</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>对于 Linux 发行版，建议直接下载二进制安装包来安装，通过包管理器安装感觉有点麻烦</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span> https://releases.hashicorp.com/packer/1.8.0/packer_1.8.0_linux_amd64.zip$ <span class="token function">unzip</span> packer_1.8.0_linux_amd64.zip$ <span class="token function">mv</span> packer /usr/local/bin/packer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果是 macOS 用户直接 <code>brew install packer</code> 命令一把梭就能安装好</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>不同于 Docker 有一个 Dockerfile 文件来定义如何构建容器镜像，Packer 构建虚拟机镜像则是由一系列的配置文件缝合而成，主要由 <a href="https://www.packer.io/docs/terminology#builders">Builders</a> 、<a href="https://www.packer.io/docs/terminology#provisioners">Provisioners</a> 、<a href="https://www.packer.io/docs/terminology#post-processors">Post-processors</a> 这三部分组成。其中 Builder 主要是与 IaaS Provider 构建器相关的一些参数；Provisioner 用来配置构建过程中需要运行的一些任务；Post-processors 用于配置构建动作完成后的一些后处理操作；下面就依次介绍一下这几个配置的详细使用说明：</p><p>另外 Packer 推荐的配置语法是 <a href="https://www.packer.io/guides/hcl">HCL2</a>，但个人觉着 HCL 的语法风格怪怪的，不如 json 那样整洁好看 😅，因此下面我统一使用 json 来进行配置，其实参数都一样，只是格式不相同而已。</p><h4 id="vars-x2F-var-file"><a href="#vars-x2F-var-file" class="headerlink" title="vars&#x2F;var-file"></a>vars&#x2F;var-file</h4><p>Packer 的变量配置文件有点类似于 Ansible 中的 vars。一个比较合理的方式就是按照每个参数的作用域进行分类整理，将它们统一放在一个单独的配置文件中，这样维护起来会更方便一些。参考了 image-builder 项目中的 <a href="https://github.com/kubernetes-sigs/image-builder/tree/master/images/capi/packer/ova">ova</a> 构建后我根据参数的不同作用划分成了如下几个配置文件：</p><ul><li><a href="https://github.com/muzi502/packer-vsphere-example/blob/master/packer/vcenter.json">vcenter.json</a>：主要用于配置一些与 vCenter 相关的参数，比如 datastore、datacenter、resource_pool、vcenter_server 等；另外像 vcenter 的用户名和密码建议使用环境变量的方式，避免明文编码在文件当中；</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"folder"</span><span class="token operator">:</span> <span class="token string">"Packer"</span><span class="token punctuation">,</span>  <span class="token property">"resource_pool"</span><span class="token operator">:</span> <span class="token string">"Packer"</span><span class="token punctuation">,</span>  <span class="token property">"cluster"</span><span class="token operator">:</span> <span class="token string">"Packer"</span><span class="token punctuation">,</span>  <span class="token property">"datacenter"</span><span class="token operator">:</span> <span class="token string">"Packer"</span><span class="token punctuation">,</span>  <span class="token property">"datastore"</span><span class="token operator">:</span> <span class="token string">"Packer"</span><span class="token punctuation">,</span>  <span class="token property">"convert_to_template"</span><span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">,</span>  <span class="token property">"create_snapshot"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>  <span class="token property">"linked_clone"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>  <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"VM Network"</span><span class="token punctuation">,</span>  <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>  <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"administrator@vsphere.local"</span><span class="token punctuation">,</span>  <span class="token property">"vcenter_server"</span><span class="token operator">:</span> <span class="token string">"vcenter.k8s.li"</span><span class="token punctuation">,</span>  <span class="token property">"insecure_connection"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://github.com/muzi502/packer-vsphere-example/blob/master/packer/centos7.json">centos7.json</a>：主要用于配置一些通过 ISO 安装 CentOS 的参数，比如 ISO 的下载地址、ISO 的 checksum、kickstart 文件路径、关机命令、isolinux 启动参数等；</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"boot_command_prefix"</span><span class="token operator">:</span> <span class="token string">"&lt;tab> text ks=hd:fd0:"</span><span class="token punctuation">,</span>  <span class="token property">"boot_command_suffix"</span><span class="token operator">:</span> <span class="token string">"/7/ks.cfg&lt;enter>&lt;wait>"</span><span class="token punctuation">,</span>  <span class="token property">"boot_media_path"</span><span class="token operator">:</span> <span class="token string">"/HTTP"</span><span class="token punctuation">,</span>  <span class="token property">"build_name"</span><span class="token operator">:</span> <span class="token string">"centos-7"</span><span class="token punctuation">,</span>  <span class="token property">"distro_arch"</span><span class="token operator">:</span> <span class="token string">"amd64"</span><span class="token punctuation">,</span>  <span class="token property">"distro_name"</span><span class="token operator">:</span> <span class="token string">"centos"</span><span class="token punctuation">,</span>  <span class="token property">"distro_version"</span><span class="token operator">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span>  <span class="token property">"floppy_dirs"</span><span class="token operator">:</span> <span class="token string">"./kickstart/&#123;&#123;user `distro_name`&#125;&#125;/http/"</span><span class="token punctuation">,</span>  <span class="token property">"guest_os_type"</span><span class="token operator">:</span> <span class="token string">"centos7-64"</span><span class="token punctuation">,</span>  <span class="token property">"iso_checksum"</span><span class="token operator">:</span> <span class="token string">"07b94e6b1a0b0260b94c83d6bb76b26bf7a310dc78d7a9c7432809fb9bc6194a"</span><span class="token punctuation">,</span>  <span class="token property">"iso_checksum_type"</span><span class="token operator">:</span> <span class="token string">"sha256"</span><span class="token punctuation">,</span>  <span class="token property">"iso_url"</span><span class="token operator">:</span> <span class="token string">"https://mirrors.edge.kernel.org/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso"</span><span class="token punctuation">,</span>  <span class="token property">"os_display_name"</span><span class="token operator">:</span> <span class="token string">"CentOS 7"</span><span class="token punctuation">,</span>  <span class="token property">"shutdown_command"</span><span class="token operator">:</span> <span class="token string">"shutdown -h now"</span><span class="token punctuation">,</span>  <span class="token property">"vsphere_guest_os_type"</span><span class="token operator">:</span> <span class="token string">"centos7_64Guest"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://github.com/muzi502/packer-vsphere-example/blob/master/packer/photon3.json">photon3.json</a>：主要用于配置一些通过 ISO 安装 Photon3 OS 的参数，和上面的 centos7.json 作用基本一致；</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"boot_command_prefix"</span><span class="token operator">:</span> <span class="token string">"&lt;esc>&lt;wait> vmlinuz initrd=initrd.img root/dev/ram0 loglevel=3 photon.media=cdrom ks="</span><span class="token punctuation">,</span>  <span class="token property">"boot_command_suffix"</span><span class="token operator">:</span> <span class="token string">"/3/ks.json&lt;enter>&lt;wait>"</span><span class="token punctuation">,</span>  <span class="token property">"boot_media_path"</span><span class="token operator">:</span> <span class="token string">"http://&#123;&#123; .HTTPIP &#125;&#125;:&#123;&#123; .HTTPPort &#125;&#125;"</span><span class="token punctuation">,</span>  <span class="token property">"build_name"</span><span class="token operator">:</span> <span class="token string">"photon-3"</span><span class="token punctuation">,</span>  <span class="token property">"distro_arch"</span><span class="token operator">:</span> <span class="token string">"amd64"</span><span class="token punctuation">,</span>  <span class="token property">"distro_name"</span><span class="token operator">:</span> <span class="token string">"photon"</span><span class="token punctuation">,</span>  <span class="token property">"distro_version"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>  <span class="token property">"guest_os_type"</span><span class="token operator">:</span> <span class="token string">"vmware-photon-64"</span><span class="token punctuation">,</span>  <span class="token property">"http_directory"</span><span class="token operator">:</span> <span class="token string">"./kickstart/&#123;&#123;user `distro_name`&#125;&#125;/http/"</span><span class="token punctuation">,</span>  <span class="token property">"iso_checksum"</span><span class="token operator">:</span> <span class="token string">"c2883a42e402a2330d9c39b4d1e071cf9b3b5898"</span><span class="token punctuation">,</span>  <span class="token property">"iso_checksum_type"</span><span class="token operator">:</span> <span class="token string">"sha1"</span><span class="token punctuation">,</span>  <span class="token property">"iso_url"</span><span class="token operator">:</span> <span class="token string">"https://packages.vmware.com/photon/3.0/Rev3/iso/photon-minimal-3.0-a383732.iso"</span><span class="token punctuation">,</span>  <span class="token property">"os_display_name"</span><span class="token operator">:</span> <span class="token string">"VMware Photon OS 64-bit"</span><span class="token punctuation">,</span>  <span class="token property">"shutdown_command"</span><span class="token operator">:</span> <span class="token string">"shutdown now"</span><span class="token punctuation">,</span>  <span class="token property">"vsphere_guest_os_type"</span><span class="token operator">:</span> <span class="token string">"vmwarePhoton64Guest"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://github.com/muzi502/packer-vsphere-example/blob/master/packer/common.json">common.json</a>：一些公共参数，比如虚拟机的 ssh 用户名和密码（要和 kickstart 中设置的保持一致）、虚拟机的一些硬件配置如 CPU、内存、硬盘、虚拟机版本、网卡类型、存储控制器类型等；</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"ssh_username"</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>  <span class="token property">"ssh_password"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>  <span class="token property">"boot_wait"</span><span class="token operator">:</span> <span class="token string">"15s"</span><span class="token punctuation">,</span>  <span class="token property">"disk_controller_type"</span><span class="token operator">:</span> <span class="token string">"lsilogic"</span><span class="token punctuation">,</span>  <span class="token property">"disk_thin_provisioned"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>  <span class="token property">"disk_type_id"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>  <span class="token property">"firmware"</span><span class="token operator">:</span> <span class="token string">"bios"</span><span class="token punctuation">,</span>  <span class="token property">"cpu"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>  <span class="token property">"cpu_cores"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"memory"</span><span class="token operator">:</span> <span class="token string">"4096"</span><span class="token punctuation">,</span>  <span class="token property">"disk_size"</span><span class="token operator">:</span> <span class="token string">"65536"</span><span class="token punctuation">,</span>  <span class="token property">"network_card"</span><span class="token operator">:</span> <span class="token string">"e1000"</span><span class="token punctuation">,</span>  <span class="token property">"ssh_timeout"</span><span class="token operator">:</span> <span class="token string">"3m"</span><span class="token punctuation">,</span>  <span class="token property">"vmx_version"</span><span class="token operator">:</span> <span class="token string">"14"</span><span class="token punctuation">,</span>  <span class="token property">"base_build_version"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `template`&#125;&#125;"</span><span class="token punctuation">,</span>  <span class="token property">"build_timestamp"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;timestamp&#125;&#125;"</span><span class="token punctuation">,</span>  <span class="token property">"build_name"</span><span class="token operator">:</span> <span class="token string">"k3s"</span><span class="token punctuation">,</span>  <span class="token property">"build_version"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `ova_name`&#125;&#125;"</span><span class="token punctuation">,</span>  <span class="token property">"export_manifest"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token property">"output_dir"</span><span class="token operator">:</span> <span class="token string">"./output/&#123;&#123;user `build_version`&#125;&#125;"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h4><p>Builder 就是告诉 Packer 要使用什么类型的构建器构建什么样的虚拟机镜像，主要是与底层 IaaS 资源提供商相关的配置。比如 <a href="https://www.packer.io/plugins/builders/vsphere">vSphere Builder</a> 中有如下两种构建器：</p><ul><li><a href="https://www.packer.io/docs/builders/vsphere/vsphere-iso">vsphere-iso</a> 从 ISO 安装 OS 开始构建，通常情况下构建为一个虚拟机或虚拟机模版</li><li><a href="https://www.packer.io/docs/builders/vsphere/vsphere-clone">vsphere-clone</a> 通过 clone 虚拟机的方式进行构建，通常情况下构建产物为导出后的 OVF&#x2F;OVA 文件</li></ul><p>不同类型的 Builder 配置参数也会有所不同，每个参数的详细用途和说明可以参考 <a href="https://www.packer.io/plugins">Packer 官方的文档</a>，在这里就不一一说明了。因为 Packer 的参数配置是在是太多太复杂了，很难三言两语讲清楚。最佳的方式就是阅读官方的文档和一些其他项目的实现方式，照葫芦画瓢学就行。</p><p><a href="https://github.com/muzi502/packer-vsphere-example/blob/master/packer/builder.json">builders.json</a>：里面的配置参数大多都是引用的 var-file 中的参数，将这些参数单独抽出来的好处就是不同的 builder 之间可以复用一些公共参数。比如 vsphere-iso 和 vsphere-clone 这两种不同的 builder 与 vCenter 相关的 datacenter、datastore、vcenter_server 等参数都是其实相同的。</p><ul><li><a href="https://www.packer.io/docs/builders/vsphere/vsphere-iso">vsphere-iso</a> ：通过 ISO 安装 OS 构建一个虚拟机或虚拟机模版</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"builders"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"CPUs"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `cpu`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"RAM"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `memory`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"boot_command"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"&#123;&#123;user `boot_command_prefix`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token string">"&#123;&#123;user `boot_media_path`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token string">"&#123;&#123;user `boot_command_suffix`&#125;&#125;"</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"boot_wait"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `boot_wait`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"cluster"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `cluster`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"communicator"</span><span class="token operator">:</span> <span class="token string">"ssh"</span><span class="token punctuation">,</span>      <span class="token property">"convert_to_template"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `convert_to_template`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"cpu_cores"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `cpu_cores`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"create_snapshot"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `create_snapshot`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"datacenter"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `datacenter`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"datastore"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `datastore`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"disk_controller_type"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `disk_controller_type`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"firmware"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `firmware`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"floppy_dirs"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123; user `floppy_dirs`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"folder"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `folder`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"guest_os_type"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `vsphere_guest_os_type`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `host`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"http_directory"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123; user `http_directory`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"insecure_connection"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `insecure_connection`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"iso_checksum"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `iso_checksum_type`&#125;&#125;:&#123;&#123;user `iso_checksum`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"iso_urls"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `iso_url`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"vsphere-iso-base"</span><span class="token punctuation">,</span>      <span class="token property">"network_adapters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `network`&#125;&#125;"</span><span class="token punctuation">,</span>          <span class="token property">"network_card"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `network_card`&#125;&#125;"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `password`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"shutdown_command"</span><span class="token operator">:</span> <span class="token string">"echo '&#123;&#123;user `ssh_password`&#125;&#125;' | sudo -S -E sh -c '&#123;&#123;user `shutdown_command`&#125;&#125;'"</span><span class="token punctuation">,</span>      <span class="token property">"ssh_clear_authorized_keys"</span><span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">,</span>      <span class="token property">"ssh_password"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `ssh_password`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"ssh_timeout"</span><span class="token operator">:</span> <span class="token string">"4h"</span><span class="token punctuation">,</span>      <span class="token property">"ssh_username"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `ssh_username`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"storage"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"disk_size"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `disk_size`&#125;&#125;"</span><span class="token punctuation">,</span>          <span class="token property">"disk_thin_provisioned"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `disk_thin_provisioned`&#125;&#125;"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"vsphere-iso"</span><span class="token punctuation">,</span>      <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `username`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"vcenter_server"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `vcenter_server`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"vm_name"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `base_build_version`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"vm_version"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `vmx_version`&#125;&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://www.packer.io/docs/builders/vsphere/vsphere-clone">vsphere-clone</a>：通过 clone 虚拟机构建一个虚拟机，并导出虚拟机 OVF 模版</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"builders"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"CPUs"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `cpu`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"RAM"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `memory`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"cluster"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `cluster`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"communicator"</span><span class="token operator">:</span> <span class="token string">"ssh"</span><span class="token punctuation">,</span>      <span class="token property">"convert_to_template"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `convert_to_template`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"cpu_cores"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `cpu_cores`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"create_snapshot"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `create_snapshot`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"datacenter"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `datacenter`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"datastore"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `datastore`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"export"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"force"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"manifest"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123; user `export_manifest`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"output_directory"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `output_dir`&#125;&#125;"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"folder"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `folder`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `host`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"insecure_connection"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `insecure_connection`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"linked_clone"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `linked_clone`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"vsphere-clone"</span><span class="token punctuation">,</span>      <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `network`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `password`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"shutdown_command"</span><span class="token operator">:</span> <span class="token string">"echo '&#123;&#123;user `ssh_password`&#125;&#125;' | sudo -S -E sh -c '&#123;&#123;user `shutdown_command`&#125;&#125;'"</span><span class="token punctuation">,</span>      <span class="token property">"ssh_password"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `ssh_password`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"ssh_timeout"</span><span class="token operator">:</span> <span class="token string">"4h"</span><span class="token punctuation">,</span>      <span class="token property">"ssh_username"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `ssh_username`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"template"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `template`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"vsphere-clone"</span><span class="token punctuation">,</span>      <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `username`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"vcenter_server"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `vcenter_server`&#125;&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"vm_name"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `build_version`&#125;&#125;"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Provisioner"><a href="#Provisioner" class="headerlink" title="Provisioner"></a><a href="https://www.packer.io/docs/provisioners">Provisioner</a></h4><p>Provisioner 就是告诉 Packer 要如何构建镜像，有点类似于 Dockerile 中的 RUN&#x2F;COPY&#x2F;ADD 等指令，用于执行一些命令&#x2F;脚本、往虚拟机里添加一些文件、调用第三方插件执行一些操作等。</p><p>在这个配置文件中我先使用 file 模块将一些脚本和依赖文件上传到虚拟机中，然后使用 shell 模块在虚拟机中执行 install.sh 安装脚本。如果构建的 builder 比较多，比如需要支持多个 Linux 发行版，这种场景建议使用 Ansible。由于我在 ISO 安装 OS 的构建流程中已经将一些与 OS 发行版相关的操作完成了，在这里使用 shell 执行的操作不需要区分哪个 Linux 发行版，所以就没有使用 ansible。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"provisioners"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"file"</span><span class="token punctuation">,</span>      <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"scripts"</span><span class="token punctuation">,</span>      <span class="token property">"destination"</span><span class="token operator">:</span> <span class="token string">"/root"</span><span class="token punctuation">,</span>      <span class="token property">"except"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"vsphere-iso-base"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"file"</span><span class="token punctuation">,</span>      <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"resources"</span><span class="token punctuation">,</span>      <span class="token property">"destination"</span><span class="token operator">:</span> <span class="token string">"/root"</span><span class="token punctuation">,</span>      <span class="token property">"except"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"vsphere-iso-base"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>      <span class="token property">"environment_vars"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"INSECURE_REGISTRY=&#123;&#123;user `insecure_registry`&#125;&#125;"</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"inline"</span><span class="token operator">:</span> <span class="token string">"bash /root/scripts/install.sh"</span><span class="token punctuation">,</span>      <span class="token property">"except"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"vsphere-iso-base"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="post-processors"><a href="#post-processors" class="headerlink" title="post-processors"></a>post-processors</h3><p>一些构建后的操作， 比如 <code>&quot;type&quot;: &quot;manifest&quot;</code> 可以导出一些构建过程中的配置参数，给后续的其他操作来使用。再比如 <code>&quot;type&quot;: &quot;shell-local&quot;</code> 就是执行一些 shell 脚本，在这里就是执行一个 Python 脚本将 OVF 转换成 OVA。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"post-processors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"custom_data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"release_version"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `release_version`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"build_date"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;isotime&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"build_name"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `build_name`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"build_timestamp"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `build_timestamp`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"build_type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>        <span class="token property">"cpu"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `cpu`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"memory"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `memory`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"disk_size"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `disk_size`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"distro_arch"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123; user `distro_arch` &#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"distro_name"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123; user `distro_name` &#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"distro_version"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123; user `distro_version` &#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"firmware"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `firmware`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"guest_os_type"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `guest_os_type`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"os_name"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `os_display_name`&#125;&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"vsphere_guest_os_type"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `vsphere_guest_os_type`&#125;&#125;"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"packer-manifest"</span><span class="token punctuation">,</span>      <span class="token property">"output"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;user `output_dir`&#125;&#125;/packer-manifest.json"</span><span class="token punctuation">,</span>      <span class="token property">"strip_path"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"manifest"</span><span class="token punctuation">,</span>      <span class="token property">"except"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"vsphere-iso-base"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"inline"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"python3 ./scripts/ova.py --vmx &#123;&#123;user `vmx_version`&#125;&#125; --ovf_template &#123;&#123;user `ovf_template`&#125;&#125; --build_dir=&#123;&#123;user `output_dir`&#125;&#125;"</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"except"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"vsphere-iso-base"</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"vsphere"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell-local"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><a href="https://github.com/muzi502/packer-vsphere-example">packer-vsphere-example</a> 项目的目录结构如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>/packer-vsphere-example├── kickstart        <span class="token comment"># kickstart 配置文件存放目录</span>├── Makefile         <span class="token comment"># makefile，make 命令的操作的入口</span>├── packer           <span class="token comment"># packer 配置文件</span>│   ├── builder.json <span class="token comment"># packer builder 配置文件</span>│   ├── centos7.json <span class="token comment"># centos iso 安装 os 的配置</span>│   ├── common.json  <span class="token comment"># 一些公共配置参数</span>│   ├── photon3.json <span class="token comment"># photon3 iso 安装 os 的配置</span>│   └── vcenter.json <span class="token comment"># vcenter 相关的配置</span>├── resources        <span class="token comment"># 一些 k8s manifests 文件</span>└── scripts          <span class="token comment"># 构建过程中需要用到的脚本文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与 docker 类似，packer 执行构建操作的子命令同样也是 build，即 <code>packer build</code>，不过 packer build 命令支持的选项并没有 docker 那么丰富。最核心选项就是 -except, -only, -var,  -var-file 这几个：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ packer buildOptions:<span class="token comment"># 控制终端颜色输出</span>  -color<span class="token operator">=</span>false                  Disable color output. <span class="token punctuation">(</span>Default: color<span class="token punctuation">)</span>  <span class="token comment"># debug 模式，类似于断点的方式运行</span>  -debug                        Debug mode enabled <span class="token keyword">for</span> builds.  <span class="token comment"># 排除一些 builder，有点类似于 ansible 的 --skip-tags</span>  -except<span class="token operator">=</span>foo,bar,baz           Run all builds and post-processors other than these.  <span class="token comment"># 指定运行某些 builder，有点类似于 ansible 的 --tags</span>  -only<span class="token operator">=</span>foo,bar,baz             Build only the specified builds.  <span class="token comment"># 强制构建，如果构建目标已经存在则强制删除重新构建</span>  -force                        Force a build to <span class="token builtin class-name">continue</span> <span class="token keyword">if</span> artifacts exist, deletes existing artifacts.  -machine-readable             Produce machine-readable output.  <span class="token comment"># 出现错误之后的动作，cleanup 清理所有操作、abort 中断执行、ask 询问、</span>  -on-error<span class="token operator">=</span><span class="token punctuation">[</span>cleanup<span class="token operator">|</span>abort<span class="token operator">|</span>ask<span class="token operator">|</span>run-cleanup-provisioner<span class="token punctuation">]</span> If the build fails do: clean up <span class="token punctuation">(</span>default<span class="token punctuation">)</span>, abort, ask, or run-cleanup-provisioner.  <span class="token comment"># 并行运行的 builder 数量，默认没有限制，有点类似于 ansible 中的 --forks 参数</span>  -parallel-builds<span class="token operator">=</span><span class="token number">1</span>            Number of builds to run <span class="token keyword">in</span> parallel. <span class="token number">1</span> disables parallelization. <span class="token number">0</span> means no limit <span class="token punctuation">(</span>Default: <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># UI 输出的时间戳</span>  -timestamp-ui                 Enable prefixing of each ui output with an RFC3339 timestamp.  <span class="token comment"># 变量参数，有点类似于 ansible 的 -e 选项</span>  -var <span class="token string">'key=value'</span>              Variable <span class="token keyword">for</span> templates, can be used multiple times.  <span class="token comment"># 变量文件，有点类似于 ansible 的 -e@ 选项</span>  -var-file<span class="token operator">=</span>path                JSON or HCL2 <span class="token function">file</span> containing user variables.<span class="token comment"># 指定一些 var 参数以及 var-file 文件，最后一个参数是 builder 的配置文件路径</span>$ packer build  --var <span class="token assign-left variable">ova_name</span><span class="token operator">=</span>k3s-photon3-c4ca93f --var <span class="token assign-left variable">release_version</span><span class="token operator">=</span>c4ca93f --var <span class="token assign-left variable">ovf_template</span><span class="token operator">=</span>/root/usr/src/github.com/muzi502/packer-vsphere-example/scripts/ovf_template.xml --var <span class="token assign-left variable">template</span><span class="token operator">=</span>base-os-photon3 --var <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token variable">$&#123;VCENTER_USERNAME&#125;</span> --var <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token variable">$&#123;VCENTER_PASSWORD&#125;</span> --var <span class="token assign-left variable">vcenter_server</span><span class="token operator">=</span><span class="token variable">$&#123;VCENTER_SERVER&#125;</span> --var <span class="token assign-left variable">build_name</span><span class="token operator">=</span>k3s-photon3 --var <span class="token assign-left variable">output_dir</span><span class="token operator">=</span>/root/usr/src/github.com/muzi502/packer-vsphere-example/output/k3s-photon3-c4ca93f -only vsphere-clone -var-file<span class="token operator">=</span>/root/usr/src/github.com/muzi502/packer-vsphere-example/packer/vcenter.json -var-file<span class="token operator">=</span>/root/usr/src/github.com/muzi502/packer-vsphere-example/packer/photon3.json -var-file<span class="token operator">=</span>/root/usr/src/github.com/muzi502/packer-vsphere-example/packer/common.json /root/usr/src/github.com/muzi502/packer-vsphere-example/packer/builder.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面那个又长又臭的 packer build 命令我们在 <a href="https://github.com/muzi502/packer-vsphere-example/blob/master/Makefile">Makefile</a> 里封装一下，那么多的参数选项手动输起来能把人气疯 😂</p><ul><li>首先定义一些默认的参数，比如构建版本、构建时间、base 模版名称、导出 ova 文件名称等等。</li></ul><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Ensure Make is run with bash shell as some syntax below is bash-specific</span>SHELL<span class="token operator">:=</span>/usr/bin/env bash.DEFAULT_GOAL<span class="token operator">:=</span>help<span class="token comment"># Full directory of where the Makefile resides</span>ROOT_DIR <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> dirname <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">realpath</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">firstword</span> <span class="token variable">$</span><span class="token punctuation">(</span>MAKEFILE_LIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>RELEASE_VERSION       <span class="token operator">?=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> git describe --tags --always --dirty<span class="token punctuation">)</span>RELEASE_TIME          <span class="token operator">?=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> date -u +<span class="token string">'%Y-%m-%dT%H:%M:%SZ'</span><span class="token punctuation">)</span>PACKER_IMAGE          <span class="token operator">?=</span> hashicorp/packer<span class="token punctuation">:</span>1.8PACKER_CONFIG_DIR     <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>ROOT_DIR<span class="token punctuation">)</span>/packerPACKER_FORCE          <span class="token operator">?=</span> falsePACKER_OVA_PREFIX     <span class="token operator">?=</span> k3sPACKER_BASE_OS        <span class="token operator">?=</span> centos7PACKER_OUTPUT_DIR     <span class="token operator">?=</span> <span class="token variable">$</span><span class="token punctuation">(</span>ROOT_DIR<span class="token punctuation">)</span>/outputPACKER_TEMPLATE_NAME  <span class="token operator">?=</span> base-os-<span class="token variable">$</span><span class="token punctuation">(</span>PACKER_BASE_OS<span class="token punctuation">)</span>OVF_TEMPLATE          <span class="token operator">?=</span> <span class="token variable">$</span><span class="token punctuation">(</span>ROOT_DIR<span class="token punctuation">)</span>/scripts/ovf_template.xmlPACKER_OVA_NAME       <span class="token operator">?=</span> <span class="token variable">$</span><span class="token punctuation">(</span>PACKER_OVA_PREFIX<span class="token punctuation">)</span>-<span class="token variable">$</span><span class="token punctuation">(</span>PACKER_BASE_OS<span class="token punctuation">)</span>-<span class="token variable">$</span><span class="token punctuation">(</span>RELEASE_VERSION<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后定义 vars 和 var-file 参数</li></ul><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># 是否为强制构建，增加 force 参数</span><span class="token keyword">ifeq</span> <span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>PACKER_FORCE<span class="token punctuation">)</span>, true<span class="token punctuation">)</span>  PACKER_FORCE_ARG <span class="token operator">=</span> --force<span class="token operator">=</span>true<span class="token keyword">endif</span><span class="token comment"># 定义 vars 可变参数，比如 vcenter 用户名、密码 等参数</span>PACKER_VARS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>PACKER_FORCE_ARG<span class="token punctuation">)</span> \            <span class="token comment"># 是否强制构建</span>--var ova_name<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PACKER_OVA_NAME<span class="token punctuation">)</span> \          <span class="token comment"># OVA 文件名</span>--var release_version<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>RELEASE_VERSION<span class="token punctuation">)</span> \   <span class="token comment"># 发布版本</span>--var ovf_template<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>OVF_TEMPLATE<span class="token punctuation">)</span> \         <span class="token comment"># OVF 模版文件</span>--var template<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PACKER_TEMPLATE_NAME<span class="token punctuation">)</span> \     <span class="token comment"># OVA 的 base 虚拟机模版名称</span>--var username<span class="token operator">=</span><span class="token variable">$$</span><span class="token punctuation">&#123;</span>VCENTER_USERNAME<span class="token punctuation">&#125;</span> \        <span class="token comment"># vCenter 用户名（环境变量）</span>--var password<span class="token operator">=</span><span class="token variable">$$</span><span class="token punctuation">&#123;</span>VCENTER_PASSWORD<span class="token punctuation">&#125;</span> \        <span class="token comment"># vCenter 密码（环境变量）</span>--var vcenter_server<span class="token operator">=</span><span class="token variable">$$</span><span class="token punctuation">&#123;</span>VCENTER_SERVER<span class="token punctuation">&#125;</span> \    <span class="token comment"># vCenter 访问地址（环境变量）</span>--var build_name<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PACKER_OVA_PREFIX<span class="token punctuation">)</span>-<span class="token variable">$</span><span class="token punctuation">(</span>PACKER_BASE_OS<span class="token punctuation">)</span> \  <span class="token comment"># 构建名称</span>--var output_dir<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PACKER_OUTPUT_DIR<span class="token punctuation">)</span>/<span class="token variable">$</span><span class="token punctuation">(</span>PACKER_OVA_NAME<span class="token punctuation">)</span>   <span class="token comment"># OVA 导出的目录</span><span class="token comment"># 定义 var-file 参数</span>PACKER_VAR_FILES <span class="token operator">=</span> -var-file<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PACKER_CONFIG_DIR<span class="token punctuation">)</span>/vcenter.json \ <span class="token comment"># vCenter 的参数配置</span>-var-file<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PACKER_CONFIG_DIR<span class="token punctuation">)</span>/<span class="token variable">$</span><span class="token punctuation">(</span>PACKER_BASE_OS<span class="token punctuation">)</span>.json \        <span class="token comment"># OS 的参数配置</span>-var-file<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PACKER_CONFIG_DIR<span class="token punctuation">)</span>/common.json                     <span class="token comment"># 一些公共配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后定义 make targrt</li></ul><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> build-template<span class="token comment"># 通过 ISO 安装 OS 构建一个 base 虚拟机</span><span class="token target symbol">build-template</span><span class="token punctuation">:</span> <span class="token comment">## build the base os template by iso</span>packer build <span class="token variable">$</span><span class="token punctuation">(</span>PACKER_VARS<span class="token punctuation">)</span> -only vsphere-iso-base <span class="token variable">$</span><span class="token punctuation">(</span>PACKER_VAR_FILES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>PACKER_CONFIG_DIR<span class="token punctuation">)</span>/builder.json<span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> build-ovf<span class="token comment"># 通过 clone 方式构建并导出 OVF/OVA</span><span class="token target symbol">build-ovf</span><span class="token punctuation">:</span> <span class="token comment">## build the ovf template by clone the base os template</span>packer build <span class="token variable">$</span><span class="token punctuation">(</span>PACKER_VARS<span class="token punctuation">)</span> -only vsphere-clone <span class="token variable">$</span><span class="token punctuation">(</span>PACKER_VAR_FILES<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>PACKER_CONFIG_DIR<span class="token punctuation">)</span>/builder.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建 BASE 模版</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过 PACKER_BASE_OS 参数设置 base os 是 photon3 还是 centos7</span>$ <span class="token function">make</span> build-template <span class="token assign-left variable">PACKER_BASE_OS</span><span class="token operator">=</span>photon3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>构建 OVF 模版并导出为 OVA</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过 PACKER_BASE_OS 参数设置 base os 是 photon3 还是 centos7</span>$ <span class="token function">make</span> build-ovf <span class="token assign-left variable">PACKER_BASE_OS</span><span class="token operator">=</span>photon3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><p>将 Packer 的配置文件以及 Makefile 封装好之后，我们就可以运行 <code>make build-template</code> 和 <code>make build-ovf</code> 命令来构建虚拟机模版了，整体的构建流程如下：</p><ul><li>先使用 ISO 构建一个与业务无关的 base 虚拟机</li><li>在 base 虚拟机之上通过 vsphere-clone 方式构建业务虚拟机</li><li>导出 OVF 虚拟机文件，打包成 OVA 格式的虚拟机模版</li></ul><h3 id="通过-vsphere-iso-构建-Base-虚拟机"><a href="#通过-vsphere-iso-构建-Base-虚拟机" class="headerlink" title="通过 vsphere-iso 构建 Base 虚拟机"></a>通过 vsphere-iso 构建 Base 虚拟机</h3><p>base 虚拟机有点类似于 Dockerfile 中的 FROM base 镜像。在 Packer 中我们可以把一些很少会改动的内容做成一个 base 虚拟机。然后从这个 base 虚拟机克隆出一台新的虚拟机来完成接下来的构建流程，这样能够节省整体的构建耗时，使得构建效率更高一些。</p><ul><li>centos7 构建输出日志</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vsphere-iso-base: output will be <span class="token keyword">in</span> this color.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: File /root/.cache/packer/e476ea1d3ef3c2e3966a7081ac4239cd5ae5e8a3.iso already uploaded<span class="token punctuation">;</span> continuing<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: File <span class="token punctuation">[</span>Packer<span class="token punctuation">]</span> packer_cache//e476ea1d3ef3c2e3966a7081ac4239cd5ae5e8a3.iso already exists<span class="token punctuation">;</span> skipping upload.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: the vm/template Packer/base-os-centos7 already exists, but deleting it due to -force flag<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Creating VM<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Customizing hardware<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Mounting ISO images<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Adding configuration parameters<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Creating floppy disk<span class="token punctuation">..</span>.    vsphere-iso-base: Copying files flatly from floppy_files    vsphere-iso-base: Done copying files from floppy_files    vsphere-iso-base: Collecting paths from floppy_dirs    vsphere-iso-base: Resulting paths from floppy_dirs <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>./kickstart/centos/http/<span class="token punctuation">]</span>    vsphere-iso-base: Recursively copying <span class="token builtin class-name">:</span> ./kickstart/centos/http/    vsphere-iso-base: Done copying paths from floppy_dirs    vsphere-iso-base: Copying files from floppy_content    vsphere-iso-base: Done copying files from floppy_content<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Uploading created floppy image<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Adding generated Floppy<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Set boot order temporary<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Power on VM<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Waiting 15s <span class="token keyword">for</span> boot<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Typing boot command<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Waiting <span class="token keyword">for</span> IP<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: IP address: <span class="token number">192.168</span>.29.46<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Using SSH communicator to connect: <span class="token number">192.168</span>.29.46<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Waiting <span class="token keyword">for</span> SSH to become available<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Connected to SSH<span class="token operator">!</span><span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Executing <span class="token function">shutdown</span> command<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Deleting Floppy drives<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Deleting Floppy image<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Eject CD-ROM drives<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Creating snapshot<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Clear boot order<span class="token punctuation">..</span>.Build <span class="token string">'vsphere-iso-base'</span> finished after <span class="token number">6</span> minutes <span class="token number">42</span> seconds.<span class="token operator">==</span><span class="token operator">></span> Wait completed after <span class="token number">6</span> minutes <span class="token number">42</span> seconds<span class="token operator">==</span><span class="token operator">></span> Builds finished. The artifacts of successful builds are:--<span class="token operator">></span> vsphere-iso-base: base-os-centos7<span class="token punctuation">[</span>root@localhost:/vmfs/volumes/622aec5b-de94a27c-948e-00505680fb1d<span class="token punctuation">]</span> <span class="token function">ls</span> packer_cache/51511394170e64707b662ca8db012be4d23e121f.iso  d3e175624fc2d704975ce9a149f8f270e4768727.iso  e476ea1d3ef3c2e3966a7081ac4239cd5ae5e8a3.iso<span class="token punctuation">[</span>root@localhost:/vmfs/volumes/622aec5b-de94a27c-948e-00505680fb1d<span class="token punctuation">]</span> <span class="token function">ls</span> -alh base-os-centos7/total <span class="token number">4281536</span>drwxr-xr-x    <span class="token number">1</span> root     root       <span class="token number">72</span>.0K Apr  <span class="token number">1</span> 09:17 <span class="token builtin class-name">.</span>drwxr-xr-t    <span class="token number">1</span> root     root       <span class="token number">76</span>.0K Apr  <span class="token number">1</span> 09:17 <span class="token punctuation">..</span>-rw-------    <span class="token number">1</span> root     root        <span class="token number">4</span>.0G Apr  <span class="token number">1</span> 09:17 base-os-centos7-3ea6b205.vswp-rw-r--r--    <span class="token number">1</span> root     root         <span class="token number">253</span> Apr  <span class="token number">1</span> 09:17 base-os-centos7-65ff34a3.hlog-rw-------    <span class="token number">1</span> root     root       <span class="token number">64</span>.0G Apr  <span class="token number">1</span> 09:17 base-os-centos7-flat.vmdk-rw-------    <span class="token number">1</span> root     root        <span class="token number">8</span>.5K Apr  <span class="token number">1</span> 09:17 base-os-centos7.nvram-rw-------    <span class="token number">1</span> root     root         <span class="token number">482</span> Apr  <span class="token number">1</span> 09:17 base-os-centos7.vmdk-rw-r--r--    <span class="token number">1</span> root     root           <span class="token number">0</span> Apr  <span class="token number">1</span> 09:17 base-os-centos7.vmsd-rwxr-xr-x    <span class="token number">1</span> root     root        <span class="token number">2</span>.3K Apr  <span class="token number">1</span> 09:17 base-os-centos7.vmx-rw-------    <span class="token number">1</span> root     root           <span class="token number">0</span> Apr  <span class="token number">1</span> 09:17 base-os-centos7.vmx.lck-rwxr-xr-x    <span class="token number">1</span> root     root        <span class="token number">2</span>.2K Apr  <span class="token number">1</span> 09:17 base-os-centos7.vmx~-rw-------    <span class="token number">1</span> root     root        <span class="token number">1</span>.4M Apr  <span class="token number">1</span> 09:17 packer-tmp-created-floppy.flp-rw-r--r--    <span class="token number">1</span> root     root       <span class="token number">96</span>.1K Apr  <span class="token number">1</span> 09:17 vmware.logroot@devbox-fedora:/root <span class="token comment"># scp 192.168.24.43:/vmfs/volumes/Packer/base-os-centos7/packer-tmp-created-floppy.flp .</span>root@devbox-fedora:/root <span class="token comment"># mount packer-tmp-created-floppy.flp /mnt</span>root@devbox-fedora:/root <span class="token comment"># readlink /dev/disk/by-label/packer</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/loop2root@devbox-fedora:/root <span class="token comment"># ls /mnt/HTTP/7/KS.CFG</span>KS.CFG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Photon3 构建输出日志</li></ul><pre class="line-numbers language-none"><code class="language-none">vsphere-iso-base: output will be in this color.&#x3D;&#x3D;&gt; vsphere-iso-base: File &#x2F;root&#x2F;.cache&#x2F;packer&#x2F;d3e175624fc2d704975ce9a149f8f270e4768727.iso already uploaded; continuing&#x3D;&#x3D;&gt; vsphere-iso-base: File [Packer] packer_cache&#x2F;&#x2F;d3e175624fc2d704975ce9a149f8f270e4768727.iso already exists; skipping upload.&#x3D;&#x3D;&gt; vsphere-iso-base: the vm&#x2F;template Packer&#x2F;base-os-photon3 already exists, but deleting it due to -force flag&#x3D;&#x3D;&gt; vsphere-iso-base: Creating VM...&#x3D;&#x3D;&gt; vsphere-iso-base: Customizing hardware...&#x3D;&#x3D;&gt; vsphere-iso-base: Mounting ISO images...&#x3D;&#x3D;&gt; vsphere-iso-base: Adding configuration parameters...&#x3D;&#x3D;&gt; vsphere-iso-base: Starting HTTP server on port 8674&#x3D;&#x3D;&gt; vsphere-iso-base: Set boot order temporary...&#x3D;&#x3D;&gt; vsphere-iso-base: Power on VM...&#x3D;&#x3D;&gt; vsphere-iso-base: Waiting 15s for boot...&#x3D;&#x3D;&gt; vsphere-iso-base: HTTP server is working at http:&#x2F;&#x2F;192.168.29.171:8674&#x2F;&#x3D;&#x3D;&gt; vsphere-iso-base: Typing boot command...&#x3D;&#x3D;&gt; vsphere-iso-base: Waiting for IP...&#x3D;&#x3D;&gt; vsphere-iso-base: IP address: 192.168.29.208&#x3D;&#x3D;&gt; vsphere-iso-base: Using SSH communicator to connect: 192.168.29.208&#x3D;&#x3D;&gt; vsphere-iso-base: Waiting for SSH to become available...&#x3D;&#x3D;&gt; vsphere-iso-base: Connected to SSH!&#x3D;&#x3D;&gt; vsphere-iso-base: Executing shutdown command...&#x3D;&#x3D;&gt; vsphere-iso-base: Deleting Floppy drives...&#x3D;&#x3D;&gt; vsphere-iso-base: Eject CD-ROM drives...&#x3D;&#x3D;&gt; vsphere-iso-base: Creating snapshot...&#x3D;&#x3D;&gt; vsphere-iso-base: Clear boot order...Build &#39;vsphere-iso-base&#39; finished after 5 minutes 24 seconds.&#x3D;&#x3D;&gt; Wait completed after 5 minutes 24 seconds&#x3D;&#x3D;&gt; Builds finished. The artifacts of successful builds are:--&gt; vsphere-iso-base: base-os-photon3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>packer build</code> 命令的输出我们大致可以推断出通过 vsphere-iso 构建 Base 虚拟机的主要步骤和原理：</p><ul><li>下载 ISO 文件到本地的 ${HOME}&#x2F;.cache&#x2F;packer 目录，并以 checksum.iso 方式保存，这样的好处就是便于缓存 ISO 文件，避免重复下载；</li><li>上传本地 ISO 文件到 vCenter 的 datastore 中，默认保存在 datastore 的 packer_cache 目录下，如果 ISO 文件已经存在了，则会跳过上传的流程；</li><li>创建虚拟机，配置虚拟机硬件，挂载上传的 ISO 文件到虚拟机上的 CD&#x2F;ROM，设置 boot 启动项为 CD&#x2F;ROM</li><li>如果 <a href="https://www.packer.io/plugins/builders/vsphere/vsphere-iso#boot-configuration">boot_media_path</a> 是 http 类型的则在本地随机监听一个 TCP 端口来运行一个 http 服务，用于提供 kickstart 文件的 HTTP 下载功能；如果是目录类型的则将 kickstart 文件创建成一个软盘文件，并将该文件上传到 datastore 中，将软盘文件插入到虚拟机中；</li><li>虚拟机开机启动到 ISO 引导页面，通过 vCenter API 发送键盘输入，插入 kickstart 文件的路径；</li><li>通过 vCenter API 发送回车键盘输入，ISO 中的 OS 安装程序读取 kickstart 进行 OS 安装；</li><li>在 kickstart 脚本里安装 <a href="https://github.com/vmware/open-vm-tools">open-vm-tools</a> 工具；</li><li>等待 OS 安装完成，安装完成重启后进入安装好的 OS，OS 启动后通过 DHCP 获取 IP 地址；</li><li>通过 vm-tools 获取到虚拟机的 IP 地址，然后 ssh 连接到虚拟机执行关机命令；</li><li>虚拟机关机，卸载 ISO 和软驱等不需要的设备；</li><li>创建快照或者将虚拟机转换为模版；</li></ul><p>个人觉着这里比较好玩儿就是居然可以通过 vCenter 或 ESXi 的 <a href="https://vdc-repo.vmware.com/vmwb-repository/dcr-public/1ef6c336-7bef-477d-b9bb-caa1767d7e30/82521f49-9d9a-42b7-b19b-9e6cd9b30db1/vim.VirtualMachine.html#putUsbScanCodes">PutUsbScanCodes</a> API 来给虚拟机发送一些键盘输入的指令，感觉这简直太神奇啦 😂。之前我们的项目是将 kickstart 文件构建成一个 ISO 文件，然后通过重新构建源 ISO 的方式来修改 isolinux 启动参数。后来感觉这种重新构建 ISO 的方式太蠢了，于是就参考 Packer 的思路使用 govc 里内置的 <a href="https://github.com/vmware/govmomi/blob/master/govc/vm/keystrokes.go">vm.keystrokes</a> 命令来给虚拟机发送键盘指令，完成指定 kickstart 文件路径参数启动的操作。具体的 govc 操作命令可以参考如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 发送 tab 键，进入到 ISO 启动参数编辑页面</span>$ govc vm.keystrokes -vm<span class="token operator">=</span><span class="token string">'centos-vm-192'</span> -c<span class="token operator">=</span><span class="token string">'KEY_TAB'</span><span class="token comment"># 发送 Right Control + U 键清空输入框</span>$ govc vm.keystrokes -vm<span class="token operator">=</span><span class="token string">'centos-vm-192'</span> -rc<span class="token operator">=</span>true -c<span class="token operator">=</span><span class="token string">'KEY_U'</span><span class="token comment"># 输入 isolinux 的启动参数配置，通过 ks=hd:LABEL=KS:/ks.cfg 指定 kickstart 路径，LABEL 为构建 ISO 时设置的 lable</span>$ govc vm.keystrokes -vm<span class="token operator">=</span><span class="token string">'centos-vm-192'</span> -s<span class="token operator">=</span><span class="token string">'vmlinuz initrd=initrd.img ks=hd:LABEL=KS:/ks.cfg inst.stage2=hd:LABEL=CentOS\\x207\\x20x86_64 quiet console=ttyS0'</span><span class="token comment"># 按下回车键，开始安装 OS</span>$ govc vm.keystrokes -vm<span class="token operator">=</span><span class="token string">'centos-vm-192'</span> -c<span class="token operator">=</span><span class="token string">'KEY_ENTER'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过-vsphere-clone-构建业务虚拟机并导出-OVF-x2F-OVA"><a href="#通过-vsphere-clone-构建业务虚拟机并导出-OVF-x2F-OVA" class="headerlink" title="通过 vsphere-clone 构建业务虚拟机并导出 OVF&#x2F;OVA"></a>通过 vsphere-clone 构建业务虚拟机并导出 OVF&#x2F;OVA</h3><p>通过 vsphere-iso 构建 Base 虚拟机之后，我们就使用这个 base 虚拟机克隆出一台新的虚拟机，用来构建我们的业务虚拟机镜像，将 k3s, argo-workflow, redfish-esxi-os-installer 这一堆工具打包进去；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vsphere-clone: output will be <span class="token keyword">in</span> this color.<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Cloning VM<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Customizing hardware<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Power on VM<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Waiting <span class="token keyword">for</span> IP<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: IP address: <span class="token number">192.168</span>.30.112<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Using SSH communicator to connect: <span class="token number">192.168</span>.30.112<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Waiting <span class="token keyword">for</span> SSH to become available<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Connected to SSH<span class="token operator">!</span><span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Uploading scripts <span class="token operator">=</span><span class="token operator">></span> /root<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Uploading resources <span class="token operator">=</span><span class="token operator">></span> /root<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Provisioning with shell script: /tmp/packer-shell557168976<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Executing <span class="token function">shutdown</span> command<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Creating snapshot<span class="token punctuation">..</span>.    vsphere-clone: Starting export<span class="token punctuation">..</span>.    vsphere-clone: Downloading: k3s-photon3-c4ca93f-disk-0.vmdk    vsphere-clone: Exporting file: k3s-photon3-c4ca93f-disk-0.vmdk    vsphere-clone: Writing ovf<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Running post-processor: packer-manifest <span class="token punctuation">(</span>type manifest<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> vsphere-clone: Running post-processor: vsphere <span class="token punctuation">(</span>type shell-local<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> vsphere-clone <span class="token punctuation">(</span>shell-local<span class="token punctuation">)</span>: Running <span class="token builtin class-name">local</span> shell script: /tmp/packer-shell2376077966    vsphere-clone <span class="token punctuation">(</span>shell-local<span class="token punctuation">)</span>: image-build-ova: <span class="token builtin class-name">cd</span> /root/usr/src/github.com/muzi502/packer-vsphere-example/output/k3s-photon3-c4ca93f    vsphere-clone <span class="token punctuation">(</span>shell-local<span class="token punctuation">)</span>: image-build-ova: create ovf k3s-photon3-c4ca93f.ovf    vsphere-clone <span class="token punctuation">(</span>shell-local<span class="token punctuation">)</span>: image-build-ova: create ova manifest k3s-photon3-c4ca93f.mf    vsphere-clone <span class="token punctuation">(</span>shell-local<span class="token punctuation">)</span>: image-build-ova: creating OVA using <span class="token function">tar</span>    vsphere-clone <span class="token punctuation">(</span>shell-local<span class="token punctuation">)</span>: image-build-ova: <span class="token punctuation">[</span><span class="token string">'tar'</span>, <span class="token string">'-c'</span>, <span class="token string">'-f'</span>, <span class="token string">'k3s-photon3-c4ca93f.ova'</span>, <span class="token string">'k3s-photon3-c4ca93f.ovf'</span>, <span class="token string">'k3s-photon3-c4ca93f.mf'</span>, <span class="token string">'k3s-photon3-c4ca93f-disk-0.vmdk'</span><span class="token punctuation">]</span>    vsphere-clone <span class="token punctuation">(</span>shell-local<span class="token punctuation">)</span>: image-build-ova: create ova checksum k3s-photon3-c4ca93f.ova.sha256Build <span class="token string">'vsphere-clone'</span> finished after <span class="token number">14</span> minutes <span class="token number">16</span> seconds.<span class="token operator">==</span><span class="token operator">></span> Wait completed after <span class="token number">14</span> minutes <span class="token number">16</span> seconds<span class="token operator">==</span><span class="token operator">></span> Builds finished. The artifacts of successful builds are:--<span class="token operator">></span> vsphere-clone: k3s-photon3-c4ca93f--<span class="token operator">></span> vsphere-clone: k3s-photon3-c4ca93f--<span class="token operator">></span> vsphere-clone: k3s-photon3-c4ca93f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 packer build 命令的输出我们大致可以推断出构建流程：</p><ul><li>clone 虚拟机，修改虚拟机的硬件配置</li><li>虚拟机开机，通过 vm-tools 获取虚拟机的 IP 地址</li><li>获取到虚拟机的 IP 地址后等待 ssh 能够正常连接</li><li>ssh 能够正常连接后，通过 scp 的方式上传文件</li><li>ssh 远程执行虚拟机里的 <a href="https://github.com/muzi502/packer-vsphere-example/blob/master/scripts/install.sh">install.sh</a> 脚本</li><li>执行虚拟机关机命令</li><li>创建虚拟机快照</li><li>导出虚拟机 OVF 文件</li><li>导出构建配置参数的 manifest.json 文件</li><li>执行 <a href="https://github.com/muzi502/packer-vsphere-example/blob/master/scripts/ova.py">ova.py</a> 脚本，根据 manifest.json 配置参数将 OVF 格式转换成 OVA</li></ul><p>至此，整个的虚拟机模版的构建流程算是完成了，最终我们的到一个 OVA 格式的虚拟机模版。使用的时候只需要在本地机器上安装好 VMware Workstation 或者 Oracle VirtualBox 就能一键导入该虚拟机，开机后就可以使用啦，算是做到了开箱即用的效果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">output└── k3s-photon3-c4ca93f    ├── k3s-photon3-c4ca93f-disk-0.vmdk    ├── k3s-photon3-c4ca93f.mf    ├── k3s-photon3-c4ca93f.ova    ├── k3s-photon3-c4ca93f.ova.sha256    ├── k3s-photon3-c4ca93f.ovf    └── packer-manifest.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="argo-workflow-和-k3s"><a href="#argo-workflow-和-k3s" class="headerlink" title="argo-workflow 和 k3s"></a>argo-workflow 和 k3s</h2><p>在虚拟机内使用 redfish-esxi-os-installer 有点特殊，是将它放在 argo-workflow 的 Pod 内来执行的。在 workflow 模版文件 <a href="https://github.com/muzi502/packer-vsphere-example/blob/master/resources/workflow/workflow.yaml">workflow.yaml</a> 中我们定义了若干个 steps 来运行 redfish-esxi-os-installer。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> argoproj.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Workflow<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">generateName</span><span class="token punctuation">:</span> redfish<span class="token punctuation">-</span>esxi<span class="token punctuation">-</span>os<span class="token punctuation">-</span>installer<span class="token punctuation">-</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> redfish<span class="token punctuation">-</span>esxi<span class="token punctuation">-</span>os<span class="token punctuation">-</span>installer  <span class="token key atrule">templates</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> redfish<span class="token punctuation">-</span>esxi<span class="token punctuation">-</span>os<span class="token punctuation">-</span>installer    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">-</span> <span class="token key atrule">arguments</span><span class="token punctuation">:</span>          <span class="token key atrule">parameters</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> command            <span class="token key atrule">value</span><span class="token punctuation">:</span> pre<span class="token punctuation">-</span>check        <span class="token key atrule">name</span><span class="token punctuation">:</span> Precheck        <span class="token key atrule">template</span><span class="token punctuation">:</span> installer    <span class="token punctuation">-</span> <span class="token punctuation">-</span> <span class="token key atrule">arguments</span><span class="token punctuation">:</span>          <span class="token key atrule">parameters</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> command            <span class="token key atrule">value</span><span class="token punctuation">:</span> build<span class="token punctuation">-</span>iso        <span class="token key atrule">name</span><span class="token punctuation">:</span> BuildISO        <span class="token key atrule">template</span><span class="token punctuation">:</span> installer    <span class="token punctuation">-</span> <span class="token punctuation">-</span> <span class="token key atrule">arguments</span><span class="token punctuation">:</span>          <span class="token key atrule">parameters</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> command            <span class="token key atrule">value</span><span class="token punctuation">:</span> mount<span class="token punctuation">-</span>iso        <span class="token key atrule">name</span><span class="token punctuation">:</span> MountISO        <span class="token key atrule">template</span><span class="token punctuation">:</span> installer    <span class="token punctuation">-</span> <span class="token punctuation">-</span> <span class="token key atrule">arguments</span><span class="token punctuation">:</span>          <span class="token key atrule">parameters</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> command            <span class="token key atrule">value</span><span class="token punctuation">:</span> reboot        <span class="token key atrule">name</span><span class="token punctuation">:</span> Reboot        <span class="token key atrule">template</span><span class="token punctuation">:</span> installer    <span class="token punctuation">-</span> <span class="token punctuation">-</span> <span class="token key atrule">arguments</span><span class="token punctuation">:</span>          <span class="token key atrule">parameters</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> command            <span class="token key atrule">value</span><span class="token punctuation">:</span> post<span class="token punctuation">-</span>check        <span class="token key atrule">name</span><span class="token punctuation">:</span> Postcheck        <span class="token key atrule">template</span><span class="token punctuation">:</span> installer    <span class="token punctuation">-</span> <span class="token punctuation">-</span> <span class="token key atrule">arguments</span><span class="token punctuation">:</span>          <span class="token key atrule">parameters</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> command            <span class="token key atrule">value</span><span class="token punctuation">:</span> umount<span class="token punctuation">-</span>iso        <span class="token key atrule">name</span><span class="token punctuation">:</span> UmountISO        <span class="token key atrule">template</span><span class="token punctuation">:</span> installer  <span class="token punctuation">-</span> <span class="token key atrule">container</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> installer      <span class="token key atrule">image</span><span class="token punctuation">:</span> ghcr.io/muzi502/redfish<span class="token punctuation">-</span>esxi<span class="token punctuation">-</span>os<span class="token punctuation">-</span>installer<span class="token punctuation">:</span>v0.1.0<span class="token punctuation">-</span>alpha.1      <span class="token key atrule">command</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> bash      <span class="token punctuation">-</span> <span class="token punctuation">-</span>c      <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">        make inventory &amp;&amp; make &#123;&#123;inputs.parameters.command&#125;&#125;</span>      <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME        <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>          <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.name      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> HOST_IP        <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>          <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> status.hostIP      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SRC_ISO_DIR        <span class="token key atrule">value</span><span class="token punctuation">:</span> /data/iso      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> HTTP_DIR        <span class="token key atrule">value</span><span class="token punctuation">:</span> /data/iso/redfish      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> HTTP_URL        <span class="token key atrule">value</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$(HOST_IP)/files/iso/redfish      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ESXI_ISO        <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>          <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> redfish<span class="token punctuation">-</span>esxi<span class="token punctuation">-</span>os<span class="token punctuation">-</span>installer<span class="token punctuation">-</span>config            <span class="token key atrule">key</span><span class="token punctuation">:</span> esxi_iso      <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>        <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /ansible/config.yaml        <span class="token key atrule">name</span><span class="token punctuation">:</span> config        <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">subPath</span><span class="token punctuation">:</span> config.yaml      <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data        <span class="token key atrule">name</span><span class="token punctuation">:</span> data    <span class="token key atrule">inputs</span><span class="token punctuation">:</span>      <span class="token key atrule">parameters</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> command    <span class="token key atrule">name</span><span class="token punctuation">:</span> installer    <span class="token key atrule">retryStrategy</span><span class="token punctuation">:</span>      <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token string">"2"</span>      <span class="token key atrule">retryPolicy</span><span class="token punctuation">:</span> OnFailure  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">items</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> config        <span class="token key atrule">path</span><span class="token punctuation">:</span> config.yaml      <span class="token key atrule">name</span><span class="token punctuation">:</span> redfish<span class="token punctuation">-</span>esxi<span class="token punctuation">-</span>os<span class="token punctuation">-</span>installer<span class="token punctuation">-</span>config    <span class="token key atrule">name</span><span class="token punctuation">:</span> config  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> data    <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /data      <span class="token key atrule">type</span><span class="token punctuation">:</span> DirectoryOrCreate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于目前没有 Web UI 和后端 Server 所以还是需要手动编辑 <a href="https://github.com/muzi502/packer-vsphere-example/blob/master/resources/workflow/configmap.yaml">&#x2F;root&#x2F;resources&#x2F;workflow&#x2F;configmap.yaml</a> 配置文件，然后再执行 <code>kubectl create -f /root/resources/workflow</code> 命令创建 workflow 工作流。</p><p>workflow 创建了之后，就可以通过 argo 命令查看 workflow 执行的进度和状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@localhost <span class="token punctuation">[</span> ~/resources/workflow <span class="token punctuation">]</span><span class="token comment"># argo get redfish-esxi-os-installer-tjjqz</span>Name:                redfish-esxi-os-installer-tjjqzNamespace:           defaultServiceAccount:      <span class="token builtin class-name">unset</span> <span class="token punctuation">(</span>will run with the default ServiceAccount<span class="token punctuation">)</span>Status:              SucceededConditions: PodRunning          False Completed           TrueCreated:             Mon May <span class="token number">23</span> <span class="token number">11</span>:07:31 +0000 <span class="token punctuation">(</span><span class="token number">16</span> minutes ago<span class="token punctuation">)</span>Started:             Mon May <span class="token number">23</span> <span class="token number">11</span>:07:31 +0000 <span class="token punctuation">(</span><span class="token number">16</span> minutes ago<span class="token punctuation">)</span>Finished:            Mon May <span class="token number">23</span> <span class="token number">11</span>:23:38 +0000 <span class="token punctuation">(</span><span class="token number">19</span> seconds ago<span class="token punctuation">)</span>Duration:            <span class="token number">16</span> minutes <span class="token number">7</span> secondsProgress:            <span class="token number">6</span>/6ResourcesDuration:   29m45s*<span class="token punctuation">(</span><span class="token number">1</span> cpu<span class="token punctuation">)</span>,29m45s*<span class="token punctuation">(</span>100Mi memory<span class="token punctuation">)</span>STEP                                TEMPLATE                   PODNAME                                     DURATION  MESSAGE ✔ redfish-esxi-os-installer-tjjqz  redfish-esxi-os-installer ├───✔ Precheck<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                  installer                  redfish-esxi-os-installer-tjjqz-647555770   11s ├───✔ BuildISO<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                  installer                  redfish-esxi-os-installer-tjjqz-3078771217  14s ├───✔ MountISO<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                  installer                  redfish-esxi-os-installer-tjjqz-4099695623  19s ├───✔ Reboot<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                    installer                  redfish-esxi-os-installer-tjjqz-413209187   7s ├───✔ Postcheck<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                 installer                  redfish-esxi-os-installer-tjjqz-2674696793  14m └───✔ UmountISO<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                 installer                  redfish-esxi-os-installer-tjjqz-430254503   13s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="argo-workflow"><a href="#argo-workflow" class="headerlink" title="argo-workflow"></a>argo-workflow</h3><p>之所以使用 argo-workflow 而不是使用像 docker、nerdctl 这些命令行工具来运行 redfish-esxi-os-installer ，是因为通过 argo-workflow 来编排我们的安装部署任务能够比较方便地实现多个任务同时运行、获取任务执行的进度及日志、获取任务执行的耗时、停止重试等功能。使用 argo-workflow 来编排我们的安装部署任务，并通过 argo-workflow 的 RESTful API 获取部署任务的进度日志等信息，这样做更云原生一些（🤣</p><p><img data-src="https://p.k8s.li/2022-05-23-packer-vsphere-example-01.png" alt="argo-workfloe-apis"></p><p>在我们内部其实最终目的是准备将该方案做成一个产品化的工具，提供一个 Web UI 用来进行配置部署参数以及展示部署的进度日志等功能。当初设计方案的时候也是参考了一下  <a href="https://github.com/vmware-tanzu/community-edition">VMware Tanzu 社区版</a> ：部署 Tanzu 管理集群的时候需要有一个已经存在的 k8s 集群，或者通过 Tanzu 新部署一个 kind 集群。部署一个 tanzu 管理集群可以通过 tanzu 命令行的方式，也可以通过 Tanzu Web UI 的方式，Tanzu Web UI 的方式其实就是一个偏向于产品化的工具。在 <a href="https://blog.k8s.li/deploy-tanzu-k8s-cluster.html">VMware Tanzu kubernetes 发行版部署尝鲜</a> 我曾分享过 Tanzu 的部署方式，感兴趣的话可以去看一下。</p><p><img data-src="https://p.k8s.li/2022-05-23-packer-vsphere-example-02.png" alt="tanzu-cluster"></p><p>该方案主要是面向一些产品化的场景，由于引入了 K8s 这个庞然大物，整体的技术栈会复杂一些，但也有一些好处啦 😅。</p><h3 id="k8s-and-k3s"><a href="#k8s-and-k3s" class="headerlink" title="k8s and k3s"></a>k8s and k3s</h3><p>argo-workflow 需要依赖一个 k8s 集群才能运行，我们内部测试了 kubekey、sealos、kubespray、k3s 几种常见的部署工具。综合评定下来 k3s 集群占用的资源最少。参考 <a href="https://docs.rancher.cn/docs/k3s/installation/installation-requirements/resource-profiling/_index/">K3s 资源分析</a> 给出的资源要求，最小只需要 768M 内存就能运行。对于硬件资源不太充足的笔记本电脑来讲，k3s 无疑是目前最佳的方案。</p><p>另外还有一个十分重要的原因就是 k3s server 更换单 control plan 节点的 IP 地址十分方便，对用户来说是无感知的。这样就可以将安装 k3s 的操作在构建 OVA 的时候完成，而不是在使用的时候手动执行安装脚本来安装。</p><p>只要开机运行虚拟机能够通过 DHCP 分配到一个内网 IPv4 地址或者手动配置一个静态 IP，k3s 就能够正常运行起来，能够真正做到开箱即用，而不是像 kubekey、sealos、kubespray 那样傻乎乎地填写一个复杂无比的配置文件，然后再执行一些命令来安装 k8s 集群。这种导入虚拟机开即用的方式，对用户来讲十分友好。</p><p>当然在使用 kubekey、sealos、kubespray 在构建虚拟机的时候安装好 k8s 集群也不是不可行，只不过我们构建时候虚拟机的 IP 地址（比如 10.172.20.223）和使用时的 IP 地址（比如 192.168.20.11）基本上是不会相同的。给 k8s control plain 节点更换 IP 的操作 <a href="https://www.qikqiak.com/">阳明博主</a> 曾在 <a href="https://www.qikqiak.com/post/how-to-change-k8s-node-ip/">如何修改 Kubernetes 节点 IP 地址?</a> 文章中分享过他的经历，看完后直接把我整不会了，感觉操作起来实在是太麻烦了，还不如重新部署一套新的 k8s 方便呢 😂</p><p>其实构建虚拟机模版的时候安装 k8s 的思路最初我是借鉴的 <a href="https://github.com/kubernetes-sigs/cluster-api">cluster-api</a> 项目 😂。即将部署 k8s 依赖的一些文件和容器镜像构建在虚拟机模版当中，部署 k8s 的时候不需要再联网下载这些依赖资源了。不同的是，我们通过 k3s 直接提前将 k8s 集群部署好了，也就省去了让用户执行部署的操作。</p><p>综上，选用 k3s 作为该方案的 K8s 底座无疑是最佳的啦（</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h3><p>使用了一段时间后感觉 Packer 的复杂度和上手难度要比 Docker 构建容器镜像要高出一个数量级。可能是因为虚拟机并不像容器镜像那样有 <a href="https://opencontainers.org/">OCI</a> 这种统一的构建、分发、运行工业标准。虚拟机的创建克隆等操作与底层的 IaaS 供应商耦合的十分紧密，这就导致不同 IaaS 供应商比如 vSphere、kvm&#x2F;qemu 他们之间能够复用的配置参数并不多。比如 vSphere 里有 datastore、datacenter、resource_pool、folder 等概念，但 kvm&#x2F;qemu 中缺没有，这就导致很难将它们统一成一个配置。</p><h3 id="OVA-格式"><a href="#OVA-格式" class="headerlink" title="OVA 格式"></a>OVA 格式</h3><p>使用 OVA 而不是 vagrant.box、vmdk、raw、qcow2 等其他格式是因为 OVA 支持支持一键导入的特性，在 Windows 上使用起来比较方便。毕竟 Windows 上安装 Vagrant 或者 qemu&#x2F;KVM 也够你折腾的了，<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">VMware Workstation</a> 或者 <a href="https://www.virtualbox.org/">Oracle VirtualBox</a> 使用得更广泛一些。</p><p>另外 Packer 并不支持直接将虚拟机导出为 OVA 的方式，默认情况下只会通过 vCenter 的 API 导出为 ovf。如果需要 OVA 格式，需要将 OVF 打包成 OVA。在 ISSUE <a href="https://github.com/hashicorp/packer/issues/9645">Add support for exporting to OVA in vsphere-iso builder #9645</a> 也有人反馈了支持 OVA 导出的需求，但 Packer 至今仍未支持。将 OVF 转换为 OVA 我是参考的 image-builder 项目的 <a href="https://github.com/kubernetes-sigs/image-builder/blob/master/images/capi/hack/image-build-ova.py"><strong>image-build-ova.py</strong> </a> 来完成的。</p><h3 id="安装-open-vm-tool-失败"><a href="#安装-open-vm-tool-失败" class="headerlink" title="安装 open-vm-tool 失败"></a>安装 open-vm-tool 失败</h3><p>由于 ISO 中并不包含 open-vm-tool 软件包，这就需要在 ISO 安装 OS 的过程中联网安装 open-vm-tools。如果安装的时候网络抖动了就可能会导致 open-vm-tools 安装失败。open-vm-tools 安装失败 packer 是无法感知到的，只能一直等到获取虚拟机 IP 超时后退出执行。目前没有很好的办法，只能在 kickstart 里安装 open-vm-tools 的时候进行重试直到 open-vm-tools 安装成功。</p><h3 id="减少导出后-vmdk-文件大小"><a href="#减少导出后-vmdk-文件大小" class="headerlink" title="减少导出后 vmdk 文件大小"></a>减少导出后 vmdk 文件大小</h3><p>曾经在 <a href="https://blog.k8s.li/esxi-vmbase.html">手搓虚拟机模板</a> 文章中分析过通过 dd 置零的方式可以大幅减少虚拟机导出后的 vmdk 文件大</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">464M Aug <span class="token number">28</span> <span class="token number">16</span>:15 Ubuntu1804-2.ova <span class="token comment"># 置零后的大小</span><span class="token number">1</span>.3G Aug <span class="token number">28</span> <span class="token number">15</span>:48 Ubuntu1804.ova   <span class="token comment"># 置零前的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>需要注意的是，在 dd 置零之前要先停止 k3s 服务，不然置零的时候会占满 root 根分区导致 kubelet 启动 GC 将一些镜像给删除掉。之前导出虚拟机后发现少了一些镜像，排查了好久才发现是 kubelet GC 把我的镜像给删掉了，踩了个大坑，可气死我了 😡</p><p>另外也可以删除一些不必要的文件，比如 containerd 中 <code>io.containerd.content.v1.content/blobs/sha256</code> 一些镜像 layer 的原始 blob 文件是不需要的，可以将它们给删除掉，这样能够减少部分磁盘空间占用；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment"># stop k3s server for for prevent it starting the garbage collection to delete images</span>  systemctl stop k3s  <span class="token comment"># Ensure on next boot that network devices get assigned unique IDs.</span>  <span class="token function">sed</span> -i <span class="token string">'/^\(HWADDR\|UUID\)=/d'</span> /etc/sysconfig/network-scripts/ifcfg-* <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span class="token operator">||</span> <span class="token boolean">true</span>  <span class="token comment"># Clean up network interface persistence</span>  <span class="token function">find</span> /var/log -type f -exec truncate --size<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>  <span class="token function">rm</span> -rf /tmp/* /var/tmp/*  <span class="token comment"># cleanup all blob files of registry download image</span>  <span class="token function">find</span> /var/lib/rancher/k3s/agent/containerd/io.containerd.content.v1.content/blobs/sha256 -size +1M -type f -delete  <span class="token comment"># zero out the rest of the free space using dd, then delete the written file.</span>  <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/EMPTY <span class="token assign-left variable">bs</span><span class="token operator">=</span>4M <span class="token assign-left variable">status</span><span class="token operator">=</span>progress <span class="token operator">||</span> <span class="token function">rm</span> -f /EMPTY  <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/data/EMPTY <span class="token assign-left variable">bs</span><span class="token operator">=</span>4M <span class="token assign-left variable">status</span><span class="token operator">=</span>progress <span class="token operator">||</span> <span class="token function">rm</span> -f /data/EMPTY  <span class="token comment"># run sync so Packer doesn't quit too early, before the large file is deleted.</span>  <span class="token function">sync</span>  yum clean all<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Photon3"><a href="#Photon3" class="headerlink" title="Photon3"></a>Photon3</h3><p>之前在 <a href="https://blog.k8s.li/Photon-OS.html">轻量级容器优化型 Linux 发行版 Photon OS</a> 里分享过 VMware 的 Linux 发行版 <a href="https://vmware.github.io/photon/assets/files/html/3.0/">Photon</a>。不同于传统的 Linux 发行版 Photon 的系统十分精简，使用它替代 CentOS 能够一定程度上减少系统资源的占用，导出后的 vmdk 文件也要比 CentOS 小一些。</p><h3 id="goss"><a href="#goss" class="headerlink" title="goss"></a><a href="https://github.com/aelsabbahy/goss">goss</a></h3><p>在构建的过程中我们在 k3s 集群上安装了一些其他的组件，比如提供文件上传和下载服务的 filebrowser 以及 workflow 工作流引擎 argo-workflow，为了保证这些服务的正常运行，我们就需要通过不同的方式去检查这些服务是否正常。一般是通过 kubectl get 等命令查看 deployment、pod、daemonset 等服务是否正常运行，或者通过 curl 访问这些这些服务的健康检查 API。</p><p>由于检查项比较多且十分繁琐，使用传统的 shell 脚本来做这并不是很方便，需要解析每个命令的退出码以及返回值。因此我们使用 <a href="https://github.com/aelsabbahy/goss">goss</a> 通过 YAML 格式的配置文件来定义一些检查项，让它批量来执行这些检查，而不用在 shell 对每个检查项写一堆的 awk&#x2F;grep 等命令来 check 了。</p><ul><li><a href="https://github.com/muzi502/packer-vsphere-example/blob/master/scripts/goss/k3s.yaml">k3s.yaml</a>：用于检查 k3s 以及它默认自带的服务是否正常运行</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># DNS 类型的检查</span><span class="token key atrule">dns</span><span class="token punctuation">:</span>  <span class="token comment"># 检查 coredns 是否能够正常解析到 kubernetes apiserver 的 service IP 地址</span>  <span class="token key atrule">kubernetes.default.svc.cluster.local</span><span class="token punctuation">:</span>    <span class="token key atrule">resolvable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">addrs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10.43.0.1    <span class="token key atrule">server</span><span class="token punctuation">:</span> 10.43.0.10    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">600</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># TCP/UDP 端口类型的检查</span><span class="token key atrule">addr</span><span class="token punctuation">:</span>  <span class="token comment"># 检查 coredns 的 UDP 53 端口是否正常</span>  <span class="token key atrule">udp://10.43.0.10:53</span><span class="token punctuation">:</span>    <span class="token key atrule">reachable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token comment"># 检查 cni0 网桥是否存在</span><span class="token key atrule">interface</span><span class="token punctuation">:</span>  <span class="token key atrule">cni0</span><span class="token punctuation">:</span>    <span class="token key atrule">exists</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">addrs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10.42.0.1/24<span class="token comment"># 本机端口类型的检查</span><span class="token key atrule">port</span><span class="token punctuation">:</span>  <span class="token comment"># 检查 ssh 22 端口是否正常</span>  <span class="token key atrule">tcp:22</span><span class="token punctuation">:</span>    <span class="token key atrule">listening</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ip</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 0.0.0.0    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查 kubernetes apiserver 6443 端口是否正常</span>  <span class="token key atrule">tcp6:6443</span><span class="token punctuation">:</span>    <span class="token key atrule">listening</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 检查一些 systemd 服务的检查</span><span class="token key atrule">service</span><span class="token punctuation">:</span>  <span class="token comment"># 默认禁用 firewalld 服务</span>  <span class="token key atrule">firewalld</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">running</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 确保 sshd 服务正常运行</span>  <span class="token key atrule">sshd</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">running</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查 k3s 服务是否正常运行</span>  <span class="token key atrule">k3s</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">running</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 定义一些 shell 命令执行的检查</span><span class="token key atrule">command</span><span class="token punctuation">:</span>  <span class="token comment"># 检查 kubernetes cheduler 组件是否正常</span>  <span class="token key atrule">check_k8s_scheduler_health</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> curl <span class="token punctuation">-</span>k https<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10259/healthz    <span class="token comment"># 退出码是否为 0</span>    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 标准输出中是否包含正确的输出值</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"ok"</span><span class="token punctuation">]</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查 kubernetes controller-manager 是否正常</span>  <span class="token key atrule">check_k8s_controller-manager_health</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> curl <span class="token punctuation">-</span>k https<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10257/healthz    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"ok"</span><span class="token punctuation">]</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查 cluster-info  中输出的组件运行状态是否正常</span>  <span class="token key atrule">check_cluster_status</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> kubectl cluster<span class="token punctuation">-</span>info <span class="token punctuation">|</span> grep 'is running'    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> CoreDNS      <span class="token punctuation">-</span> Kubernetes control plane    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查节点是否处于 Ready 状态</span>  <span class="token key atrule">check_node_status</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> kubectl get node <span class="token punctuation">-</span>o jsonpath='<span class="token punctuation">&#123;</span>.items<span class="token punctuation">[</span><span class="token punctuation">]</span>.status<span class="token punctuation">&#125;</span>' <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.conditions<span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">]</span>.type'    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> Ready    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查节点 IP 是否正确</span>  <span class="token key atrule">check_node_address</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> kubectl get node <span class="token punctuation">-</span>o wide <span class="token punctuation">-</span>o json <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.status.addresses<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">|</span> select(.type == "InternalIP") <span class="token punctuation">|</span> .address'    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> .Vars.ip_address <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查 traefik loadBalancer 的 IP 地址是否正确</span>  <span class="token key atrule">check_traefik_address</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> kubectl <span class="token punctuation">-</span>n kube<span class="token punctuation">-</span>system get svc traefik <span class="token punctuation">-</span>o json <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.status.loadBalancer.ingress<span class="token punctuation">[</span><span class="token punctuation">]</span>.ip'    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> .Vars.ip_address <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查 containerd 容器运行是否正常</span>  <span class="token key atrule">check_container_status</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> crictl ps <span class="token punctuation">-</span><span class="token punctuation">-</span>output=json <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.containers<span class="token punctuation">[</span><span class="token punctuation">]</span>.metadata.name' <span class="token punctuation">|</span> sort <span class="token punctuation">-</span>u    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> coredns      <span class="token punctuation">-</span> /lb<span class="token punctuation">-</span>.<span class="token important">*-443/</span>      <span class="token punctuation">-</span> /lb<span class="token punctuation">-</span>.<span class="token important">*-80/</span>      <span class="token punctuation">-</span> traefik    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查 kube-system namespace 下的 pod 是否正常</span>  <span class="token key atrule">check_kube_system_namespace_pod_status</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> kubectl get pod <span class="token punctuation">-</span>n kube<span class="token punctuation">-</span>system <span class="token punctuation">-</span>o json <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.items<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">|</span> select((.status.phase <span class="token tag">!=</span> "Running") and (.status.phase <span class="token tag">!=</span> "Succeeded") and (.status.phase <span class="token tag">!=</span> "Completed"))'    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"!string"</span><span class="token punctuation">]</span>  <span class="token comment"># 检查 k8s deployment 服务是否都正常</span>  <span class="token key atrule">check_k8s_deployment_status</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> kubectl get deploy <span class="token punctuation">-</span><span class="token punctuation">-</span>all<span class="token punctuation">-</span>namespaces <span class="token punctuation">-</span>o json <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.items<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">|</span> select(.status.replicas == .status.availableReplicas) <span class="token punctuation">|</span> .metadata.name' <span class="token punctuation">|</span> sort <span class="token punctuation">-</span>u    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> coredns      <span class="token punctuation">-</span> traefik    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查 svclb-traefik daemonset 是否正常</span>  <span class="token key atrule">check_k8s_daemonset_status</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> kubectl get daemonset <span class="token punctuation">-</span><span class="token punctuation">-</span>all<span class="token punctuation">-</span>namespaces <span class="token punctuation">-</span>o json <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.items<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">|</span> select(.status.replicas == .status.availableReplicas) <span class="token punctuation">|</span> .metadata.name' <span class="token punctuation">|</span> sort <span class="token punctuation">-</span>u    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> svclb<span class="token punctuation">-</span>traefik    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://github.com/muzi502/packer-vsphere-example/blob/master/scripts/goss/goss.yaml">goss.yaml</a>：用于检查我们部署的一些服务是否正常</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 通过 include 其他 gossfile 方式将上面定义的 k3s.yaml 检查项也包含进来</span><span class="token key atrule">gossfile</span><span class="token punctuation">:</span>  <span class="token key atrule">k3s.yaml</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token key atrule">dns</span><span class="token punctuation">:</span>  <span class="token comment"># 检查部署的 filebrowser deployment 的 service IP 是否能正常解析到</span>  <span class="token key atrule">filebrowser.default.svc.cluster.local</span><span class="token punctuation">:</span>    <span class="token key atrule">resolvable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span> 10.43.0.10    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">600</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查部署的 argo-workflow deployment 的 service IP 是否能正常解析到</span>  <span class="token key atrule">argo-workflow-argo-workflows-server.default.svc.cluster.local</span><span class="token punctuation">:</span>    <span class="token key atrule">resolvable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span> 10.43.0.10    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">600</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 一些 HTTP 请求方式的检查</span><span class="token key atrule">http</span><span class="token punctuation">:</span>  <span class="token comment"># 检查 filebrowser 服务是否正常运行，类似于 pod 里的存活探针</span>  http<span class="token punctuation">:</span>//<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> .Vars.ip_address <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/filebrowser/<span class="token punctuation">:</span>    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token number">200</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">600</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">method</span><span class="token punctuation">:</span> GET  <span class="token comment"># 检查 argo-workflow 是否正常运行</span>  http<span class="token punctuation">:</span>//<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> .Vars.ip_address <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/workflows/api/v1/version<span class="token punctuation">:</span>    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token number">200</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">600</span>    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">method</span><span class="token punctuation">:</span> GET<span class="token comment"># 同样也是一些 shell 命令的检查项目</span><span class="token key atrule">command</span><span class="token punctuation">:</span>  <span class="token comment"># 检查容器镜像是否齐全，避免缺镜像的问题</span>  <span class="token key atrule">check_container_images</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> crictl images <span class="token punctuation">-</span><span class="token punctuation">-</span>output=json <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.images<span class="token punctuation">[</span><span class="token punctuation">]</span>.repoTags<span class="token punctuation">[</span><span class="token punctuation">]</span>' <span class="token punctuation">|</span> awk <span class="token punctuation">-</span>F '/' '<span class="token punctuation">&#123;</span>print $NF<span class="token punctuation">&#125;</span>' <span class="token punctuation">|</span> awk <span class="token punctuation">-</span>F '<span class="token punctuation">:</span>' '<span class="token punctuation">&#123;</span>print $1<span class="token punctuation">&#125;</span>' <span class="token punctuation">|</span> sort <span class="token punctuation">-</span>u    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> argocli      <span class="token punctuation">-</span> argoexec      <span class="token punctuation">-</span> workflow<span class="token punctuation">-</span>controller      <span class="token punctuation">-</span> filebrowser      <span class="token punctuation">-</span> nginx    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查容器运行的状态是否正常</span>  <span class="token key atrule">check_container_status</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> crictl ps <span class="token punctuation">-</span><span class="token punctuation">-</span>output=json <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.containers<span class="token punctuation">[</span><span class="token punctuation">]</span>.metadata.name' <span class="token punctuation">|</span> sort <span class="token punctuation">-</span>u    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> argo<span class="token punctuation">-</span>server      <span class="token punctuation">-</span> controller      <span class="token punctuation">-</span> nginx      <span class="token punctuation">-</span> filebrowser    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 检查一些 deployment 的状态是否正常</span>  <span class="token key atrule">check_k8s_deployment_status</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span> kubectl get deploy <span class="token punctuation">-</span>n default <span class="token punctuation">-</span>o json <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.items<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">|</span> select(.status.replicas == .status.availableReplicas) <span class="token punctuation">|</span> .metadata.name' <span class="token punctuation">|</span> sort <span class="token punctuation">-</span>u    <span class="token key atrule">exit-status</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stderr</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">stdout</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> argo<span class="token punctuation">-</span>workflow<span class="token punctuation">-</span>argo<span class="token punctuation">-</span>workflows<span class="token punctuation">-</span>server      <span class="token punctuation">-</span> argo<span class="token punctuation">-</span>workflow<span class="token punctuation">-</span>argo<span class="token punctuation">-</span>workflows<span class="token punctuation">-</span>workflow<span class="token punctuation">-</span>controller      <span class="token punctuation">-</span> filebrowser    <span class="token key atrule">skip</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 一些硬件参数的检查，比如 CPU 核心数、内存大小、可用内存大小</span><span class="token key atrule">matching</span><span class="token punctuation">:</span>  <span class="token key atrule">check_vm_cpu_core</span><span class="token punctuation">:</span>    <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> .Vars.cpu_core_number <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">matches</span><span class="token punctuation">:</span>      <span class="token key atrule">gt</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">check_vm_memory_size</span><span class="token punctuation">:</span>    <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> .Vars.memory_size <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">matches</span><span class="token punctuation">:</span>      <span class="token key atrule">gt</span><span class="token punctuation">:</span> <span class="token number">1880000</span>  <span class="token key atrule">check_available_memory_size</span><span class="token punctuation">:</span>    <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> .Vars.available_memory_size <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">matches</span><span class="token punctuation">:</span>      <span class="token key atrule">gt</span><span class="token punctuation">:</span> <span class="token number">600000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外 goss 也比较适合做一些巡检的工作。比如在一个 k8s 集群中进行巡检：检查集群内 pod 的状态、kubernetes 组件的状态、CNI 运行状态、节点的网络、磁盘存储空间、CPU 负载、内核参数、daemonset 服务状态等，都可以参照上述方式定义一系列的检查项，使用 goss 来帮我们自动完成巡检。</p><h3 id="导入-OVA-虚拟机后-Pod-状态异常"><a href="#导入-OVA-虚拟机后-Pod-状态异常" class="headerlink" title="导入 OVA 虚拟机后 Pod 状态异常"></a>导入 OVA 虚拟机后 Pod 状态异常</h3><p>将 OVA 虚拟机在 VMware Workstation 上导入之后，由于虚拟机 IP 的变化可能会导致一些 Pod 处于异常的状态，这时候就需要对这些 Pod 进行强制删除，强制重启一下才能恢复正常。因此需要需要在虚拟机里增加一个 <a href="https://github.com/muzi502/packer-vsphere-example/blob/master/scripts/prepare.sh">prepare.sh</a> 脚本用来重启这些状态异常的 Pod。当导入 OVA 虚拟机后运行这个脚本让所有的 Pod 都正常运行起来，然后再调用 goss 来检查其他服务是否正常。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">set</span> -o errexit<span class="token builtin class-name">set</span> -o nounset<span class="token builtin class-name">set</span> -o pipefailkubectl get pods --no-headers -n kube-system <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">'0/2|0/1|Error|Unknown|CreateContainerError|CrashLoopBackOff'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> -t -I <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> kubectl delete pod -n kube-system --grace-period<span class="token operator">=</span><span class="token number">0</span> --force <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">></span> /dev/null  <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">||</span> <span class="token boolean">true</span>kubectl get pods --no-headers -n default <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">'0/1|Error|Unknown|CreateContainerError|CrashLoopBackOff'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> -t -I <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> kubectl delete pod -n default --grace-period<span class="token operator">=</span><span class="token number">0</span> --force <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">></span> /dev/null  <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token keyword">if</span> kubectl get pods --no-headers --all-namespaces <span class="token operator">|</span> <span class="token function">grep</span> -Ev <span class="token string">'Running|Completed'</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Waiting for service readiness"</span>    <span class="token function">sleep</span> <span class="token number">10</span>  <span class="token keyword">else</span>    <span class="token builtin class-name">break</span>  <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token builtin class-name">cd</span> <span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/.goss<span class="token function">cat</span> <span class="token operator">></span> vars.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFip_address: <span class="token variable"><span class="token variable">$(</span><span class="token function">ip</span> r get <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s/ uid.*//g"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $NF&#125;'</span> <span class="token operator">|</span> <span class="token function">head</span> -n1<span class="token variable">)</span></span>cpu_core_number: <span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> -c ^processor /proc/cpuinfo<span class="token variable">)</span></span>memory_size: <span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token string">'^MemTotal:'</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">)</span></span>available_memory_size: <span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token string">'^MemAvailable:'</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">)</span></span>EOF</span>goss --vars vars.yaml -g goss.yaml validate --retry-timeout<span class="token operator">=</span>10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.escapelife.site/posts/754ba85c.html">K3S 工具进阶完全指南</a></li><li><a href="https://docs.rancher.cn/docs/k3s/installation/installation-requirements/resource-profiling/_index/">K3s 资源分析</a></li><li><a href="https://github.com/aelsabbahy/goss/blob/master/docs/manual.md">goss</a>：goss 配置文档</li><li><a href="https://github.com/alexellis/awesome-baremetal">awesome-baremetal</a>：一些与裸金属服务器相关的工具汇总</li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/installation_guide/sect-kickstart-syntax">Kickstart Syntax Reference</a>：CentOS&#x2F;Red Hat kickstart 语法</li><li><a href="https://vmware.github.io/photon/assets/files/html/3.0/photon_user/kickstart.html">Kickstart Support in Photon OS</a>：Photon OS 的 kickstart 语法</li></ul><h3 id="Packer-相关"><a href="#Packer-相关" class="headerlink" title="Packer 相关"></a>Packer 相关</h3><ul><li><a href="https://github.com/chef/bento">bento</a>：是一个 Packer 最佳实践的模版仓库，不过它的 builder 是 Vagrant，但可以从中借鉴一些 Linux 发行版的自动化安装脚本，比如 CentOS 的 <a href="https://github.com/chef/bento/tree/main/packer_templates/centos/http">kickstart</a> 文件。</li><li><a href="https://mp.weixin.qq.com/s/FnnMnu9i6gFNrAjIlzaNnQ">基于 Packer+Ansible 实现云平台黄金镜像统一构建和发布</a></li><li><a href="https://github.com/kubernetes-sigs/image-builder/tree/master/images/capi">Image Builder for Cluster API</a></li><li><a href="https://image-builder.sigs.k8s.io/capi/providers/vsphere.html#building-images-for-vsphere">Building Images for vSphere</a></li><li><a href="https://www.packer.io/plugins/builders/vsphere/vsphere-clone">VMware vSphere Clone Builder</a></li><li><a href="https://www.packer.io/plugins/builders/vsphere/vsphere-iso">Packer Builder for VMware vSphere</a></li><li><a href="https://github.com/hashicorp/packer-plugin-vsphere">packer-plugin-vsphere</a></li><li><a href="https://github.com/vmware-samples/packer-examples-for-vsphere">packer-examples-for-vsphere</a></li><li><a href="https://docs.rockylinux.org/guides/automation/templates-automation-packer-vsphere/">Automatic template creation with Packer and deployment with Ansible in a VMware vSphere environment</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;不久前写过一篇博客《&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="argo-workflow" scheme="https://blog.k8s.li/tags/argo-workflow/"/>
    
      <category term="vSphere" scheme="https://blog.k8s.li/tags/vSphere/"/>
    
      <category term="packer" scheme="https://blog.k8s.li/tags/packer/"/>
    
      <category term="esxi" scheme="https://blog.k8s.li/tags/esxi/"/>
    
      <category term="k3s" scheme="https://blog.k8s.li/tags/k3s/"/>
    
      <category term="redfish" scheme="https://blog.k8s.li/tags/redfish/"/>
    
  </entry>
  
  <entry>
    <title>使用 Redfish 自动化安装 ESXi OS</title>
    <link href="https://blog.k8s.li/redfish-esxi-os-installer.html"/>
    <id>https://blog.k8s.li/redfish-esxi-os-installer.html</id>
    <published>2022-04-29T16:00:00.000Z</published>
    <updated>2022-04-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>从去年十一月底到现在一直在做在  <a href="https://www.vmware.com/products/esxi-and-esx.html">VMware ESXi</a>  上部署 <a href="https://www.smartx.com/smartx-hci/">超融合集群</a> 的产品化工具，也是在最近完成了前后端的联调，五一节后开始进入测试阶段。为了测试不同的 VMware ESXi 版本和我们产品的兼容性，需要很频繁地在一些物理服务器（如戴尔、联想、惠普、浪潮、超微等）上安装 VMware ESXi OS。</p><p>之前一直都是登录 IPMI 管理页面，挂载远程的 ISO 文件手动安装。安装完成之后还需要配置 ESXi 管理网络的 IP 地址。整体的安装流程比较繁琐，而且物理服务器每次重启和开机都十分耗时，对经常要安装 ESXi 的 QE 小伙伴来讲十分痛苦。</p><p>为了后续测试起来爽快一点，不用再为安装 ESXi OS 而烦恼，于是就基于 Redfish 快速实现了一套自动化安装 ESXi OS 的工具 <a href="https://github.com/muzi502/redfish-esxi-os-installer">redfish-esxi-os-installer</a>。通过它我们内部的戴尔、联想、HPE 服务器安装 ESXi OS 只需要填写一个配置文件并选择需要安装的 ESXi ISO，运行一下 Jenkins Job 等待十几分钟就能自动安装好。原本需要一个多小时的工作量，现在只需要运行一下 Jenkins Job 帮助我们自动安装好 ESXi OS 啦 😂，真是爽歪歪。</p><p>五一假期刚开始，正好有时间抽空整理一下最近学到的东西，和大家分享一下这套自动化安装 ESXi OS 工具。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>支持服务器：联想&#x2F;戴尔&#x2F;HPE（超微和浪潮优先级不高，暂时不支持）；</li><li>一键自动化安装&#x2F;重装 ESXi OS，最好能配置好 Jenkins Job；</li><li>指定 ESXi OS 安装的物理盘：由于物理服务器有多块硬盘，ESXi OS 需要安装在指定的硬盘上。一般为 SATA DOM 盘。比如戴尔的 <a href="https://downloads.dell.com/manuals/all-products/esuprt_solutions_int/esuprt_solutions_int_solutions_resources/servers-solution-resources_white-papers10_en-us.pdf">DELLBOSS</a>，联想的 <a href="https://lenovopress.com/lp0769.pdf">ThinkSystem M.2</a> 。这类 DOM 盘的好处就在于不占用多余的 HBA 卡或 PCI 插槽，有点类似于家用台式机主板上的 M.2 硬盘位插槽；</li><li>指定网卡并配置静态 IP 地址：由于我们的物理服务器上有多块网卡，且不同的网卡有不同的网络用途，因此需要指定某块物理网卡为 ESXi 管理网络所使用的网卡。</li><li>为 ESXi 管理网路配置静态 IP、子网掩码、网关，便于部署好之后直接就能通过该 IP 访问 ESXi。而不是通过 DHCP 分配一个 IP，然后再登录 IPMI 管理页面手动查看 ESXi 的 IP；</li></ul><h2 id="技术调研"><a href="#技术调研" class="headerlink" title="技术调研"></a>技术调研</h2><p>目前市面上主流的裸金属服务器自动化安装 OS 的工具有 PXE 和 IPMI&#x2F;Redfish 两种。</p><h3 id="PXE"><a href="#PXE" class="headerlink" title="PXE"></a>PXE</h3><p>虽然内部也有 PXE 服务可用，但重启服务器和设置服务器的引导项为 PXE 启动仍然需要手动登录 IPMI 管理页面进行操作，无法做到自动重启和自动重装，仍有一定的工作量。而且 PXE 安装 OS 无法解决为每台服务器配置各自的安装盘和管理网络网卡及静态 IP 地址的问题，遂放弃。</p><h3 id="IPMI-x2F-Redfish"><a href="#IPMI-x2F-Redfish" class="headerlink" title="IPMI&#x2F;Redfish"></a>IPMI&#x2F;Redfish</h3><p><a href="https://www.dmtf.org/standards/redfish">Redfish</a> 的概念和原理什么的就懒得介绍了，下面就直接剽窃一下官方的文档吧 😅：</p><blockquote><p><code>DMTF</code> 的 <code>Redfish®</code> 是一个标准 <code>API</code>，旨在为融合、混合 <code>IT</code> 和软件定义数据中心（<code>SDDC</code>）提供简单和安全管理。</p><p>在 <code>Redfish</code> 出现之前，现代数据中心环境中缺乏互操作管理标准。随着机构越来越青睐于大规模的解决方案，传统标准不足以成功管理大量简单的多节点服务器或混合基础设施。<code>IPMI</code> 是一种较早的带外管理标准，仅限于“最小公共集”命令集（例如，开机&#x2F;关机&#x2F;重启、温度值、文本控制台等），由于供应商扩展在所有平台上并不常见，导致了客户常用的功能集减少。许多用户开发了自己的紧密集成工具，但是也不得不依赖带内管理软件。</p><p>而对于企业级用户来说，设备都是上千台，其需要统一的管理界面，就要对接不同供应商的 <code>API</code>。当基本 <code>IPMI</code> 功能已经不太好满足大规模 <code>Scale-out</code> 环境时，如何以更便捷的方式调用服务器高级管理功能就是一个新的需求。</p><p>为了寻求一个基于广泛使用的工具来加快发展的现代接口，现如今，客户需要一个使用互联网和 <code>web</code> 服务环境中常见的协议、结构和安全模型定义的 <code>API</code>。</p><p><code>Redfish</code> 可扩展平台管理 <code>API</code>（<code>The Redfish Scalable Platforms Management API</code>）是一种新的规范，其使用 <code>RESTful</code> 接口语义来访问定义在模型格式中的数据，用于执行带外系统管理 （<code>out of band systems management</code>）。其适用于大规模的服务器，从独立的服务器到机架式和刀片式的服务器环境，而且也同样适用于大规模的云环境。</p><p><code>Redfish</code> 的第 <code>1</code> 版侧重于服务器，为 <code>IPMI-over-LAN</code> 提供了一个安全、多节点的替代品。随后的 <code>Redfish</code> 版本增加了对网络接口(例如 <code>NIC</code>、<code>CNA</code> 和 <code>FC HBA</code>)、<code>PCIe</code> 交换、本地存储、<code>NVDIMM</code>、多功能适配器和可组合性以及固件更新服务、软件更新推送方法和安全特权映射的管理。此外，<code>Redfish</code> 主机接口规范允许在操作系统上运行应用程序和工具，包括在启动前（固件）阶段-与 <code>Redfish</code> 管理服务沟通。</p><p>在定义 <code>Redfish</code> 标准时，协议与数据模型可分开并允许独立地修改。以模式为基础的数据模型是可伸缩和可扩展的，并且随着行业的发展，它将越来越具有人类可读性定义。</p></blockquote><p>通过 Redfish 我们可以对服务器进行挂载&#x2F;卸载 ISO、设置 BIOS 启动项、开机&#x2F;关机&#x2F;重启等操作。只需要使用一些特定的 ansible 模块，将它们缝合起来就能将整个流程跑通。</p><p>内部的服务器戴尔、联想、HPE 的较多，这三家厂商对 Redfish 支持的也比较完善。于是这个 ESXi OS 自动化安装工具 <a href="https://github.com/muzi502/redfish-esxi-os-installer">redfish-esxi-os-installer</a> 就基于 Redfish 并结合 Jenkins 实现了一套自动化安装 ESXi OS 的方案，下面就详细介绍一下这套方案的安装流程和技术实现细节。</p><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><ol><li>获取硬盘和网卡硬件设备信息</li><li>根据硬件设备信息填写配置文件</li><li>根据配置文件生成 ansible inventory 文件</li><li>根据配置文件为每台主机生成 kickstart 文件</li><li>将生成好的 kickstart 文件打包放到 ESXi ISO 当中</li><li>为每台主机重新构建一个 ESXi ISO 文件</li><li>通过 redfish 弹出已有的 ISO 镜像</li><li>通过 redfish 插入远程的 ISO 镜像</li><li>设置 one-boot 启动引导项为虚拟光驱</li><li>重启服务器到 ESXI ISO</li><li>ESXi installer 调用 Kickstart 脚本安装 OS</li><li>等待 ESXi OS 安装完成</li></ol><h3 id="获取硬件信息"><a href="#获取硬件信息" class="headerlink" title="获取硬件信息"></a>获取硬件信息</h3><p>该步骤主要是获取 ESXi OS 所要安装的硬盘和管理网络网卡设备信息。</p><h4 id="获取硬盘型号-x2F-序列号"><a href="#获取硬盘型号-x2F-序列号" class="headerlink" title="获取硬盘型号&#x2F;序列号"></a>获取硬盘型号&#x2F;序列号</h4><p>要指定 ESXi OS 安装的硬盘，可以通过硬盘型号或序列号的方式。如果当前服务器已经安装了 ESXi，登录到 ESXi 则可以查看到所安装硬盘的型号：</p><ul><li>比如这台戴尔的服务器 ESXi OS 安装的硬盘型号是 <code>DELLBOSS VD</code>（注意中间的空格不要省略）；</li></ul><p><img data-src="https://p.k8s.li/2022-04-30-redfish-auto-install-esxi-os-01.png" alt="img"></p><ul><li>比如这台联想服务器的 SATA DOM 盘型号为 <code>ThinkSystem M.2</code></li></ul><p><img data-src="https://p.k8s.li/2022-04-30-redfish-auto-install-esxi-os-06.png" alt="img"></p><ul><li>如果安装的是 Linux，可以通过 <a href="https://www.smartmontools.org/">smartctl</a> 工具查看所要安装硬盘的型号即 <code>Device Model</code>，比如：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-nas ~╰─<span class="token comment"># smartctl -x /dev/sdb</span>smartctl <span class="token number">6.6</span> <span class="token number">2017</span>-11-05 r4594 <span class="token punctuation">[</span>x86_64-linux-4.19.0-18-amd64<span class="token punctuation">]</span> <span class="token punctuation">(</span>local build<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2002</span>-17, Bruce Allen, Christian Franke, www.smartmontools.org<span class="token operator">==</span><span class="token operator">=</span> START OF INFORMATION SECTION <span class="token operator">==</span><span class="token operator">=</span>Device Model:     HGST HUH721212ALE604Serial Number:    5PJAMUHDLU WWN Device Id: <span class="token number">5</span> 000cca 291e10521<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img data-src="https://p.k8s.li/2022-04-30-redfish-auto-install-esxi-os-04.png" alt="img"></p><p>如果有多块型号相同的硬盘，ESXi 会默认选择第一块，如果要指定某一块硬盘则使用 WWN 号的方式，获取 WWN ID 的命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-nas ~╰─<span class="token comment"># smartctl -x /dev/sdb | sed -n "s/LU WWN Device Id:/naa./p" | tr -d ' '</span>naa.5000cca291e10521<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="获取网卡设备名-x2F-MAC-地址"><a href="#获取网卡设备名-x2F-MAC-地址" class="headerlink" title="获取网卡设备名&#x2F;MAC 地址"></a>获取网卡设备名&#x2F;MAC 地址</h4><ul><li>如果当前物理服务器已经安装了 ESXi，则登录 ESXi 主机查看 ESXi 默认的管理网络 vSwitch0 虚拟交换机所连接的物理网卡设备名，比如这台服务器网卡设备名为 <code>vmnic4</code></li></ul><p><img data-src="https://p.k8s.li/2022-04-30-redfish-auto-install-esxi-os-05.png" alt="img"></p><ul><li>另一种方式则是登录服务器的 IPMI 管理页面，查看对应网卡的 MAC 地址</li></ul><p><img data-src="https://p.k8s.li/2022-04-30-redfish-auto-install-esxi-os-02.png" alt="img"></p><h3 id="填写配置文件"><a href="#填写配置文件" class="headerlink" title="填写配置文件"></a>填写配置文件</h3><p>通过以上方式确定好 ESXi OS 所安装的硬盘型号或序列号，以及 ESXi 默认管理网络 vSwitch0 所关联的物理网卡设备名或 MAC 地址之后，我们就将这些配置参数填入到该配置文件当中。后面的工具会使用该配置为每台机器生成不同的 kickstart 文件，在 kickstart 文件中指定 ESXi OS 安装的硬盘，ESXi 管理网络所使用的网卡，以及设置静态 IP、子网掩码、网关、主机名等参数。</p><ul><li><a href="https://github.com/muzi502/redfish-esxi-os-installer/blob/master/config-example.yaml">config.yaml</a></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">hosts</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">ipmi</span><span class="token punctuation">:</span>    <span class="token key atrule">vendor</span><span class="token punctuation">:</span> lenovo                  <span class="token comment"># 服务器厂商名 [dell, lenovo, hpe]</span>    <span class="token key atrule">address</span><span class="token punctuation">:</span> 10.172.70.186          <span class="token comment"># IPMI IP 地址</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> username              <span class="token comment"># IPMI 用户名</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> password              <span class="token comment"># IPMI 密码</span>  <span class="token key atrule">esxi</span><span class="token punctuation">:</span>    <span class="token key atrule">esxi_disk</span><span class="token punctuation">:</span> ThinkSystem M.2      <span class="token comment"># ESXi OS 所安装硬盘的型号或序列号</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> password              <span class="token comment"># ESXi 的 root 用户密码</span>    <span class="token key atrule">address</span><span class="token punctuation">:</span> 10.172.69.86           <span class="token comment"># ESXi 管理网络 IP 地址</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span> 10.172.64.1            <span class="token comment"># ESXi 管理网络网关</span>    <span class="token key atrule">netmask</span><span class="token punctuation">:</span> 255.255.240.0          <span class="token comment"># ESXi 管理网络子网掩码</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> esxi<span class="token punctuation">-</span>69<span class="token punctuation">-</span><span class="token number">86</span>            <span class="token comment"># ESXi 主机名（可选）</span>    <span class="token key atrule">mgtnic</span><span class="token punctuation">:</span> vmnic4                  <span class="token comment"># ESXi 管理网络网卡名称或MAC 地址</span><span class="token punctuation">-</span> <span class="token key atrule">ipmi</span><span class="token punctuation">:</span>    <span class="token key atrule">vendor</span><span class="token punctuation">:</span> dell    <span class="token key atrule">address</span><span class="token punctuation">:</span> 10.172.18.191    <span class="token key atrule">username</span><span class="token punctuation">:</span> username    <span class="token key atrule">password</span><span class="token punctuation">:</span> password  <span class="token key atrule">esxi</span><span class="token punctuation">:</span>    <span class="token key atrule">esxi_disk</span><span class="token punctuation">:</span> DELLBOSS VD    <span class="token key atrule">password</span><span class="token punctuation">:</span> password    <span class="token key atrule">address</span><span class="token punctuation">:</span> 10.172.18.95    <span class="token key atrule">gateway</span><span class="token punctuation">:</span> 10.172.16.1    <span class="token key atrule">netmask</span><span class="token punctuation">:</span> 255.255.240.0    <span class="token key atrule">mgtnic</span><span class="token punctuation">:</span> B4<span class="token punctuation">:</span>96<span class="token punctuation">:</span>91<span class="token punctuation">:</span>A7<span class="token punctuation">:</span>3F<span class="token punctuation">:</span>D6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成-inventory-文件"><a href="#生成-inventory-文件" class="headerlink" title="生成 inventory 文件"></a>生成 inventory 文件</h3><p>在 <a href="https://github.com/muzi502/redfish-esxi-os-installer/blob/master/tools.sh">tools.sh</a> 脚本中通过 <a href="https://github.com/mikefarah/yq">yq</a> 命令行工具解析 <code>config.yaml</code> 配置文件，得到每台主机的配置信息，并根据该信息生成一个 ansible 的 inventory 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">rendder_host_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">index</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token assign-left variable">vendor</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].ipmi.vendor"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token assign-left variable">os_disk</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].esxi.esxi_disk"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>"</span>    <span class="token assign-left variable">esxi_mgtnic</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].esxi.mgtnic"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token assign-left variable">esxi_address</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].esxi.address"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token assign-left variable">esxi_gateway</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].esxi.gateway"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token assign-left variable">esxi_netmask</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].esxi.netmask"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token assign-left variable">esxi_password</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].esxi.password"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token assign-left variable">ipmi_address</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].ipmi.address"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token assign-left variable">ipmi_username</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].ipmi.username"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token assign-left variable">ipmi_password</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].ipmi.password"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span><span class="token variable">)</span></span>    <span class="token assign-left variable">esxi_hostname</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>yq -e <span class="token builtin class-name">eval</span> <span class="token string">".hosts.[<span class="token variable">$index</span>].esxi.hostname"</span> $<span class="token punctuation">&#123;</span>CONFIG<span class="token punctuation">&#125;</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null <span class="token operator">||</span> <span class="token boolean">true</span><span class="token variable">)</span></span>"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">gen_inventory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span> <span class="token variable">$&#123;INVENTORY&#125;</span></span>_hpe__dell__lenovo_[all:children]hpedelllenovoEOF</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">0</span> `expr $<span class="token punctuation">&#123;</span>nums<span class="token punctuation">&#125;</span> - <span class="token number">1</span>`<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        rendder_host_info <span class="token variable">$&#123;i&#125;</span>        <span class="token assign-left variable">host_info</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;ipmi_address&#125;</span> username=<span class="token variable">$&#123;ipmi_username&#125;</span> password=<span class="token variable">$&#123;ipmi_password&#125;</span> esxi_address=<span class="token variable">$&#123;esxi_address&#125;</span> esxi_password=<span class="token variable">$&#123;esxi_password&#125;</span>"</span>        <span class="token function">sed</span> -i <span class="token string">"/_<span class="token variable">$&#123;vendor&#125;</span>_/a <span class="token variable">$&#123;host_info&#125;</span>"</span> <span class="token variable">$&#123;INVENTORY&#125;</span>    <span class="token keyword">done</span>    <span class="token function">sed</span> -i <span class="token string">"s#^_dell_#[dell]#g;s#^_lenovo_#[lenovo]#g;s#_hpe_#[hpe]#g"</span> <span class="token variable">$&#123;INVENTORY&#125;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"gen inventory success"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成后的 inventory 文件内容如下，根据不同的厂商名称进行分组</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">hpe</span><span class="token punctuation">]</span></span><span class="token key attr-name">10.172.18.191 username</span><span class="token punctuation">=</span><span class="token value attr-value">username password=password esxi_address=10.172.18.95 esxi_password=password</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">dell</span><span class="token punctuation">]</span></span><span class="token key attr-name">10.172.18.192 username</span><span class="token punctuation">=</span><span class="token value attr-value">username password=password esxi_address=10.172.18.96 esxi_password=password</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">lenovo</span><span class="token punctuation">]</span></span><span class="token key attr-name">10.172.18.193 username</span><span class="token punctuation">=</span><span class="token value attr-value">username password=password esxi_address=10.172.18.97 esxi_password=password</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">all:children</span><span class="token punctuation">]</span></span>hpedelllenovo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="检查-Redfish-登录是否正常"><a href="#检查-Redfish-登录是否正常" class="headerlink" title="检查 Redfish 登录是否正常"></a>检查 Redfish 登录是否正常</h3><p>通过 Redfish 的 GetSystemInventory 命令获取服务器的 inventory 清单来检查登录 Redfish 是否正常，用户名或密码是否正确。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Getting system inventory  <span class="token key atrule">community.general.redfish_info</span><span class="token punctuation">:</span>    <span class="token key atrule">category</span><span class="token punctuation">:</span> Systems    <span class="token key atrule">command</span><span class="token punctuation">:</span> GetSystemInventory    <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成-kickstart-文件"><a href="#生成-kickstart-文件" class="headerlink" title="生成 kickstart 文件"></a>生成 kickstart 文件</h3><p>在 <a href="">tools.sh</a> 同样使用 yq 命令行工具渲染配置文件，得到每台主机的配置信息，为每台主机生成一个特定的 kickstart 文件。</p><p>在 kickstart 文件中我们我们可以通过 <code>install --overwritevmfs --firstdisk=&quot;$&#123;ESXI_DISK&#125;&quot;</code> 配置 ESXi OS 安装在哪一块硬盘上；</p><p>通过 <code>network --bootproto=static</code> 为 ESXi 管理网络配置静态 IP、子网掩码、网关、主机名、物理网卡等参数。需要注意的是，如果使用 MAC 地址指定网卡，MAC 地址必须为大写，因此需要使用 tr 进行了一下大小写转换；</p><p>通过 <code>clearpart --alldrives --overwritevmfs</code> 可以清除所有硬盘上的分区，我们安装时一般是将它们全部清理掉，方便进行测试；</p><p>最后再开启 SSH 服务并开启 sshServer 的防火墙，方便后续测试使用；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">gen_iso_ks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">ISO_KS</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">ESXI_DISK</span><span class="token operator">=</span><span class="token variable">$&#123;os_disk&#125;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">IP_ADDRESS</span><span class="token operator">=</span><span class="token variable">$&#123;esxi_address&#125;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">NETMASK</span><span class="token operator">=</span><span class="token variable">$&#123;esxi_netmask&#125;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token variable">$&#123;esxi_gateway&#125;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">DNS_SERVER</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;GATEWAY&#125;</span>"</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token variable">$&#123;esxi_password&#125;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable"><span class="token environment constant">HOSTNAME</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">&#123;</span>esxi_hostname<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s/null/esxi-<span class="token variable">$&#123;esxi_address<span class="token operator">/</span><span class="token operator">/</span>.<span class="token operator">/</span>-&#125;</span>/"</span><span class="token variable">)</span></span>"</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">MGTNIC</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">&#123;</span>esxi_mgtnic<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">'[a-z]'</span> <span class="token string">'[A-Z]'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/VMNIC/vmnic/g'</span><span class="token variable">)</span></span>    <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span> <span class="token variable">$&#123;ISO_KS&#125;</span></span>vmaccepteula# Set the root password for the DCUI and Tech Support Moderootpw <span class="token variable">$&#123;PASSWORD&#125;</span># Set the keyboardkeyboard 'US Default'# wipe exisiting VMFS store # CAREFUL!clearpart --alldrives --overwritevmfs# Install on the first local disk available on machineinstall --overwritevmfs --firstdisk="<span class="token variable">$&#123;ESXI_DISK&#125;</span>"# Set the network to DHCP on the first network adapternetwork --bootproto=static --hostname=<span class="token variable">$&#123;<span class="token environment constant">HOSTNAME</span>&#125;</span> --ip=<span class="token variable">$&#123;IP_ADDRESS&#125;</span> --gateway=<span class="token variable">$&#123;GATEWAY&#125;</span> --nameserver=<span class="token variable">$&#123;DNS_SERVER&#125;</span> --netmask=<span class="token variable">$&#123;NETMASK&#125;</span> --device="<span class="token variable">$&#123;MGTNIC&#125;</span>"reboot%firstboot --interpreter=busybox# Enable SSHvim-cmd hostsvc/enable_sshvim-cmd hostsvc/start_sshesxcli network firewall ruleset set --enabled=false --ruleset-id=sshServerEOF</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重新构建-ESXi-ISO"><a href="#重新构建-ESXi-ISO" class="headerlink" title="重新构建 ESXi ISO"></a>重新构建 ESXi ISO</h3><p>这一步的操作主要是修改 ESXi ISO 的启动项配置，配置 ks 文件的路径，主要是修改 ISO 文件里的 <code> boot.cfg</code> 和 <code>efi/boot/boot.cfg</code> 文件。在启动参数中加入 <code>ks=cdrom:/KS.CFG</code> 用于指定 ESXi OS 安装通过读取 kickstart 脚本的方式来完成。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> -i -e <span class="token string">'s#cdromBoot#ks=cdrom:/KS.CFG systemMediaSize=small#g'</span> boot.cfg<span class="token function">sed</span> -i -e <span class="token string">'s#cdromBoot#ks=cdrom:/KS.CFG systemMediaSize=small#g'</span> efi/boot/boot.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外在 VMware 的 KB <a href="https://kb.vmware.com/s/article/81166">Boot option to configure the size of ESXi system partitions (81166)</a> 中，提到过可以设置 <code>systemMediaSize=small</code> 来调整 VMFS-L 分区的大小。ESXi 7.0 版本之后会默认创建一个 VMFS-L 分区，如果 SATA DOM 盘比较小的话比如只有 128G，建议设置此参数。不然可能会导致安装完 ESXi OS 之后磁盘剩余的空间都被 VMFS-L 分区给占用，导致没有一个本地的数据存储可以使用。</p><p>修改好 ESXi 的启动配置之后，我们再使用 genisoimage 命令重新构建一个 ESXi ISO 文件，将构建好的 ISO 文件放到一个 http 文件服务的目录下，如 nginx 的 <code>/usr/share/nginx/html/iso</code>。后面将会通过 http 的方式将 ISO 挂载到服务器的虚拟光驱上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">rebuild_esxi_iso</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">dest_iso_mount_dir</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">dest_iso_path</span><span class="token operator">=</span><span class="token variable">$2</span>    <span class="token function">pushd</span> <span class="token variable">$&#123;dest_iso_mount_dir&#125;</span> <span class="token operator">></span> /dev/null    <span class="token function">sed</span> -i -e <span class="token string">'s#cdromBoot#ks=cdrom:/KS.CFG systemMediaSize=small#g'</span> boot.cfg    <span class="token function">sed</span> -i -e <span class="token string">'s#cdromBoot#ks=cdrom:/KS.CFG systemMediaSize=small#g'</span> efi/boot/boot.cfg    genisoimage -J <span class="token punctuation">\</span>                -R  <span class="token punctuation">\</span>                -o <span class="token variable">$&#123;dest_iso_path&#125;</span> <span class="token punctuation">\</span>                -relaxed-filenames <span class="token punctuation">\</span>                -b isolinux.bin <span class="token punctuation">\</span>                -c boot.cat <span class="token punctuation">\</span>                -no-emul-boot <span class="token punctuation">\</span>                -boot-load-size <span class="token number">4</span> <span class="token punctuation">\</span>                -boot-info-table <span class="token punctuation">\</span>                -eltorito-alt-boot <span class="token punctuation">\</span>                -eltorito-boot efiboot.img <span class="token punctuation">\</span>                -quiet --no-emul-boot <span class="token punctuation">\</span>                <span class="token builtin class-name">.</span> <span class="token operator">></span> /dev/null  <span class="token function">popd</span> <span class="token operator">></span> /dev/null<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新构建好 ESXi ISO 之后的 nginx 目录结构如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># tree /usr/share/nginx/html/iso/</span>/usr/share/nginx/html/iso/├── redfish│   ├── <span class="token number">172.20</span>.18.191│   │   └── VMware-VMvisor-Installer-7.0U3d-19482537.x86_64.iso <span class="token comment"># 重新构建的 ISO</span>│   ├── <span class="token number">172.20</span>.18.192│   │   └── VMware-VMvisor-Installer-7.0U3d-19482537.x86_64.iso <span class="token comment"># 重新构建的 ISO</span>│   ├── <span class="token number">172.20</span>.18.193│   │   └── VMware-VMvisor-Installer-7.0U3d-19482537.x86_64.iso <span class="token comment"># 重新构建的 ISO</span>│   └── <span class="token number">172.20</span>.70.186│       └── VMware-VMvisor-Installer-7.0U3d-19482537.x86_64.iso <span class="token comment"># 重新构建的 ISO</span>├── VMware-VMvisor-Installer-6.7.0.update03-14320388.x86_64.iso <span class="token comment"># 原 ISO</span>├── VMware-VMvisor-Installer-7.0U2a-17867351.x86_64.iso         <span class="token comment"># 原 ISO</span>└── VMware-VMvisor-Installer-7.0U3d-19482537.x86_64.iso         <span class="token comment"># 原 ISO</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过-redfish-弹出已有的-Virtual-Media"><a href="#通过-redfish-弹出已有的-Virtual-Media" class="headerlink" title="通过 redfish 弹出已有的 Virtual Media"></a>通过 redfish 弹出已有的 Virtual Media</h3><p>redfish 插入&#x2F;弹出 ISO 操作有现成可用的 ansible 模块可以使用，不必重复造轮子。不同的服务器厂商调用的模块可能会有所不同，不过参数基本上是相同的。</p><p>如果当前服务器上已经挂载了一些其他的 ISO，要将他们全部弹出才行，不然在挂载 ISO 的时候会失败退出，并且也能避免多个 ISO 重启启动的时候引起冲突启动到另一个 ISO 中。</p><ul><li>联想服务器的 VirtualMediaEject 命令可以弹出所有的 ISO</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Lenovo <span class="token punctuation">|</span> Eject all Virtual Media  <span class="token key atrule">community.general.xcc_redfish_command</span><span class="token punctuation">:</span>    <span class="token key atrule">category</span><span class="token punctuation">:</span> Manager    <span class="token key atrule">command</span><span class="token punctuation">:</span> VirtualMediaEject    <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>    <span class="token key atrule">resource_id</span><span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token key atrule">when</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> inventory_hostname in groups<span class="token punctuation">[</span><span class="token string">'lenovo'</span><span class="token punctuation">]</span>  <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> mount<span class="token punctuation">-</span>iso  <span class="token punctuation">-</span> umount<span class="token punctuation">-</span>iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>戴尔和 HPE 服务器在弹出 ISO 的时候需要先知道原有 ISO 的 URL。因此先通过 <code>GetVirtualMedia</code> 命令获取到一个 ISO 的 URL 列表，然后再根据这个列表一一弹出。</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get virtual media details  <span class="token key atrule">community.general.redfish_info</span><span class="token punctuation">:</span>    <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>    <span class="token key atrule">category</span><span class="token punctuation">:</span> <span class="token string">"Manager"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">"GetVirtualMedia"</span>  <span class="token key atrule">register</span><span class="token punctuation">:</span> result  <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> mount<span class="token punctuation">-</span>iso  <span class="token punctuation">-</span> umount<span class="token punctuation">-</span>iso  <span class="token key atrule">when</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> inventory_hostname not in groups<span class="token punctuation">[</span><span class="token string">'lenovo'</span><span class="token punctuation">]</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Eject virtual media  <span class="token key atrule">community.general.redfish_command</span><span class="token punctuation">:</span>    <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>    <span class="token key atrule">category</span><span class="token punctuation">:</span> <span class="token string">"Manager"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">"VirtualMediaEject"</span>    <span class="token key atrule">virtual_media</span><span class="token punctuation">:</span>      <span class="token key atrule">image_url</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; item &#125;&#125;"</span>  <span class="token key atrule">with_items</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; result.redfish_facts.virtual_media.entries[0][1] | selectattr('ConnectedVia', 'equalto','URI') | map(attribute='Image') | list &#125;&#125;"</span>  <span class="token key atrule">when</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> inventory_hostname not in groups<span class="token punctuation">[</span><span class="token string">'lenovo'</span><span class="token punctuation">]</span>  <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> mount<span class="token punctuation">-</span>iso  <span class="token punctuation">-</span> umount<span class="token punctuation">-</span>iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在弹出一个 ISO 的时候需要先知道 ISO 的 URL，感觉有点奇葩 😂。更合理的应该是需要一个挂载点的标识，就像比 Linux 上的挂载点。在 umount 挂载的设备时，只需要知道挂载点即可，不需要知道挂载的设备是什么。在 ISSUE <a href="https://github.com/ansible-collections/community.general/issues/3042">VirtualMediaEject should not require image_url </a> 中有大佬反馈过在弹出 ISO 的时候不应该需要 image url，不过被 maintainer 给否决了 😅。</p><blockquote><p>Yes, at least with the behavior we’ve implemented today the image URL is needed since the expectation is the user is specifying the image URL for the ISO to eject. I think we need to consider some things first before making changes.</p><p>If the image URL is not given, then what exactly should be ejected? All virtual media your example indicates? This seems a bit heavy handed in my opinion, but others might like this behavior. Redfish itself doesn’t support an “eject all” type of operation, and I suspect the script you’re referencing is either using OEM actions or is just looping on all slots and ejecting everything.</p><p>Should a user be allowed specify an alternative identifier (such as the “Id” of the virtual media instance) in order to control what slot is ejected?</p><p>Certainly would like opinions from others for desired behavior. I do like the idea of keeping the mandatory argument list as minimal as possible, but would like to agree upon the desired behavior first.</p></blockquote><h3 id="通过-Redfish-插入-ISO"><a href="#通过-Redfish-插入-ISO" class="headerlink" title="通过 Redfish 插入 ISO"></a>通过 Redfish 插入 ISO</h3><ul><li>联想服务器使用的是 <code>community.general.xcc_redfish_command</code> 模块，redfish 的 command 为 VirtualMediaInsert；</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Lenovo <span class="token punctuation">|</span> Insert <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> image_url <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> Virtual Media  <span class="token key atrule">community.general.xcc_redfish_command</span><span class="token punctuation">:</span>    <span class="token key atrule">category</span><span class="token punctuation">:</span> Manager    <span class="token key atrule">command</span><span class="token punctuation">:</span> VirtualMediaInsert    <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>    <span class="token key atrule">virtual_media</span><span class="token punctuation">:</span>      <span class="token key atrule">image_url</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; image_url &#125;&#125;"</span>      <span class="token key atrule">media_types</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> CD        <span class="token punctuation">-</span> DVD    <span class="token key atrule">resource_id</span><span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token key atrule">when</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> inventory_hostname in groups<span class="token punctuation">[</span><span class="token string">'lenovo'</span><span class="token punctuation">]</span>  <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> mount<span class="token punctuation">-</span>iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>戴尔和 HPE 服务器挂载 ISO 使用的则是 <code>community.general.redfish_command</code> 模块，command 和联想的相同；</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Insert <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> image_url <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> ISO as virtual media device <span class="token key atrule">community.general.redfish_command</span><span class="token punctuation">:</span>   <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>   <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>   <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>   <span class="token key atrule">category</span><span class="token punctuation">:</span> <span class="token string">"Manager"</span>   <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">"VirtualMediaInsert"</span>   <span class="token key atrule">virtual_media</span><span class="token punctuation">:</span>     <span class="token key atrule">image_url</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; image_url &#125;&#125;"</span>     <span class="token key atrule">media_types</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> CD       <span class="token punctuation">-</span> DVD <span class="token key atrule">when</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> inventory_hostname not in groups<span class="token punctuation">[</span><span class="token string">'lenovo'</span><span class="token punctuation">]</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> mount<span class="token punctuation">-</span>iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是：如果使用 <code>community.general.redfish_command</code> 模块为联想的服务器挂载 ISO 会提示 4xx 错误，必须使用 <code>community.general.xcc_redfish_command</code> 模块才行。</p><h3 id="设置启动项为虚拟光驱"><a href="#设置启动项为虚拟光驱" class="headerlink" title="设置启动项为虚拟光驱"></a>设置启动项为虚拟光驱</h3><p>此过程是将服务器的启动项设置为虚拟光驱，不同厂商的服务器调用的 ansible 模块可能也会有所不同。</p><ul><li>联想和 HPE 服务器</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set one<span class="token punctuation">-</span>time boot device to <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> bootdevice <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token key atrule">community.general.redfish_command</span><span class="token punctuation">:</span>    <span class="token key atrule">category</span><span class="token punctuation">:</span> Systems    <span class="token key atrule">command</span><span class="token punctuation">:</span> SetOneTimeBoot    <span class="token key atrule">bootdevice</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; bootdevice &#125;&#125;"</span>    <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">when</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> inventory_hostname not in groups<span class="token punctuation">[</span><span class="token string">'dell'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>戴尔服务器</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span>  Dell <span class="token punctuation">|</span> set iDRAC attribute for one<span class="token punctuation">-</span>time boot from virtual CD  <span class="token key atrule">community.general.idrac_redfish_config</span><span class="token punctuation">:</span>    <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>    <span class="token key atrule">category</span><span class="token punctuation">:</span> <span class="token string">"Manager"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">"SetManagerAttributes"</span>    <span class="token key atrule">manager_attributes</span><span class="token punctuation">:</span>      <span class="token key atrule">ServerBoot.1.BootOnce</span><span class="token punctuation">:</span> <span class="token string">"Enabled"</span>      <span class="token key atrule">ServerBoot.1.FirstBootDevice</span><span class="token punctuation">:</span> <span class="token string">"VCD-DVD"</span>  <span class="token key atrule">when</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> inventory_hostname in groups<span class="token punctuation">[</span><span class="token string">'dell'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h3><p>重启服务器直接调用 <code>community.general.redfish_command</code> 模块就可以。不过需要注意的是，重启服务器之前要保证服务器当前状态为开启状态，因此调用一下 redfish 的 PowerOn 命令对服务器进行开机，如果已处于开机状态则无影响，然后再调用 PowerForceRestart 命令重启服务器。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">name</span><span class="token punctuation">:</span> Power Force Restart the host  <span class="token key atrule">gather_facts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Turn system power on    <span class="token key atrule">community.general.redfish_command</span><span class="token punctuation">:</span>      <span class="token key atrule">category</span><span class="token punctuation">:</span> Systems      <span class="token key atrule">command</span><span class="token punctuation">:</span> PowerOn      <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Reboot system    <span class="token key atrule">community.general.redfish_command</span><span class="token punctuation">:</span>      <span class="token key atrule">category</span><span class="token punctuation">:</span> Systems      <span class="token key atrule">command</span><span class="token punctuation">:</span> PowerForceRestart      <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里还有优化的空间，就是根据电源的状态决定是重启还是开机，不过有点麻烦懒得弄了 😅</p><h3 id="等待-ESXi-OS-安装完成"><a href="#等待-ESXi-OS-安装完成" class="headerlink" title="等待 ESXi OS 安装完成"></a>等待 ESXi OS 安装完成</h3><p>服务器重启之后，我们通过 govc 命令不断尝试连接 ESXi 主机，如果能够正常连接则说明 ESXi OS 已经安装完成了。一般情况下等待 15 分钟左右就能安装完成，期间需要重启服务器两次，每次重启大概需要 5 分钟左右，实际上 ESXi 进入安装页面到安装完成只需要 5 分钟左右，服务器开机自检占用的时间会稍微长一点。</p><p><img data-src="https://p.k8s.li/2022-04-30-redfish-auto-install-esxi-os-03.png" alt="image-20220428210819057"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">name</span><span class="token punctuation">:</span> Wait for the ESXi OS installation to complete  <span class="token key atrule">gather_facts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">vars</span><span class="token punctuation">:</span>    <span class="token key atrule">esxi_username</span><span class="token punctuation">:</span> <span class="token string">"root"</span>    <span class="token key atrule">govc_url</span><span class="token punctuation">:</span> <span class="token string">"https://&#123;&#123; esxi_username &#125;&#125;:&#123;&#123; esxi_password &#125;&#125;@&#123;&#123; esxi_address &#125;&#125;"</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"Wait for &#123;&#123; inventory_hostname &#125;&#125; install ESXi &#123;&#123; esxi_address &#125;&#125; host to be complete"</span>    <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"govc about -k=true -u=&#123;&#123; govc_url&#125;&#125;"</span>    <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">60</span>    <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token number">30</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> result    <span class="token key atrule">until</span><span class="token punctuation">:</span> result.rc == 0  <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> post<span class="token punctuation">-</span>check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Makefile-封装"><a href="#Makefile-封装" class="headerlink" title="Makefile 封装"></a>Makefile 封装</h2><p>为了方便操作，将上述流程使用 Makefile 进行封装一下，如果不配置 Jenkins Job 的话，可以在本地填写好 <code>config.yaml</code> 配置文件，然后运行 make 命令来进行相关操作。</p><h3 id="vars"><a href="#vars" class="headerlink" title="vars"></a>vars</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SRC_ISO_DIR     ?<span class="token operator">=</span> /usr/share/nginx/html/isoHTTP_DIR        ?<span class="token operator">=</span> /usr/share/nginx/html/iso/redfishHTTP_URL        ?<span class="token operator">=</span> http://172.20.17.20/iso/redfishESXI_ISO        ?<span class="token operator">=</span> VMware-VMvisor-Installer-7.0U3d-19482537.x86_64.isoSRC_ISO_DIR   <span class="token comment"># 原 ESXi ISO 的存放目录</span>ESXI_ISO      <span class="token comment"># ESXi ISO 的文件名，如 VMware-VMvisor-Installer-7.0U3d-19482537.x86_64.iso</span>HTTP_DIR      <span class="token comment"># HTTP 服务器的静态文件存放目录，比如 /usr/share/nginx/html 或 /var/www/html</span>              <span class="token comment"># 重新构建好的 ISO 文件将存放到这个目录当中</span>HTTP_URL      <span class="token comment"># HTTP 服务器的 URL 地址，比如 http://172.20.29.171/iso/redfish</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">make docke<span class="token punctuation">-</span>run  <span class="token comment"># 在 docker 容器里运行所有操作，好处就是不用再安装一堆 ansible 等工具的依赖</span>make inventory  <span class="token comment"># 根据 config.yaml 配置文件生成 ansible 的 inventory 文件</span>make pre<span class="token punctuation">-</span>check  <span class="token comment"># 检查生成的 inventory 文件是否正确，连接 redfish 是否正常</span>make build<span class="token punctuation">-</span>iso  <span class="token comment"># 为每台主机生成 kickstart 文件并重新构建 ESXi OS ISO 文件</span>make mount<span class="token punctuation">-</span>iso  <span class="token comment"># 将构建好的 ISO 文件通过 redfish 挂载到物理服务器的虚拟光驱，并设备启动项</span>make reboot     <span class="token comment"># 重启服务器，进入到虚拟光驱启动 ESXi inatller</span>make post<span class="token punctuation">-</span>check <span class="token comment"># 等待 ESXi OS 安装完成</span>make install<span class="token punctuation">-</span>os <span class="token comment"># 运行 pre-check, mount-iso, reboot, post-check</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Jenkins-Job"><a href="#Jenkins-Job" class="headerlink" title="Jenkins Job"></a>Jenkins Job</h2><p>虽然在 Makefile 里封装了比较方便的命令操作，但是对于不太熟悉这套流程的使用人员来讲还是不够便捷。对于使用人员来讲不需要知道具体的流程是什么，因此还需要提供一个更为便捷的入口来使用这套工具，对外屏蔽掉技术实现的细节。</p><p>在我们内部，老牌 CI 工具 Jenkins 大叔十分受欢迎，使用的十分普遍。之前同事也常调侃：<code>我们内部的 Jenkins 虽然达不到人手一个的数量，但每个团队有两三个自己的 Jenkins 再正常不过了</code>🤣。因此提供了一个 Jenkins Job 来运行这套安装工具再完美不过了。这样使用人员就不用再 clone repo 代码，傻乎乎地运行一些 make 命令了，毕竟一个 Jenkins build 的按钮比 make 命令好好用得太多。</p><p>我们组的 Jenkins 比较特殊，是使用 kubernetes Pod 作为动态 Jenkins slave 节点，即每运行一个 Jenkins Job 就会根据定义的 Pod 模版创建一个 Pod 到指定的 Kubernetes 集群中，然后 Jenkinsfile 中定义的 stage 都会运行在这个 Pod 容器内。这些内容可以参考一下我之前写的 <a href="https://blog.k8s.li/jenkins-with-kubernetes.html">Jenkins 大叔与 kubernetes 船长手牵手 🧑‍🤝‍🧑</a>。</p><h3 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h3><p>如果你熟悉 Jenkins 的话，可以创建一个 Jenkins Job ，并在 Job 中设置好如下几个参数，并将这个 <a href="https://github.com/muzi502/redfish-esxi-os-installer/blob/master/jenkins/Jenkinsfile">Jenkinsfile</a> 中的内容复制到 Jenkins Job 的配置中。</p><table><thead><tr><th>参数名</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>esxi_iso</td><td>ArrayList</td><td>ESXi ISO 文件名列表</td></tr><tr><td>http_server</td><td>String</td><td>HTTP 服务器的 IP 地址</td></tr><tr><td>http_dir</td><td>String</td><td>HTTP 服务器的文件目录路径</td></tr><tr><td>config_yaml</td><td>Text</td><td>config.yaml 配置文件内容</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// params of jenkins jobdef ESXI_ISO <span class="token operator">=</span> params.esxi_isodef CONFIG_YAML <span class="token operator">=</span> params.config_yamldef HTTP_SERVER <span class="token operator">=</span> params.http_server// default params <span class="token keyword">for</span> the jobdef HTTP_DIR  <span class="token operator">=</span> params.http_dir ?: <span class="token string">"/usr/share/nginx/html"</span>def SRC_ISO_DIR <span class="token operator">=</span> params.src_iso_dir ?: <span class="token string">"<span class="token variable">$&#123;HTTP_DIR&#125;</span>/iso"</span>def DEST_ISO_DIR <span class="token operator">=</span> params.dest_iso_dir ?: <span class="token string">"<span class="token variable">$&#123;HTTP_DIR&#125;</span>/iso/redfish"</span>def WORKSPACE <span class="token operator">=</span> env.WORKSPACEdef JOB_NAME <span class="token operator">=</span> <span class="token string">"<span class="token variable">$&#123;env.JOB_BASE_NAME&#125;</span>"</span>def BUILD_NUMBER <span class="token operator">=</span> <span class="token string">"<span class="token variable">$&#123;env.BUILD_NUMBER&#125;</span>"</span>def POD_NAME <span class="token operator">=</span> <span class="token string">"jenkins-<span class="token variable">$&#123;JOB_NAME&#125;</span>-<span class="token variable">$&#123;BUILD_NUMBER&#125;</span>"</span>def POD_IMAGE <span class="token operator">=</span> params.pod_image ?: <span class="token string">"ghcr.io/muzi502/redfish-esxi-os-installer:v0.1.0-alpha.1"</span>// Kubernetes pod template to run.podTemplate<span class="token punctuation">(</span>    cloud: <span class="token string">"kubernetes"</span>,    namespace: <span class="token string">"default"</span>,    name: POD_NAME,    label: POD_NAME,    yaml: <span class="token string">""</span>"apiVersion: v1kind: Podspec:  containers:  - name: runner    image: <span class="token variable">$&#123;POD_IMAGE&#125;</span>    imagePullPolicy: Always    tty: <span class="token boolean">true</span>    volumeMounts:    - name: http-dir      mountPath: <span class="token variable">$&#123;HTTP_DIR&#125;</span>    securityContext:      privileged: <span class="token boolean">true</span>    env:    - name: ESXI_ISO      value: <span class="token variable">$&#123;ESXI_ISO&#125;</span>    - name: SRC_ISO_DIR      value: <span class="token variable">$&#123;SRC_ISO_DIR&#125;</span>    - name: HTTP_DIR      value: <span class="token variable">$&#123;DEST_ISO_DIR&#125;</span>    - name: HTTP_URL      value: http://<span class="token variable">$&#123;HTTP_SERVER&#125;</span>/iso/redfish  - name: jnlp    args: <span class="token punctuation">[</span><span class="token string">"\<span class="token variable"><span class="token variable">$(</span>JENKINS_SECRET<span class="token variable">)</span></span>"</span>, <span class="token string">"\<span class="token variable"><span class="token variable">$(</span>JENKINS_NAME<span class="token variable">)</span></span>"</span><span class="token punctuation">]</span>    image: <span class="token string">"jenkins/inbound-agent:4.11.2-4-alpine"</span>    imagePullPolicy: IfNotPresent  volumes:  - name: http-dir    nfs:      server: <span class="token variable">$&#123;HTTP_SERVER&#125;</span>      path: <span class="token variable">$&#123;HTTP_DIR&#125;</span><span class="token string">""</span>",<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">(</span>POD_NAME<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        try <span class="token punctuation">&#123;</span>            container<span class="token punctuation">(</span><span class="token string">"runner"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                writeFile file: <span class="token string">'config.yaml'</span>, text: <span class="token string">"<span class="token variable">$&#123;CONFIG_YAML&#125;</span>"</span>                stage<span class="token punctuation">(</span><span class="token string">"Inventory"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">sh</span> <span class="token string">""</span>"                    <span class="token function">cp</span> -rf /ansible/* <span class="token builtin class-name">.</span>                    <span class="token function">make</span> inventory                    <span class="token string">""</span>"                <span class="token punctuation">&#125;</span>                stage<span class="token punctuation">(</span><span class="token string">"Precheck"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">sh</span> <span class="token string">""</span>"                    <span class="token function">make</span> pre-check                    <span class="token string">""</span>"                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>params.build_iso<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    stage<span class="token punctuation">(</span><span class="token string">"Build-iso"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">sh</span> <span class="token string">""</span>"                        <span class="token function">make</span> build-iso                        <span class="token string">""</span>"                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                stage<span class="token punctuation">(</span><span class="token string">"Mount-iso"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">sh</span> <span class="token string">""</span>"                    <span class="token function">make</span> mount-iso                    <span class="token string">""</span>"                <span class="token punctuation">&#125;</span>                stage<span class="token punctuation">(</span><span class="token string">"Reboot"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">sh</span> <span class="token string">""</span>"                    <span class="token function">make</span> <span class="token function">reboot</span>                    <span class="token function">sleep</span> <span class="token number">60</span>                    <span class="token string">""</span>"                <span class="token punctuation">&#125;</span>                stage<span class="token punctuation">(</span><span class="token string">"Postcheck"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">sh</span> <span class="token string">""</span>"                    <span class="token function">make</span> post-check                    <span class="token string">""</span>"                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            stage<span class="token punctuation">(</span><span class="token string">"Success"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                MESSAGE <span class="token operator">=</span> <span class="token string">"【Succeed】Jenkins Job <span class="token variable">$&#123;JOB_NAME&#125;</span>-<span class="token variable">$&#123;BUILD_NUMBER&#125;</span> Link: <span class="token variable">$&#123;BUILD_URL&#125;</span>"</span>                // slackSend<span class="token punctuation">(</span>channel: <span class="token string">'$&#123;SLACK_CHANNE&#125;'</span>, color: <span class="token string">'good'</span>, message: <span class="token string">"<span class="token variable">$&#123;MESSAGE&#125;</span>"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            MESSAGE <span class="token operator">=</span> <span class="token string">"【Failed】Jenkins Job <span class="token variable">$&#123;JOB_NAME&#125;</span>-<span class="token variable">$&#123;BUILD_NUMBER&#125;</span> Link: <span class="token variable">$&#123;BUILD_URL&#125;</span>"</span>            // slackSend<span class="token punctuation">(</span>channel: <span class="token string">'$&#123;SLACK_CHANNE&#125;'</span>, color: <span class="token string">'warning'</span>, message: <span class="token string">"<span class="token variable">$&#123;MESSAGE&#125;</span>"</span><span class="token punctuation">)</span>            throw e        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者参考 <a href="https://stackoverflow.com/questions/8424228/export-import-jobs-in-jenkins">Export&#x2F;import jobs in Jenkins</a> 将这个 <a href="https://github.com/muzi502/redfish-esxi-os-installer/blob/master/jenkins/config.xml">Job</a> 的配置导入到 Jenkins 当中，并设置好上面提到的几个参数。</p><p><img data-src="https://p.k8s.li/2022-04-30-redfish-esxi-os-installer-07.png" alt="image-20220429201859704"></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="硬件信息收集"><a href="#硬件信息收集" class="headerlink" title="硬件信息收集"></a>硬件信息收集</h3><p>整体上该方案有一点不足的就是需要人为地确认 ESXi OS 安装硬盘的型号&#x2F;序列号，以及 ESXi 管理网络所使用的物理网卡。其实是可以通过 redfish 的 API 来统一地获取，然后再根据这些硬件设备信息进行选择，这样就不用登录到每一台物理服务器上进行查看了。</p><p>但考虑到实现成本，工作量会翻倍，而且我们的服务器都是固定的，只要人为确认一次就可以，下一次重装 ESXi OS 的时候只需要复制粘贴上一次的硬件配置即可，所以目前并没有打算做获取硬件信息的功能。</p><p>而且即便是将硬件信息获取出来，如果没有一个可视化的 Web UI 展示这些设备信息，也很难从一堆硬件数据中找出特定的设备，对这些数据进行 UI 展示工作量也会翻倍，因此暂时不再考虑这个功能了。</p><h3 id="挂载-ISO-之前先确保-ISO-存在"><a href="#挂载-ISO-之前先确保-ISO-存在" class="headerlink" title="挂载 ISO 之前先确保 ISO 存在"></a>挂载 ISO 之前先确保 ISO 存在</h3><p>有些服务器比如 HPE 在挂载一个不存在的 ISO 时并不会报错，当时我排查了好久才发现 😂，我一直以为是启动项设置的问题。因此在挂载 ISO 之前我们可以通过 curl 的方式检查一下 ISO 的 URL 是否正确，如果 404 不存在的话就报错退出。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">name</span><span class="token punctuation">:</span> Mount  <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> image_url <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> ISO  <span class="token key atrule">gather_facts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tasks</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Check <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> image_url <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> ISO file exists    <span class="token key atrule">shell</span><span class="token punctuation">:</span> <span class="token string">"curl -sI &#123;&#123; image_url &#125;&#125;"</span>    <span class="token key atrule">register</span><span class="token punctuation">:</span> response    <span class="token key atrule">failed_when</span><span class="token punctuation">:</span> <span class="token string">"'200 OK' not in response.stdout or '404 Not Found' in response.stdout"</span>    <span class="token key atrule">tags</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> mount<span class="token punctuation">-</span>iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单独构建-Kickstart-ISO"><a href="#单独构建-Kickstart-ISO" class="headerlink" title="单独构建 Kickstart ISO"></a>单独构建 Kickstart ISO</h3><p>目前的方案是为将 ESXi 的 kickstart 文件 KS.CFG 放到了 ESXi OS ISO 镜像里，由于每台主机的 kickstart 文件都不相同，这就需要为每台服务器构建一个 ISO 文件，如果机器数量比较多的话，可能会占用大量的磁盘存储空间，效率上会有些问题。也尝试过将 kickstart 文件单独放到一个 ISO 中，大体的思路如下：</p><ul><li>构建 kickstart ISO 文件，-V 参数指定 ISO 的 label 名称为 KS</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ genisoimage -o /tmp/ks.iso -V KS ks.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改 ESXi 启动配置，将 ks 文件路径通过 label 的方式指向刚才构建的 ISO</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sed</span> -i -e <span class="token string">'s#cdromBoot#ks=hd:KS:/ks.cfg systemMediaSize=small#g'</span> boot.cfg$ <span class="token function">sed</span> -i -e <span class="token string">'s#cdromBoot#ks=hd:KS:/ks.cfg systemMediaSize=small#g'</span> efi/boot/boot.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改一下 playbook，插入两个 ISO</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Insert <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> ISO as virtual media device  <span class="token key atrule">community.general.redfish_command</span><span class="token punctuation">:</span>    <span class="token key atrule">baseuri</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; baseuri &#125;&#125;"</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; username &#125;&#125;"</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; password &#125;&#125;"</span>    <span class="token key atrule">category</span><span class="token punctuation">:</span> <span class="token string">"Manager"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">"VirtualMediaInsert"</span>    <span class="token key atrule">virtual_media</span><span class="token punctuation">:</span>      <span class="token key atrule">image_url</span><span class="token punctuation">:</span> <span class="token string">"&#123;&#123; item &#125;&#125;"</span>      <span class="token key atrule">media_types</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> CD        <span class="token punctuation">-</span> DVD  <span class="token key atrule">with_items</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"&#123;&#123; esxi_iso_url &#125;&#125;"</span>  <span class="token punctuation">-</span> <span class="token string">"&#123;&#123; ks_iso_url &#125;&#125;"</span>  <span class="token key atrule">when</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> inventory_hostname not in groups<span class="token punctuation">[</span><span class="token string">'lenovo'</span><span class="token punctuation">]</span>  <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> mount<span class="token punctuation">-</span>iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等这些都修改好之后我满怀期待地运行了 make mount-iso 命令等到奇迹的发生，没想到直接翻车了！不支持挂载两个 ISO，白白高兴一场，真气人 😡</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">TASK <span class="token punctuation">[</span>Insert <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> ISO as virtual media device<span class="token punctuation">]</span> <span class="token important">******************************************************************************************</span><span class="token key atrule">changed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.172.18.191<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=http<span class="token punctuation">:</span>//10.172.29.171/iso/redfish/VMware<span class="token punctuation">-</span>VMvisor<span class="token punctuation">-</span>Installer<span class="token punctuation">-</span>7.0U3d<span class="token punctuation">-</span>19482537.x86_64.iso)<span class="token key atrule">changed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.172.18.192<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=http<span class="token punctuation">:</span>//10.172.29.171/iso/redfish/VMware<span class="token punctuation">-</span>VMvisor<span class="token punctuation">-</span>Installer<span class="token punctuation">-</span>7.0U3d<span class="token punctuation">-</span>19482537.x86_64.iso)<span class="token key atrule">changed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.172.18.193<span class="token punctuation">]</span> =<span class="token punctuation">></span> (item=http<span class="token punctuation">:</span>//10.172.29.171/iso/redfish/VMware<span class="token punctuation">-</span>VMvisor<span class="token punctuation">-</span>Installer<span class="token punctuation">-</span>7.0U3d<span class="token punctuation">-</span>19482537.x86_64.iso)<span class="token key atrule">failed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.172.18.193<span class="token punctuation">]</span> (item=http<span class="token punctuation">:</span>//10.172.29.171/iso/redfish/10.172.18.193/ks.iso) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span><span class="token key atrule">"ansible_loop_var"</span><span class="token punctuation">:</span> <span class="token string">"item"</span><span class="token punctuation">,</span> <span class="token key atrule">"changed"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">"item"</span><span class="token punctuation">:</span> <span class="token string">"http://10.172.29.171/iso/redfish/10.172.18.193/ks.iso"</span><span class="token punctuation">,</span> <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Unable to find an available VirtualMedia resource supporting ['CD', 'DVD']"</span><span class="token punctuation">&#125;</span><span class="token key atrule">failed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.172.18.192<span class="token punctuation">]</span> (item=http<span class="token punctuation">:</span>//10.172.29.171/iso/redfish/10.172.18.192/ks.iso) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span><span class="token key atrule">"ansible_loop_var"</span><span class="token punctuation">:</span> <span class="token string">"item"</span><span class="token punctuation">,</span> <span class="token key atrule">"changed"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">"item"</span><span class="token punctuation">:</span> <span class="token string">"http://10.172.29.171/iso/redfish/10.172.18.192/ks.iso"</span><span class="token punctuation">,</span> <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Unable to find an available VirtualMedia resource supporting ['CD', 'DVD']"</span><span class="token punctuation">&#125;</span><span class="token key atrule">failed</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>10.172.18.191<span class="token punctuation">]</span> (item=http<span class="token punctuation">:</span>//10.172.29.171/iso/redfish/10.172.18.191/ks.iso) =<span class="token punctuation">></span> <span class="token punctuation">&#123;</span><span class="token key atrule">"ansible_loop_var"</span><span class="token punctuation">:</span> <span class="token string">"item"</span><span class="token punctuation">,</span> <span class="token key atrule">"changed"</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">"item"</span><span class="token punctuation">:</span> <span class="token string">"http://10.172.29.171/iso/redfish/10.172.18.191/ks.iso"</span><span class="token punctuation">,</span> <span class="token key atrule">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Unable to find an available VirtualMedia resource supporting ['CD', 'DVD']"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或许将 ISO 替换成软盘  floppy  的方式可能行得通，不过当我看了 <a href="https://stackoverflow.com/questions/11202706/create-a-virtual-floppy-image-without-mount">create-a-virtual-floppy-image-without-mount</a> 后直接把我整不会了，没想创建一个软盘文件到这么麻烦，还是直接放弃该方案吧 🌚。</p><p>多说一句，之所以想到使用软盘的方式是因为之前在玩 <a href="https://github.com/hashicorp/packer">Packer</a> 的时候，研究过它就是将 kickstart 文件制作成一个软盘，插入到虚拟机中。虚拟机开机后通过 vCenter API 发送键盘输入，插入 kickstart 的路径，anaconda 执行自动化安装 OS。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Creating VM<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Customizing hardware<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Mounting ISO images<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Adding configuration parameters<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Creating floppy disk<span class="token punctuation">..</span>.    vsphere-iso-base: Copying files flatly from floppy_files    vsphere-iso-base: Done copying files from floppy_files    vsphere-iso-base: Collecting paths from floppy_dirs    vsphere-iso-base: Resulting paths from floppy_dirs <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>./kickstart/centos/http/<span class="token punctuation">]</span>    vsphere-iso-base: Recursively copying <span class="token builtin class-name">:</span> ./kickstart/centos/http/    vsphere-iso-base: Done copying paths from floppy_dirs    vsphere-iso-base: Copying files from floppy_content    vsphere-iso-base: Done copying files from floppy_content<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Uploading created floppy image<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Adding generated Floppy<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Set boot order temporary<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Power on VM<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Waiting 15s <span class="token keyword">for</span> boot<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Typing boot command<span class="token punctuation">..</span>.<span class="token operator">==</span><span class="token operator">></span> vsphere-iso-base: Waiting <span class="token keyword">for</span> IP<span class="token punctuation">..</span>.root@devbox-fedora:/root <span class="token comment"># scp 192.168.24.43:/vmfs/volumes/Packer/base-os-centos7/packer-tmp-created-floppy.flp .</span>packer-tmp-created-floppy.flp                                                                                <span class="token number">100</span>% 1440KB  <span class="token number">89</span>.4MB/s   00:00root@devbox-fedora:/root <span class="token comment"># mount packer-tmp-created-floppy.flp /mnt</span>root@devbox-fedora:/root <span class="token comment"># readlink /dev/disk/by-label/packer</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/loop2root@devbox-fedora:/root <span class="token comment"># df -h /mnt</span>Filesystem      Size  Used Avail Use% Mounted on/dev/loop2      <span class="token number">1</span>.4M   16K  <span class="token number">1</span>.4M   <span class="token number">2</span>% /mntroot@devbox-fedora:/root <span class="token comment">#</span>root@devbox-fedora:/root <span class="token comment"># ls /mnt</span>HTTProot@devbox-fedora:/root <span class="token comment"># ls /mnt/HTTP</span><span class="token number">7</span>root@devbox-fedora:/root <span class="token comment"># ls /mnt/HTTP/7</span>KS.CFG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过-http-方式读取-kickstart"><a href="#通过-http-方式读取-kickstart" class="headerlink" title="通过 http 方式读取 kickstart"></a>通过 http 方式读取 kickstart</h3><p>不一定可行，在通过 http 方式读取 kickstart 文件之前，ESXi OS installer 需要有一个 IP 地址才行。如果服务器如果有多块网卡的话，就很难确定是否分配到一个 IP，使用默认 DHCP 的方式并不一定能获取到正确的 IP 地址。因此读取 kickstart 文件的方式还是建议使用 ISO 的方式，这样在安装 OS 时对网络环境无依赖，更稳定一些。</p><h3 id="支持其他-OS-的安装"><a href="#支持其他-OS-的安装" class="headerlink" title="支持其他 OS 的安装"></a>支持其他 OS 的安装</h3><p>目前该方案只支持 ESXi OS 的安装，其他 OS 的自动化安装其实原理是一样的。比如 CentOS 同样也是修改 kickstart 文件。如果要指定 OS 所安装的磁盘可以参考一下戴尔官方的一篇文档 <a href="https://www.dell.com/support/kbdoc/zh-hk/000177584/automating-operating-system-deployment-to-dell-boss-techniques-for-different-operating-systems">Automating Operating System Deployment to Dell BOSS – Techniques for Different Operating Systems</a> 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%include /tmp/bootdisk.cfg%pre<span class="token comment"># Use DELLBOSS device for OS install if present.</span><span class="token assign-left variable">BOSS_DEV</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> /dev -name <span class="token string">"*DELLBOSS*"</span> -printf %P<span class="token string">"<span class="token entity" title="\n">\n</span>"</span> <span class="token operator">|</span> <span class="token function">egrep</span> -v -e part -e scsi<span class="token operator">|</span> <span class="token function">head</span> -1<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$BOSS_DEV</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> ignoredisk --only-use<span class="token operator">=</span><span class="token string">"<span class="token variable">$BOSS_DEV</span>"</span> <span class="token operator">></span> /tmp/bootdisk.cfg<span class="token keyword">fi</span>%end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要为某块物理网卡配置 IP 地址，可以根据 MAC 地址找到对应的物理网卡，然后将静态 IP 配置写入到网卡配置文件当中。比如 CentOS 在 kickstart 中为某块物理网卡配置静态 IP，可以采用如下方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MAC_ADDRESS 在生成 kickstart 文件的时候根据 config.yaml 动态修改的<span class="token comment"># MAC_ADDRESS=B4:96:91:A7:3F:D6</span><span class="token comment"># 根据 MAC 地址获取到网卡设备的名称</span><span class="token assign-left variable">NIC</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> -l $<span class="token punctuation">&#123;</span>MAC_ADDRESS<span class="token punctuation">&#125;</span> /sys/class/net/*/address <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">'/'</span> <span class="token string">'&#123;print $5&#125;'</span><span class="token variable">)</span></span><span class="token comment"># 将网卡静态 IP 配置写入到文件当中</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span> /etc/sysconfig/network-scripts/ifcfg-<span class="token variable">$&#123;NIC&#125;</span></span>TYPE=EhternetBOOTPROTO=staticDEFROUTE=yesNAME=<span class="token variable">$&#123;NIC&#125;</span>DEVICE=<span class="token variable">$&#123;NIC&#125;</span>ONBOOT=yesIPADDR=<span class="token variable">$&#123;IP&#125;</span>NETMASK=<span class="token variable">$&#123;NETMASK&#125;</span>GATEWAY=<span class="token variable">$&#123;GATEWAY&#125;</span>EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于时间关系，在这里就不再进行深入讲解了，在这里只是提供一个方法和思路。至于 Debian&#x2F;Ubuntu 发行版，还是你们自己摸索吧，因为我工作中确实没有在物理服务器上安装这些发行版的场景，毕竟国内企业私有云环境中使用 CentOS&#x2F;RedHat 系列发行版的占绝大多数。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="Redfish-相关"><a href="#Redfish-相关" class="headerlink" title="Redfish 相关"></a>Redfish 相关</h3><ul><li><a href="https://www.dmtf.org/standards/redfish">DMTF’s Redfish</a></li><li><a href="https://www.dmtf.org/sites/default/files/DSP2044%20Redfish%20%E7%99%BD%E7%9A%AE%E4%B9%A6%201.0.0.pdf">Redfish 白皮书</a></li><li><a href="https://wsgzao.github.io/post/redfish/">Redfish 下一代数据中心管理标准详解和实践</a></li><li><a href="https://github.com/dell/redfish-ansible-module">redfish-ansible-module</a></li><li><a href="https://github.com/lenovo/python-redfish-lenovo">python-redfish-lenovo</a></li><li><a href="https://docs.ansible.com/ansible/latest/collections/community/general/xcc_redfish_command_module.html">xcc_redfish_command module</a></li><li><a href="https://sysmgt.lenovofiles.com/help/index.jsp?topic=/com.lenovo.systems.management.xcc.doc/rest_api.html">Lenovo XClarity Controller Redfish REST API</a></li><li><a href="https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.esxi.upgrade.doc/GUID-61A14EBB-5CF3-43EE-87EF-DB8EC6D83698.html">Installation and Upgrade Script Commands</a></li><li><a href="https://www.hpe.com/psnow/doc/4AA6-1727ENW">Redfish API implementation on HPE servers with iLO RESTful API technical white paper</a></li><li><a href="https://github.com/ansible-collections/community.general/issues/3042">VirtualMediaEject should not require image_url </a></li></ul><h3 id="VMware-ESXi-相关"><a href="#VMware-ESXi-相关" class="headerlink" title="VMware ESXi 相关"></a>VMware ESXi 相关</h3><ul><li><a href="https://communities.vmware.com/t5/ESXi-Discussions/Reducing-Esxi-7-VMFSL/td-p/2808955">Reducing Esxi 7 VMFSL</a></li><li><a href="https://kb.vmware.com/s/article/1014953">Identifying disks when working with VMware ESXi (1014953)</a></li><li><a href="https://downloads.dell.com/manuals/all-products/esuprt_solutions_int/esuprt_solutions_int_solutions_resources/servers-solution-resources_white-papers10_en-us.pdf">PowerEdge Boot Optimized Storage Solution BOSS - Dell</a></li><li><a href="https://www.reddit.com/r/vmware/comments/2a5jv7/esxi_kickstart_script_to_grep_for_correct_lun/">ESXi Kickstart script to grep for correct LUN? (iSCSI, Boot from SAN)</a></li><li><a href="https://www.dell.com/support/kbdoc/zh-hk/000177584/automating-operating-system-deployment-to-dell-boss-techniques-for-different-operating-systems">Automating Operating System Deployment to Dell BOSS – Techniques for Different Operating Systems</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;从去年十一月底到现在一直在做在  &lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ESXi" scheme="https://blog.k8s.li/tags/ESXi/"/>
    
      <category term="Redfish" scheme="https://blog.k8s.li/tags/Redfish/"/>
    
      <category term="Dell 服务器" scheme="https://blog.k8s.li/tags/Dell-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="HPE 服务器" scheme="https://blog.k8s.li/tags/HPE-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Lenovo 服务器" scheme="https://blog.k8s.li/tags/Lenovo-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="裸金属服务器" scheme="https://blog.k8s.li/tags/%E8%A3%B8%E9%87%91%E5%B1%9E%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>搬砖工具 govc 使用记录</title>
    <link href="https://blog.k8s.li/govc-usage.html"/>
    <id>https://blog.k8s.li/govc-usage.html</id>
    <published>2022-03-30T16:00:00.000Z</published>
    <updated>2022-03-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于工作原因需要在 ESXi 主机上完成一些参数配置、虚拟交换机&#x2F;网创建、虚拟机创建、VIB 安装、PCI 直通、虚拟机创建等工作，于是抽空整理了一下在使用 govc 时踩的一些坑。</p><h2 id="govc"><a href="#govc" class="headerlink" title="govc"></a>govc</h2><p><a href="https://github.com/vmware/govmomi/tree/master/govc">govc</a> 是 VMware 官方 <a href="https://github.com/vmware/govmom">govmomi</a> 库的一个封装实现。使用它可以完成对 ESXi 主机或 vCenter 的一些操作。比如创建虚拟机、管理快照等。基本上能在 ESXi 或 vCenter 上的操作，在 govmomi 中都有对应的实现。目前 govc 支持的 ESXi &#x2F; vCenter 版本有 7.0, 6.7, 6.5 , 6.0 (5.x 版本太老了，干脆放弃吧)，另外也支持 VMware Workstation 的某些版本。</p><p>使用 govc 连接 ESXi 主机或 vCenter 可以通过设置环境变量或者命令行参数，建议使用环境变量，如果通过命令行 flag 的话，将明文规定用户名和密码输出来有一定的安全风险。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Options:  -cert<span class="token operator">=</span>                           Certificate <span class="token punctuation">[</span>GOVC_CERTIFICATE<span class="token punctuation">]</span>  -dc<span class="token operator">=</span>                             Datacenter <span class="token punctuation">[</span>GOVC_DATACENTER<span class="token punctuation">]</span>  -debug<span class="token operator">=</span>false                     Store debug logs <span class="token punctuation">[</span>GOVC_DEBUG<span class="token punctuation">]</span>  -dump<span class="token operator">=</span>false                      Enable Go output  -host<span class="token operator">=</span>                           Host system <span class="token punctuation">[</span>GOVC_HOST<span class="token punctuation">]</span>  -host.dns<span class="token operator">=</span>                       Find <span class="token function">host</span> by FQDN  -host.ip<span class="token operator">=</span>                        Find <span class="token function">host</span> by IP address  -host.ipath<span class="token operator">=</span>                     Find <span class="token function">host</span> by inventory path  -host.uuid<span class="token operator">=</span>                      Find <span class="token function">host</span> by UUID  -json<span class="token operator">=</span>false                      Enable JSON output  -k<span class="token operator">=</span>false                         Skip verification of server certificate <span class="token punctuation">[</span>GOVC_INSECURE<span class="token punctuation">]</span>  -key<span class="token operator">=</span>                            Private key <span class="token punctuation">[</span>GOVC_PRIVATE_KEY<span class="token punctuation">]</span>  -persist-session<span class="token operator">=</span>true            Persist session to disk <span class="token punctuation">[</span>GOVC_PERSIST_SESSION<span class="token punctuation">]</span>  -tls-ca-certs<span class="token operator">=</span>                   TLS CA certificates <span class="token function">file</span> <span class="token punctuation">[</span>GOVC_TLS_CA_CERTS<span class="token punctuation">]</span>  -tls-known-hosts<span class="token operator">=</span>                TLS known hosts <span class="token function">file</span> <span class="token punctuation">[</span>GOVC_TLS_KNOWN_HOSTS<span class="token punctuation">]</span>  -trace<span class="token operator">=</span>false                     Write SOAP/REST traffic to stderr  -u<span class="token operator">=</span>https://root@esxi.yoi.li/sdk  ESX or vCenter URL <span class="token punctuation">[</span>GOVC_URL<span class="token punctuation">]</span>  -verbose<span class="token operator">=</span>false                   Write request/response data to stderr  -vim-namespace<span class="token operator">=</span>vim25             Vim namespace <span class="token punctuation">[</span>GOVC_VIM_NAMESPACE<span class="token punctuation">]</span>  -vim-version<span class="token operator">=</span><span class="token number">7.0</span>                 Vim version <span class="token punctuation">[</span>GOVC_VIM_VERSION<span class="token punctuation">]</span>  -xml<span class="token operator">=</span>false                       Enable XML output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>GOVC_URL</code> 环境变量指定 ESXi 主机或 vCenter 的 URL，登录的用户名和密码可设置在 GOVC_URL 中或者单独设置 <code>GOVC_USERNAME</code> 和 <code>GOVC_PASSWORD</code>。如果 https 证书是自签的域名或者 IP 需要通过设置 <code>GOVC_INSECURE=true</code> 参数来允许不安全的 https 连接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_URL</span><span class="token operator">=</span><span class="token string">"https://root:password@esxi.k8s.li"</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_INSECURE</span><span class="token operator">=</span>true$ govc aboutFullName:     VMware ESXi <span class="token number">7.0</span>.2 build-17867351Name:         VMware ESXiVendor:       VMware, Inc.Version:      <span class="token number">7.0</span>.2Build:        <span class="token number">17867351</span>OS type:      vmnix-x86API type:     HostAgentAPI version:  <span class="token number">7.0</span>.2.0Product ID:   embeddedEsxUUID:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果用户名和密码当中有特殊字符比如 <code> \ @ /</code>，建议分别设置 <code>GOVC_URL</code>、<code>GOVC_USERNAME</code> 和 <code>GOVC_PASSWORD</code> 这样能避免特殊字符在 <code>GOVC_URL</code> 出现一些奇奇怪怪的问题。</p><h2 id="获取主机信息"><a href="#获取主机信息" class="headerlink" title="获取主机信息"></a>获取主机信息</h2><h3 id="govc-host-info"><a href="#govc-host-info" class="headerlink" title="govc host.info"></a><code>govc host.info</code></h3><p>通过 host.info 自命命令可以得到 ESXi 主机的基本信息，</p><ul><li>Path: 当前主机在集群中的资源路径</li><li>Manufacturer: 硬件设备制造商</li><li>Logical CPUs: 逻辑 CPU 的数量，以及 CPU 的基础频率</li><li>Processor type: CPU 的具体型号，由于我的是 ES 版的 E-2126G，所以无法显示出具体的型号 🤣</li><li>CPU usage:  CPU 使用的负载情况</li><li>Memory:  主机安装的内存大小</li><li>Memory usage:  内存使用的负载情况</li><li>Boot time: 开机时间</li><li>State:  连接状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ govc host.infoName:              hp-esxi.lan  Path:            /ha-datacenter/host/hp-esxi.lan/hp-esxi.lan  Manufacturer:    HPE  Logical CPUs:    <span class="token number">6</span> CPUs @ 3000MHz  Processor type:  Genuine Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> CPU 0000 @ <span class="token number">3</span>.00GHz  CPU usage:       <span class="token number">3444</span> MHz <span class="token punctuation">(</span><span class="token number">19.1</span>%<span class="token punctuation">)</span>  Memory:          32613MB  Memory usage:    <span class="token number">26745</span> MB <span class="token punctuation">(</span><span class="token number">82.0</span>%<span class="token punctuation">)</span>  Boot time:       <span class="token number">2021</span>-12-05 06:11:53.42802 +0000 UTC  State:           connected<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果加上 -json 参数会得到一个至少 3w 行的 json 输出，里面包含的 ESXi 主机的所有信息，然后可以使用 jq 命令去过滤出一些自己所需要的参数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox ~╰─<span class="token comment"># govc host.info -json=true > host_info.json</span>╭─root@esxi-debian-devbox ~╰─<span class="token comment"># wc host_info.json</span>  <span class="token number">34522</span>   <span class="token number">73430</span> <span class="token number">1188718</span> host_info.json╭─root@esxi-debian-devbox ~╰─<span class="token comment"># govc host.info -json | jq '.HostSystems[0].Summary.Hardware'</span><span class="token punctuation">&#123;</span>  <span class="token string">"Vendor"</span><span class="token builtin class-name">:</span> <span class="token string">"HPE"</span>,  <span class="token string">"Model"</span><span class="token builtin class-name">:</span> <span class="token string">"ProLiant MicroServer Gen10 Plus"</span>,  <span class="token string">"Uuid"</span><span class="token builtin class-name">:</span> <span class="token string">"30363150"</span>,  <span class="token string">"MemorySize"</span><span class="token builtin class-name">:</span> <span class="token number">34197471232</span>,  <span class="token string">"CpuModel"</span><span class="token builtin class-name">:</span> <span class="token string">"Genuine Intel(R) CPU 0000 @ 3.00GHz"</span>,  <span class="token string">"CpuMhz"</span><span class="token builtin class-name">:</span> <span class="token number">3000</span>,  <span class="token string">"NumCpuPkgs"</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,  <span class="token string">"NumCpuCores"</span><span class="token builtin class-name">:</span> <span class="token number">6</span>,  <span class="token string">"NumCpuThreads"</span><span class="token builtin class-name">:</span> <span class="token number">6</span>,  <span class="token string">"NumNics"</span><span class="token builtin class-name">:</span> <span class="token number">4</span>,  <span class="token string">"NumHBAs"</span><span class="token builtin class-name">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果加上 -dump 参数，则会以 Golang 结构体的格式来输出，输出的内容也是包含了 ESXi 主机的所有信息，用它可以比较方便地定位某个信息的结构体，这一点对基于 govmomi 来开发其他的功能来说十分方便。尤其是在写单元测试的时候，可以从这里 dump 出一些数据来进行 mock。需要注意的是，并不是所有的子命令都支持 json 格式的输出。</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">mo.HostSystem&#123;    ManagedEntity: mo.ManagedEntity&#123;        ExtensibleManagedObject: mo.ExtensibleManagedObject&#123;            Self:           types.ManagedObjectReference&#123;Type:&quot;HostSystem&quot;, Value:&quot;ha-host&quot;&#125;,            Value:          nil,            AvailableField: nil,        &#125;,        Parent:        &amp;types.ManagedObjectReference&#123;Type:&quot;ComputeResource&quot;, Value:&quot;ha-compute-res&quot;&#125;,        CustomValue:   nil,        OverallStatus: &quot;green&quot;,        ConfigStatus:  &quot;yellow&quot;,        ConfigIssue:   []types.BaseEvent&#123;            &amp;types.RemoteTSMEnabledEvent&#123;                HostEvent: types.HostEvent&#123;                    Event: types.Event&#123;                        Key:             1,                        ChainId:         0,                        CreatedTime:     time.Now(),                        UserName:        &quot;&quot;,                        Datacenter:      (*types.DatacenterEventArgument)(nil),                        ComputeResource: (*types.ComputeResourceEventArgument)(nil),                        Host:            &amp;types.HostEventArgument&#123;                            EntityEventArgument: types.EntityEventArgument&#123;                                EventArgument: types.EventArgument&#123;&#125;,                                Name:          &quot;hp-esxi.lan&quot;,                            &#125;,                            Host: types.ManagedObjectReference&#123;Type:&quot;HostSystem&quot;, Value:&quot;ha-host&quot;&#125;,                        &#125;,                        Vm:                   (*types.VmEventArgument)(nil),                        Ds:                   (*types.DatastoreEventArgument)(nil),                        Net:                  (*types.NetworkEventArgument)(nil),                        Dvs:                  (*types.DvsEventArgument)(nil),                        FullFormattedMessage: &quot;SSH for the host hp-esxi.lan has been enabled&quot;,                        ChangeTag:            &quot;&quot;,                    &#125;,                &#125;,            &#125;,        &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在写单元测试的时候，我经常用它来 mock 一些特殊硬件设备的信息，这比自己手写这些结构体要方便很多。比如以 <code>mpx.vmhba&lt;Adapter&gt;:C&lt;Channel&gt;:T&lt;Target&gt;:L&lt;LUN&gt; </code> 命名的硬盘可以通过  <code>PlugStoreTopology</code> 这个结构体来获取该硬盘的 NAA 号：</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">func getDiskIDByHostPlugStoreTopology(hpst *types.HostPlugStoreTopology, diskName string) string &#123;for _, path :&#x3D; range hpst.Path &#123;if path.Name &#x3D;&#x3D; diskName &#123;s :&#x3D; strings.Split(path.Target, &quot;-sas.&quot;)return s[len(s)-1]&#125;&#125;return &quot;&quot;&#125;&#x2F;&#x2F; 单元测试代码如下：var plugStoreTopology &#x3D; &amp;types.HostPlugStoreTopology&#123;Path: []types.HostPlugStoreTopologyPath&#123;&#123;Key:           &quot;key-vim.host.PlugStoreTopology.Path-vmhba0:C0:T1:L0&quot;,Name:          &quot;vmhba0:C0:T1:L0&quot;,ChannelNumber: 0,TargetNumber:  1,LunNumber:     0,Adapter:       &quot;key-vim.host.PlugStoreTopology.Adapter-vmhba0&quot;,Target:        &quot;key-vim.host.PlugStoreTopology.Target-sas.500056b3d93828c0&quot;,Device:        &quot;key-vim.host.PlugStoreTopology.Device-020000000055cd2e414dc39d4e494e54454c20&quot;,&#125;,&#125;,&#125;func TestGetDiskIDByHostPlugStoreTopology(t *testing.T) &#123;tests :&#x3D; []struct &#123;name stringwant string&#125;&#123;&#123;name: &quot;vmhba0:C0:T1:L0&quot;,want: &quot;500056b3d93828c0&quot;,&#125;,&#123;name: &quot;vmhba0:C0:T2:L0&quot;,want: &quot;&quot;,&#125;,&#123;name: &quot;&quot;,want: &quot;&quot;,&#125;,&#125;for _, tt :&#x3D; range tests &#123;t.Run(tt.name, func(t *testing.T) &#123;if got :&#x3D; getDiskIDByHostPlugStoreTopology(plugStoreTopology, tt.name); got !&#x3D; tt.want &#123;t.Errorf(&quot;getDiskIDByHostPlugStoreTopology() &#x3D; %v, want %v&quot;, got, tt.want)&#125;&#125;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再比如 NVMe 硬盘可以通过 <code>NvmeTopology</code> 这个数据对象获取它的序列号</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">func getNVMeIDByHostNvmeTopology(hnt *types.HostNvmeTopology, diskName string) string &#123;for _, adapter :&#x3D; range hnt.Adapter &#123;for _, controller :&#x3D; range adapter.ConnectedController &#123;for _, ns :&#x3D; range controller.AttachedNamespace &#123;if ns.Name &#x3D;&#x3D; diskName &#123;return strings.TrimSpace(controller.SerialNumber)&#125;&#125;&#125;&#125;return &quot;&quot;&#125;&#x2F;&#x2F; 单元测试代码如下：var nvmeTopology &#x3D; &amp;types.HostNvmeTopology&#123;Adapter: []types.HostNvmeTopologyInterface&#123;&#123;Key:     &quot;key-vim.host.NvmeTopology.Interface-vmhba0&quot;,Adapter: &quot;key-vim.host.PcieHba-vmhba0&quot;,ConnectedController: []types.HostNvmeController&#123;&#123;Key:                     &quot;key-vim.host.NvmeController-256&quot;,ControllerNumber:        256,Subnqn:                  &quot;nqn.2021-06.com.intel:PHAB123502CU1P9SGN  &quot;,Name:                    &quot;nqn.2021-06.com.intel:PHAB123502CU1P9SGN&quot;,AssociatedAdapter:       &quot;key-vim.host.PcieHba-vmhba0&quot;,TransportType:           &quot;pcie&quot;,FusedOperationSupported: false,NumberOfQueues:          2,QueueSize:               1024,AttachedNamespace: []types.HostNvmeNamespace&#123;&#123;Key:              &quot;key-vim.host.NvmeNamespace-t10.NVMe____Dell_Ent_NVMe_P5600_MU_U.2_1.6TB________00035CB406E4D25C@256&quot;,Name:             &quot;t10.NVMe____Dell_Ent_NVMe_P5600_MU_U.2_1.6TB________00035CB406E4D25C&quot;,Id:               1,BlockSize:        512,CapacityInBlocks: 3125627568,&#125;,&#125;,VendorId:        &quot;0x8086&quot;,Model:           &quot;Dell Ent NVMe P5600 MU U.2 1.6TB        &quot;,SerialNumber:    &quot;PHAB123502CU1P9SGN  &quot;,FirmwareVersion: &quot;1.0.0   PCIe&quot;,&#125;,&#125;,&#125;,&#123;Key:     &quot;key-vim.host.NvmeTopology.Interface-vmhba1&quot;,Adapter: &quot;key-vim.host.PcieHba-vmhba1&quot;,ConnectedController: []types.HostNvmeController&#123;&#123;Key:                     &quot;key-vim.host.NvmeController-257&quot;,ControllerNumber:        257,Subnqn:                  &quot;nqn.2021-06.com.intel:PHAB123602H81P9SGN  &quot;,Name:                    &quot;nqn.2021-06.com.intel:PHAB123602H81P9SGN&quot;,AssociatedAdapter:       &quot;key-vim.host.PcieHba-vmhba1&quot;,TransportType:           &quot;pcie&quot;,FusedOperationSupported: false,NumberOfQueues:          2,QueueSize:               1024,AttachedNamespace: []types.HostNvmeNamespace&#123;&#123;Key:              &quot;key-vim.host.NvmeNamespace-t10.NVMe____Dell_Ent_NVMe_P5600_MU_U.2_1.6TB________00035CEE23E4D25C@257&quot;,Name:             &quot;t10.NVMe____Dell_Ent_NVMe_P5600_MU_U.2_1.6TB________00035CEE23E4D25C&quot;,Id:               1,BlockSize:        512,CapacityInBlocks: 3125627568,&#125;,&#125;,VendorId:        &quot;0x8086&quot;,Model:           &quot;Dell Ent NVMe P5600 MU U.2 1.6TB        &quot;,SerialNumber:    &quot;PHAB123602H81P9SGN  &quot;,FirmwareVersion: &quot;1.0.0   PCIe&quot;,&#125;,&#125;,&#125;,&#125;,&#125;func TestGetNVMeIDByHostNvmeTopology(t *testing.T) &#123;tests :&#x3D; []struct &#123;name stringwant string&#125;&#123;&#123;name: &quot;t10.NVMe____Dell_Ent_NVMe_P5600_MU_U.2_1.6TB________00035CEE23E4D25C&quot;,want: &quot;PHAB123602H81P9SGN&quot;,&#125;,&#123;name: &quot;t10.NVMe____Dell_Ent_NVMe_P5600_MU_U.2_1.6TB&quot;,want: &quot;&quot;,&#125;,&#123;name: &quot;&quot;,want: &quot;&quot;,&#125;,&#125;for _, tt :&#x3D; range tests &#123;t.Run(tt.name, func(t *testing.T) &#123;if got :&#x3D; getNVMeIDByHostNvmeTopology(nvmeTopology, tt.name); got !&#x3D; tt.want &#123;t.Errorf(&quot;getNVMeIDByHostNvmeTopology() &#x3D; %v, want %v&quot;, got, tt.want)&#125;&#125;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置-ESXi-主机参数"><a href="#配置-ESXi-主机参数" class="headerlink" title="配置 ESXi 主机参数"></a>配置 ESXi 主机参数</h2><p>通过 <code>host.option.ls</code> 可以列出当前 ESXi 主机所有的配置选项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ govc host.option.lsAnnotations.WelcomeMessage:BufferCache.FlushInterval:                          <span class="token number">30000</span>BufferCache.HardMaxDirty:                           <span class="token number">95</span>BufferCache.PerFileHardMaxDirty:                    <span class="token number">50</span>BufferCache.SoftMaxDirty:                           <span class="token number">15</span>CBRC.DCacheMemReserved:                             <span class="token number">400</span>CBRC.Enable:                                        <span class="token boolean">false</span>COW.COWMaxHeapSizeMB:                               <span class="token number">192</span>COW.COWMaxREPageCacheszMB:                          <span class="token number">256</span>COW.COWMinREPageCacheszMB:                          <span class="token number">0</span>COW.COWREPageCacheEviction:                         <span class="token number">1</span>Config.Defaults.host.TAAworkaround:                 <span class="token boolean">true</span>Config.Defaults.monitor.if_pschange_mc_workaround:  <span class="token boolean">false</span>Config.Defaults.security.host.ruissl:               <span class="token boolean">true</span>Config.Defaults.vGPU.consolidation:                 <span class="token boolean">false</span>Config.Etc.issue:Config.Etc.motd:                                    The <span class="token function">time</span> and <span class="token function">date</span> of this login have been sent to the system logs.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>host.option.set</code> 可以设置 ESXi 主机参数，例如如果想要配置 NFS 存储心跳超时时间可以通过如下方式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ govc host.option.set NFS.HeartbeatTimeout <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="开启-ssh-服务"><a href="#开启-ssh-服务" class="headerlink" title="开启 ssh 服务"></a>开启 ssh 服务</h2><p>通过 <code>host.service</code> 可以对 ESXi 主机上的服务进行相关操作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ govc host.serviceWhere ACTION is one of: start, stop, restart, status, enable, disable<span class="token comment"># 启动 ssh 服务</span>$ govc host.service start TSM-SSH<span class="token comment"># 将 ssh 服务设置为开机自启</span>$ govc host.service <span class="token builtin class-name">enable</span> TSM-SSH<span class="token comment"># 查看 ssh 服务的状态</span>$ govc host.service status TSM-SSH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token assign-left variable">VM_NAME</span><span class="token operator">=</span><span class="token string">"centos-test"</span>$ govc vm.create -ds<span class="token operator">=</span><span class="token string">'datastore*'</span> -net<span class="token operator">=</span><span class="token string">'VM Network'</span> -net.adapter<span class="token operator">=</span>vmxnet3 -disk 1G -on<span class="token operator">=</span>false <span class="token variable">$&#123;VM_NAME&#125;</span>$ govc vm.change -cpu.reservation<span class="token operator">=</span>%d -memory-pin<span class="token operator">=</span>true -vm <span class="token variable">$&#123;VM_NAME&#125;</span>$ govc vm.change -g centos7_64Guest -c %d -m <span class="token number">16384</span> -latency high -vm <span class="token variable">$&#123;VM_NAME&#125;</span>$ govc device.cdrom.add -vm <span class="token variable">$&#123;VM_NAME&#125;</span>$ govc device.cdrom.insert -vm <span class="token variable">$&#123;VM_NAME&#125;</span> -device cdrom-3000$ govc device.connect -vm <span class="token variable">$&#123;VM_NAME&#125;</span> cdrom-3000$ govc vm.power -on<span class="token operator">=</span>true <span class="token variable">$&#123;VM_NAME&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://gitbook.curiouser.top/origin/vsphere-govc.html">vSphere go 命令行管理工具 govc</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近由于工作原因需要在 ESXi
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ESXi" scheme="https://blog.k8s.li/tags/ESXi/"/>
    
      <category term="govc" scheme="https://blog.k8s.li/tags/govc/"/>
    
      <category term="vCenter" scheme="https://blog.k8s.li/tags/vCenter/"/>
    
      <category term="vSphere" scheme="https://blog.k8s.li/tags/vSphere/"/>
    
  </entry>
  
  <entry>
    <title>流水线中使用 docker in pod 方式构建容器镜像</title>
    <link href="https://blog.k8s.li/docker-in-pod.html"/>
    <id>https://blog.k8s.li/docker-in-pod.html</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-03-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上个月参加了 Rancher 社区举办的 《<a href="https://www.bilibili.com/video/BV1Xa411C78k">Dockershim 即将被移除，你准备好了么？</a>》直播分享后，得知自 1.24 版本之后，Kubernetes 社区将正式放弃对 docker CRI 的支持，docker CRI 这部分代码则由 <a href="https://github.com/Mirantis/cri-dockerd"> cri-dockerd</a> 项目来接盘。目前众多主流的 Kubernetes 私有化部署工具（比如 <a href="https://github.com/kubernetes-sigs/kubespray">kubespray</a>、<a href="https://github.com/kubesphere/kubekey">kubekey</a>、<a href="https://github.com/fanux/sealos">sealos</a>）也逐渐地不再将 docker 作为首选的容器运行时而纷纷转向了 containerd，去 docker 也成为了目前云原生社区热门的讨论话题。</p><p>docker 虽然作为一个 CRI 在 Kubernetes 社区一直被人诟病，但我们要知道 CRI 仅仅是 docker 的一部分功能而已。对于本地开发测试或者 CI&#x2F;CD 流水线镜像构建来讲，依然有很多地方严重地依赖着 docker。比如 GitHub 上容器镜像构建的 Action 里， docker 官方的 <a href="https://github.com/docker/build-push-action">build-push-action</a> 是众多项目首选的方式。即便是 docker 的竞争对手 <a href="https://github.com/containers/podman">podman</a> + <a href="https://github.com/containers/skopeo">skopeo</a> + <a href="https://github.com/containers/buildah">buildah</a> 三剑客它们自身的容器镜像也是采用 docker 来构建的 <a href="https://github.com/containers/buildah/blob/main/.github/workflows/multi-arch-build.yaml">multi-arch-build.yaml</a>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">multi</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> multi<span class="token punctuation">-</span>arch image build    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">REPONAME</span><span class="token punctuation">:</span> buildah  <span class="token comment"># No easy way to parse this out of $GITHUB_REPOSITORY</span>      <span class="token comment"># Server/namespace value used to format FQIN</span>      <span class="token key atrule">REPONAME_QUAY_REGISTRY</span><span class="token punctuation">:</span> quay.io/buildah      <span class="token key atrule">CONTAINERS_QUAY_REGISTRY</span><span class="token punctuation">:</span> quay.io/containers      <span class="token comment"># list of architectures for build</span>      <span class="token key atrule">PLATFORMS</span><span class="token punctuation">:</span> linux/amd64<span class="token punctuation">,</span>linux/s390x<span class="token punctuation">,</span>linux/ppc64le<span class="token punctuation">,</span>linux/arm64      <span class="token comment"># Command to execute in container to obtain project version number</span>      <span class="token key atrule">VERSION_CMD</span><span class="token punctuation">:</span> <span class="token string">"buildah --version"</span>    <span class="token comment"># build several images (upstream, testing, stable) in parallel</span>    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token comment"># By default, failure of one matrix item cancels all others</span>      <span class="token key atrule">fail-fast</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token comment"># Builds are located under contrib/&lt;reponame>image/&lt;source> directory</span>        <span class="token key atrule">source</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> upstream          <span class="token punctuation">-</span> testing          <span class="token punctuation">-</span> stable    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token comment"># internal registry caches build for inspection before push</span>    <span class="token key atrule">services</span><span class="token punctuation">:</span>      <span class="token key atrule">registry</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/libpod/registry<span class="token punctuation">:</span><span class="token number">2</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> 5000<span class="token punctuation">:</span><span class="token number">5000</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up QEMU        <span class="token key atrule">uses</span><span class="token punctuation">:</span> docker/setup<span class="token punctuation">-</span>qemu<span class="token punctuation">-</span>action@v1      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Docker Buildx        <span class="token key atrule">uses</span><span class="token punctuation">:</span> docker/setup<span class="token punctuation">-</span>buildx<span class="token punctuation">-</span>action@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">driver-opts</span><span class="token punctuation">:</span> network=host          <span class="token key atrule">install</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build and locally push image        <span class="token key atrule">uses</span><span class="token punctuation">:</span> docker/build<span class="token punctuation">-</span>push<span class="token punctuation">-</span>action@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">context</span><span class="token punctuation">:</span> contrib/$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.REPONAME <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>image/$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.source <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">file</span><span class="token punctuation">:</span> ./contrib/$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.REPONAME <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>image/$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.source <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/Dockerfile          <span class="token key atrule">platforms</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.PLATFORMS <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">push</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">tags</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span>5000/$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.REPONAME <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>/$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.source <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Jenkins-流水线"><a href="#Jenkins-流水线" class="headerlink" title="Jenkins 流水线"></a>Jenkins 流水线</h2><p>我们的 CI&#x2F;CD 流水线是使用 Jenkins + Kubernetes plugin 的方式在 Kubernetes 上动态地创建 Pod 作为 Jenkins Slave。在使用 docker 作为容器时的情况下，Jenkins  Slave Pod 将宿主机上的 <code>/var/run/docker.sock</code> 文件通过 hostPath 的方式挂载到 pod 容器内，容器内的 docker CLI 就能通过该 sock 与宿主机的 docker 守护进程进行通信，这样在 pod 容器内就可以无缝地使用 docker build 、push 等命令了。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">// Kubernetes pod template to run.podTemplate(    <span class="token key atrule">cloud</span><span class="token punctuation">:</span> <span class="token string">"kubernetes"</span><span class="token punctuation">,</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME<span class="token punctuation">,</span>    <span class="token key atrule">label</span><span class="token punctuation">:</span> POD_NAME<span class="token punctuation">,</span>    <span class="token key atrule">yaml</span><span class="token punctuation">:</span> """<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> debian    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"$&#123;JENKINS_POD_IMAGE_NAME&#125;"</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dockersock      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/run/docker.sock  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jnlp    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"\$(JENKINS_SECRET)"</span><span class="token punctuation">,</span> <span class="token string">"\$(JENKINS_NAME)"</span><span class="token punctuation">]</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"jenkins/inbound-agent:4.3-4-alpine"</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dockersock      <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /var/run/docker.sock"""<span class="token punctuation">,</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当不再使用 docker 作为 Kubernetes 的容器运行时之后，宿主机上则就没有了 docker 守护进程，挂载 <code>/var/run/docker.sock</code> 的方式也就凉凉了，因此我们需要找到一些替代的方法。</p><p>目前能想到的有两种方案：方案一是替代掉 docker 使用其他镜像构建工具比如 <a href="https://github.com/containers/podman">podman</a> + <a href="https://github.com/containers/skopeo">skopeo</a> + <a href="https://github.com/containers/buildah">buildah</a>。陈少文博主在《<a href="https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html">基于 Kubernetes 的 Jenkins 服务也可以去 Docker 了</a>》详细地讲过该方案。但我们的 Makefile 里缝合了一些 docker buildKit 的特性参数并不能地通过 <code>alias docker=podman</code> 别名的方式简单粗暴地给替换掉 😂。</p><p>比如 podman 构建镜像就不支持 <code>--output type=local,dest=path</code>  <a href="https://github.com/containers/buildah/issues/3789">Support custom build outputs #3789</a> 这种特性。目前看来 podman 想要完全取代掉 docker 的老大哥地位仍还有很长的路要走，尤其 podman 还没有解决自身的镜像是由 docker 来构建的这个尴尬难题。</p><p>方案二就是继续使用 docker 作为镜像构建工具，虽然集群节点上没有了 docker 守护进程，但这并不意味着在 Kubernetes 集群里就无法使用 docker 了。我们可以换种方式将 docker 作为一个 pod 运行在 kubernetes 集群中，而非以 systemd 的方式部署在节点上。然后通过 service IP 或 Node IP 访问 docker 的 TCP 端口进行通信，这样也能无缝地继续使用 docker 。于是在 dind (docker-in-docker) 的基础上就有了 dinp (docker-in-pod) 的套娃操作，其实二者本质上都是相同的，只不过是部署方式和访问方式不太相同而已。</p><p>对比一下这两种方案，方案一通过 <code>alias docker=podman</code> 使用 podman 替代 docker 有点投机取巧，在正式的生产环境流水线中应该很少会被采用，除非你的 Makefile 或者镜像构建脚本中没有依赖 docker 的特性参数，能够完全兼容 podman；方案二比较稳定可靠，它无非就是将之前的宿主机节点上的 docker 守护进程替换成了集群内的 Pod，对于使用者而言只需要修改一下访问 docker 的方式，即 <code>DOCKER_HOST</code> 环境变量即可。因此本文选用方案二来给大家介绍几种在 K8s 集群里部署和使用 dind&#x2F;dinp 的方式。</p><h2 id="docker-in-pod"><a href="#docker-in-pod" class="headerlink" title="docker in pod"></a>docker in pod</h2><p>不同于 docker in docker，docker in pod 并不关心底层的容器运行时是什么，可以是 docker 也可以是 containerd。在 pod 内运行和使用 docker 个人总结出以下三种比较合适的方式，可以根据不同的场景选择一个合适的：</p><h3 id="sidecar"><a href="#sidecar" class="headerlink" title="sidecar"></a>sidecar</h3><p>将 dind 容器作为 <a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/#using-pods">sidecar 容器</a> 来运行，主容器通过 localhost 的方式访问 docker 的 2375&#x2F;2376 TCP 端口。这种方案的好处就是如果创建了多个 Pod，各个 Pod 之间是相互独立的，dind 容器不会共享给其他 pod 使用，隔离性比较好。缺点也比较明显，每一个 Pod 都带一个 dind 容器占用的系统资源比较多，有点大材小用的感觉；</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>sidecar<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>20.10.12    <span class="token key atrule">name</span><span class="token punctuation">:</span> debug    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sleep"</span><span class="token punctuation">,</span> <span class="token string">"3600"</span><span class="token punctuation">]</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_TLS_VERIFY      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_HOST      <span class="token key atrule">value</span><span class="token punctuation">:</span> tcp<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2375</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dind    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>20.10.12<span class="token punctuation">-</span>dind<span class="token punctuation">-</span>rootless    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"--insecure-registry=$(REGISTRY)"</span><span class="token punctuation">]</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token comment"># 如果镜像仓库域名为自签证书，需要在这里配置 insecure-registry</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> REGISTRY      <span class="token key atrule">value</span><span class="token punctuation">:</span> hub.k8s.li    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_TLS_CERTDIR      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_HOST      <span class="token key atrule">value</span><span class="token punctuation">:</span> tcp<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2375</span>    <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>      <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 使用 docker info 命令就绪探针来确保 dind 容器正常启动 </span>    <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"docker"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">]</span>      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="daemonset"><a href="#daemonset" class="headerlink" title="daemonset"></a>daemonset</h3><p><a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/">daemonset</a> 则是在集群的每一个 Node 节点上运行一个 dind Pod，并且使用 hostNetwork 方式来暴露 2375&#x2F;2376 TCP 端口。使用者则通过 <code>status.hostIP</code> 访问宿主机的 2375&#x2F;2376 TCP 端口来与 docker 进行通信；另外再通过 hostPath 挂载的方式来将 dind 容器内的 <code>/var/lib/docker</code> 数据持久化存储下来，能够缓存一些数据提高镜像构建的效率。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>daemonset  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>daemonset  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>daemonset    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dind        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>20.10.12<span class="token punctuation">-</span>dind        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"--insecure-registry=$(REGISTRY)"</span><span class="token punctuation">]</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> REGISTRY          <span class="token key atrule">value</span><span class="token punctuation">:</span> hub.k8s.li        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_TLS_CERTDIR          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> docker<span class="token punctuation">-</span>storage          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span>  /var/lib/docker        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"docker"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">]</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">6</span>        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"docker"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">]</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">60</span>          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> docker<span class="token punctuation">-</span>storage        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h3><p>Deployment 方式则是在集群中部署一个或多个 dind Pod，使用者通过 service IP 来访问 docker 的 2375&#x2F;2376 端口，如果是以非 TLS 方式启动 dind 容器，使用 service IP 来访问 docker 要比前面的 daemonset 使用 host IP 安全性要好一些。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>deployment  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>deployment  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>deployment    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dind        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>20.10.12<span class="token punctuation">-</span>dind        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"--insecure-registry=$(REGISTRY)"</span><span class="token punctuation">]</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> REGISTRY          <span class="token key atrule">value</span><span class="token punctuation">:</span> hub.k8s.li        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_TLS_CERTDIR          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_HOST          <span class="token key atrule">value</span><span class="token punctuation">:</span> tcp<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2375</span>        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> docker<span class="token punctuation">-</span>storage          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span>  /var/lib/docker        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"docker"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">]</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">6</span>        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"docker"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">]</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">60</span>          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> docker<span class="token punctuation">-</span>storage        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /var/lib/docker<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token comment"># 定义 service name，使用者通过它来访问 docker 的 2375 端口</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>deployment<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> dinp<span class="token punctuation">-</span>deployment  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2375</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">2375</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h2><p>在 Jenkins 的 podTemplate 模版里，可以根据 dinp 部署方式的不同选用以下几种不同的模版：</p><h3 id="sidecare"><a href="#sidecare" class="headerlink" title="sidecare"></a>sidecare</h3><p>Pod 内容器共享同一个网络协议栈，因此可以通过 localhost 来访问 docker 的 TCP 端口，另外最好使用 rootless 模式启动 dind 容器，这样能在同一节点上运行多个这样的 Pod 实例。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def JOB_NAME = "$<span class="token punctuation">&#123;</span>env.JOB_BASE_NAME<span class="token punctuation">&#125;</span>"def BUILD_NUMBER = "$<span class="token punctuation">&#123;</span>env.BUILD_NUMBER<span class="token punctuation">&#125;</span>"def POD_NAME = "jenkins<span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span>JOB_NAME<span class="token punctuation">&#125;</span><span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span>BUILD_NUMBER<span class="token punctuation">&#125;</span>"<span class="token key atrule">def K8S_CLUSTER = params.k8s_cluster ?</span><span class="token punctuation">:</span> kubernetes// Kubernetes pod template to run.podTemplate(    <span class="token key atrule">cloud</span><span class="token punctuation">:</span> K8S_CLUSTER<span class="token punctuation">,</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME<span class="token punctuation">,</span>    <span class="token key atrule">label</span><span class="token punctuation">:</span> POD_NAME<span class="token punctuation">,</span>    <span class="token key atrule">yaml</span><span class="token punctuation">:</span> """<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> runner    <span class="token key atrule">image</span><span class="token punctuation">:</span> golang<span class="token punctuation">:</span>1.17<span class="token punctuation">-</span>buster    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_HOST      <span class="token key atrule">vaule</span><span class="token punctuation">:</span> tcp<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">2375</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_TLS_VERIFY      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jnlp    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"\$(JENKINS_SECRET)"</span><span class="token punctuation">,</span> <span class="token string">"\$(JENKINS_NAME)"</span><span class="token punctuation">]</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"jenkins/inbound-agent:4.11.2-4-alpine"</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dind    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>20.10.12<span class="token punctuation">-</span>dind<span class="token punctuation">-</span>rootless    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"--insecure-registry=$(REGISTRY)"</span><span class="token punctuation">]</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> REGISTRY      <span class="token key atrule">value</span><span class="token punctuation">:</span> hub.k8s.li    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_TLS_CERTDIR      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>      <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"docker"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">]</span>      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">6</span>"""<span class="token punctuation">,</span>) <span class="token punctuation">&#123;</span>    node(POD_NAME) <span class="token punctuation">&#123;</span>        container("runner") <span class="token punctuation">&#123;</span>            stage("Checkout") <span class="token punctuation">&#123;</span>                retry(10) <span class="token punctuation">&#123;</span>                    checkout(<span class="token punctuation">[</span>                        <span class="token key atrule">$class</span><span class="token punctuation">:</span> <span class="token string">'GitSCM'</span><span class="token punctuation">,</span>                        <span class="token key atrule">branches</span><span class="token punctuation">:</span> scm.branches<span class="token punctuation">,</span>                        <span class="token key atrule">doGenerateSubmoduleConfigurations</span><span class="token punctuation">:</span> scm.doGenerateSubmoduleConfigurations<span class="token punctuation">,</span>                        <span class="token key atrule">extensions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token key atrule">$class</span><span class="token punctuation">:</span> <span class="token string">'CloneOption'</span><span class="token punctuation">,</span> <span class="token key atrule">noTags</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">shallow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">depth</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token key atrule">reference</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token key atrule">userRemoteConfigs</span><span class="token punctuation">:</span> scm.userRemoteConfigs<span class="token punctuation">,</span>                    <span class="token punctuation">]</span>)                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            stage("Build") <span class="token punctuation">&#123;</span>                sh """                <span class="token comment"># make docker-build</span>                docker build <span class="token punctuation">-</span>t app<span class="token punctuation">:</span>v1.0.0<span class="token punctuation">-</span>alpha.1 .                """            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="daemonset-1"><a href="#daemonset-1" class="headerlink" title="daemonset"></a>daemonset</h3><p>由于使用的是 hostNetwork，因此可以通过 host IP 来访问 docker 的 TCP 端口，当然也可以像 deployment 那样通过 service Name 来访问，在这里就不演示了。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def JOB_NAME = "$<span class="token punctuation">&#123;</span>env.JOB_BASE_NAME<span class="token punctuation">&#125;</span>"def BUILD_NUMBER = "$<span class="token punctuation">&#123;</span>env.BUILD_NUMBER<span class="token punctuation">&#125;</span>"def POD_NAME = "jenkins<span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span>JOB_NAME<span class="token punctuation">&#125;</span><span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span>BUILD_NUMBER<span class="token punctuation">&#125;</span>"<span class="token key atrule">def K8S_CLUSTER = params.k8s_cluster ?</span><span class="token punctuation">:</span> kubernetes// Kubernetes pod template to run.podTemplate(    <span class="token key atrule">cloud</span><span class="token punctuation">:</span> K8S_CLUSTER<span class="token punctuation">,</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME<span class="token punctuation">,</span>    <span class="token key atrule">label</span><span class="token punctuation">:</span> POD_NAME<span class="token punctuation">,</span>    <span class="token key atrule">yaml</span><span class="token punctuation">:</span> """<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> runner    <span class="token key atrule">image</span><span class="token punctuation">:</span> golang<span class="token punctuation">:</span>1.17<span class="token punctuation">-</span>buster    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_HOST      <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>        <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>          <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> status.hostIP    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_TLS_VERIFY      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jnlp    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"\$(JENKINS_SECRET)"</span><span class="token punctuation">,</span> <span class="token string">"\$(JENKINS_NAME)"</span><span class="token punctuation">]</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"jenkins/inbound-agent:4.11.2-4-alpine"</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent"""<span class="token punctuation">,</span>) <span class="token punctuation">&#123;</span>    node(POD_NAME) <span class="token punctuation">&#123;</span>        container("runner") <span class="token punctuation">&#123;</span>            stage("Checkout") <span class="token punctuation">&#123;</span>                retry(10) <span class="token punctuation">&#123;</span>                    checkout(<span class="token punctuation">[</span>                        <span class="token key atrule">$class</span><span class="token punctuation">:</span> <span class="token string">'GitSCM'</span><span class="token punctuation">,</span>                        <span class="token key atrule">branches</span><span class="token punctuation">:</span> scm.branches<span class="token punctuation">,</span>                        <span class="token key atrule">doGenerateSubmoduleConfigurations</span><span class="token punctuation">:</span> scm.doGenerateSubmoduleConfigurations<span class="token punctuation">,</span>                        <span class="token key atrule">extensions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token key atrule">$class</span><span class="token punctuation">:</span> <span class="token string">'CloneOption'</span><span class="token punctuation">,</span> <span class="token key atrule">noTags</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">shallow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">depth</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token key atrule">reference</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token key atrule">userRemoteConfigs</span><span class="token punctuation">:</span> scm.userRemoteConfigs<span class="token punctuation">,</span>                    <span class="token punctuation">]</span>)                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            stage("Build") <span class="token punctuation">&#123;</span>                sh """                <span class="token comment"># make docker-build</span>                docker build <span class="token punctuation">-</span>t app<span class="token punctuation">:</span>v1.0.0<span class="token punctuation">-</span>alpha.1 .                """            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deployment-1"><a href="#deployment-1" class="headerlink" title="deployment"></a>deployment</h3><p>通过 service name 访问 docker，其他参数和 daemonset 都是相同的</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def JOB_NAME = "$<span class="token punctuation">&#123;</span>env.JOB_BASE_NAME<span class="token punctuation">&#125;</span>"def BUILD_NUMBER = "$<span class="token punctuation">&#123;</span>env.BUILD_NUMBER<span class="token punctuation">&#125;</span>"def POD_NAME = "jenkins<span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span>JOB_NAME<span class="token punctuation">&#125;</span><span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span>BUILD_NUMBER<span class="token punctuation">&#125;</span>"<span class="token key atrule">def K8S_CLUSTER = params.k8s_cluster ?</span><span class="token punctuation">:</span> kubernetes// Kubernetes pod template to run.podTemplate(    <span class="token key atrule">cloud</span><span class="token punctuation">:</span> K8S_CLUSTER<span class="token punctuation">,</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME<span class="token punctuation">,</span>    <span class="token key atrule">label</span><span class="token punctuation">:</span> POD_NAME<span class="token punctuation">,</span>    <span class="token key atrule">yaml</span><span class="token punctuation">:</span> """<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> runner    <span class="token key atrule">image</span><span class="token punctuation">:</span> golang<span class="token punctuation">:</span>1.17<span class="token punctuation">-</span>buster    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_HOST       <span class="token key atrule">value</span><span class="token punctuation">:</span> tcp<span class="token punctuation">:</span>//dinp<span class="token punctuation">-</span>deployment<span class="token punctuation">:</span><span class="token number">2375</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> DOCKER_TLS_VERIFY      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jnlp    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"\$(JENKINS_SECRET)"</span><span class="token punctuation">,</span> <span class="token string">"\$(JENKINS_NAME)"</span><span class="token punctuation">]</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"jenkins/inbound-agent:4.11.2-4-alpine"</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent"""<span class="token punctuation">,</span>) <span class="token punctuation">&#123;</span>    node(POD_NAME) <span class="token punctuation">&#123;</span>        container("runner") <span class="token punctuation">&#123;</span>            stage("Checkout") <span class="token punctuation">&#123;</span>                retry(10) <span class="token punctuation">&#123;</span>                    checkout(<span class="token punctuation">[</span>                        <span class="token key atrule">$class</span><span class="token punctuation">:</span> <span class="token string">'GitSCM'</span><span class="token punctuation">,</span>                        <span class="token key atrule">branches</span><span class="token punctuation">:</span> scm.branches<span class="token punctuation">,</span>                        <span class="token key atrule">doGenerateSubmoduleConfigurations</span><span class="token punctuation">:</span> scm.doGenerateSubmoduleConfigurations<span class="token punctuation">,</span>                        <span class="token key atrule">extensions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token key atrule">$class</span><span class="token punctuation">:</span> <span class="token string">'CloneOption'</span><span class="token punctuation">,</span> <span class="token key atrule">noTags</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">shallow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> <span class="token key atrule">depth</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token key atrule">reference</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token key atrule">userRemoteConfigs</span><span class="token punctuation">:</span> scm.userRemoteConfigs<span class="token punctuation">,</span>                    <span class="token punctuation">]</span>)                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            stage("Build") <span class="token punctuation">&#123;</span>                sh """                <span class="token comment"># make docker-build</span>                docker build <span class="token punctuation">-</span>t app<span class="token punctuation">:</span>v1.0.0<span class="token punctuation">-</span>alpha.1 .                """            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="readinessProbe"><a href="#readinessProbe" class="headerlink" title="readinessProbe"></a>readinessProbe</h3><p>有些时候 dind 无法正常启动，所以一定要设置就绪探针，来确保 diind 容器能够正常启动</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>  <span class="token key atrule">exec</span><span class="token punctuation">:</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"docker"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">]</span>  <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2375-x2F-2376-端口"><a href="#2375-x2F-2376-端口" class="headerlink" title="2375&#x2F;2376 端口"></a>2375&#x2F;2376 端口</h3><p>docker 默认是以 TLS 方式启动，监听端口为 2376，如果设置环境变量 <code>DOCKER_TLS_CERTDIR</code> 为空则就以非 TLS 模式启动，监听端口为 2375，这时就不会校验 TLS 证书。如果使用 2376 端口，则就需要一个持久化存储来将 docker 生成的证书共享给客户端，这点比较麻烦。因此如果不想瞎折腾还是使用 2375 非 TLS 方式吧 😂。</p><h3 id="dinp-必须以开启-privileged-true"><a href="#dinp-必须以开启-privileged-true" class="headerlink" title="dinp 必须以开启 privileged: true"></a>dinp 必须以开启 privileged: true</h3><p>以 pod 方式运行 docker，无论是否是 rootless 模式，都要在 pod 容器的 <code>securityContext</code> 中设置 <code>privileged: true</code>，否则 pod 无法正常启动。而且 rootless 模式也有一定的限制，需要依赖一些内核的特性，目前也只是实验阶段，没有特殊的需求还是尽量不要使用 rootless 特性吧。</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# kubectl logs -f dinp-sidecarerror: a container name must be specified for pod dinp-sidecar, choose one of: [debug dind][root@localhost ~]# kubectl logs -f dinp-sidecar -c dindDevice &quot;ip_tables&quot; does not exist.ip_tables              27126  4 iptable_raw,iptable_mangle,iptable_filter,iptable_natmodprobe: can&#39;t change directory to &#39;&#x2F;lib&#x2F;modules&#39;: No such file or directoryWARN[0000] failed to mount sysfs, falling back to read-only mount: operation not permittedWARN[0000] failed to mount sysfs: operation not permittedopen: No such file or directory[rootlesskit:child ] error: executing [[ip tuntap add name tap0 mode tap] [ip link set tap0 address 02:50:00:00:00:01]]: exit status 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rootless-user-max-user-namespaces"><a href="#rootless-user-max-user-namespaces" class="headerlink" title="rootless user.max_user_namespaces"></a>rootless user.max_user_namespaces</h3><p>rootless 模式下需要依赖一些内核参数 <a href="https://docs.docker.com/engine/security/rootless/">Run the Docker daemon as a non-root user (Rootless mode)</a>。在 CentOS 7.9 上会出现 <a href="https://github.com/docker-library/docker/issues/201">dind-rootless: failed to start up dind rootless in k8s due to max_user_namespaces</a> 问题。解决方案是在修改一下 <code>user.max_user_namespaces=28633</code> 内核参数。</p><blockquote><p>Add user.max_user_namespaces&#x3D;28633 to &#x2F;etc&#x2F;sysctl.conf (or &#x2F;etc&#x2F;sysctl.d) and run sudo sysctl -p</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pod -w</span>NAME                              READY   STATUS   RESTARTS     AGEdinp-deployment-cf488bfd8-g8vxx   <span class="token number">0</span>/1     CrashLoopBackOff   <span class="token number">1</span> <span class="token punctuation">(</span>2s ago<span class="token punctuation">)</span>   4s<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># kubectl logs -f dinp-deployment-cf488bfd8-m5cms</span>Device <span class="token string">"ip_tables"</span> does not exist.ip_tables              <span class="token number">27126</span>  <span class="token number">5</span> iptable_raw,iptable_mangle,iptable_filter,iptable_natmodprobe: can<span class="token string">'t change directory to '</span>/lib/modules<span class="token string">': No such file or directoryerror: attempting to run rootless dockerd but need '</span>user.max_user_namespaces' <span class="token punctuation">(</span>/proc/sys/user/max_user_namespaces<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> to a sufficiently large value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非-rootless-模式下同一-node-节点只能运行一个-dinp"><a href="#非-rootless-模式下同一-node-节点只能运行一个-dinp" class="headerlink" title="非 rootless 模式下同一 node 节点只能运行一个 dinp"></a>非 rootless 模式下同一 node 节点只能运行一个 dinp</h3><p>如果是使用 deployment 方式部署 dinp，一个 node 节点上只能有一个 dinp Pod，多余的 Pod 无法正常启动。因此如果想要运行多个 dinp Pod，建议使用 daemonset 方式运行它；</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# kubectl get deployNAME              READY   UP-TO-DATE   AVAILABLE   AGEdinp-deployment   1&#x2F;3     3            1           4m16s[root@localhost ~]# kubectl get pod -wNAME                               READY   STATUS    RESTARTS      AGEdinp-deployment-547bd9bb6d-2mn6c   0&#x2F;1     Running   3 (61s ago)   4m9sdinp-deployment-547bd9bb6d-8ht8l   1&#x2F;1     Running   0             4m9sdinp-deployment-547bd9bb6d-x5vpv   0&#x2F;1     Running   3 (61s ago)   4m9s[root@localhost ~]# kubectl logs -f dinp-deployment-547bd9bb6d-2mn6cINFO[2022-03-14T14:14:10.905652548Z] Starting upWARN[2022-03-14T14:14:10.906986721Z] could not change group &#x2F;var&#x2F;run&#x2F;docker.sock to docker: group docker not foundWARN[2022-03-14T14:14:10.907249071Z] Binding to IP address without --tlsverify is insecure and gives root access on this machine to everyone who has access to your network.  host&#x3D;&quot;tcp:&#x2F;&#x2F;0.0.0.0:2375&quot;WARN[2022-03-14T14:14:10.907269951Z] Binding to an IP address, even on localhost, can also give access to scripts run in a browser. Be safe out there!  host&#x3D;&quot;tcp:&#x2F;&#x2F;0.0.0.0:2375&quot;WARN[2022-03-14T14:14:11.908057635Z] Binding to an IP address without --tlsverify is deprecated. Startup is intentionally being slowed down to show this message  host&#x3D;&quot;tcp:&#x2F;&#x2F;0.0.0.0:2375&quot;WARN[2022-03-14T14:14:11.908103696Z] Please consider generating tls certificates with client validation to prevent exposing unauthenticated root access to your network  host&#x3D;&quot;tcp:&#x2F;&#x2F;0.0.0.0:2375&quot;WARN[2022-03-14T14:14:11.908114541Z] You can override this by explicitly specifying &#39;--tls&#x3D;false&#39; or &#39;--tlsverify&#x3D;false&#39;  host&#x3D;&quot;tcp:&#x2F;&#x2F;0.0.0.0:2375&quot;WARN[2022-03-14T14:14:11.908125477Z] Support for listening on TCP without authentication or explicit intent to run without authentication will be removed in the next release  host&#x3D;&quot;tcp:&#x2F;&#x2F;0.0.0.0:2375&quot;INFO[2022-03-14T14:14:26.914587276Z] libcontainerd: started new containerd process  pid&#x3D;41INFO[2022-03-14T14:14:26.914697125Z] parsed scheme: &quot;unix&quot;                         module&#x3D;grpcINFO[2022-03-14T14:14:26.914710376Z] scheme &quot;unix&quot; not registered, fallback to default scheme  module&#x3D;grpcINFO[2022-03-14T14:14:26.914785052Z] ccResolverWrapper: sending update to cc: &#123;[&#123;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker&#x2F;containerd&#x2F;containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;] &lt;nil&gt; &lt;nil&gt;&#125;  module&#x3D;grpcINFO[2022-03-14T14:14:26.914796039Z] ClientConn switching balancer to &quot;pick_first&quot;  module&#x3D;grpcINFO[2022-03-14T14:14:26.930311832Z] starting containerd                           revision&#x3D;7b11cfaabd73bb80907dd23182b9347b4245eb5d version&#x3D;v1.4.12INFO[2022-03-14T14:14:26.953641900Z] loading plugin &quot;io.containerd.content.v1.content&quot;...  type&#x3D;io.containerd.content.v1INFO[2022-03-14T14:14:26.953721059Z] loading plugin &quot;io.containerd.snapshotter.v1.aufs&quot;...  type&#x3D;io.containerd.snapshotter.v1INFO[2022-03-14T14:14:26.960295816Z] skip loading plugin &quot;io.containerd.snapshotter.v1.aufs&quot;...  error&#x3D;&quot;aufs is not supported (modprobe aufs failed: exit status 1 \&quot;ip: can&#39;t find device &#39;aufs&#39;\\nmodprobe: can&#39;t change directory to &#39;&#x2F;lib&#x2F;modules&#39;: No such file or directory\\n\&quot;): skip plugin&quot; type&#x3D;io.containerd.snapshotter.v1INFO[2022-03-14T14:14:26.960329840Z] loading plugin &quot;io.containerd.snapshotter.v1.btrfs&quot;...  type&#x3D;io.containerd.snapshotter.v1INFO[2022-03-14T14:14:26.960524514Z] skip loading plugin &quot;io.containerd.snapshotter.v1.btrfs&quot;...  error&#x3D;&quot;path &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containerd&#x2F;daemon&#x2F;io.containerd.snapshotter.v1.btrfs (xfs) must be a btrfs filesystem to be used with the btrfs snapshotter: skip plugin&quot; type&#x3D;io.containerd.snapshotter.v1INFO[2022-03-14T14:14:26.960537441Z] loading plugin &quot;io.containerd.snapshotter.v1.devmapper&quot;...  type&#x3D;io.containerd.snapshotter.v1WARN[2022-03-14T14:14:26.960558843Z] failed to load plugin io.containerd.snapshotter.v1.devmapper  error&#x3D;&quot;devmapper not configured&quot;INFO[2022-03-14T14:14:26.960569516Z] loading plugin &quot;io.containerd.snapshotter.v1.native&quot;...  type&#x3D;io.containerd.snapshotter.v1INFO[2022-03-14T14:14:26.960593224Z] loading plugin &quot;io.containerd.snapshotter.v1.overlayfs&quot;...  type&#x3D;io.containerd.snapshotter.v1INFO[2022-03-14T14:14:26.960678728Z] loading plugin &quot;io.containerd.snapshotter.v1.zfs&quot;...  type&#x3D;io.containerd.snapshotter.v1INFO[2022-03-14T14:14:26.960814844Z] skip loading plugin &quot;io.containerd.snapshotter.v1.zfs&quot;...  error&#x3D;&quot;path &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containerd&#x2F;daemon&#x2F;io.containerd.snapshotter.v1.zfs must be a zfs filesystem to be used with the zfs snapshotter: skip plugin&quot; type&#x3D;io.containerd.snapshotter.v1INFO[2022-03-14T14:14:26.960827133Z] loading plugin &quot;io.containerd.metadata.v1.bolt&quot;...  type&#x3D;io.containerd.metadata.v1WARN[2022-03-14T14:14:26.960839223Z] could not use snapshotter devmapper in metadata plugin  error&#x3D;&quot;devmapper not configured&quot;INFO[2022-03-14T14:14:26.960848698Z] metadata content store policy set             policy&#x3D;sharedWARN[2022-03-14T14:14:27.915528371Z] grpc: addrConn.createTransport failed to connect to &#123;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker&#x2F;containerd&#x2F;containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err :connection error: desc &#x3D; &quot;transport: error while dialing: dial unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker&#x2F;containerd&#x2F;containerd.sock: timeout&quot;. Reconnecting...  module&#x3D;grpcWARN[2022-03-14T14:14:30.722257725Z] grpc: addrConn.createTransport failed to connect to &#123;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker&#x2F;containerd&#x2F;containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err :connection error: desc &#x3D; &quot;transport: error while dialing: dial unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker&#x2F;containerd&#x2F;containerd.sock: timeout&quot;. Reconnecting...  module&#x3D;grpcWARN[2022-03-14T14:14:35.549453706Z] grpc: addrConn.createTransport failed to connect to &#123;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker&#x2F;containerd&#x2F;containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err :connection error: desc &#x3D; &quot;transport: error while dialing: dial unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker&#x2F;containerd&#x2F;containerd.sock: timeout&quot;. Reconnecting...  module&#x3D;grpcWARN[2022-03-14T14:14:41.759010407Z] grpc: addrConn.createTransport failed to connect to &#123;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker&#x2F;containerd&#x2F;containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;. Err :connection error: desc &#x3D; &quot;transport: error while dialing: dial unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker&#x2F;containerd&#x2F;containerd.sock: timeout&quot;. Reconnecting...  module&#x3D;grpcfailed to start containerd: timeout waiting for containerd to start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x2F-var-x2F-lib-x2F-docker-不支持共享存储"><a href="#x2F-var-x2F-lib-x2F-docker-不支持共享存储" class="headerlink" title="&#x2F;var&#x2F;lib&#x2F;docker 不支持共享存储"></a>&#x2F;var&#x2F;lib&#x2F;docker 不支持共享存储</h3><p>陈少文博主曾在 《<a href="https://www.chenshaowen.com/blog/can-we-mount-var-lib-docker-to-remote-storage.html">&#x2F;var&#x2F;lib&#x2F;docker 能不能挂载远端存储</a>》提到过 docker 目前并支持将 <code>/var/lib/docker</code> 挂载远程存储使用，因此建议使用 hostPath 的方式保存 docker 的持久化存储数据。</p><blockquote><p>本次测试使用的 Docker 版本为 20.10.6，不能将 <code>/var/lib/docker</code> 挂载远程存储使用。主要原因是容器的实现依赖于内核的能力(xttrs)，而类似 NFS Server 这种远程存储无法提供这些能力。如果采用 Device Mapper 进行映射，使用磁盘挂载存在可行性，但只能用于迁移而不能实现共享。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO<span class="token punctuation">[</span><span class="token number">2022</span>-03-13T13:43:08.750810130Z<span class="token punctuation">]</span> ClientConn switching balancer to <span class="token string">"pick_first"</span>  <span class="token assign-left variable">module</span><span class="token operator">=</span>grpcERRO<span class="token punctuation">[</span><span class="token number">2022</span>-03-13T13:43:08.781932359Z<span class="token punctuation">]</span> failed to <span class="token function">mount</span> overlay: invalid argument     storage-driver<span class="token operator">=</span>overlay2ERRO<span class="token punctuation">[</span><span class="token number">2022</span>-03-13T13:43:08.782078828Z<span class="token punctuation">]</span> exec: <span class="token string">"fuse-overlayfs"</span><span class="token builtin class-name">:</span> executable <span class="token function">file</span> not found <span class="token keyword">in</span> <span class="token environment constant">$PATH</span>  storage-driver<span class="token operator">=</span>fuse-overlayfsERRO<span class="token punctuation">[</span><span class="token number">2022</span>-03-13T13:43:08.793311119Z<span class="token punctuation">]</span> AUFS was not found <span class="token keyword">in</span> /proc/filesystems       storage-driver<span class="token operator">=</span>aufsERRO<span class="token punctuation">[</span><span class="token number">2022</span>-03-13T13:43:08.813505621Z<span class="token punctuation">]</span> failed to <span class="token function">mount</span> overlay: invalid argument     storage-driver<span class="token operator">=</span>overlayERRO<span class="token punctuation">[</span><span class="token number">2022</span>-03-13T13:43:08.813529990Z<span class="token punctuation">]</span> Failed to built-in GetDriver graph devicemapper /var/lib/dockerINFO<span class="token punctuation">[</span><span class="token number">2022</span>-03-13T13:43:08.897769363Z<span class="token punctuation">]</span> Loading containers: start.WARN<span class="token punctuation">[</span><span class="token number">2022</span>-03-13T13:43:08.919252078Z<span class="token punctuation">]</span> Running modprobe bridge br_netfilter failed with message: ip: can<span class="token string">'t find device '</span>bridge'<span class="token punctuation">[</span>root@localhost dinp<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it dinp-sidecar -c debug sh</span>/ <span class="token comment"># docker pull alpine</span>Using default tag: latestError response from daemon: error creating temporary lease: <span class="token function">file</span> resize error: truncate /var/lib/docker/containerd/daemon/io.containerd.metadata.v1.bolt/meta.db: bad <span class="token function">file</span> descriptor: unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.bilibili.com/video/BV1Xa411C78k">Dockershim 即将被移除，你准备好了么？</a></li><li><a href="https://draveness.me/whys-the-design-kubernetes-deprecate-docker/">为什么 Kubernetes 要替换 Docker</a></li><li><a href="https://applatix.com/case-docker-docker-kubernetes-part-2">A case for Docker-in-Docker on Kubernetes</a></li><li><a href="https://docs.docker.com/engine/security/rootless/">Run the Docker daemon as a non-root user (Rootless mode)</a></li><li><a href="https://github.com/docker-library/docker">Docker Official Image packaging for Docker</a></li><li><a href="https://www.chenshaowen.com/blog/can-we-mount-var-lib-docker-to-remote-storage.html">&#x2F;var&#x2F;lib&#x2F;docker 能不能挂载远端存储</a></li><li><a href="https://www.chenshaowen.com/blog/how-to-use-docker-in-docker.html">如何在 Docker 中使用 Docker</a></li><li><a href="https://www.chenshaowen.com/blog/using-podman-to-build-images-under-kubernetes-and-jenkins.html">基于 Kubernetes 的 Jenkins 服务也可以去 Docker 了</a></li><li><a href="https://github.com/docker-library/docker/issues/201">dind-rootless: failed to start up dind rootless in k8s due to max_user_namespaces #201</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上个月参加了 Rancher 社区举办的 《&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="dind" scheme="https://blog.k8s.li/tags/dind/"/>
    
      <category term="dinp" scheme="https://blog.k8s.li/tags/dinp/"/>
    
      <category term="jenkins" scheme="https://blog.k8s.li/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>使用 kubectl 自动归档 argo workflow 日志</title>
    <link href="https://blog.k8s.li/archive-argo-workflow-log-by-kubectl.html"/>
    <id>https://blog.k8s.li/archive-argo-workflow-log-by-kubectl.html</id>
    <published>2022-02-27T16:00:00.000Z</published>
    <updated>2022-02-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目上使用到 <a href="https://github.com/argoproj/argo-workflows">argo-workflow</a> 作为工作流引擎来编排运行一些 <a href="https://www.smartx.com/solution/virtualization/">超融合</a> 集群部署相关的任务，整套环境运行在一个单节点的 K3s 上。之所以选择 argo-workflow + K3s 的搭配主要是想尽可能少地占用系统资源，因为这套环境将来会运行在各种硬件配置不同的笔记本电脑上 😂。综合调研了一些常见的 K8s 部署工具最终就选择了系统资源占用较少的 K3s。</p><p>现在项目的一个需求就是在集群部署完成或失败之后需要将 workflow 的日志归档保存下来。虽然可以在 workflow 的 spec 字段中使用 <code>archiveLogs: true</code> 来让 argo 帮我们自动归档日志，但这个特性依赖于一个 S3 对象存储 <a href="https://argoproj.github.io/argo-workflows/configure-artifact-repository/">Artifact Repository</a> 。这就意味着还要再部署一个支持 S3 对象存储的组件比如 <a href="https://min.io/">Minio</a> ，直接把我给整不会了 🌚</p><p><img data-src="https://p.k8s.li/2021-08-31-pass-tob-k8s-offline-deploy-2.jpeg"></p><p>其实嘛这个需求很简单的，我就想保存一个日志文件而已，你还再让我安装一个 <a href="https://min.io/">Minio</a>，实在是太过分了！本来系统的资源十分有限，需要尽可能减少安装一些不必要依赖，为的就是将资源利用率将到最低。但现在为了归档存储一个日志文件储而大动干戈装一个 minio 实在是不划算。这就好比你费了好大功夫部署一套 3 节点的 kubernetes 集群，然而就为了运行一个静态博客那样滑稽 😂</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Deployed my blog on Kubernetes <a href="https://t.co/XHXWLrmYO4">pic.twitter.com/XHXWLrmYO4</a></p>&mdash; For DevOps Eyes Only (@dexhorthy) <a href="https://twitter.com/dexhorthy/status/856639005462417409?ref_src=twsrc%5Etfw">April 24, 2017</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>对于咱这种 <code>用不起</code> S3 对象存储的穷人家孩子，还是想一些其他办法吧，毕竟自己动手丰衣足食。</p><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><p>实现起来也比较简单，对于咱这种 YAML 工程师来说，kubectl 自然再熟悉不过了。想要获取 workflow 的日志，只需要通过 kubectl logs 命令获取出 workflow 所创的 pod 日志就行了呀，要什么 S3 对象存储 😖</p><h3 id="筛选-pod"><a href="#筛选-pod" class="headerlink" title="筛选 pod"></a>筛选 pod</h3><p>对于同一个 workflow 来将，每个 stage 所创建出来的 pod name 有一定的规律。在定义 workflow 的时候，<a href="https://argoproj.github.io/argo-workflows/fields/#objectmeta">generateName</a> 参数通常使用 <code>$&#123;name&#125;-</code> 格式。以 <code>-</code> 作为分隔符，最后一个字段是随机生成的一个数字 ID，倒数第二个字段则是 argo 随机生成的 workflow ID，剩余前面的字符则是我们定义的 generateName。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> argoproj.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Workflow<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">generateName</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test<span class="token punctuation">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">archive-log-test-jzt8n-3498199655                          <span class="token number">0</span>/2     Completed   <span class="token number">0</span>               4m18sarchive-log-test-jzt8n-3618624526                          <span class="token number">0</span>/2     Completed   <span class="token number">0</span>               4m8sarchive-log-test-jzt8n-2123203324                          <span class="token number">0</span>/2     Completed   <span class="token number">0</span>               3m58s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 pod 的 labels 中同样也包含着该 workflow 所对应的 ID，因此我们可以根据此 labels 过滤出该 workflow 所创建出来的 pod。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">workflows.argoproj.io/node-id</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test<span class="token punctuation">-</span>jzt8n<span class="token punctuation">-</span><span class="token number">3498199655</span>    <span class="token key atrule">workflows.argoproj.io/node-name</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test<span class="token punctuation">-</span>jzt8n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.list<span class="token punctuation">-</span>default<span class="token punctuation">-</span>running<span class="token punctuation">-</span>pods  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2022-02-28T12:53:32Z"</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">workflows.argoproj.io/completed</span><span class="token punctuation">:</span> <span class="token string">"true"</span>    <span class="token key atrule">workflows.argoproj.io/workflow</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test<span class="token punctuation">-</span>jzt8n  <span class="token key atrule">name</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test<span class="token punctuation">-</span>jzt8n<span class="token punctuation">-</span><span class="token number">3498199655</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">ownerReferences</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> argoproj.io/v1alpha1    <span class="token key atrule">blockOwnerDeletion</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">controller</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Workflow    <span class="token key atrule">name</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test<span class="token punctuation">-</span>jzt8n    <span class="token key atrule">uid</span><span class="token punctuation">:</span> e91df2cb<span class="token punctuation">-</span>b567<span class="token punctuation">-</span>4cf0<span class="token punctuation">-</span>9be5<span class="token punctuation">-</span>3dd6c72854cd  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"1251330"</span>  <span class="token key atrule">uid</span><span class="token punctuation">:</span> ce37a709<span class="token punctuation">-</span>8236<span class="token punctuation">-</span>445b<span class="token punctuation">-</span>8d00<span class="token punctuation">-</span>a7926fa18ed0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>-l lables</code> 过滤出一个 workflow 所创建的 pod；通过 <code>--sort-by</code> 以创建时间进行排序；通过 <code>-o name</code> 只输出 pod 的 name：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get pods -l workflows.argoproj.io/workflow<span class="token operator">=</span>archive-log-test-jzt8n --sort-by<span class="token operator">=</span><span class="token string">'.metadata.creationTimestamp'</span> -o namepod/archive-log-test-jzt8n-3498199655pod/archive-log-test-jzt8n-3618624526pod/archive-log-test-jzt8n-2123203324<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取日志"><a href="#获取日志" class="headerlink" title="获取日志"></a>获取日志</h3><p>通过上面的步骤我们就可以获取到一个 workflow 所创建的 pod 列表。然后再通过 kubectl logs 命令获取 pod 中 main 容器的日志，为方便区分日志的所对应的 workflow ，我们就以 workflow 的 ID 为前缀名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl logs archive-log-test-jzt8n-3618624526 -c main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">LOG_PATH</span><span class="token operator">=</span>/var/log<span class="token assign-left variable">NAME</span><span class="token operator">=</span>archive-log-test-jzt8nkubectl get pods -l workflows.argoproj.io/workflow<span class="token operator">=</span><span class="token variable">$&#123;NAME&#125;</span> <span class="token punctuation">\</span>--sort-by<span class="token operator">=</span><span class="token string">'.metadata.creationTimestamp'</span> -o name <span class="token punctuation">\</span><span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> -t kubectl logs <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> -c main <span class="token operator">>></span> <span class="token variable">$&#123;LOG_PATH&#125;</span>/<span class="token variable">$&#123;NAME&#125;</span>.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><p>根据 argo-workflow 官方提供的 <a href="https://github.com/argoproj/argo-workflows/blob/master/examples/exit-handlers.yaml"><strong>exit-handlers.yaml</strong></a> example，我们就照葫芦画瓢搓一个 workflow 退出后自动调用使用 kubectl 获取 workflow 日志的一个 step，定义的 exit-handler 内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> exit<span class="token punctuation">-</span>handler    <span class="token key atrule">container</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"kubectl"</span>      <span class="token key atrule">image</span><span class="token punctuation">:</span> lachlanevenson/k8s<span class="token punctuation">-</span>kubectl<span class="token punctuation">:</span>v1.23.2      <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sh        <span class="token punctuation">-</span> <span class="token punctuation">-</span>c        <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">          kubectl get pods -l workflows.argoproj.io/workflow=$&#123;POD_NAME%-*&#125; \          --sort-by=".metadata.creationTimestamp" -o name | grep -v $&#123;POD_NAME&#125; \          | xargs -I &#123;&#125; -t kubectl logs &#123;&#125; -c main >> $&#123;LOG_PATH&#125;/$&#123;POD_NAME%-*&#125;.log</span>      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.name        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> LOG_PATH          <span class="token key atrule">value</span><span class="token punctuation">:</span> /var/log/workflow      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>datastore          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/log/workflow    <span class="token key atrule">retryStrategy</span><span class="token punctuation">:</span>      <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token string">"5"</span>      <span class="token key atrule">retryPolicy</span><span class="token punctuation">:</span> OnFailure<span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test<span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> default<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>datastore    <span class="token key atrule">nfs</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span> NFS_SERVER      <span class="token key atrule">path</span><span class="token punctuation">:</span> /data/workflow/log<span class="token key atrule">onExit</span><span class="token punctuation">:</span> exit<span class="token punctuation">-</span>handler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上述定义的 <code>exit-handler</code> 内容复制粘贴到你的 workflow spec 配置中就可以。由于日志需要持久化存储，我这里使用的是 NFS 存储，也可以根据自己的需要换成其他存储，只需要修改一下 <code>volumes</code> 配置即可。</p><p>完整的 <a href="https://gist.github.com/muzi502/9b26c6854c509c42ecd7f7004436ca23">workflow example</a> 如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> argoproj.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Workflow<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">generateName</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test<span class="token punctuation">-</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">templates</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test      <span class="token key atrule">steps</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> list<span class="token punctuation">-</span>default<span class="token punctuation">-</span>running<span class="token punctuation">-</span>pods            <span class="token key atrule">template</span><span class="token punctuation">:</span> kubectl            <span class="token key atrule">arguments</span><span class="token punctuation">:</span>              <span class="token key atrule">parameters</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> namespace                  <span class="token key atrule">value</span><span class="token punctuation">:</span> default        <span class="token punctuation">-</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> list<span class="token punctuation">-</span>kube<span class="token punctuation">-</span>system<span class="token punctuation">-</span>running<span class="token punctuation">-</span>pods            <span class="token key atrule">template</span><span class="token punctuation">:</span> kubectl            <span class="token key atrule">arguments</span><span class="token punctuation">:</span>              <span class="token key atrule">parameters</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> namespace                  <span class="token key atrule">value</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubectl      <span class="token key atrule">inputs</span><span class="token punctuation">:</span>        <span class="token key atrule">parameters</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> namespace      <span class="token key atrule">container</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"kubectl"</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> lachlanevenson/k8s<span class="token punctuation">-</span>kubectl<span class="token punctuation">:</span>v1.23.2        <span class="token key atrule">command</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> sh          <span class="token punctuation">-</span> <span class="token punctuation">-</span>c          <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">            kubectl get pods --field-selector=status.phase=Running -n &#123;&#123;inputs.parameters.namespace&#125;&#125;</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> exit<span class="token punctuation">-</span>handler      <span class="token key atrule">container</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"kubectl"</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> lachlanevenson/k8s<span class="token punctuation">-</span>kubectl<span class="token punctuation">:</span>v1.23.2        <span class="token key atrule">command</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> sh          <span class="token punctuation">-</span> <span class="token punctuation">-</span>c          <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">            kubectl get pods -l workflows.argoproj.io/workflow=$&#123;POD_NAME%-*&#125; \            --sort-by=".metadata.creationTimestamp" -o name | grep -v $&#123;POD_NAME&#125; \            | xargs -I &#123;&#125; -t kubectl logs &#123;&#125; -c main >> $&#123;LOG_PATH&#125;/$&#123;POD_NAME%-*&#125;.log</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME            <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>                <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.name          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> LOG_PATH            <span class="token key atrule">value</span><span class="token punctuation">:</span> /var/log/workflow        <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>datastore            <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/log/workflow      <span class="token key atrule">retryStrategy</span><span class="token punctuation">:</span>        <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token string">"5"</span>        <span class="token key atrule">retryPolicy</span><span class="token punctuation">:</span> OnFailure  <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> archive<span class="token punctuation">-</span>log<span class="token punctuation">-</span>test  <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> default  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>datastore      <span class="token key atrule">nfs</span><span class="token punctuation">:</span>        <span class="token key atrule">server</span><span class="token punctuation">:</span> NFS_SERVER        <span class="token key atrule">path</span><span class="token punctuation">:</span> /data/workflow/log  <span class="token key atrule">onExit</span><span class="token punctuation">:</span> exit<span class="token punctuation">-</span>handler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;项目上使用到 &lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubectl" scheme="https://blog.k8s.li/tags/kubectl/"/>
    
      <category term="argo-workflow" scheme="https://blog.k8s.li/tags/argo-workflow/"/>
    
  </entry>
  
  <entry>
    <title>VMware Tanzu kubernetes 发行版部署尝鲜</title>
    <link href="https://blog.k8s.li/deploy-tanzu-k8s-cluster.html"/>
    <id>https://blog.k8s.li/deploy-tanzu-k8s-cluster.html</id>
    <published>2022-02-05T16:00:00.000Z</published>
    <updated>2022-02-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前接触的 Kubernetes 集群部署工具大多数都是依赖于 ssh 连接到待部署的节点上进行部署操作，这样就要求部署前需要提前准备好集群节点，且要保证这些节点的网络互通以及时钟同步等问题。类似于 kubespray 或者 kubekey 这些部署工具是不会去管这些底层的 IaaS 资源的创建，是要自己提前准备好。但是在一些企业私有云环境中，使用了如 <a href="https://docs.vmware.com/cn/VMware-vSphere/index.html">VMware vShpere</a> 或 <a href="https://www.openstack.org/">OpenStack</a> 这些虚拟化平台，是可以将 K8s 集群部署与 IaaS 资源创建这两步统一起来的，这样就可以避免手动创建和配置虚拟机这些繁琐的步骤。</p><p>目前将 IaaS 资源创建与 K8s 集群部署结合起来也有比较成熟的方案，比如基于 <a href="https://github.com/kubernetes-sigs/cluster-api">cluster-api</a> 项目的 <a href="https://github.com/vmware-tanzu">tanzu</a> 。本文就以 <a href="https://github.com/vmware-tanzu/community-edition">VMware Tanzu 社区版</a> 为例在一台物理服务器上，从安装 ESXi OS 到部署完成 Tanzu Workload 集群，来体验一下这种部署方案的与众不同之处。</p><h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><ul><li>下载依赖文件</li><li>安装 govc 依赖</li><li>安装 ESXi OS</li><li>安装 vCenter</li><li>配置 vCenter</li><li>创建 bootstrap 虚拟机</li><li>初始化 bootstrap 节点</li><li>部署 Tanzu Manager 集群</li><li>部署 Tanzu Workload 集群</li></ul><h3 id="劝退三连-😂"><a href="#劝退三连-😂" class="headerlink" title="劝退三连 😂"></a>劝退三连 😂</h3><ul><li>需要有一个 <a href="https://customerconnect.vmware.com/login">VMware 的账户</a> 用于下载一些 ISO 镜像和虚拟机模版;</li><li>需要有一台物理服务器，推荐最低配置 8C 32G，至少 256GB 存储；</li><li>需要一台 DHCP 服务器，由于默认是使用 DHCP 获取 IP 来分配给虚拟机的，因此 ESXi 所在的 VM Network  网络中必须有一台 DHCP 服务器用于给虚拟机分配 IP；</li></ul><h3 id="下载依赖文件"><a href="#下载依赖文件" class="headerlink" title="下载依赖文件"></a>下载依赖文件</h3><p>整个部署流程所需要的依文件赖如下，可以先将这些依赖下载到本地的机器上，方便后续使用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@devbox:/root/tanzu <span class="token comment"># tree -sh</span><span class="token builtin class-name">.</span>├── <span class="token punctuation">[</span>  12M<span class="token punctuation">]</span>  govc_Linux_x86_64.tar.gz├── <span class="token punctuation">[</span> 895M<span class="token punctuation">]</span>  photon-3-kube-v1.21.2+vmware.1-tkg.2-12816990095845873721.ova├── <span class="token punctuation">[</span> 225M<span class="token punctuation">]</span>  photon-ova-4.0-c001795b80.ova├── <span class="token punctuation">[</span> 170M<span class="token punctuation">]</span>  tce-linux-amd64-v0.9.1.tar.gz├── <span class="token punctuation">[</span> <span class="token number">9</span>.0G<span class="token punctuation">]</span>  VMware-VCSA-all-7.0.3-18778458.iso└── <span class="token punctuation">[</span> 390M<span class="token punctuation">]</span>  VMware-VMvisor-Installer-7.0U2a-17867351.x86_64.iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>文件</th><th>用途</th><th>下载方式</th></tr></thead><tbody><tr><td><a href="https://customerconnect.vmware.com/downloads/details?downloadGroup=ESXI70U2A&productId=974&rPId=46384">VMware-VMvisor-Installer-7.0U2a-17867351.x86_64.iso</a></td><td>安装 ESXi OS</td><td>VMware 需账户</td></tr><tr><td><a href="https://customerconnect.vmware.com/downloads/details?downloadGroup=VC70U3C&productId=974&rPId=83853">VMware-VCSA-all-7.0.3-19234570.iso</a></td><td>安装 vCenter</td><td>VMware 需账户</td></tr><tr><td><a href="https://packages.vmware.com/photon/4.0/Rev2/ova/photon-ova-4.0-c001795b80.ova">photon-ova-4.0-c001795b80.ova</a></td><td>bootstrap 节点</td><td>VMware</td></tr><tr><td><a href="https://customerconnect.vmware.com/downloads/get-download?downloadGroup=TCE-090">photon-3-kube-v1.21.2+vmware.1-tkg.2-12816990095845873721.ova</a></td><td>tanzu 集群节点</td><td>VMware 需账户</td></tr><tr><td><a href="https://github.com/vmware-tanzu/community-edition/releases/download/v0.9.1/tce-linux-amd64-v0.9.1.tar.gz">tce-linux-amd64-v0.9.1.tar.gz</a></td><td>tanzu 社区版</td><td>GitHub release</td></tr><tr><td><a href="https://github.com/vmware/govmomi/releases/download/v0.27.3/govc_Linux_x86_64.tar.gz">govc_Linux_x86_64.tar.gz</a></td><td>安装&#x2F;配置 vCenter</td><td>GitHub release</td></tr></tbody></table><p>注意 ESXi 和 vCenter 的版本最好是 7.0 及以上，我只在 ESXi 7.0.2 和 vCenter 7.0.3 上测试过，其他版本可能会有些差异；另外 ESXi 的版本不建议使用最新的 7.0.3，因为有比较严重的 bug，官方也建议用户生产环境不要使用该版本了 <a href="https://kb.vmware.com/s/article/86287">vSphere 7.0 Update 3 Critical Known Issues - Workarounds &amp; Fix (86287)</a> 。</p><h3 id="安装-govc-及依赖"><a href="#安装-govc-及依赖" class="headerlink" title="安装 govc 及依赖"></a>安装 govc 及依赖</h3><p>在本地机器上安装好 govc 和 jq，这两个工具后面在配置 vCenter 的时候会用到。</p><ul><li>macOS</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ brew <span class="token function">install</span> govc jq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Debian&#x2F;Ubuntu</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -xf govc_Linux_x86_64.tar.gz -C /usr/local/bin$ <span class="token function">apt</span> <span class="token function">install</span> jq -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>其他 Linux 可以在 govc 和 jq 的 GitHub 上下载对应的安装文件进行安装。</li></ul><h3 id="安装-ESXi-OS"><a href="#安装-ESXi-OS" class="headerlink" title="安装 ESXi OS"></a>安装 ESXi OS</h3><p>ESXi OS 的安装网上有很多教程，没有太多值得讲解的地方，因此就参照一下其他大佬写的博客或者官方的安装文档 <a href="https://docs.vmware.com/cn/VMware-vSphere/7.0/vsphere-esxi-701-installation-setup-guide.pdf">VMware ESXi 安装和设置</a> 来就行；需要注意一点，ESXi OS 安装时 VMFSL 分区将会占用大量的存储空间，这将会使得 ESXi OS 安装所在的磁盘最终创建出来的 datastore 比预期小很多，而且这个 VMFSL 分区在安装好之后就很难再做调整了。因此如果磁盘存储空间比较紧张，在安装 ESXi OS 之前可以考虑下如何去掉这个分区；或者和我一样将 ESXI OS 安装在了一个 16G 的 USB Dom 盘上，不过生产环境不建议采用这种方案 😂（其实个人觉着安装在 U 盘上问题不大，ESXi OS 启动之后是加载到内存中运行的，不会对 U 盘有大量的读写操作，只不过在机房中 U 盘被人不小心拔走就凉了。</p><ul><li>设置 govc 环境变量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ESXi 节点的 IP</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ESXI_IP</span><span class="token operator">=</span><span class="token string">"192.168.18.47"</span><span class="token comment"># ESXi 登录的用户名，初次安装后默认为 root</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_USERNAME</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token comment"># 在 ESXi 安装时设置的 root 密码</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_PASSWORD</span><span class="token operator">=</span><span class="token string">"admin@2022"</span><span class="token comment"># 允许不安全的 SSL 连接</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_INSECURE</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_URL</span><span class="token operator">=</span><span class="token string">"https://<span class="token variable">$&#123;ESXI_IP&#125;</span>"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_DATASTORE</span><span class="token operator">=</span>datastore1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试 govc 是否能正常连接 ESXi 主机</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Name:              localhost.local  Path:            /ha-datacenter/host/localhost/localhost  Manufacturer:    Dell  Logical CPUs:    <span class="token number">20</span> CPUs @ 2394MHz  Processor type:  Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Xeon<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Silver 4210R CPU @ <span class="token number">2</span>.40GHz  CPU usage:       <span class="token number">579</span> MHz <span class="token punctuation">(</span><span class="token number">1.2</span>%<span class="token punctuation">)</span>  Memory:          261765MB  Memory usage:    <span class="token number">16457</span> MB <span class="token punctuation">(</span><span class="token number">6.3</span>%<span class="token punctuation">)</span>  Boot time:       <span class="token number">2022</span>-02-02 <span class="token number">11</span>:53:59.630124 +0000 UTC  State:           connected<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-vCenter"><a href="#安装-vCenter" class="headerlink" title="安装 vCenter"></a>安装 vCenter</h3><p>按照 VMware 官方的 vCenter 安装文档 <a href="https://docs.vmware.com/cn/VMware-vSphere/7.0/com.vmware.vcenter.install.doc/GUID-8DC3866D-5087-40A2-8067-1361A2AF95BD.html">关于 vCenter Server 安装和设置</a> 来安装实在是过于繁琐，其实官方的 ISO 安装方式无非是运行一个 installer web 服务，然后在浏览器上配置好 vCenter 虚拟机的参数，再将填写的配置信息在部署 vcsa 虚拟机的时候注入到 ova 的配置参数中。</p><p>知道这个安装过程的原理之后我们也可以自己配置 vCenter 的参数信息，然后通过 govc 来部署 ova；这比使用 UI 的方式简单方便很多，最终只需要填写一个配置文件，一条命令就可以部署完成啦。</p><ul><li>首先是挂载 vCenter 的 ISO，找到 vcsa ova 文件，它是 vCenter 虚拟机的模版</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mount</span> -o loop VMware-VCSA-all-7.0.3-18778458.iso /mnt$ <span class="token function">ls</span> /mnt/vcsa/VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10.ova/mnt/vcsa/VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10.ova<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>根据自己的环境信息修改下面安装脚本中的相关配置：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token assign-left variable">VCSA_OVA_FILE</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token builtin class-name">set</span> -o errexit<span class="token builtin class-name">set</span> -o nounset<span class="token builtin class-name">set</span> -o pipefail<span class="token comment"># ESXi 的 IP 地址</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ESXI_IP</span><span class="token operator">=</span><span class="token string">"192.168.18.47"</span><span class="token comment"># ESXi 的用户名</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_USERNAME</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token comment"># ESXI 的密码</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_PASSWORD</span><span class="token operator">=</span><span class="token string">"admin@2020"</span><span class="token comment"># 安装 vCenter 虚拟机使用的 datastore 名称</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_DATASTORE</span><span class="token operator">=</span>datastore1<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_INSECURE</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_URL</span><span class="token operator">=</span><span class="token string">"https://<span class="token variable">$&#123;ESXI_IP&#125;</span>"</span><span class="token comment"># vCenter 的登录密码</span><span class="token assign-left variable">VM_PASSWORD</span><span class="token operator">=</span><span class="token string">"admin@2020"</span><span class="token comment"># vCenter 的 IP 地址</span><span class="token assign-left variable">VM_IP</span><span class="token operator">=</span><span class="token number">192.168</span>.20.92<span class="token comment"># vCenter 虚拟机的名称</span><span class="token assign-left variable">VM_NAME</span><span class="token operator">=</span>vCenter-Server-Appliance<span class="token comment"># vCenter 虚拟机使用的网络</span><span class="token assign-left variable">VM_NETWORK</span><span class="token operator">=</span><span class="token string">"VM Network"</span><span class="token comment"># DNS 服务器</span><span class="token assign-left variable">VM_DNS</span><span class="token operator">=</span><span class="token string">"223.6.6.6"</span><span class="token comment"># NTP 服务器</span><span class="token assign-left variable">VM_NTP</span><span class="token operator">=</span><span class="token string">"0.pool.ntp.org"</span><span class="token function-name function">deploy_vcsa_vm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token assign-left variable">config</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>govc host.info -k -json <span class="token operator">|</span> jq -r <span class="token string">'.HostSystems[].Config'</span><span class="token variable">)</span></span>    <span class="token assign-left variable">gateway</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>jq -r <span class="token string">'.Network.IpRouteConfig.DefaultGateway'</span> <span class="token operator">&lt;&lt;&lt;</span><span class="token string">"<span class="token variable">$config</span>"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">route</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>jq -r <span class="token string">'.Network.RouteTableInfo.IpRoute[] | select(.DeviceName == "vmk0") | select(.Gateway == "0.0.0.0")'</span> <span class="token operator">&lt;&lt;&lt;</span><span class="token string">"<span class="token variable">$config</span>"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">prefix</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>jq -r <span class="token string">'.PrefixLength'</span> <span class="token operator">&lt;&lt;&lt;</span><span class="token string">"<span class="token variable">$route</span>"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">opts</span><span class="token operator">=</span><span class="token punctuation">(</span>        cis.vmdir.password<span class="token operator">=</span><span class="token variable">$&#123;VM_PASSWORD&#125;</span>        cis.appliance.root.passwd<span class="token operator">=</span><span class="token variable">$&#123;VM_PASSWORD&#125;</span>        cis.appliance.root.shell<span class="token operator">=</span>/bin/bash        cis.deployment.node.type<span class="token operator">=</span>embedded        cis.vmdir.domain-name<span class="token operator">=</span>vsphere.local        cis.vmdir.site-name<span class="token operator">=</span>VCSA        cis.appliance.net.addr.family<span class="token operator">=</span>ipv4        cis.appliance.ssh.enabled<span class="token operator">=</span>True        cis.ceip_enabled<span class="token operator">=</span>False        cis.deployment.autoconfig<span class="token operator">=</span>True        cis.appliance.net.addr<span class="token operator">=</span><span class="token variable">$&#123;VM_IP&#125;</span>        cis.appliance.net.prefix<span class="token operator">=</span><span class="token variable">$&#123;prefix&#125;</span>        cis.appliance.net.dns.servers<span class="token operator">=</span><span class="token variable">$&#123;VM_DNS&#125;</span>        cis.appliance.net.gateway<span class="token operator">=</span><span class="token variable">$gateway</span>        cis.appliance.ntp.servers<span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;VM_NTP&#125;</span>"</span>        cis.appliance.net.mode<span class="token operator">=</span>static    <span class="token punctuation">)</span>    <span class="token assign-left variable">props</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> -- <span class="token string">"guestinfo.%s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"<span class="token variable">$&#123;opts<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token operator">|</span> jq --slurp -R 'split<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span> <span class="token operator">|</span> map<span class="token punctuation">(</span>select<span class="token punctuation">(</span>. <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token variable">)</span></span> <span class="token operator">|</span> map<span class="token punctuation">(</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">))</span> <span class="token operator">|</span> map<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"Key"</span><span class="token builtin class-name">:</span> .<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>, <span class="token string">"Value"</span><span class="token builtin class-name">:</span> .<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>'<span class="token punctuation">)</span>    <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> govc import.<span class="token variable">$&#123;VCSA_OVA_FILE<span class="token operator">##</span>*.&#125;</span> -options - <span class="token string">"<span class="token variable">$&#123;VCSA_OVA_FILE&#125;</span>"</span></span>    &#123;    "Name": "<span class="token variable">$&#123;VM_NAME&#125;</span>",    "Deployment": "tiny",    "DiskProvisioning": "thin",    "IPProtocol": "IPv4",    "Annotation": "VMware vCenter Server Appliance",    "PowerOn": false,    "WaitForIP": false,    "InjectOvfEnv": true,    "NetworkMapping": [        &#123;        "Name": "Network 1",        "Network": "<span class="token variable">$&#123;VM_NETWORK&#125;</span>"        &#125;    ],    "PropertyMapping": <span class="token variable">$&#123;props&#125;</span>    &#125;EOF</span><span class="token punctuation">&#125;</span>deploy_vcsa_vmgovc vm.change -vm <span class="token string">"<span class="token variable">$&#123;VM_NAME&#125;</span>"</span> -g vmwarePhoton64Guestgovc vm.power -on <span class="token string">"<span class="token variable">$&#123;VM_NAME&#125;</span>"</span>govc vm.ip -a <span class="token string">"<span class="token variable">$&#123;VM_NAME&#125;</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过脚本安装 vCenter，指定第一参数为 OVA 的绝对路径。运行完后将会自动将 ova 导入到 vCenter，并启动虚拟机；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行该脚本，第一个参数传入 vCenter ISO 中 vcsa ova 文件的绝对路径</span>$ <span class="token function">bash</span> install-vcsa.sh /mnt/vcsa/VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10.ova<span class="token punctuation">[</span>03-02-22 <span class="token number">18</span>:40:19<span class="token punctuation">]</span> Uploading VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10-disk1.vmdk<span class="token punctuation">..</span>. OK<span class="token punctuation">[</span>03-02-22 <span class="token number">18</span>:41:09<span class="token punctuation">]</span> Uploading VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10-disk2.vmdk<span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">29</span>%, <span class="token number">52</span>.5MiB/s<span class="token punctuation">)</span><span class="token punctuation">[</span>03-02-22 <span class="token number">18</span>:43:08<span class="token punctuation">]</span> Uploading VMware-vCenter-Server-Appliance-7.0.3.00100-18778458_OVF10-disk2.vmdk<span class="token punctuation">..</span>. OK<span class="token punctuation">[</span>03-02-22 <span class="token number">18</span>:43:08<span class="token punctuation">]</span> Injecting OVF environment<span class="token punctuation">..</span>.Powering on VirtualMachine:3<span class="token punctuation">..</span>. OKfe80::20c:29ff:fe03:2f80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置 vCenter 登录的环境变量，我们使用 govc 来配置 vCenter，通过浏览器 Web UI 的方式配置起来效率有点低，不如 govc 命令一把梭方便 😂</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_URL</span><span class="token operator">=</span><span class="token string">"https://192.168.20.92"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_USERNAME</span><span class="token operator">=</span><span class="token string">"administrator@vsphere.local"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_PASSWORD</span><span class="token operator">=</span><span class="token string">"admin@2022"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_INSECURE</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOVC_DATASTORE</span><span class="token operator">=</span>datastore1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>虚拟机启动后将自动进行 vCenter 的安装配置，等待一段时间 vCenter 安装好之后，使用 govc about 查看 vCenter 的信息，如果能正确或渠道说明 vCenter 就安装好了；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ govc aboutFullName:     VMware vCenter Server <span class="token number">7.0</span>.3 build-18778458Name:         VMware vCenter ServerVendor:       VMware, Inc.Version:      <span class="token number">7.0</span>.3Build:        <span class="token number">18778458</span>OS type:      linux-x64API type:     VirtualCenterAPI version:  <span class="token number">7.0</span>.3.0Product ID:   vpxUUID:         0b49e119-e38f-4fbc-84a8-d7a0e548027d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-vCenter"><a href="#配置-vCenter" class="headerlink" title="配置 vCenter"></a>配置 vCenter</h3><p>这一步骤主要是配置 vCenter：创建 Datacenter、cluster、folder 等资源，并将 ESXi 主机添加到 cluster 中；</p><ul><li>配置 vCenter</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建 Datacenter 数据中心</span>$ govc datacenter.create SH-IDC<span class="token comment"># 创建 Cluster 集群</span>$ govc cluster.create -dc<span class="token operator">=</span>SH-IDC Tanzu-Cluster<span class="token comment"># 将 ESXi 主机添加到 Cluster 当中</span>$ govc cluster.add -dc<span class="token operator">=</span>SH-IDC -cluster<span class="token operator">=</span>Tanzu-Cluster -hostname<span class="token operator">=</span><span class="token number">192.168</span>.18.47 --username<span class="token operator">=</span>root -password<span class="token operator">=</span><span class="token string">'admin@2020'</span> -noverify<span class="token comment"># 创建 folder，用于将 Tanzu 的节点虚拟机存放到该文件夹下</span>$ govc folder.create /SH-IDC/vm/Tanzu-node<span class="token comment"># 导入 tanzu 汲取节点的虚拟机 ova 模版</span>$ govc import.ova -dc<span class="token operator">=</span><span class="token string">'SH-IDC'</span> -ds<span class="token operator">=</span><span class="token string">'datastore1'</span> photon-3-kube-v1.21.2+vmware.1-tkg.2-12816990095845873721.ova<span class="token comment"># 将虚拟机转换为模版，后续 tanzu 集群将以该模版创建虚拟机</span>$ govc vm.markastemplate photon-3-kube-v1.21.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化-bootstrap-节点"><a href="#初始化-bootstrap-节点" class="headerlink" title="初始化 bootstrap 节点"></a>初始化 bootstrap 节点</h3><p>bootstrap 节点节点是用于运行 tanzu 部署工具的节点，官方是支持 Linux&#x2F;macOS&#x2F;Windows 三种操作系统的，但有一些比较严格的要求：</p><table><thead><tr><th>Arch: x86; ARM is currently unsupported</th></tr></thead><tbody><tr><td>RAM: 6 GB</td></tr><tr><td>CPU: 2</td></tr><tr><td><a href="https://docs.docker.com/engine/install/">Docker</a> Add your non-root user account to the docker user group. Create the group if it does not already exist. This lets the Tanzu CLI access the Docker socket, which is owned by the root user. For more information, see steps 1 to 4 in the <a href="https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user">Manage Docker as a non-root user</a> procedure in the Docker documentation.</td></tr><tr><td><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/">Kubectl</a></td></tr><tr><td>Latest version of Chrome, Firefox, Safari, Internet Explorer, or Edge</td></tr><tr><td>System time is synchronized with a Network Time Protocol (NTP) server.</td></tr><tr><td>Ensure your bootstrap machine is using <a href="https://man7.org/linux/man-pages/man7/cgroups.7.html">cgroup v1</a>. For more information, see <a href="https://tanzucommunityedition.io/docs/latest/support-matrix/#check-and-set-the-cgroup">Check and set the cgroup</a>.</td></tr></tbody></table><p>在这里为了避免这些麻烦的配置，我就直接使用的 VMware 官方的 <a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS#photon-os-40-rev2-binaries">Photon OS 4.0 Rev2</a> ，下载 OVA 格式的镜像直接导入到 ESXi 主机启动一台虚拟机即可，能节省不少麻烦的配置；还有一个好处就是在一台单独的虚拟机上运行 tanzu 部署工具不会污染本地的开发环境。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span> https://packages.vmware.com/photon/4.0/Rev2/ova/photon-ova-4.0-c001795b80.ova<span class="token comment"># 导入 OVA 虚拟机模版</span>$ govc import.ova -ds<span class="token operator">=</span><span class="token string">'datastore1'</span> -name bootstrap-node photon-ova-4.0-c001795b80.ova<span class="token comment"># 修改一下虚拟机的配置，调整为 4C8G</span>$ govc vm.change -c <span class="token number">4</span> -m <span class="token number">8192</span> -vm bootstrap-node<span class="token comment"># 开启虚拟机</span>$ govc vm.power -on bootstrap-node<span class="token comment"># 查看虚拟机获取到的 IPv4 地址</span>$ govc vm.ip -a -wait 1m bootstrap-node$ <span class="token function">ssh</span> root@192.168.74.10<span class="token comment"># 密码默认为 changeme，输入完密码之后提示在输入一遍 changeme，然后再修改新的密码</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># cat /etc/os-release</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"VMware Photon OS"</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"4.0"</span><span class="token assign-left variable">ID</span><span class="token operator">=</span>photon<span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token number">4.0</span><span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"VMware Photon OS/Linux"</span><span class="token assign-left variable">ANSI_COLOR</span><span class="token operator">=</span><span class="token string">"1;34"</span><span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">"https://vmware.github.io/photon/"</span><span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">"https://github.com/vmware/photon/issues"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装部署时需要的一些工具（切，Photon OS 里竟然连个 tar 命令都没有 😠</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># tdnf install sudo tar -y</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># curl -LO https://dl.k8s.io/release/v1.21.2/bin/linux/amd64/kubectl</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>启动 docker，bootstrap 节点会以 kind 的方式运行一个 K8s 集群，需要用到 docker。虽然可以使用外部的 k8s 集群，但不是很推荐，因为 cluster-api 依赖 k8s 的版本，不能太高也不能太低；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># systemctl enable docker --now</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>从 <a href="https://github.com/vmware-tanzu/community-edition/releases/tag/v0.9.1">vmware-tanzu&#x2F;community-edition</a> 下载 tanzu 社区版的安装包，然后解压后安装；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># curl -LO  https://github.com/vmware-tanzu/community-edition/releases/download/v0.9.1/tce-linux-amd64-v0.9.1.tar.gz</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># tar -xf tce-linux-amd64-v0.9.1.tar.gz</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># cd tce-linux-amd64-v0.9.1/</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># bash install.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然而不幸地翻车了， install.sh 脚本中禁止 root 用户运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">+ <span class="token assign-left variable">ALLOW_INSTALL_AS_ROOT</span><span class="token operator">=</span>+ <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>+ <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">''</span> <span class="token operator">!=</span> <span class="token punctuation">\</span>t<span class="token punctuation">\</span>r<span class="token punctuation">\</span>u<span class="token punctuation">\</span>e <span class="token punctuation">]</span><span class="token punctuation">]</span>+ <span class="token builtin class-name">echo</span> <span class="token string">'Do not run this script as root'</span>Do not run this script as root+ <span class="token builtin class-name">exit</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我就偏偏要以 root 用户来运行怎么惹 😡</p><p><img data-src="https://p.k8s.li/2022-01-22-deploy-tanzu-k8s-cluster-01.jpg"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sed 去掉第一个 exit 1 就可以了</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># sed -i.bak "s/exit 1//" install.sh</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># bash install.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装好之后会输出 <code>Installation complete!</code>（讲真官方的 install.sh 脚本输出很不友好，污染我的 terminal</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">+ tanzu init<span class="token operator">|</span> initializing ✔  successfully initialized CLI++ tanzu plugin repo list++ <span class="token function">grep</span> tce+ <span class="token assign-left variable">TCE_REPO</span><span class="token operator">=</span>+ <span class="token punctuation">[</span><span class="token punctuation">[</span> -z <span class="token string">''</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>+ tanzu plugin repo <span class="token function">add</span> --name tce --gcp-bucket-name tce-tanzu-cli-plugins --gcp-root-path artifacts++ tanzu plugin repo list++ <span class="token function">grep</span> core-admin+ <span class="token assign-left variable">TCE_REPO</span><span class="token operator">=</span>+ <span class="token punctuation">[</span><span class="token punctuation">[</span> -z <span class="token string">''</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>+ tanzu plugin repo <span class="token function">add</span> --name core-admin --gcp-bucket-name tce-tanzu-cli-framework-admin --gcp-root-path artifacts-admin+ <span class="token builtin class-name">echo</span> <span class="token string">'Installation complete!'</span>Installation complete<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署管理集群"><a href="#部署管理集群" class="headerlink" title="部署管理集群"></a>部署管理集群</h3><p>先是部署一个 tanzu 的管理集群，有两种方式，一种是通过 <a href="https://tanzucommunityedition.io/docs/latest/getting-started/">官方文档</a> 提到的通过 Web UI 的方式。目前这个 UI 界面比较拉垮，它主要是用来让用户填写一些配置参数，然后调用后台的 tanzu 命令来部署集群。并把集群部署的日志和进度展示出来；部署完成之后，这个 UI 又不能管理这些集群，又不支持部署 workload 集群（</p><p>另一种就是通过 tanzu 命令指定配置文件来部署，这种方式不需要通过浏览器在 web 页面上傻乎乎地点来点去填一些参数，只需要提前填写好一个 yaml 格式的配置文件即可。下面我们就采用 tanzu 命令来部署集群，管理集群的配置文件模版如下：</p><ul><li>tanzu-mgt-cluster.yaml</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Cluster Pod IP 的 CIDR</span><span class="token key atrule">CLUSTER_CIDR</span><span class="token punctuation">:</span> 100.96.0.0/11<span class="token comment"># Service 的 CIDR</span><span class="token key atrule">SERVICE_CIDR</span><span class="token punctuation">:</span> 100.64.0.0/13<span class="token comment"># 集群的名称</span><span class="token key atrule">CLUSTER_NAME</span><span class="token punctuation">:</span> tanzu<span class="token punctuation">-</span>control<span class="token punctuation">-</span>plan<span class="token comment"># 集群的类型</span><span class="token key atrule">CLUSTER_PLAN</span><span class="token punctuation">:</span> dev<span class="token comment"># 集群节点的 arch</span><span class="token key atrule">OS_ARCH</span><span class="token punctuation">:</span> amd64<span class="token comment"># 集群节点的 OS 名称</span><span class="token key atrule">OS_NAME</span><span class="token punctuation">:</span> photon<span class="token comment"># 集群节点 OS 版本</span><span class="token key atrule">OS_VERSION</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token comment"># 基础设施资源的提供方</span><span class="token key atrule">INFRASTRUCTURE_PROVIDER</span><span class="token punctuation">:</span> vsphere<span class="token comment"># 集群的 VIP</span><span class="token key atrule">VSPHERE_CONTROL_PLANE_ENDPOINT</span><span class="token punctuation">:</span> 192.168.75.194<span class="token comment"># control-plan 节点的磁盘大小</span><span class="token key atrule">VSPHERE_CONTROL_PLANE_DISK_GIB</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token comment"># control-plan 节点的内存大小</span><span class="token key atrule">VSPHERE_CONTROL_PLANE_MEM_MIB</span><span class="token punctuation">:</span> <span class="token string">"8192"</span><span class="token comment"># control-plan 节点的 CPU 核心数量</span><span class="token key atrule">VSPHERE_CONTROL_PLANE_NUM_CPUS</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token comment"># work 节点的磁盘大小</span><span class="token key atrule">VSPHERE_WORKER_DISK_GIB</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token comment"># work 节点的内存大小</span><span class="token key atrule">VSPHERE_WORKER_MEM_MIB</span><span class="token punctuation">:</span> <span class="token string">"4096"</span><span class="token comment"># work 节点的 CPU 核心数量</span><span class="token key atrule">VSPHERE_WORKER_NUM_CPUS</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token comment"># vCenter 的 Datacenter 路径</span><span class="token key atrule">VSPHERE_DATACENTER</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC<span class="token comment"># 虚拟机创建的 Datastore 路径</span><span class="token key atrule">VSPHERE_DATASTORE</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC/datastore/datastore1<span class="token comment"># 虚拟机创建的文件夹</span><span class="token key atrule">VSPHERE_FOLDER</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC/vm/Tanzu<span class="token punctuation">-</span>node<span class="token comment"># 虚拟机使用的网络</span><span class="token key atrule">VSPHERE_NETWORK</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC/network/VM Network<span class="token comment"># 虚拟机关联的资源池</span><span class="token key atrule">VSPHERE_RESOURCE_POOL</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC/host/Tanzu<span class="token punctuation">-</span>Cluster/Resources<span class="token comment"># vCenter 的 IP</span><span class="token key atrule">VSPHERE_SERVER</span><span class="token punctuation">:</span> 192.168.75.110<span class="token comment"># vCenter 的用户名</span><span class="token key atrule">VSPHERE_USERNAME</span><span class="token punctuation">:</span> administrator@vsphere.local<span class="token comment"># vCenter 的密码，以 base64 编码</span><span class="token key atrule">VSPHERE_PASSWORD</span><span class="token punctuation">:</span> &lt;encoded<span class="token punctuation">:</span>base64password<span class="token punctuation">></span><span class="token comment"># vCenter 的证书指纹，可以通过 govc about.cert -json | jq -r '.ThumbprintSHA1' 获取</span><span class="token key atrule">VSPHERE_TLS_THUMBPRINT</span><span class="token punctuation">:</span> EB<span class="token punctuation">:</span>F3<span class="token punctuation">:</span>D8<span class="token punctuation">:</span>7A<span class="token punctuation">:</span>E8<span class="token punctuation">:</span>3D<span class="token punctuation">:</span>1A<span class="token punctuation">:</span>59<span class="token punctuation">:</span>B0<span class="token punctuation">:</span>DE<span class="token punctuation">:</span>73<span class="token punctuation">:</span>96<span class="token punctuation">:</span>DC<span class="token punctuation">:</span>B9<span class="token punctuation">:</span>5F<span class="token punctuation">:</span>13<span class="token punctuation">:</span>86<span class="token punctuation">:</span>EF<span class="token punctuation">:</span>B6<span class="token punctuation">:</span><span class="token number">27</span><span class="token comment"># 虚拟机注入的 ssh 公钥，需要用它来 ssh 登录集群节点</span><span class="token key atrule">VSPHERE_SSH_AUTHORIZED_KEY</span><span class="token punctuation">:</span> ssh<span class="token punctuation">-</span>rsa<span class="token comment"># 一些默认参数</span><span class="token key atrule">AVI_ENABLE</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token key atrule">IDENTITY_MANAGEMENT_TYPE</span><span class="token punctuation">:</span> none<span class="token key atrule">ENABLE_AUDIT_LOGGING</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token key atrule">ENABLE_CEIP_PARTICIPATION</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token key atrule">TKG_HTTP_PROXY_ENABLED</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token key atrule">DEPLOY_TKG_ON_VSPHERE7</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过 tanzu CLI 部署管理集群</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tanzu management-cluster create --file tanzu-mgt-cluster.yaml -v6<span class="token comment"># 如果没有配置 VSPHERE_TLS_THUMBPRINT 会有一个确认 vSphere thumbprint 的交互，输入 Y 就可以</span>Validating the pre-requisites<span class="token punctuation">..</span>.Do you want to <span class="token builtin class-name">continue</span> with the vSphere thumbprint EB:F3:D8:7A:E8:3D:1A:59:B0:DE:73:96:DC:B9:5F:13:86:EF:B6:27 <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span>: y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署日志"><a href="#部署日志" class="headerlink" title="部署日志"></a>部署日志</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># tanzu management-cluster create --file tanzu-mgt-cluster.yaml -v 6</span>compatibility <span class="token function">file</span> <span class="token punctuation">(</span>/root/.config/tanzu/tkg/compatibility/tkg-compatibility.yaml<span class="token punctuation">)</span> already exists, skipping downloadBOM files inside /root/.config/tanzu/tkg/bom already exists, skipping downloadCEIP Opt-in status: <span class="token boolean">false</span>Validating the pre-requisites<span class="token punctuation">..</span>.vSphere <span class="token number">7.0</span> Environment Detected.You have connected to a vSphere <span class="token number">7.0</span> environment <span class="token function">which</span> does not have vSphere with Tanzu enabled. vSphere with Tanzu includesan integrated Tanzu Kubernetes Grid Service <span class="token function">which</span> turns a vSphere cluster into a platform <span class="token keyword">for</span> running Kubernetes workloads <span class="token keyword">in</span> dedicatedresource pools. Configuring Tanzu Kubernetes Grid Service is <span class="token keyword">done</span> through vSphere HTML5 client.Tanzu Kubernetes Grid Service is the preferred way to consume Tanzu Kubernetes Grid <span class="token keyword">in</span> vSphere <span class="token number">7.0</span> environments. Alternatively you maydeploy a non-integrated Tanzu Kubernetes Grid instance on vSphere <span class="token number">7.0</span>.Deploying TKG management cluster on vSphere <span class="token number">7.0</span> <span class="token punctuation">..</span>.Identity Provider not configured. Some authentication features won<span class="token string">'t work.Checking if VSPHERE_CONTROL_PLANE_ENDPOINT 192.168.20.94 is already in useSetting up management cluster...Validating configuration...Using infrastructure provider vsphere:v0.7.10Generating cluster configuration...Setting up bootstrapper...Fetching configuration for kind node image...kindConfig: &amp;&#123;&#123;Cluster kind.x-k8s.io/v1alpha4&#125;  [&#123;  map[] [&#123;/var/run/docker.sock /var/run/docker.sock false false &#125;] [] [] []&#125;] &#123; 0  100.96.0.0/11 100.64.0.0/13 false &#125; map[] map[] [apiVersion: kubeadm.k8s.io/v1beta2kind: ClusterConfigurationimageRepository: projects.registry.vmware.com/tkgetcd:  local:    imageRepository: projects.registry.vmware.com/tkg    imageTag: v3.4.13_vmware.15dns:  type: CoreDNS  imageRepository: projects.registry.vmware.com/tkg  imageTag: v1.8.0_vmware.5] [] [] []&#125;Creating kind cluster: tkg-kind-c7vj6kds0a6sf43e6210Creating cluster "tkg-kind-c7vj6kds0a6sf43e6210" ...Ensuring node image (projects.registry.vmware.com/tkg/kind/node:v1.21.2_vmware.1) ...Pulling image: projects.registry.vmware.com/tkg/kind/node:v1.21.2_vmware.1 ...Preparing nodes ...Writing configuration ...Starting control-plane ...Installing CNI ...Installing StorageClass ...Waiting 2m0s for control-plane = Ready ...Ready after 19sBootstrapper created. Kubeconfig: /root/.kube-tkg/tmp/config_3fkzTCOLInstalling providers on bootstrapper...Fetching providersInstalling cert-manager Version="v1.1.0"Waiting for cert-manager to be available...Installing Provider="cluster-api" Version="v0.3.23" TargetNamespace="capi-system"Installing Provider="bootstrap-kubeadm" Version="v0.3.23" TargetNamespace="capi-kubeadm-bootstrap-system"Installing Provider="control-plane-kubeadm" Version="v0.3.23" TargetNamespace="capi-kubeadm-control-plane-system"Installing Provider="infrastructure-vsphere" Version="v0.7.10" TargetNamespace="capv-system"installed  Component=="cluster-api"  Type=="CoreProvider"  Version=="v0.3.23"installed  Component=="kubeadm"  Type=="BootstrapProvider"  Version=="v0.3.23"installed  Component=="kubeadm"  Type=="ControlPlaneProvider"  Version=="v0.3.23"installed  Component=="vsphere"  Type=="InfrastructureProvider"  Version=="v0.7.10"Waiting for provider infrastructure-vsphereWaiting for provider control-plane-kubeadmWaiting for provider cluster-apiWaiting for provider bootstrap-kubeadmWaiting for resource capi-kubeadm-control-plane-controller-manager of type *v1.Deployment to be up and runningpods are not yet running for deployment '</span>capi-kubeadm-control-plane-controller-manager<span class="token string">' in namespace '</span>capi-kubeadm-control-plane-system<span class="token string">', retryingPassed waiting on provider bootstrap-kubeadm after 25.205820854spods are not yet running for deployment '</span>capi-controller-manager<span class="token string">' in namespace '</span>capi-webhook-system<span class="token string">', retryingPassed waiting on provider infrastructure-vsphere after 30.185406332sPassed waiting on provider cluster-api after 30.213216243sSuccess waiting on all providers.Start creating management cluster...patch cluster object with operation status:&#123;"metadata": &#123;"annotations": &#123;"TKGOperationInfo" : "&#123;\"Operation\":\"Create\",\"OperationStartTimestamp\":\"2022-02-06 02:35:34.30219421 +0000 UTC\",\"OperationTimeout\":1800&#125;","TKGOperationLastObservedTimestamp" : "2022-02-06 02:35:34.30219421 +0000 UTC"&#125;&#125;&#125;cluster control plane is still being initialized, retryingGetting secret for clusterWaiting for resource tanzu-control-plan-kubeconfig of type *v1.Secret to be up and runningSaving management cluster kubeconfig into /root/.kube/configInstalling providers on management cluster...Fetching providersInstalling cert-manager Version="v1.1.0"Waiting for cert-manager to be available...Installing Provider="cluster-api" Version="v0.3.23" TargetNamespace="capi-system"Installing Provider="bootstrap-kubeadm" Version="v0.3.23" TargetNamespace="capi-kubeadm-bootstrap-system"Installing Provider="control-plane-kubeadm" Version="v0.3.23" TargetNamespace="capi-kubeadm-control-plane-system"Installing Provider="infrastructure-vsphere" Version="v0.7.10" TargetNamespace="capv-system"installed  Component=="cluster-api"  Type=="CoreProvider"  Version=="v0.3.23"installed  Component=="kubeadm"  Type=="BootstrapProvider"  Version=="v0.3.23"installed  Component=="kubeadm"  Type=="ControlPlaneProvider"  Version=="v0.3.23"installed  Component=="vsphere"  Type=="InfrastructureProvider"  Version=="v0.7.10"Waiting for provider control-plane-kubeadmWaiting for provider bootstrap-kubeadmWaiting for provider infrastructure-vsphereWaiting for provider cluster-apiWaiting for resource capi-kubeadm-control-plane-controller-manager of type *v1.Deployment to be up and runningPassed waiting on provider control-plane-kubeadm after 10.046865402sWaiting for resource antrea-controller of type *v1.Deployment to be up and runningMoving all Cluster API objects from bootstrap cluster to management cluster...Performing move...Discovering Cluster API objectsMoving Cluster API objects Clusters=1Creating objects in the target clusterDeleting objects from the source clusterWaiting for additional components to be up and running...Waiting for packages to be up and running...Waiting for package: antreaWaiting for package: metrics-serverWaiting for package: tanzu-addons-managerWaiting for package: vsphere-cpiWaiting for package: vsphere-csiWaiting for resource antrea of type *v1alpha1.PackageInstall to be up and runningWaiting for resource vsphere-cpi of type *v1alpha1.PackageInstall to be up and runningWaiting for resource vsphere-csi of type *v1alpha1.PackageInstall to be up and runningWaiting for resource metrics-server of type *v1alpha1.PackageInstall to be up and runningWaiting for resource tanzu-addons-manager of type *v1alpha1.PackageInstall to be up and runningSuccessfully reconciled package: antreaSuccessfully reconciled package: vsphere-csiSuccessfully reconciled package: metrics-serverContext set for management cluster tanzu-control-plan as '</span>tanzu-control-plan-admin@tanzu-control-plan'.Deleting kind cluster: tkg-kind-c7vj6kds0a6sf43e6210Management cluster created<span class="token operator">!</span>You can now create your first workload cluster by running the following:  tanzu cluster create <span class="token punctuation">[</span>name<span class="token punctuation">]</span> -f <span class="token punctuation">[</span>file<span class="token punctuation">]</span>Some addons might be getting installed<span class="token operator">!</span> Check their status by running the following:  kubectl get apps -A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>部署完成之后，将管理集群的 kubeconfig 文件复制到 kubectl 默认的目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># cp $&#123;HOME&#125;/.kube-tkg/config $&#123;HOME&#125;/.kube/config</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看集群状态信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 管理集群的 cluster 资源信息，管理集群的 CR 默认保存在了 tkg-system namespace 下</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># kubectl get cluster -A</span>NAMESPACE    NAME                 PHASEtkg-system   tanzu-control-plan   Provisioned<span class="token comment"># 管理集群的 machine 资源信息</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># kubectl get machine -A</span>NAMESPACE    NAME                                       PROVIDERID                                       PHASE         VERSIONtkg-system   tanzu-control-plan-control-plane-gs4bl     vsphere://4239c450-f621-d78e-3c44-4ac8890c0cd3   Running       v1.21.2+vmware.1tkg-system   tanzu-control-plan-md-0-7cdc97c7c6-kxcnx   vsphere://4239d776-c04c-aacc-db12-3380542a6d03   Provisioned   v1.21.2+vmware.1<span class="token comment"># 运行的组件状态</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># kubectl get pod -A</span>NAMESPACE                           NAME                                                             READY   STATUS    RESTARTS   AGEcapi-kubeadm-bootstrap-system       capi-kubeadm-bootstrap-controller-manager-6494884869-wlzhx       <span class="token number">2</span>/2     Running   <span class="token number">0</span>          8m37scapi-kubeadm-control-plane-system   capi-kubeadm-control-plane-controller-manager-857d687b9d-tpznv   <span class="token number">2</span>/2     Running   <span class="token number">0</span>          8m35scapi-system                         capi-controller-manager-778bd4dfb9-tkvwg                         <span class="token number">2</span>/2     Running   <span class="token number">0</span>          8m41scapi-webhook-system                 capi-controller-manager-9995bdc94-svjm2                          <span class="token number">2</span>/2     Running   <span class="token number">0</span>          8m41scapi-webhook-system                 capi-kubeadm-bootstrap-controller-manager-68845b65f8-sllgv       <span class="token number">2</span>/2     Running   <span class="token number">0</span>          8m38scapi-webhook-system                 capi-kubeadm-control-plane-controller-manager-9847c6747-vvz6g    <span class="token number">2</span>/2     Running   <span class="token number">0</span>          8m35scapi-webhook-system                 capv-controller-manager-55bf67fbd5-4t46v                         <span class="token number">2</span>/2     Running   <span class="token number">0</span>          8m31scapv-system                         capv-controller-manager-587fbf697f-bbzs9                         <span class="token number">2</span>/2     Running   <span class="token number">0</span>          8m31scert-manager                        cert-manager-77f6fb8fd5-8tq6n                                    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          11mcert-manager                        cert-manager-cainjector-6bd4cff7bb-6vlzx                         <span class="token number">1</span>/1     Running   <span class="token number">0</span>          11mcert-manager                        cert-manager-webhook-fbfcb9d6c-qpkbc                             <span class="token number">1</span>/1     Running   <span class="token number">0</span>          11mkube-system                         antrea-agent-5m9d4                                               <span class="token number">2</span>/2     Running   <span class="token number">0</span>          6mkube-system                         antrea-agent-8mpr7                                               <span class="token number">2</span>/2     Running   <span class="token number">0</span>          5m40skube-system                         antrea-controller-5bbcb98667-hklss                               <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m50skube-system                         coredns-8dcb5c56b-ckvb7                                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          12mkube-system                         coredns-8dcb5c56b-d98hf                                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          12mkube-system                         etcd-tanzu-control-plan-control-plane-gs4bl                      <span class="token number">1</span>/1     Running   <span class="token number">0</span>          12mkube-system                         kube-apiserver-tanzu-control-plan-control-plane-gs4bl            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          12mkube-system                         kube-controller-manager-tanzu-control-plan-control-plane-gs4bl   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          12mkube-system                         kube-proxy-d4wq4                                                 <span class="token number">1</span>/1     Running   <span class="token number">0</span>          12mkube-system                         kube-proxy-nhkgg                                                 <span class="token number">1</span>/1     Running   <span class="token number">0</span>          11mkube-system                         kube-scheduler-tanzu-control-plan-control-plane-gs4bl            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          12mkube-system                         kube-vip-tanzu-control-plan-control-plane-gs4bl                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>          12mkube-system                         metrics-server-59fcb9fcf-xjznj                                   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6m29skube-system                         vsphere-cloud-controller-manager-kzffm                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5m50skube-system                         vsphere-csi-controller-74675c9488-q9h5c                          <span class="token number">6</span>/6     Running   <span class="token number">0</span>          6m31skube-system                         vsphere-csi-node-dmvvr                                           <span class="token number">3</span>/3     Running   <span class="token number">0</span>          6m31skube-system                         vsphere-csi-node-k6x98                                           <span class="token number">3</span>/3     Running   <span class="token number">0</span>          6m31stkg-system                          kapp-controller-6499b8866-xnql7                                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>          10mtkg-system                          tanzu-addons-controller-manager-657c587556-rpbjm                 <span class="token number">1</span>/1     Running   <span class="token number">0</span>          7m58stkg-system                          tanzu-capabilities-controller-manager-6ff97656b8-cq7m7           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          11mtkr-system                          tkr-controller-manager-6bc455b5d4-wm98s                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          10m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署流程-1"><a href="#部署流程-1" class="headerlink" title="部署流程"></a>部署流程</h3><p>结合 <a href="https://github.com/vmware-tanzu/tanzu-framework/blob/main/pkg/v1/tkg/client/init.go">tanzu 的源码</a> 和部署输出的日志我们大体可以得知，tanzu 管理集群部署大致分为如下几步：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// https://github.com/vmware-tanzu/tanzu-framework/blob/main/pkg/v1/tkg/client/init.go</span><span class="token comment">// management cluster init step constants</span><span class="token keyword">const</span> <span class="token punctuation">(</span>StepConfigPrerequisite                 <span class="token operator">=</span> <span class="token string">"Configure prerequisite"</span>StepValidateConfiguration              <span class="token operator">=</span> <span class="token string">"Validate configuration"</span>StepGenerateClusterConfiguration       <span class="token operator">=</span> <span class="token string">"Generate cluster configuration"</span>StepSetupBootstrapCluster              <span class="token operator">=</span> <span class="token string">"Setup bootstrap cluster"</span>StepInstallProvidersOnBootstrapCluster <span class="token operator">=</span> <span class="token string">"Install providers on bootstrap cluster"</span>StepCreateManagementCluster            <span class="token operator">=</span> <span class="token string">"Create management cluster"</span>StepInstallProvidersOnRegionalCluster  <span class="token operator">=</span> <span class="token string">"Install providers on management cluster"</span>StepMoveClusterAPIObjects              <span class="token operator">=</span> <span class="token string">"Move cluster-api objects from bootstrap cluster to management cluster"</span><span class="token punctuation">)</span><span class="token comment">// InitRegionSteps management cluster init step sequence</span><span class="token keyword">var</span> InitRegionSteps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>StepConfigPrerequisite<span class="token punctuation">,</span>StepValidateConfiguration<span class="token punctuation">,</span>StepGenerateClusterConfiguration<span class="token punctuation">,</span>StepSetupBootstrapCluster<span class="token punctuation">,</span>StepInstallProvidersOnBootstrapCluster<span class="token punctuation">,</span>StepCreateManagementCluster<span class="token punctuation">,</span>StepInstallProvidersOnRegionalCluster<span class="token punctuation">,</span>StepMoveClusterAPIObjects<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ConfigPrerequisite 准备阶段，会下载 <code>tkg-compatibility</code> 和 <code>tkg-bom</code> 镜像，用于检查环境的兼容性；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Downloading TKG compatibility <span class="token function">file</span> from <span class="token string">'projects.registry.vmware.com/tkg/framework-zshippable/tkg-compatibility'</span>Downloading the TKG Bill of Materials <span class="token punctuation">(</span>BOM<span class="token punctuation">)</span> <span class="token function">file</span> from <span class="token string">'projects.registry.vmware.com/tkg/tkg-bom:v1.4.0'</span>Downloading the TKr Bill of Materials <span class="token punctuation">(</span>BOM<span class="token punctuation">)</span> <span class="token function">file</span> from <span class="token string">'projects.registry.vmware.com/tkg/tkr-bom:v1.21.2_vmware.1-tkg.1'</span>ERROR <span class="token number">2022</span>/02/06 02:24:46 svType <span class="token operator">!=</span> tvType<span class="token punctuation">;</span> <span class="token assign-left variable">key</span><span class="token operator">=</span>release, <span class="token assign-left variable">st</span><span class="token operator">=</span>map<span class="token punctuation">[</span>string<span class="token punctuation">]</span>interface <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>, <span class="token assign-left variable">tt</span><span class="token operator">=</span><span class="token operator">&lt;</span>nil<span class="token operator">></span>, <span class="token assign-left variable">sv</span><span class="token operator">=</span>map<span class="token punctuation">[</span>version:<span class="token punctuation">]</span>, <span class="token assign-left variable">tv</span><span class="token operator">=</span><span class="token operator">&lt;</span>nil<span class="token operator">></span>CEIP Opt-in status: <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ValidateConfiguration 配置文件校验，根据填写的参数校验配置是否正确，以及检查 vCenter 当中有无匹配的虚拟机模版；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Validating the pre-requisites<span class="token punctuation">..</span>.vSphere <span class="token number">7.0</span> Environment Detected.You have connected to a vSphere <span class="token number">7.0</span> environment <span class="token function">which</span> does not have vSphere with Tanzu enabled. vSphere with Tanzu includesan integrated Tanzu Kubernetes Grid Service <span class="token function">which</span> turns a vSphere cluster into a platform <span class="token keyword">for</span> running Kubernetes workloads <span class="token keyword">in</span> dedicatedresource pools. Configuring Tanzu Kubernetes Grid Service is <span class="token keyword">done</span> through vSphere HTML5 client.Tanzu Kubernetes Grid Service is the preferred way to consume Tanzu Kubernetes Grid <span class="token keyword">in</span> vSphere <span class="token number">7.0</span> environments. Alternatively you maydeploy a non-integrated Tanzu Kubernetes Grid instance on vSphere <span class="token number">7.0</span>.Deploying TKG management cluster on vSphere <span class="token number">7.0</span> <span class="token punctuation">..</span>.Identity Provider not configured. Some authentication features won't work.Checking <span class="token keyword">if</span> VSPHERE_CONTROL_PLANE_ENDPOINT <span class="token number">192.168</span>.20.94 is already <span class="token keyword">in</span> useSetting up management cluster<span class="token punctuation">..</span>.Validating configuration<span class="token punctuation">..</span>.Using infrastructure provider vsphere:v0.7.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>GenerateClusterConfiguration 生成集群配置文件信息；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Generating cluster configuration<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>SetupBootstrapCluster 设置 bootstrap 集群，目前默认为 kind。会运行一个 docker 容器，里面套娃运行着一个 k8s 集群；这个 bootstrap k8s 集群只是临时运行 cluster-api 来部署管理集群用的，部署完成之后 bootstrap 集群也就没用了，会自动删掉；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Setting up bootstrapper<span class="token punctuation">..</span>.Fetching configuration <span class="token keyword">for</span> kind <span class="token function">node</span> image<span class="token punctuation">..</span>.kindConfig: <span class="token operator">&amp;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>Cluster kind.x-k8s.io/v1alpha4<span class="token punctuation">&#125;</span>  <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>  map<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>/var/run/docker.sock /var/run/docker.sock <span class="token boolean">false</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span>  <span class="token number">100.96</span>.0.0/11 <span class="token number">100.64</span>.0.0/13 <span class="token boolean">false</span> <span class="token punctuation">&#125;</span> map<span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>apiVersion: kubeadm.k8s.io/v1beta2kind: ClusterConfigurationimageRepository: projects.registry.vmware.com/tkgetcd:  local:    imageRepository: projects.registry.vmware.com/tkg    imageTag: v3.4.13_vmware.15dns:  type: CoreDNS  imageRepository: projects.registry.vmware.com/tkg  imageTag: v1.8.0_vmware.5<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>Creating kind cluster: tkg-kind-c7vj6kds0a6sf43e6210Creating cluster <span class="token string">"tkg-kind-c7vj6kds0a6sf43e6210"</span> <span class="token punctuation">..</span>.Ensuring <span class="token function">node</span> image <span class="token punctuation">(</span>projects.registry.vmware.com/tkg/kind/node:v1.21.2_vmware.1<span class="token punctuation">)</span> <span class="token punctuation">..</span>.Pulling image: projects.registry.vmware.com/tkg/kind/node:v1.21.2_vmware.1 <span class="token punctuation">..</span>.Preparing nodes <span class="token punctuation">..</span>.Writing configuration <span class="token punctuation">..</span>.Starting control-plane <span class="token punctuation">..</span>.Installing CNI <span class="token punctuation">..</span>.Installing StorageClass <span class="token punctuation">..</span>.Waiting 2m0s <span class="token keyword">for</span> control-plane <span class="token operator">=</span> Ready <span class="token punctuation">..</span>.Ready after 19sBootstrapper created. Kubeconfig: /root/.kube-tkg/tmp/config_3fkzTCOL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>InstallProvidersOnBootstrapCluster 在 bootstrap 集群上安装 cluste-api 相关组件；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Installing providers on bootstrapper<span class="token punctuation">..</span>.Fetching providers<span class="token comment"># 安装 cert-manager 主要是为了生成 k8s 集群部署所依赖的那一堆证书</span>Installing cert-manager <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v1.1.0"</span>Waiting <span class="token keyword">for</span> cert-manager to be available<span class="token punctuation">..</span>.Installing <span class="token assign-left variable">Provider</span><span class="token operator">=</span><span class="token string">"cluster-api"</span> <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v0.3.23"</span> <span class="token assign-left variable">TargetNamespace</span><span class="token operator">=</span><span class="token string">"capi-system"</span>Installing <span class="token assign-left variable">Provider</span><span class="token operator">=</span><span class="token string">"bootstrap-kubeadm"</span> <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v0.3.23"</span> <span class="token assign-left variable">TargetNamespace</span><span class="token operator">=</span><span class="token string">"capi-kubeadm-bootstrap-system"</span>Installing <span class="token assign-left variable">Provider</span><span class="token operator">=</span><span class="token string">"control-plane-kubeadm"</span> <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v0.3.23"</span> <span class="token assign-left variable">TargetNamespace</span><span class="token operator">=</span><span class="token string">"capi-kubeadm-control-plane-system"</span>Installing <span class="token assign-left variable">Provider</span><span class="token operator">=</span><span class="token string">"infrastructure-vsphere"</span> <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v0.7.10"</span> <span class="token assign-left variable">TargetNamespace</span><span class="token operator">=</span><span class="token string">"capv-system"</span>installed  <span class="token assign-left variable">Component</span><span class="token operator">==</span><span class="token string">"cluster-api"</span>  <span class="token assign-left variable">Type</span><span class="token operator">==</span><span class="token string">"CoreProvider"</span>  <span class="token assign-left variable">Version</span><span class="token operator">==</span><span class="token string">"v0.3.23"</span>installed  <span class="token assign-left variable">Component</span><span class="token operator">==</span><span class="token string">"kubeadm"</span>  <span class="token assign-left variable">Type</span><span class="token operator">==</span><span class="token string">"BootstrapProvider"</span>  <span class="token assign-left variable">Version</span><span class="token operator">==</span><span class="token string">"v0.3.23"</span>installed  <span class="token assign-left variable">Component</span><span class="token operator">==</span><span class="token string">"kubeadm"</span>  <span class="token assign-left variable">Type</span><span class="token operator">==</span><span class="token string">"ControlPlaneProvider"</span>  <span class="token assign-left variable">Version</span><span class="token operator">==</span><span class="token string">"v0.3.23"</span>installed  <span class="token assign-left variable">Component</span><span class="token operator">==</span><span class="token string">"vsphere"</span>  <span class="token assign-left variable">Type</span><span class="token operator">==</span><span class="token string">"InfrastructureProvider"</span>  <span class="token assign-left variable">Version</span><span class="token operator">==</span><span class="token string">"v0.7.10"</span>Waiting <span class="token keyword">for</span> provider infrastructure-vsphereWaiting <span class="token keyword">for</span> provider control-plane-kubeadmWaiting <span class="token keyword">for</span> provider cluster-apiWaiting <span class="token keyword">for</span> provider bootstrap-kubeadmPassed waiting on provider infrastructure-vsphere after <span class="token number">30</span>.185406332sPassed waiting on provider cluster-api after <span class="token number">30</span>.213216243sSuccess waiting on all providers.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CreateManagementCluster 创建管理集群，这一步主要是创建虚拟机、初始化节点、运行 kubeadm 部署 k8s 集群；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Start creating management cluster<span class="token punctuation">..</span>.patch cluster object with operation status:<span class="token punctuation">&#123;</span><span class="token string">"metadata"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"annotations"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token string">"TKGOperationInfo"</span> <span class="token builtin class-name">:</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>Operation<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>Create<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>OperationStartTimestamp<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>2022-02-06 02:35:34.30219421 +0000 UTC<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>OperationTimeout<span class="token entity" title="\&quot;">\"</span>:1800&#125;"</span>,<span class="token string">"TKGOperationLastObservedTimestamp"</span> <span class="token builtin class-name">:</span> <span class="token string">"2022-02-06 02:35:34.30219421 +0000 UTC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cluster control plane is still being initialized, retryingGetting secret <span class="token keyword">for</span> clusterWaiting <span class="token keyword">for</span> resource tanzu-control-plan-kubeconfig of <span class="token builtin class-name">type</span> *v1.Secret to be up and runningSaving management cluster kubeconfig into /root/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>InstallProvidersOnRegionalCluster 在管理集群上安装 cluster-api 相关组件；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Installing providers on management cluster<span class="token punctuation">..</span>.Fetching providersInstalling cert-manager <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v1.1.0"</span>Waiting <span class="token keyword">for</span> cert-manager to be available<span class="token punctuation">..</span>.Installing <span class="token assign-left variable">Provider</span><span class="token operator">=</span><span class="token string">"cluster-api"</span> <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v0.3.23"</span> <span class="token assign-left variable">TargetNamespace</span><span class="token operator">=</span><span class="token string">"capi-system"</span>Installing <span class="token assign-left variable">Provider</span><span class="token operator">=</span><span class="token string">"bootstrap-kubeadm"</span> <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v0.3.23"</span> <span class="token assign-left variable">TargetNamespace</span><span class="token operator">=</span><span class="token string">"capi-kubeadm-bootstrap-system"</span>Installing <span class="token assign-left variable">Provider</span><span class="token operator">=</span><span class="token string">"control-plane-kubeadm"</span> <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v0.3.23"</span> <span class="token assign-left variable">TargetNamespace</span><span class="token operator">=</span><span class="token string">"capi-kubeadm-control-plane-system"</span>Installing <span class="token assign-left variable">Provider</span><span class="token operator">=</span><span class="token string">"infrastructure-vsphere"</span> <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">"v0.7.10"</span> <span class="token assign-left variable">TargetNamespace</span><span class="token operator">=</span><span class="token string">"capv-system"</span>installed  <span class="token assign-left variable">Component</span><span class="token operator">==</span><span class="token string">"cluster-api"</span>  <span class="token assign-left variable">Type</span><span class="token operator">==</span><span class="token string">"CoreProvider"</span>  <span class="token assign-left variable">Version</span><span class="token operator">==</span><span class="token string">"v0.3.23"</span>installed  <span class="token assign-left variable">Component</span><span class="token operator">==</span><span class="token string">"kubeadm"</span>  <span class="token assign-left variable">Type</span><span class="token operator">==</span><span class="token string">"BootstrapProvider"</span>  <span class="token assign-left variable">Version</span><span class="token operator">==</span><span class="token string">"v0.3.23"</span>installed  <span class="token assign-left variable">Component</span><span class="token operator">==</span><span class="token string">"kubeadm"</span>  <span class="token assign-left variable">Type</span><span class="token operator">==</span><span class="token string">"ControlPlaneProvider"</span>  <span class="token assign-left variable">Version</span><span class="token operator">==</span><span class="token string">"v0.3.23"</span>installed  <span class="token assign-left variable">Component</span><span class="token operator">==</span><span class="token string">"vsphere"</span>  <span class="token assign-left variable">Type</span><span class="token operator">==</span><span class="token string">"InfrastructureProvider"</span>  <span class="token assign-left variable">Version</span><span class="token operator">==</span><span class="token string">"v0.7.10"</span>Waiting <span class="token keyword">for</span> provider control-plane-kubeadmWaiting <span class="token keyword">for</span> provider bootstrap-kubeadmWaiting <span class="token keyword">for</span> provider infrastructure-vsphereWaiting <span class="token keyword">for</span> provider cluster-apiWaiting <span class="token keyword">for</span> resource capv-controller-manager of <span class="token builtin class-name">type</span> *v1.Deployment to be up and runningPassed waiting on provider infrastructure-vsphere after <span class="token number">20</span>.091935635sPassed waiting on provider cluster-api after <span class="token number">20</span>.109419304sSuccess waiting on all providers.Waiting <span class="token keyword">for</span> the management cluster to get ready <span class="token keyword">for</span> move<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> resource tanzu-control-plan of <span class="token builtin class-name">type</span> *v1alpha3.Cluster to be up and runningWaiting <span class="token keyword">for</span> resources <span class="token builtin class-name">type</span> *v1alpha3.MachineDeploymentList to be up and runningWaiting <span class="token keyword">for</span> resources <span class="token builtin class-name">type</span> *v1alpha3.MachineList to be up and runningWaiting <span class="token keyword">for</span> addons installation<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> resources <span class="token builtin class-name">type</span> *v1alpha3.ClusterResourceSetList to be up and runningWaiting <span class="token keyword">for</span> resource antrea-controller of <span class="token builtin class-name">type</span> *v1.Deployment to be up and running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>MoveClusterAPIObjects 将 bootstrap 集群上 cluster-api 相关的资源转移到管理集群上。这一步的目的是为了达到 self-hosted 自托管的功能：即管理集群自身的扩缩容也是通过 cluster-api 来完成，这样就不用再依赖先前的那个 bootstrap 集群了；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Moving all Cluster API objects from bootstrap cluster to management cluster<span class="token punctuation">..</span>.Performing move<span class="token punctuation">..</span>.Discovering Cluster API objectsMoving Cluster API objects <span class="token assign-left variable">Clusters</span><span class="token operator">=</span><span class="token number">1</span>Creating objects <span class="token keyword">in</span> the target clusterDeleting objects from the <span class="token builtin class-name">source</span> clusterContext <span class="token builtin class-name">set</span> <span class="token keyword">for</span> management cluster tanzu-control-plan as <span class="token string">'tanzu-control-plan-admin@tanzu-control-plan'</span><span class="token builtin class-name">.</span>Deleting kind cluster: tkg-kind-c7vj6kds0a6sf43e6210Management cluster created<span class="token operator">!</span>You can now create your first workload cluster by running the following:  tanzu cluster create <span class="token punctuation">[</span>name<span class="token punctuation">]</span> -f <span class="token punctuation">[</span>file<span class="token punctuation">]</span>Some addons might be getting installed<span class="token operator">!</span> Check their status by running the following:  kubectl get apps -A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署完成后会删除 bootstrap 集群，因为 bootstrap 集群中的资源已经转移到了管理集群中，它继续存在的意义不大。</p><h2 id="部署-workload-集群"><a href="#部署-workload-集群" class="headerlink" title="部署 workload 集群"></a>部署 workload 集群</h2><p>上面我们只是部署好了一个 tanzu 管理集群，我们真正的工作负载并不适合运行在这个集群上，因此我们还需要再部署一个 workload 集群，类似于 k8s 集群中的 worker 节点。部署 workload 集群的时候不再依赖 bootstrap 集群，而是使用管理集群。</p><p>根据官方文档 <a href="https://tanzucommunityedition.io/docs/latest/vsphere-wl-template/">vSphere Workload Cluster Template</a> 中给出的模版创建一个配置文件，然后再通过 tanzu 命令来部署即可。配置文件内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Cluster Pod IP 的 CIDR</span><span class="token key atrule">CLUSTER_CIDR</span><span class="token punctuation">:</span> 100.96.0.0/11<span class="token comment"># Service 的 CIDR</span><span class="token key atrule">SERVICE_CIDR</span><span class="token punctuation">:</span> 100.64.0.0/13<span class="token comment"># 集群的名称</span><span class="token key atrule">CLUSTER_NAME</span><span class="token punctuation">:</span> tanzu<span class="token punctuation">-</span>workload<span class="token punctuation">-</span>cluster<span class="token comment"># 集群的类型</span><span class="token key atrule">CLUSTER_PLAN</span><span class="token punctuation">:</span> dev<span class="token comment"># 集群节点的 arch</span><span class="token key atrule">OS_ARCH</span><span class="token punctuation">:</span> amd64<span class="token comment"># 集群节点的 OS 名称</span><span class="token key atrule">OS_NAME</span><span class="token punctuation">:</span> photon<span class="token comment"># 集群节点 OS 版本</span><span class="token key atrule">OS_VERSION</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token comment"># 基础设施资源的提供方</span><span class="token key atrule">INFRASTRUCTURE_PROVIDER</span><span class="token punctuation">:</span> vsphere<span class="token comment"># cluster, machine 等自定义资源创建的 namespace</span><span class="token key atrule">NAMESPACE</span><span class="token punctuation">:</span> default<span class="token comment"># CNI 选用类型，目前应该只支持 VMware 自家的 antrea</span><span class="token key atrule">CNI</span><span class="token punctuation">:</span> antrea<span class="token comment"># 集群的 VIP</span><span class="token key atrule">VSPHERE_CONTROL_PLANE_ENDPOINT</span><span class="token punctuation">:</span> 192.168.20.95<span class="token comment"># control-plan 节点的磁盘大小</span><span class="token key atrule">VSPHERE_CONTROL_PLANE_DISK_GIB</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token comment"># control-plan 节点的内存大小</span><span class="token key atrule">VSPHERE_CONTROL_PLANE_MEM_MIB</span><span class="token punctuation">:</span> <span class="token string">"8192"</span><span class="token comment"># control-plan 节点的 CPU 核心数量</span><span class="token key atrule">VSPHERE_CONTROL_PLANE_NUM_CPUS</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token comment"># work 节点的磁盘大小</span><span class="token key atrule">VSPHERE_WORKER_DISK_GIB</span><span class="token punctuation">:</span> <span class="token string">"20"</span><span class="token comment"># work 节点的内存大小</span><span class="token key atrule">VSPHERE_WORKER_MEM_MIB</span><span class="token punctuation">:</span> <span class="token string">"4096"</span><span class="token comment"># work 节点的 CPU 核心数量</span><span class="token key atrule">VSPHERE_WORKER_NUM_CPUS</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token comment"># vCenter 的 Datacenter 路径</span><span class="token key atrule">VSPHERE_DATACENTER</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC<span class="token comment"># 虚拟机创建的 Datastore 路径</span><span class="token key atrule">VSPHERE_DATASTORE</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC/datastore/datastore1<span class="token comment"># 虚拟机创建的文件夹</span><span class="token key atrule">VSPHERE_FOLDER</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC/vm/Tanzu<span class="token punctuation">-</span>node<span class="token comment"># 虚拟机使用的网络</span><span class="token key atrule">VSPHERE_NETWORK</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC/network/VM Network<span class="token comment"># 虚拟机关联的资源池</span><span class="token key atrule">VSPHERE_RESOURCE_POOL</span><span class="token punctuation">:</span> /SH<span class="token punctuation">-</span>IDC/host/Tanzu<span class="token punctuation">-</span>Cluster/Resources<span class="token comment"># vCenter 的 IP</span><span class="token key atrule">VSPHERE_SERVER</span><span class="token punctuation">:</span> 192.168.20.92<span class="token comment"># vCenter 的用户名</span><span class="token key atrule">VSPHERE_USERNAME</span><span class="token punctuation">:</span> administrator@vsphere.local<span class="token comment"># vCenter 的密码，以 base64 编码</span><span class="token key atrule">VSPHERE_PASSWORD</span><span class="token punctuation">:</span> &lt;encoded<span class="token punctuation">:</span>YWRtaW5AMjAyMA==<span class="token punctuation">></span><span class="token comment"># vCenter 的证书指纹，可以通过 govc about.cert -json | jq -r '.ThumbprintSHA1' 获取</span><span class="token key atrule">VSPHERE_TLS_THUMBPRINT</span><span class="token punctuation">:</span> CB<span class="token punctuation">:</span>23<span class="token punctuation">:</span>48<span class="token punctuation">:</span>E8<span class="token punctuation">:</span>93<span class="token punctuation">:</span>34<span class="token punctuation">:</span>AD<span class="token punctuation">:</span>27<span class="token punctuation">:</span>D8<span class="token punctuation">:</span>FD<span class="token punctuation">:</span>88<span class="token punctuation">:</span>1C<span class="token punctuation">:</span>D7<span class="token punctuation">:</span>08<span class="token punctuation">:</span>4B<span class="token punctuation">:</span>47<span class="token punctuation">:</span>9B<span class="token punctuation">:</span>12<span class="token punctuation">:</span>F4<span class="token punctuation">:</span>E0<span class="token comment"># 虚拟机注入的 ssh 公钥，需要用它来 ssh 登录集群节点</span><span class="token key atrule">VSPHERE_SSH_AUTHORIZED_KEY</span><span class="token punctuation">:</span> ssh<span class="token punctuation">-</span>rsa<span class="token comment"># 一些默认参数</span><span class="token key atrule">AVI_ENABLE</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token key atrule">IDENTITY_MANAGEMENT_TYPE</span><span class="token punctuation">:</span> none<span class="token key atrule">ENABLE_AUDIT_LOGGING</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token key atrule">ENABLE_CEIP_PARTICIPATION</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token key atrule">TKG_HTTP_PROXY_ENABLED</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token key atrule">DEPLOY_TKG_ON_VSPHERE7</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token comment"># 是否开启虚拟机健康检查</span><span class="token key atrule">ENABLE_MHC</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">MHC_UNKNOWN_STATUS_TIMEOUT</span><span class="token punctuation">:</span> 5m<span class="token key atrule">MHC_FALSE_STATUS_TIMEOUT</span><span class="token punctuation">:</span> 12m<span class="token comment"># 是否部署 vsphere cis 组件</span><span class="token key atrule">ENABLE_DEFAULT_STORAGE_CLASS</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 是否开启集群自动扩缩容</span><span class="token key atrule">ENABLE_AUTOSCALER</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过 tanzu 命令来部署 workload 集群</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># tanzu cluster create tanzu-workload-cluster --file tanzu-workload-cluster.yaml</span>Validating configuration<span class="token punctuation">..</span>.Warning: Pinniped configuration not found. Skipping pinniped configuration <span class="token keyword">in</span> workload cluster. Please refer to the documentation to check <span class="token keyword">if</span> you can configure pinniped on workload cluster manuallyCreating workload cluster <span class="token string">'tanzu-workload-cluster'</span><span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> cluster to be initialized<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> cluster nodes to be available<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> cluster autoscaler to be available<span class="token punctuation">..</span>.Unable to <span class="token function">wait</span> <span class="token keyword">for</span> autoscaler deployment to be ready. reason: deployments.apps <span class="token string">"tanzu-workload-cluster-cluster-autoscaler"</span> not foundWaiting <span class="token keyword">for</span> addons installation<span class="token punctuation">..</span>.Waiting <span class="token keyword">for</span> packages to be up and running<span class="token punctuation">..</span>.Workload cluster <span class="token string">'tanzu-workload-cluster'</span> created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>部署完成之后查看一下集群的 CR 信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># kubectl get cluster</span>NAME                     PHASEtanzu-workload-cluster   Provisioned<span class="token comment"># machine 状态处于 Running 说明节点已经正常运行了</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># kubectl get machine</span>NAME                                          PROVIDERID                                       PHASE     VERSIONtanzu-workload-cluster-control-plane-4tdwq    vsphere://423950ac-1c6d-e5ef-3132-77b6a53cf626   Running   v1.21.2+vmware.1tanzu-workload-cluster-md-0-8555bbbfc-74vdg   vsphere://4239b83b-6003-d990-4555-a72ac4dec484   Running   v1.21.2+vmware.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩容集群"><a href="#扩容集群" class="headerlink" title="扩容集群"></a>扩容集群</h2><p>集群部署好之后，如果想对集群节点进行扩缩容，我们可以像 deployment 的一样，只需要修改一些 CR 的信息即可。cluster-api 相关组件会 watch 到这些 CR 的变化，并根据它的 spec 信息进行一系列调谐操作。如果当前集群节点数量低于所定义的节点副本数量，则会自动调用对应的 Provider 创建虚拟机，并对虚拟机进行初始化操作，将它转换为 k8s 里的一个 node 资源；</p><h3 id="扩容-control-plan-节点"><a href="#扩容-control-plan-节点" class="headerlink" title="扩容 control-plan 节点"></a>扩容 control-plan 节点</h3><p>即扩容 master 节点，通过修改 <code>KubeadmControlPlane</code> 这个 CR 中的 <code>replicas</code> 副本数即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># kubectl scale kcp tanzu-workload-cluster-control-plane --replicas=3</span><span class="token comment"># 可以看到 machine 已经处于 Provisioning 状态，说明集群节点对应的虚拟机正在创建中</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># kubectl get machine</span>NAME                                          PROVIDERID                                       PHASE          VERSIONtanzu-workload-cluster-control-plane-4tdwq    vsphere://423950ac-1c6d-e5ef-3132-77b6a53cf626   Running        v1.21.2+vmware.1tanzu-workload-cluster-control-plane-mkmd2                                                     Provisioning   v1.21.2+vmware.1tanzu-workload-cluster-md-0-8555bbbfc-74vdg   vsphere://4239b83b-6003-d990-4555-a72ac4dec484   Running        v1.21.2+vmware.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩容-work-节点"><a href="#扩容-work-节点" class="headerlink" title="扩容 work 节点"></a>扩容 work 节点</h3><p>扩容 worker 节点，通过修改 <code>MachineDeployment</code> 这个 CR 中的 <code>replicas</code> 副本数即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># kubectl scale md tanzu-workload-cluster-md-0 --replicas=3</span>root@photon-machine <span class="token punctuation">[</span> ~ <span class="token punctuation">]</span><span class="token comment"># kubectl get machine</span>NAME                                          PROVIDERID                                       PHASE     VERSIONtanzu-workload-cluster-control-plane-4tdwq    vsphere://423950ac-1c6d-e5ef-3132-77b6a53cf626   Running   v1.21.2+vmware.1tanzu-workload-cluster-control-plane-mkmd2    vsphere://4239278c-0503-f03a-08b8-df92286bcdd7   Running   v1.21.2+vmware.1tanzu-workload-cluster-control-plane-rt5mb    vsphere://4239c882-2fe5-a394-60c0-616941a6363e   Running   v1.21.2+vmware.1tanzu-workload-cluster-md-0-8555bbbfc-4hlqk   vsphere://42395deb-e706-8b4b-a44f-c755c222575c   Running   v1.21.2+vmware.1tanzu-workload-cluster-md-0-8555bbbfc-74vdg   vsphere://4239b83b-6003-d990-4555-a72ac4dec484   Running   v1.21.2+vmware.1tanzu-workload-cluster-md-0-8555bbbfc-ftmlp   vsphere://42399640-8e94-85e5-c4bd-8436d84966e0   Running   v1.21.2+vmware.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>本文只是介绍了 tanzu 集群部署的大体流程，里面包含了 cluster-api 相关的概念在本文并没有做深入的分析，因为实在是太复杂了 😂，到现在我还是没太理解其中的一些原理，因此后续我再单独写一篇博客来讲解一些 cluster-api 相关的内容，到那时候在结合本文来看就容易理解很多。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/vmware-tanzu/community-edition">community-edition</a></li><li><a href="https://github.com/vmware/photon">vmware&#x2F;photon</a></li><li><a href="https://github.com/vmware-tanzu/tanzu-framework/blob/main/pkg/v1/tkg/client/init.go">tanzu-framework</a></li><li><a href="https://github.com/kubernetes-sigs/cluster-api-provider-vsphere">cluster-api-provider-vsphere</a></li><li><a href="https://tanzucommunityedition.io/docs/latest/workload-clusters/">Deploying a workload cluster</a></li><li><a href="https://tanzucommunityedition.io/docs/latest/verify-deployment/">Examine the Management Cluster Deployment</a></li><li><a href="https://tanzucommunityedition.io/docs/latest/vsphere/">Prepare to Deploy a Management or Standalone Clusters to vSphere</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;之前接触的 Kubernetes
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ESXi" scheme="https://blog.k8s.li/tags/ESXi/"/>
    
      <category term="Tanzu" scheme="https://blog.k8s.li/tags/Tanzu/"/>
    
      <category term="Kubernetes" scheme="https://blog.k8s.li/tags/Kubernetes/"/>
    
      <category term="Cluster-api" scheme="https://blog.k8s.li/tags/Cluster-api/"/>
    
  </entry>
  
  <entry>
    <title>使用 overlay2 或 bind 重新构建 ISO 镜像</title>
    <link href="https://blog.k8s.li/rebuild-iso-image.html"/>
    <id>https://blog.k8s.li/rebuild-iso-image.html</id>
    <published>2022-01-24T16:00:00.000Z</published>
    <updated>2022-01-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔者之前在字节跳动的时候是负责 PaaS 容器云平台的私有化部署相关的工作，所以经常会和一些容器镜像打交道，对容器镜像也有一些研究，之前还写过不少博客文章。比如 <a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生 🤔</a>、<a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a> 等等。</p><p>自从换了新工作之后，则开始负责 <a href="https://www.smartx.com/smartx-hci/">超融合产品</a> 集群部署相关工作，因此也会接触很多 <code>镜像</code>，不过这个镜像是操作系统的 ISO 镜像而不是容器镜像 😂。虽然两者都统称为镜像，但两者有着本质的区别。</p><p>首先两者构建的方式有本质的很大的区别，ISO 镜像一般使用 <code>mkisofs</code> 或者 <code>genisoimage</code> 等命令将一个包含操作系统安装所有文件目录构建为一个 ISO 镜像；而容器镜像构建则是根据 <code>Dockerfile</code> 文件使用相应的容器镜像构建工具来一层一层构建；</p><p>另外 ISO 镜像挂载后是只读的，这就意味着如果想要修改 ISO 镜像中的一个文件（比如 kickstart 文件），则需要先将 ISO 镜像中的所有内容负责到一个可以读写的目录中，在这个读写的目录中进行修改和重新构建 ISO 操作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox ~/build╰─<span class="token comment"># mount -o loop CentOS-7-x86_64-Minimal-2009.iso /mnt/iso</span>mount: /mnt/iso: WARNING: device write-protected, mounted read-only.╭─root@esxi-debian-devbox ~/build╰─<span class="token comment"># touch /mnt/iso/kickstart.cfg</span>touch: cannot <span class="token function">touch</span> <span class="token string">'/mnt/iso/kickstart.cfg'</span><span class="token builtin class-name">:</span> Read-only <span class="token function">file</span> system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在日常工作中经常会对一些已有的 ISO 镜像进行重新构建，重新构建 ISO 的效率根据不同的方式也会有所不同，本文就整理了三种不同重新构建 ISO 镜像的方案供大家参考。</p><h2 id="常规方式"><a href="#常规方式" class="headerlink" title="常规方式"></a>常规方式</h2><p>以下是按照 RedHat 官方文档 <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/anaconda_customization_guide/sect-iso-images"> WORKING WITH ISO IMAGES</a> 中的操作步骤进行 ISO 重新构建。</p><ul><li>首先我们下载一个 ISO 文件，这里以 <a href="https://mirrors.tuna.tsinghua.edu.cn/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso">CentOS-7-x86_64-Minimal-2009.iso</a> 为例，下载好之后将它挂载到本地 <code>/mn/iso</code> 目录下；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox ~/build╰─<span class="token comment"># mount -o loop CentOS-7-x86_64-Minimal-2009.iso /mnt/iso</span>mount: /mnt/iso: WARNING: device write-protected, mounted read-only.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>将 ISO 里的所有文件复制到另一个目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox ~/build╰─<span class="token comment"># rsync -avrut --force /mnt/iso/ /mnt/build/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>进入到该目录下修改或新增文件，然后重新构建 ISO 镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 genisoimage 命令构建 ISO 镜像，在 CentOS 上可以使用 mkisofs 命令，参数上会有一些差异</span>╭─root@esxi-debian-devbox ~/build╰─<span class="token comment"># genisoimage -U -r -v -T -J -joliet-long -V "CentOS 7 x86_64" -volset "CentOS 7 x86_64" -A "CentOS 7 x86_64" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -no-emul-boot -o /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso .</span>Total translation table size: <span class="token number">124658</span>Total rockridge attributes bytes: <span class="token number">55187</span>Total directory bytes: <span class="token number">100352</span>Path table size<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>: <span class="token number">140</span>Done with: The File<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                             Block<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token number">527985</span>Writing:   Ending Padblock                         Start Block <span class="token number">528101</span>Done with: Ending Padblock                         Block<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token number">150</span>Max brk space used a4000<span class="token number">528251</span> extents written <span class="token punctuation">(</span><span class="token number">1031</span> MB<span class="token punctuation">)</span><span class="token comment"># 给 ISO 镜像生成 md5 校验</span>╭─root@esxi-debian-devbox ~/build╰─<span class="token comment"># implantisomd5 /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso</span>Inserting md5sum into iso image<span class="token punctuation">..</span>.md5 <span class="token operator">=</span> 9ddf5277bcb1d8679c367dfa93f9b162Inserting fragment md5sums into iso image<span class="token punctuation">..</span>.fragmd5 <span class="token operator">=</span> f39e2822ec1ae832a69ae399ea4bd3e891eeb31e9deb9c536f529c15bbebfrags <span class="token operator">=</span> <span class="token number">20</span>Setting supported flag to <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 ISO 镜像比较小或者该操作不是很频繁的情况下按照这种方式是最省事儿的，但如果是 ISO 镜像比较大，或者是在 CI&#x2F;CD 流水线中频繁地重新构建镜像，每次都要 cp 复制原 ISO 镜像的内容确实比较浪费时间。那有没有一个更加高效的方法呢 🤔️</p><p>经过一番摸索，折腾出来两种可以避免使用 cp 复制这种占用大量 IO 操作的构建方案，可以根据不同的场景进行选择。</p><h2 id="overlay2"><a href="#overlay2" class="headerlink" title="overlay2"></a>overlay2</h2><p>熟悉 docker 镜像的应该都知道镜像是只读的，使用镜像的时候则是通过联合挂载的方式将镜像的每一层 layer 挂载为只读层，将容器实际运行的目录挂载为读写层，而容器运行期间在读写层的所有操作不会影响到镜像原有的内容。容器镜像挂载的方式使用最多的是 overlay2 技术，在 <a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a> 和 <a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生 🤔</a> 中咱曾对它进行过比较深入的研究和使用，对 overlay2 技术感兴趣的可以翻看一下这两篇博客，本文就不再详解其中的技术原理了，只对使用 overlay2 技术重新构建 ISO 镜像的可行性进行一下分析。</p><ul><li>首先是创建 overlay2 挂载所需要的几个目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox ~╰─<span class="token comment"># mkdir -p /mnt/overlay2/&#123;lower,upper,work,merged&#125;</span>╭─root@esxi-debian-devbox ~╰─<span class="token comment"># cd /mnt/overlay2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接着将 ISO 镜像挂载到 overlay2 的只读层 <code>lower</code> 目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox /mnt/overlay2╰─<span class="token comment"># mount -o loop  /root/build/CentOS-7-x86_64-Minimal-2009.iso lower</span>mount: /mnt/overlay2/lower: WARNING: device write-protected, mounted read-only.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用 mount 命令挂载 overlay2 文件系统，挂载点为 <code>merged</code> 目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox /mnt/overlay2╰─<span class="token comment"># mount -t overlay overlay -o lowerdir=lower,upperdir=upper,workdir=work merged</span>╭─root@esxi-debian-devbox /mnt/overlay2╰─<span class="token comment"># cd merged</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新增一个 kickstart.cfg 文件，然后重新构建 ISO 镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox /mnt/overlay2/merged╰─<span class="token comment"># echo '# this is a kickstart config file' > kickstart.cfg</span>╭─root@esxi-debian-devbox /mnt/overlay2/merged╰─<span class="token comment"># genisoimage -U -r -v -T -J -joliet-long -V "CentOS 7 x86_64" -volset "CentOS 7 x86_64" -A "CentOS 7 x86_64" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -no-emul-boot -o /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso .</span>Total translation table size: <span class="token number">124658</span>Total rockridge attributes bytes: <span class="token number">55187</span>Total directory bytes: <span class="token number">100352</span>Path table size<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>: <span class="token number">140</span>Done with: The File<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                             Block<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token number">527985</span>Writing:   Ending Padblock                         Start Block <span class="token number">528101</span>Done with: Ending Padblock                         Block<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token number">150</span>Max brk space used a4000<span class="token number">528251</span> extents written <span class="token punctuation">(</span><span class="token number">1031</span> MB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>挂载新的 ISO 镜像验证后发现确实可行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox /mnt/overlay2/merged╰─<span class="token comment"># mount -o loop /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso /mnt/newiso</span>mount: /mnt/newiso: WARNING: device write-protected, mounted read-only.╭─root@esxi-debian-devbox /mnt/overlay2/merged╰─<span class="token comment"># cat /mnt/newiso/kickstart.cfg</span><span class="token comment"># this is a kickstart config file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mount-–bind"><a href="#mount-–bind" class="headerlink" title="mount –bind"></a>mount –bind</h2><p>前面讲到了使用 overlay2 的方式避免复制原镜像内容进行重新构建镜像的方案，但是 overlay2 对于不是很熟悉的人来讲还是比较复杂，光 lowerdir、upperdir、workdir、mergeddir 这四个文件夹的作用和原理就把人直接给整不会了。那么还有没有更为简单一点的方式呢？</p><p>别说还真有，只不过这种方式的用途比较局限。如果仅仅是用于修改 ISO 中的一个文件或者目录，可以将该文件或目录以 <code>bind</code> 挂载的方式将它挂载到 ISO 目录目录对应的文件上。</p><p>原理就是虽然 ISO 目录本身是只读的，但它里面的文件和目录是可以作为一个挂载点的。也就是说我把文件 A 挂载到文件 B，并不是在修改文件 B，这就是 Unix&#x2F;Linux 文件系统十分奇妙的地方。同样运用 bind 挂载的还有 docker 的 volume 以及 pod 的 volume 也是运用同样的原理，以 bind 的方式将宿主机上的目录或文件挂载到容器运行对应的目录上。对于修改只读 ISO 里的文件&#x2F;目录我们当然也可以这样做。废话不多说来实践验证一下：</p><ul><li>首先依旧是将 ISO 镜像挂载到 <code>/mn/iso</code> 目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox ~/build╰─<span class="token comment"># mount -o loop CentOS-7-x86_64-Minimal-2009.iso /mnt/iso</span>mount: /mnt/iso: WARNING: device write-protected, mounted read-only.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>接着创建一个 <code>/mnt/files/ks.cfg</code> 文件，并写入我们需要的内容</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox ~/build╰─<span class="token comment"># mkdir -p /mnt/files</span>╭─root@esxi-debian-devbox ~/build╰─<span class="token comment"># echo '# this is a kickstart config file' > /mnt/files/ks.cfg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接着以 mount –bind 的方式挂载新建的文件到 ISO 的 EULA 文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox /mnt/build╰─<span class="token comment"># mount --bind /mnt/files/ks.cfg /mnt/iso/EULA</span>╭─root@esxi-debian-devbox /mnt/build╰─<span class="token comment"># cat /mnt/iso/EULA</span><span class="token comment"># this is a kickstart config file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到原来 ISO 文件中的 EULA 文件已经被成功替换成了我们修改的文件，然后再重新构建一下该 ISO 镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox /mnt/iso╰─<span class="token comment"># genisoimage -U -r -v -T -J -joliet-long -V "CentOS 7 x86_64" -volset "CentOS 7 x86_64" -A "CentOS 7 x86_64" -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -no-emul-boot -o /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso .</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>然后我们再重新挂载新的 ISO 文件验证一下是否可以</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╭─root@esxi-debian-devbox /mnt/iso╰─<span class="token comment"># mkdir /mnt/newiso</span>╭─root@esxi-debian-devbox /mnt/iso╰─<span class="token comment"># mount -o loop /mnt/CentOS-7-x86_64-Minimal-2009-dev.iso /mnt/newiso</span>mount: /mnt/newiso: WARNING: device write-protected, mounted read-only.╭─root@esxi-debian-devbox /mnt/iso╰─<span class="token comment"># cat /mnt/newiso/EULA</span><span class="token comment"># this is a kickstart config file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证通过，确实可以！不过这种方式很局限，比较适用于修改单个文件如 <code>kickstart.cfg</code>，如果是要新增文件那还是使用上文提到的 overlay2 的方式更为方便一些。</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>虽然 ISO 镜像和容器镜像二者有着本质的差别，但对于只读和联合挂载的这些特性二者可以相互借鉴滴。</p><p>不止如此 overlay2 这种联合挂载的特性，还可以用在其他地方。比如我有一个公共的 NFS 共享服务器，共享着一些目录，所有人都可以以 root 用户并以读写的权限进行 NFS 挂载。这种情况下很难保障一些重要的文件和数据被误删。这时候就可以使用 overlay2 的方式将一些重要的文件数据挂载为 overlay2 的 lowerdir 只读层，保证这些数据就如容器镜像一样，每次挂载使用的时候都作为一个只读层。所有的读写操作都在 overlay2 的 merged 那一层，不会真正影响到只读层的内容。</p><p>草草地水了一篇博客，是不是没有用的知识又增加了 😂</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt">overlayfs.txt</a></li><li><a href="https://arkingc.github.io/2017/05/05/2017-05-05-docker-filesystem-overlay/">Docker 存储驱动—Overlay&#x2F;Overlay2「译」</a></li><li><a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生 🤔</a></li><li><a href="https://zdyxry.github.io/2019/01/12/%E8%81%8A%E4%B8%80%E8%81%8A-ISO-9660/">聊一聊 ISO 9660</a></li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/anaconda_customization_guide/sect-iso-images">WORKING WITH ISO IMAGES</a></li><li><a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a></li><li><a href="https://blog.k8s.li/mount-bind.html">mount 命令之 –bind 挂载参数</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;笔者之前在字节跳动的时候是负责 PaaS
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="overlay2" scheme="https://blog.k8s.li/tags/overlay2/"/>
    
      <category term="ISO" scheme="https://blog.k8s.li/tags/ISO/"/>
    
  </entry>
  
  <entry>
    <title>Kubespray 2.18 版本特性预览</title>
    <link href="https://blog.k8s.li/kubespray-2.18.html"/>
    <id>https://blog.k8s.li/kubespray-2.18.html</id>
    <published>2022-01-04T16:00:00.000Z</published>
    <updated>2022-05-30T14:37:53.855Z</updated>
    
    <content type="html"><![CDATA[<p>最近 kubernetes-sig 社区的 <a href="https://github.com/kubernetes-sigs/kubespray">kubespray</a> 项目正式 release 了 <a href="https://github.com/kubernetes-sigs/kubespray/releases/tag/v2.18.0">v2.18.0</a> 版本，同时对应 <a href="https://github.com/cncf/k8s-conformance">k8s-conformance</a> 的 <a href="https://github.com/cncf/k8s-conformance/pull/1748">v1.21</a> 和 <a href="https://github.com/cncf/k8s-conformance/pull/1760">v1.22</a> 版本 kubespray 也都已经得到 CNCF 的一致性认证。于是今天就借这个新版本 release 的机会整理一下 2.18 版本的 kubespray 有哪些有趣的变化。</p><h2 id="组件版本"><a href="#组件版本" class="headerlink" title="组件版本"></a>组件版本</h2><p>以下是 v2.18.0 版本中 kubespray 部署组件的一些版本信息：</p><h3 id="K8s-核心组件"><a href="#K8s-核心组件" class="headerlink" title="K8s 核心组件"></a>K8s 核心组件</h3><ul><li>kubespray 支持的 Kubernetes 支持从 v1.22.0 到 v1.23.1 之间的所有正式版本，默认部署的版本为 v1.22.5，并且 <a href="https://github.com/cncf/k8s-conformance/pull/1760">v1.22</a> 版本得到了 CNCF 官方的一致性认证；</li><li>etcd 从原来的 v3.4.13 升级到了 v3.5.0；</li><li>coredns 版本升级到了 v1.8.0，它的搭档 dnsautoscaler 则为 1.8.5；</li><li>pod_infra 即 pause 镜像的版本没有变化依旧为 3.3；</li></ul><table><thead><tr><th>Addon</th><th align="left">Version</th></tr></thead><tbody><tr><td>kube</td><td align="left">v1.22.5</td></tr><tr><td>pod_infra</td><td align="left">3.3</td></tr><tr><td>etcd</td><td align="left">v3.5.0</td></tr><tr><td>coredns</td><td align="left">v1.8.0</td></tr></tbody></table><h3 id="容器运行时"><a href="#容器运行时" class="headerlink" title="容器运行时"></a>容器运行时</h3><p>目前市面上所有的 Kubernetes 集群部署工具中，对容器运行时的支持 kubespray 无疑是最丰富的。部署能支持 docker、containerd、crun、kata、cri-o。默认的容器运行时已经从之前的 docker 切换到了 containerd，containerd 的版本是 v1.5.8。</p><table><thead><tr><th>Addon</th><th>Version</th></tr></thead><tbody><tr><td>containerd</td><td>1.5.8</td></tr><tr><td>docker</td><td>20.10</td></tr><tr><td>docker_containerd</td><td>1.4.12</td></tr><tr><td>crun</td><td>1.3</td></tr><tr><td>runc</td><td>v1.0.3</td></tr><tr><td>crio</td><td>1.22</td></tr><tr><td>kata_containers</td><td>2.2.3</td></tr><tr><td>gvisor</td><td>20210921</td></tr></tbody></table><h3 id="CNI"><a href="#CNI" class="headerlink" title="CNI"></a>CNI</h3><p>同样，目前市面上所有的 Kubernetes 集群部署工具中，对 CNI 的支持 kubespray 也无疑是最为丰富的，能支持 9 种 CNI 以及多种 CNI 组合部署的 <a href="https://github.com/intel/multus-cni">multus</a> 。</p><table><thead><tr><th>Addon</th><th>Version</th></tr></thead><tbody><tr><td>calico</td><td>v3.20.3</td></tr><tr><td>flannel</td><td>v0.15.1</td></tr><tr><td>flannel_cni</td><td>v1.0.0</td></tr><tr><td>cni</td><td>v1.0.1</td></tr><tr><td>weave</td><td>2.8.1</td></tr><tr><td>cilium</td><td>v1.9.11</td></tr><tr><td>kube_ovn</td><td>v1.8.1</td></tr><tr><td>kube_router</td><td>v1.3.2</td></tr><tr><td>multus_cni</td><td>0.4.0</td></tr><tr><td>multus</td><td>v3.8</td></tr></tbody></table><h3 id="Kubernetes-app"><a href="#Kubernetes-app" class="headerlink" title="Kubernetes-app"></a>Kubernetes-app</h3><p>同时，kubespray 还支持一些 CLI 工具以及第三方应用的部署。</p><ul><li>CLI 工具</li></ul><p>一些 CLI 工具，比如 helm、nerdctl、krew、crictl。其中 nerdctl 的部署支持是咱在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/7500">#7500</a> 中加入支持的，目的是为 containerd 用户提供一个相对友好的命令行操作体验，以替代 docker CLI。</p><table><thead><tr><th>addon</th><th>version</th></tr></thead><tbody><tr><td>helm</td><td>v3.7.1</td></tr><tr><td>nerdctl</td><td>0.15.0</td></tr><tr><td>krew</td><td>v0.4.2</td></tr><tr><td>crictl</td><td>v1.22.0</td></tr></tbody></table><ul><li>app</li></ul><p>个人感觉部署一些像 <code>dnsautoscaler</code>、 <code>argoCD</code> 这样的应用，还是使用 helm 比较好。因为基于 ansible 的 kubespray 维护这么多第三方组件，以及它们的升级管理都远不如 helm 方便。因此考虑到这些组件的升级维护成本，个人还是不太建议使用 kubespray 来部署这些组件。</p><table><thead><tr><th>Addon</th><th>Version</th></tr></thead><tbody><tr><td>dnsautoscaler</td><td>1.8.5</td></tr><tr><td>netcheck</td><td>v1.2.2</td></tr><tr><td>nodelocaldns</td><td>1.21.1</td></tr><tr><td>metrics_server</td><td>v0.5.0</td></tr><tr><td>cert_manager</td><td>v1.5.4</td></tr><tr><td>addon_resizer</td><td>1.8.11</td></tr><tr><td>cinder_blockstorage</td><td>v3</td></tr><tr><td>external_vsphere</td><td>6.7u3</td></tr><tr><td>nvidia_driver</td><td>390.87</td></tr><tr><td>oci_cloud_controller</td><td>0.7.0</td></tr><tr><td>metallb</td><td>v0.10.3</td></tr><tr><td>argocd</td><td>v2.1.6</td></tr></tbody></table><h2 id="支持的-OS"><a href="#支持的-OS" class="headerlink" title="支持的 OS"></a>支持的 OS</h2><table><thead><tr><th>distribution</th><th>version</th></tr></thead><tbody><tr><td>Amazon Linux</td><td>2</td></tr><tr><td>Fedora CoreOS</td><td>34.x&#x2F;35.x</td></tr><tr><td>Flatcar Container Linux by Kinvolk</td><td></td></tr><tr><td>Alma Linux</td><td>8</td></tr><tr><td>Rocky Linux</td><td>8</td></tr><tr><td>CentOS&#x2F;RHEL</td><td>7&#x2F;8</td></tr><tr><td>Oracle Linux</td><td>7&#x2F;8</td></tr><tr><td>Debian</td><td>8&#x2F;9&#x2F;10&#x2F;11</td></tr><tr><td>Ubuntu</td><td>16.04&#x2F;18.04&#x2F;20.04</td></tr><tr><td>Fedora</td><td>34&#x2F;35</td></tr><tr><td>openSUSE</td><td>Leap 15.x&#x2F;Tumbleweed</td></tr></tbody></table><h2 id="主要变化"><a href="#主要变化" class="headerlink" title="主要变化"></a>主要变化</h2><h3 id="废除"><a href="#废除" class="headerlink" title="废除"></a>废除</h3><ul><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8086">#8086</a> 中移除了对 Ambassador 的支持；</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8327">#8327</a> 中移除了对 registry-proxy 的支持；</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8246">#8246</a> 中移除了对 Fedora 33 的支持，因为  Fedora 33 在 2021-11-30 就已经 EOL 了，所以被废弃支持也理所当然；</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8265">#8265</a> 中移除了对 Mitogen 的支持，Mitogen 的作用就是用来优化 Ansible 的性能，但 Mitogen 对于一些新的 Linux 发行版支持的额并不是很友好，在 Kubespray 中维护的成本也比较大，因此社区就废弃它了；</li></ul><h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><ul><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/7895">#7895</a> 中新增了 ArgoCD 的部署支持，通过设置 <code>argocd_enabled</code> 即可在部署集群的时候安装 ArgoCD。不过个人认为，ArgoCD 这玩意儿不太适合放在 K8s 部署当中来，看看 <a href="https://github.com/kubesphere/ks-installer">ks-installer</a> 的代码你就能明白了 😂。</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8175">#8175</a> 中默认使用 containerd 作为默认的容器运行时，替代掉了 docker。不过需要注意的是，当前版本的 kubespray 是使用 <a href="https://github.com/containerd/containerd">containerd</a> 官方 repo release 的二进制安装包，但二进制安装包并没有 arm64 版本的。所以如果要部署的集群节点包含 arm64 的机器，最好还是使用 docker 作为容器运行时。</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8291">#8291</a> 新增了 registry 部署支持多种 ServiceTypes 的支持；</li><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8229">#8229</a> 中新增了支持 registry 认证的方式，私有化部署的时候使用带有认证的 registry 会用到；</li></ul><h3 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h3><ul><li>在 <a href="https://github.com/kubernetes-sigs/kubespray/pull/8239">#8239</a> 中 <a href="https://github.com/cristicalin">cristicalin</a> 大佬引入了一个修改，如果是 containerd 运行时，则使用 nerdctl 下载镜像。这将会导致配置了 containerd registry mirrors 的参数将会失效。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近 kubernetes-sig 社区的 &lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>时光痕迹：2021 年总结</title>
    <link href="https://blog.k8s.li/2021.html"/>
    <id>https://blog.k8s.li/2021.html</id>
    <published>2022-01-02T16:00:00.000Z</published>
    <updated>2022-05-30T14:37:53.851Z</updated>
    
    <content type="html"><![CDATA[<p>2021 依旧是人类社会<strong>倒车和加速灭亡</strong>的一年，全球范围内新冠病毒依旧在肆虐，新的变异又接踵而来，疫情并没有多少消退的迹象。而现在国内西安疫情又爆发开来，无法预想未来究竟能变成什么样子。</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>2021 年 9 月份的时候将书单从原来的 Markdown 文本迁移到了 Notion 上，体验十分棒。Notion 的表格数据库功能十分强大，对书单来说简直就是一件神器。抽空整理了一下书单  <a href="https://reading.k8s.li/">reading.k8s.li</a>  ，2021 年大概读完了 97 本书。其中科普 27 本、漫画 17 本、历史 13 本、政治 11 本、轻小说 8 本、社科 7 本、心理学 5 本、技术 5 本、法律 2 本。之所以能读完这么多书大概是因为如下 😂：</p><ul><li>单身独居，自己一个人生活，没人打扰；</li><li>不喜欢社交，不喜欢群聊闲聊扯淡撕逼；</li><li>不玩游戏不刷短视频，没有其他爱好；</li><li>周末和节假日大多数宅在家里玩儿；</li></ul><p>其中我觉着单身独居是最主要的原因，比如 <a href="https://twitter.com/yihong0618">伊洪</a> 老哥也是如此：</p><p><img data-src="https://p.k8s.li/image-20220103202406764.png" alt="image-20220103202406764"></p><p>根据个人的喜好，就分享以下 10 本我个人觉着十分有意思的书给大家：</p><p><img data-src="https://p.k8s.li/image-20220103202406766.png" alt="Snipaste_2021-12-31_19-28-11"></p><p>由于读书笔记的篇幅太长，后面有空的话我会和去年的《<a href="https://blog.k8s.li/2020-booklist.html">2020 年读书笔记和思考</a>》一样，再写一篇 2021 年的读书笔记来分享给大家（大概率是在春节期间写了）。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h3><p>今年最大的变化就是换了新工作，这也是第二次换工作。本来没有打算离职，但是被迫<del>字节</del>跳动了一年之后，感觉太累了，并没有想象中的那么快乐。</p><p>不得不吐槽一下字节的基础设施做的实在是太烂了，比如镜像仓库各种奇葩的问题。当时还因为这破玩意儿出过版本发布的错误，导致组件编译的 base 镜像出错，后来又不得不重新发布一个版本来擦屁股。</p><p>还有当时 PaaS 容器云平台私有化产品版本发布的时候，领导非得将打包发布的时间点定在临近晚上下班的时候。这就会导致我们组（苦命发版工具人）忙活到晚上十一二点，真的是十分不爽。就是因为一些公共事务没有做好，一些问题在组件自身的 CI&#x2F;CD 流水线中并不能及时暴露，等到最终最后版本发布的时候，各种奇葩的问题突突突地冒出来。比如缺镜像、镜像错误、helm chart 错误、版本错误等。然后出了问题之后又要 @ 各个组件的 owner 去解决问题，它们修改好之后我们再重新打包部署新的环境来验证。每到发版日就十分痛苦，一些基础设施和公共事务没有做好，等到最后我们发版工具人来擦屁股。这让我想起了另一位推友分享的经历：</p><p><img data-src="https://p.k8s.li/image-20220104082135898.png" alt="image-20220104082135898"></p><h3 id="裸辞离职"><a href="#裸辞离职" class="headerlink" title="裸辞离职"></a>裸辞离职</h3><p>四月底和 leader 绩效沟通完后感觉不太满意于是内心就决定了要离职。不过因为当时一些组织架构的调整，我所做的工作没有一个合适的人来接盘。再加上新产品刚进入设计阶段，新产品平台底层的 K8s 部署以及私有化打包发布相关的工作没有其他人能够 take 起来，最尴尬的是这部分工作当时只有我一个人能完整地做出来。如果在五月底离职的话，可能会对新产品的开发带来一定影响。因此当时考虑了一下，还是等到新产品稳定发版以及把负责的工作交接给新人之后再离开吧。</p><p>就这样自己一个人又重新负责起了整个 PaaS 平台的私有化部署和打包发布相关的工作，这段时间也收获挺多的，顺便给 kubernetes-sig 社区的 kubespray 项目贡献了十几个 <a href="https://github.com/kubernetes-sigs/kubespray/pulls?q=is:pr+author:muzi502+is:closed">PR</a>。等到七月底的时候，新产品已经进入了稳定开发的阶段，在第一个 alpha.1 版本时就搞定了私有化部署和私有化打包的流水线，又经过三个 sprint 的迭代后，终于稳定了下来。之后就整理了一些平时积累的文档，交接给了其他同事，然后办理离职手续走人。</p><p>裸辞的原因也有很多：想走出心理舒适圈，换个环境能让自己成长起来；当时对工作也有了一点厌倦，想好好休息一下；当时的状态也不是很好，如果那时候准备面试的话，感觉效果不太好；很久没有回家了，想在家好好休息一段时间。当时也没有选择休假，而是将所有的假期都折算成双倍工资了，感觉这样更划算一些。如果是休假的话，保不准在休假的时候仍要在飞书上处理一些同事的问题。感觉这样就挺烦人的，所以干脆就直接走人，飞书都没了还怎么联系我。</p><p>离职的第二天就收拾行李回老家，因为老爸的生日快到了，也想尽快回家和家人团聚。</p><p>之后就一直在家划水摸鱼啦，期间花了两周左右的时间完成了两个开源项目：一个是用于构建 yum&#x2F;apt&#x2F;dnf 离线源的工具 <a href="https://github.com/k8sli/os-packages">k8sli&#x2F;os-packages</a> ，以及无网环境中离线部署 k8s 的工具  <a href="https://github.com/k8sli/kubeplay">k8sli&#x2F;kubeplay</a> 。</p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>正式开始准备面试是在 9 月初的时候，已经划水摸鱼一个月了，感觉休息的也差不多了。还是赶紧找工作面试吧，在起初的一周是通过一些心仪公司的官网上投递的简历，不幸的是收到的回复很少。当时心里有点慌，写了篇求职《<a href="https://blog.k8s.li/jobs.html">求职贴：运维开发 ｜SRE</a>》介绍了一下自己的现状，终于收到了一些小伙伴们的内推。</p><p><img data-src="https://p.k8s.li/image-20211231205927088.png" alt="image-20211231205927088"></p><p>在此还是十分感谢帮助我内推的小伙伴，在我即将走投无路的时候有你们的推荐才有了我现在的工作机会。大大小小的面试总共进行了 25 次吧，差不多通过了一半，拿到 4 个书面 offer，最终去了一家做 IaaS 虚拟化和分布式块存储产品的 toB 公司。</p><p>因为之前是在字节跳动做 PaaS toB 产品的集群部署和私有化交付相关工作，在新工作则是做 IaaS toB 产品的集群部署相关工作，都是“集群部署”相关的，因此和以往的经历比较匹配。对于像咱这种喜欢折腾的垃圾佬来说，还是硬件服务器、操作系统、虚拟化、分布式存储等方面的内容比较有意思，玩起来可开心惹 🤣。</p><p>更为重要的一点是新工作不再像以前那样运维技术为主了，而至以后端研发为主。其实我很早之前就想写一些 Go&#x2F;Python 后端项目的代码了，只不过一直没找到一个合适的机会（其实是偷懒的借口 🌚）。在字节的时候也没有太多后端开发的经验，所以当初面试的时候因为开发能力较弱被刷掉了很多，也让一些面试官极其失望。</p><p>幸运的是面试的时候也遇到了一个非常 nice 的公司愿意花时间培养我这方面的能力，leader 也十分信任我的学习能力，让我从零开始承担一个项目的后端开发，给了我这么一个宝贵的机会来学习和弥补开发能力不足的短板。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>生活上依旧是单身独居，自己一个人生活实在是太爽了，越来越习惯这种生活，好想永远地就这样生活下去，没有催婚的烦恼 😖。独自一个人生活最重要的就是学会<strong>如何对抗虚无</strong>。只要找些有意义的事情来做（比如读书），就不会觉着生活无味或者有空虚感。回想起大学四年，基本上我也是的独自一人去图书馆看书、独自一人吃饭、独自一人去自习室，感觉和现在没有太多差别，只不过从上课学习换成了工作搬砖，其他时间的生活节奏基本上没有太大的变化。</p><p>还有一点就是尽量的远离社交媒体，不要过度地依赖它们，更不要放纵自己不停地刷推或者短视频来娱乐消遣。其实这些东西并不能给我们带来真正意义上的快乐，有一部纪录片《<a href="https://www.netflix.com/sg-zh/title/81254224">监视资本主义：智能陷阱</a>》里面也谈到过过度依赖社交媒体的后果。</p><h3 id="杭州过年"><a href="#杭州过年" class="headerlink" title="杭州过年"></a>杭州过年</h3><p>因为疫情的原因 2021 年就没回家过年，再加上越是农村那种破地方防疫措施就是越离谱，看看现在西安的防疫措施你们就能明白了为什么不想回家。于是就懒得折腾，选择独自一人留在杭州过年，顺便还能领取杭州市政府的留杭补贴 1000 块钱。杭州市在这一块做的还真不错，去年还领了人才补贴的 1w 块钱，从老大哥手里薅羊毛，真鸡儿刺激。</p><h3 id="环太湖骑行"><a href="#环太湖骑行" class="headerlink" title="环太湖骑行"></a>环太湖骑行</h3><p>为了不让五一假期再像过年那样一直烂在家里，就独自一人从杭州骑行到湖州、常州、无锡、苏州、太湖一带游玩，真的是很久没有那么开心过了。回来之后还更新了一篇博客《<a href="https://blog.k8s.li/taihu.html">五一假期环太湖骑行之旅</a>》，旅程的风景真的不错，感兴趣的话可以去读一下。</p><h3 id="上海租房"><a href="#上海租房" class="headerlink" title="上海租房"></a>上海租房</h3><p>新工作的办公地点是在上海，因为不支持远程办公所以不得不从杭州搬家来到上海。在中介老哥的带领下找了一个月租 3100 元的卧室 + 独卫的房子（包水电费），整体感觉十分满意。房子比较特殊，是三室一厅。我住在其中的一个大卧室，房东他父母住在另一个卧室，剩余的一个卧室是空着的，除了我以外没有其他的租客。出于对老人安全的考虑，房东只允许我自己一个人住，不能带外人来。对我来说也没啥，独来独往的生活反正也不会有其他人来找我玩儿。</p><p>卧室面积 3.3 * 4.3m&#x3D;14.19 平、玄关 1.1 * 1m&#x3D;1.1 平、卫生间 2.3 * 2.1m&#x3D;4.38 平。加起来总共差不多 20 平。感觉这个面积感觉比杭州那个带阳台的卧室大很多。一个 1.5 * 2m 的床、靠墙再放置两张 60* 120 cm 的宜家桌子、床的右侧又能放下一张 0.6 * 1.4m 米的书桌，还有一个 0.5 *2m 的衣柜。</p><p>现在终于住上了自己所期待的那种房子，回想起大学刚毕业那一年住的还是 300 块钱的上下铺青旅，就感觉当时十分寒酸 😭。</p><p><img data-src="https://p.k8s.li/image-20220103165850671.png" alt="image-20220103165850671"></p><p>房间里还有一个带书架的电脑桌，放下一个 27 寸的显示器刚刚好。另外把我那台 HPE Gen10 Plus 服务器安置在了书桌下面。虽然靠近床头，但 NAS 里硬盘的噪音还算能接受，不至于吵得睡不着觉。有时候在想要不要整个 12U 的机柜来着，但规划了一下感觉还是没有太大的必要，先这样凑活着用吧。</p><p><img data-src="https://p.k8s.li/image-20220103202406765.jpg" alt="IMG_2177"></p><p>搬进来之后的第二天在闲鱼上花了 300 块钱捡来了一个原价 1699 的米家扫地机器人，又花了 200 块钱捡了一个米家空气净化器（贫穷如我，只能靠捡和薅来提升生活幸福感了）。感觉这两个家用电器还是挺值的，扫地机器人省去了打扫卫生的麻烦事儿，生活幸福感 +++。</p><h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><p>就像作家方方所说的那样：<a href="http://fangfang.blog.caixin.com/archives/220746">时代的一粒灰，落在个人头上就是一座山</a> 。外婆在 2020 年新冠疫情刚爆发的那段时间不幸离开了这个世界，而那段时间的经历也彻底改变了我看待生死的想法。仿佛一切都没有那么重要了，也让我深刻地明白了<strong>这个世界上没有什么东西无法不能失去的，也没有什么非得必须要得到的</strong>。即便是某一天我不幸去世，也没有太多遗憾和悔恨。所以去他的未来计划，和往常一样好好搬砖工作和看书学习，这样就够了。</p><p>另外祝大家新的一年快快乐乐 🥳</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;2021
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Tencent Cloud lighthouse Firewall tool</title>
    <link href="https://blog.k8s.li/cfwctl.html"/>
    <id>https://blog.k8s.li/cfwctl.html</id>
    <published>2021-12-14T16:00:00.000Z</published>
    <updated>2021-12-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次去北京出差，为了便捷地访问家里内网中的一些服务，就在腾讯云服务器上部署了一个 frps 服务，在本地内网的 Openwrt 路由器上安装 frpc 客户端，将内网中的一台 Windows 服务器穿透到腾讯云服务器上。然后通过 Windows RDP 远程连接到这台 Windows 机器上，来使用内网的一些服务。之前也尝试过 WireGuard，但是使用了一段时间体验下来感觉还是通过内网穿透的方式比较稳定和流畅。于是最终的方式还是选用 frp 内网穿透的方案。</p><p>本着方便省事儿的原则就放心大胆地开放了云服务器的安全组规则。不幸的是，由于这样的疏忽，某一天我的 Windows 虚拟机被弱口令（admin2020）给爆破了。巨大的损失就是挂载到 Windows 虚拟机上的 NAS 存储被勒索病毒进行了加密 😂。不过好在最最重要的数据全部存到了 OneDrive 上，NAS 上损失的都是一些下载的电影、书籍以及一些 ISO、虚拟机模版之类的文件。一下子损失了 8TB 的数据很心疼，毕竟是自己辛辛苦苦搜集的资源，但是仔细想一下，这些资源都不是自己的，基本上都是从下载下来的，还可以通过同样的方式找回来。或许是之前看过《断舍离》的缘故，也看的开了，难受了一小会儿之后就好过来了。毕竟这个世界上，没有无法不能失去的东西，也没有非得必须要得到的东西。</p><p>有了此次教训，就开始考虑对手上的云主机资源进行安全加固，将一些与内网互通的云主机安全组&#x2F;防火墙的通用去除了允许所有，只添加本地公网 IP 的允许规则。但是对于家庭宽带用户来讲，公网 IP 并不是一个固定的 IP，而是会一直不断变化，总不能每次变化之后再登录到云主机控制台手动添加一下吧。于是就想着有没有自动化的方式来自动添加和更新安全组&#x2F;防火墙规则呢？</p><h2 id="Terraform"><a href="#Terraform" class="headerlink" title="Terraform"></a>Terraform</h2><p>第一个想到的方案便是 terraform，主流的云厂商都有对应的 provider 支持，腾讯云应该也是能够支持的。不过看了官方的 <a href="https://github.com/tencentcloudstack/terraform-provider-tencentcloud">terraform-provider-tencentcloud</a> repo 文档之后，并没有找到给 lighthouse 主机配置防火墙规则的支持，遂放弃。</p><h2 id="cfwctl"><a href="#cfwctl" class="headerlink" title="cfwctl"></a>cfwctl</h2><p>既然 terraform 不支持，那就自己造轮子写一个吧，就叫它 Cloud Firewall Control Tool，简称 <a href="https://github.com/muzi502/cfwctl">cfwctl</a>。腾讯云官方的 API 文档还可以，还能在线生成代码，用起来也十分方便。考虑到会将该工具运行到运行到 arm64 的路由器上，因此跨平台运行 cfwctl 使用 golang 来实现无疑是个不错的选择，正好也能来练练手。</p><p>执行的操作其实很简单，先是通过某种方式获取本地机器的公网 IP，然后将该 IP 添加到对应实例的防火墙规则当中，并在规则描述中添加标识符来标记。目前自己只需要添加规则，先凑活着用一段时间，看下效果如何。目前只支持腾讯云的 lighthouse 实例，后续有机会再增加几个别的云厂商支持。</p><h3 id="获取公网-IP"><a href="#获取公网-IP" class="headerlink" title="获取公网 IP"></a>获取公网 IP</h3><p>首先要获取到我们本地网路的公网 IP，由于公网 IP 可能一直是变化的，所以我们每次更新防火墙规则之前都需要获取最新的公网 IP。以下是具体实现的代码：</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">package mainimport (&quot;fmt&quot;&quot;io&#x2F;ioutil&quot;&quot;net&#x2F;http&quot;&quot;regexp&quot;)&#x2F;&#x2F; 定义 IPv4 的正则表达式，目的是从获取公网 IP 的  API 返回结果中过滤出 IPv4 地址const ipv4_regex &#x3D; &#96;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))&#123;3&#125;&#96;&#x2F;&#x2F; 定义几个几个提供获取公网 IPv4 地址的 API URLvar urlList &#x3D; []string&#123;&quot;https:&#x2F;&#x2F;ip.me&quot;&quot;http:&#x2F;&#x2F;ip.sb&quot;,&quot;http:&#x2F;&#x2F;ip.cip.cc&quot;,&quot;http:&#x2F;&#x2F;myip.ipip.net&quot;,&#125;func GetPublicIP() string &#123;for _, url :&#x3D; range urlList &#123;    &#x2F;&#x2F; 创建一个 http clientclient :&#x3D; &amp;http.Client&#123;&#125;    &#x2F;&#x2F; 设置 client 的请求方法为 GET 以及请求的 URLrequest, err :&#x3D; http.NewRequest(&quot;GET&quot;, url, nil)if err !&#x3D; nil &#123;continue&#125;    &#x2F;&#x2F; 设置 Client 的 User-Agent 为 curl，不然一些 API 会返回 html 的结果request.Header.Set(&quot;User-Agent&quot;, &quot;curl&#x2F;7.54.0&quot;)resp, err :&#x3D; client.Do(request)if resp.StatusCode !&#x3D; 200 &amp;&amp; err !&#x3D; nil &#123;continue&#125;defer resp.Body.Close()body, err :&#x3D; ioutil.ReadAll(resp.Body)    &#x2F;&#x2F; 从 API 返回结果中用正则匹配出 IPv4 地址reg :&#x3D; regexp.MustCompile(ipv4_regex)ipList :&#x3D; reg.FindAllString(string(body), -1)    &#x2F;&#x2F; 如果匹配结果中有 IPv4 地址，则返回第一个元素即可if len(ipList) &gt; 0 &#123;fmt.Printf(&quot;my public ip is %s\n&quot;, ipList[0])return ipList[0]&#125;&#125;return &quot;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-Firewall-规则"><a href="#添加-Firewall-规则" class="headerlink" title="添加 Firewall 规则"></a>添加 Firewall 规则</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"os"</span><span class="token string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"</span><span class="token string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"</span><span class="token string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"</span>lighthouse <span class="token string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/lighthouse/v20200324"</span><span class="token punctuation">)</span><span class="token comment">// 定义 API 请求的 URL</span><span class="token keyword">const</span> endpoint <span class="token operator">=</span> <span class="token string">"lighthouse.tencentcloudapi.com"</span><span class="token comment">// 定义请求 API 的 Client 结构体</span><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>SecretId  <span class="token builtin">string</span>SecretKey <span class="token builtin">string</span>InstaceId <span class="token builtin">string</span>Region    <span class="token builtin">string</span>Endpoint  <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过该方法从环境变量中读取 Ck Sk 等信息，并返回一个 client 对象</span><span class="token keyword">func</span> <span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Client <span class="token punctuation">&#123;</span>client <span class="token operator">:=</span> Client<span class="token punctuation">&#123;</span>SecretId<span class="token punctuation">:</span>  os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"TENCENTCLOUD_SECRET_ID"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SecretKey<span class="token punctuation">:</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"TENCENTCLOUD_SECRET_KEY"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>InstaceId<span class="token punctuation">:</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"TENCENTCLOUD_INSTANCE_ID"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Region<span class="token punctuation">:</span>    os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"TENCENTCLOUD_REGION"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Endpoint<span class="token punctuation">:</span>  endpoint<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> client<span class="token punctuation">.</span>SecretId <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> client<span class="token punctuation">.</span>SecretKey <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> client<span class="token punctuation">.</span>InstaceId <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> client<span class="token punctuation">.</span>Region <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Please set TENCENTCLOUD_SECRET_ID, TENCENTCLOUD_SECRET_KEY, TENCENTCLOUD_INSTANCE_ID, TENCENTCLOUD_REGION"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> client<span class="token punctuation">&#125;</span><span class="token comment">// 定义添加防火墙规则的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Client<span class="token punctuation">)</span> <span class="token function">AddRules</span><span class="token punctuation">(</span>firewallRules <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>lighthouse<span class="token punctuation">.</span>FirewallRule<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>credential <span class="token operator">:=</span> common<span class="token punctuation">.</span><span class="token function">NewCredential</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>SecretId<span class="token punctuation">,</span> c<span class="token punctuation">.</span>SecretKey<span class="token punctuation">)</span>cpf <span class="token operator">:=</span> profile<span class="token punctuation">.</span><span class="token function">NewClientProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cpf<span class="token punctuation">.</span>HttpProfile<span class="token punctuation">.</span>Endpoint <span class="token operator">=</span> endpointclient<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> lighthouse<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>credential<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Region<span class="token punctuation">,</span> cpf<span class="token punctuation">)</span>request <span class="token operator">:=</span> lighthouse<span class="token punctuation">.</span><span class="token function">NewCreateFirewallRulesRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span>InstanceId <span class="token operator">=</span> common<span class="token punctuation">.</span><span class="token function">StringPtr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>InstaceId<span class="token punctuation">)</span>request<span class="token punctuation">.</span>FirewallRules <span class="token operator">=</span> firewallRulesresponse<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">CreateFirewallRules</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>errors<span class="token punctuation">.</span>TencentCloudSDKError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"An API error has returned: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取防火墙规则"><a href="#获取防火墙规则" class="headerlink" title="获取防火墙规则"></a>获取防火墙规则</h3><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">func (c Client) GetRules() string &#123;credential :&#x3D; common.NewCredential(c.SecretId, c.SecretKey)cpf :&#x3D; profile.NewClientProfile()cpf.HttpProfile.Endpoint &#x3D; endpointclient, _ :&#x3D; lighthouse.NewClient(credential, c.Region, cpf)request :&#x3D; lighthouse.NewDescribeFirewallRulesRequest()request.InstanceId &#x3D; common.StringPtr(c.InstaceId)response, err :&#x3D; client.DescribeFirewallRules(request)if _, ok :&#x3D; err.(*errors.TencentCloudSDKError); ok &#123;fmt.Printf(&quot;An API error has returned: %s&quot;, err)return &quot;&quot;&#125;if err !&#x3D; nil &#123;panic(err)&#125;return response.ToJsonString()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>在本地的 <code>~/.bashrc</code> 或者 <code>~/.zshrc</code> 文件中设置一些 AKSK 信息、实例 ID、region 信息等参数；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">TENCENTCLOUD_SECRET_ID</span><span class="token operator">=</span><span class="token string">"AKiiiplQntjJbcMp1"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">TENCENTCLOUD_SECRET_KEY</span><span class="token operator">=</span><span class="token string">"SKkkkiiwwlwjmmG5"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">TENCENTCLOUD_INSTANCE_ID</span><span class="token operator">=</span><span class="token string">"lhins-qjxazjaa"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">TENCENTCLOUD_REGION</span><span class="token operator">=</span><span class="token string">"ap-beijing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置好环境变量之后，再编译运行看下能否成功</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go build -o cfwctl$ <span class="token function">chmod</span> +x cfwctl$ cfwctl <span class="token function">add</span>my public <span class="token function">ip</span> is <span class="token number">193.191</span>.231.82<span class="token punctuation">&#123;</span><span class="token string">"Response"</span>:<span class="token punctuation">&#123;</span><span class="token string">"RequestId"</span><span class="token builtin class-name">:</span><span class="token string">"30e71243-1793-112e-9e41-b310ec599b90"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是 arm64 的 OpenWrt 环境，在本地开发机上进行跨平台编译，然后将编译好的 cfwctl 二进制文件 scp 到路由器上，再添加 cron job 定时任务即可，这样就能自动定时更新防火墙规则来。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux  <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>arm64 go build -o cfwctl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上次去北京出差，为了便捷地访问家里内网中的一些服务，就在腾
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="云服务器" scheme="https://blog.k8s.li/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
