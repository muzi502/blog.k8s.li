<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reimu&#39;s blog</title>
  <icon>https://blog.k8s.li/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.k8s.li/"/>
  <updated>2021-12-14T16:00:00.000Z</updated>
  <id>https://blog.k8s.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tencent Cloud lighthouse Firewall tool</title>
    <link href="https://blog.k8s.li/cfwctl.html"/>
    <id>https://blog.k8s.li/cfwctl.html</id>
    <published>2021-12-14T16:00:00.000Z</published>
    <updated>2021-12-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次去北京出差，为了便捷地访问家里内网中的一些服务，就在腾讯云服务器上部署了一个 frps 服务，在本地内网的 Openwrt 路由器上安装 frpc 客户端，将内网中的一台 Windows 服务器穿透到腾讯云服务器上。然后通过 Windows RDP 远程连接到这台 Windows 机器上，来使用内网的一些服务。之前也尝试过 WireGuard，但是使用了一段时间体验下来感觉还是通过内网穿透的方式比较稳定和流畅。于是最终的方式还是选用 frp 内网穿透的方案。</p><p> 本着方便省事儿的原则就放心大胆地开放了云服务器的安全组规则。不幸的是，由于这样的疏忽，某一天我的 Windows 虚拟机被弱口令（admin2020）给爆破了。巨大的损失就是挂载到 Windows 虚拟机上的 NAS 存储被勒索病毒进行了加密😂。不过好在最最重要的数据全部存到了 OneDrive 上，NAS 上损失的都是一些下载的电影、书籍以及一些 ISO、虚拟机模版之类的文件。一下子损失了 8TB 的数据很心疼，毕竟是自己辛辛苦苦搜集的资源，但是仔细想一下，这些资源都不是自己的，基本上都是从下载下来的，还可以通过同样的方式找回来。或许是之前看过《断舍离》的缘故，也看的开了，难受了一小会儿之后就好过来了。毕竟这个世界上，没有无法不能失去的东西，也没有非得必须要得到的东西。</p><p>有了此次教训，就开始考虑对手上的云主机资源进行安全加固，将一些与内网互通的云主机安全组/防火墙的通用去除了允许所有，只添加本地公网 IP 的允许规则。但是对于家庭宽带用户来讲，公网 IP 并不是一个固定的 IP，而是会一直不断变化，总不能每次变化之后再登录到云主机控制台手动添加一下吧。于是就想着有没有自动化的方式来自动添加和更新安全组/防火墙规则呢？</p><h2 id="Terraform"><a href="#Terraform" class="headerlink" title="Terraform"></a>Terraform</h2><p>第一个想到的方案便是 terraform，主流的云厂商都有对应的 provider 支持，腾讯云应该也是能够支持的。不过看了官方的 <a href="https://github.com/tencentcloudstack/terraform-provider-tencentcloud" target="_blank" rel="noopener">terraform-provider-tencentcloud</a> repo 文档之后，并没有找到给 lighthouse 主机配置防火墙规则的支持，遂放弃。</p><h2 id="cfwctl"><a href="#cfwctl" class="headerlink" title="cfwctl"></a>cfwctl</h2><p>既然 terraform 不支持，那就自己造轮子写一个吧，就叫它 Cloud Firewall Control Tool，简称 <a href="https://github.com/muzi502/cfwctl" target="_blank" rel="noopener">cfwctl</a>。腾讯云官方的 API 文档还可以，还能在线生成代码，用起来也十分方便。考虑到会将该工具运行到运行到 arm64 的路由器上，因此跨平台运行 cfwctl 使用 golang 来实现无疑是个不错的选择，正好也能来练练手。</p><p>执行的操作其实很简单，先是通过某种方式获取本地机器的公网 IP，然后将该 IP 添加到对应实例的防火墙规则当中，并在规则描述中添加标识符来标记。目前自己只需要添加规则，先凑活着用一段时间，看下效果如何。目前只支持腾讯云的 lighthouse 实例，后续有机会再增加几个别的云厂商支持。</p><h3 id="获取公网-IP"><a href="#获取公网-IP" class="headerlink" title="获取公网 IP"></a>获取公网 IP</h3><p>首先要获取到我们本地网路的公网 IP，由于公网 IP 可能一直是变化的，所以我们每次更新防火墙规则之前都需要获取最新的公网 IP。以下是具体实现的代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 IPv4 的正则表达式，目的是从获取公网 IP 的  API 返回结果中过滤出 IPv4 地址</span></span><br><span class="line"><span class="keyword">const</span> ipv4_regex = <span class="string">`(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))&#123;3&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义几个几个提供获取公网 IPv4 地址的 API URL</span></span><br><span class="line"><span class="keyword">var</span> urlList = []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"https://ip.me"</span></span><br><span class="line"><span class="string">"http://ip.sb"</span>,</span><br><span class="line"><span class="string">"http://ip.cip.cc"</span>,</span><br><span class="line"><span class="string">"http://myip.ipip.net"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPublicIP</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, url := <span class="keyword">range</span> urlList &#123;</span><br><span class="line">    <span class="comment">// 创建一个 http client</span></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">    <span class="comment">// 设置 client 的请求方法为 GET 以及请求的 URL</span></span><br><span class="line">request, err := http.NewRequest(<span class="string">"GET"</span>, url, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 设置 Client 的 User-Agent 为 curl，不然一些 API 会返回 html 的结果</span></span><br><span class="line">request.Header.Set(<span class="string">"User-Agent"</span>, <span class="string">"curl/7.54.0"</span>)</span><br><span class="line">resp, err := client.Do(request)</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &amp;&amp; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">    <span class="comment">// 从 API 返回结果中用正则匹配出 IPv4 地址</span></span><br><span class="line">reg := regexp.MustCompile(ipv4_regex)</span><br><span class="line">ipList := reg.FindAllString(<span class="keyword">string</span>(body), <span class="number">-1</span>)</span><br><span class="line">    <span class="comment">// 如果匹配结果中有 IPv4 地址，则返回第一个元素即可</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ipList) &gt; <span class="number">0</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"my public ip is %s\n"</span>, ipList[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> ipList[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加-Firewall-规则"><a href="#添加-Firewall-规则" class="headerlink" title="添加 Firewall 规则"></a>添加 Firewall 规则</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"</span></span><br><span class="line"><span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"</span></span><br><span class="line"><span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"</span></span><br><span class="line">lighthouse <span class="string">"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/lighthouse/v20200324"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 API 请求的 URL</span></span><br><span class="line"><span class="keyword">const</span> endpoint = <span class="string">"lighthouse.tencentcloudapi.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义请求 API 的 Client 结构体</span></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">SecretId  <span class="keyword">string</span></span><br><span class="line">SecretKey <span class="keyword">string</span></span><br><span class="line">InstaceId <span class="keyword">string</span></span><br><span class="line">Region    <span class="keyword">string</span></span><br><span class="line">Endpoint  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过该方法从环境变量中读取 Ck Sk 等信息，并返回一个 client 对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewClient</span><span class="params">()</span> <span class="title">Client</span></span> &#123;</span><br><span class="line">client := Client&#123;</span><br><span class="line">SecretId:  os.Getenv(<span class="string">"TENCENTCLOUD_SECRET_ID"</span>),</span><br><span class="line">SecretKey: os.Getenv(<span class="string">"TENCENTCLOUD_SECRET_KEY"</span>),</span><br><span class="line">InstaceId: os.Getenv(<span class="string">"TENCENTCLOUD_INSTANCE_ID"</span>),</span><br><span class="line">Region:    os.Getenv(<span class="string">"TENCENTCLOUD_REGION"</span>),</span><br><span class="line">Endpoint:  endpoint,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> client.SecretId == <span class="string">""</span> || client.SecretKey == <span class="string">""</span> || client.InstaceId == <span class="string">""</span> || client.Region == <span class="string">""</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"Please set TENCENTCLOUD_SECRET_ID, TENCENTCLOUD_SECRET_KEY, TENCENTCLOUD_INSTANCE_ID, TENCENTCLOUD_REGION"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义添加防火墙规则的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Client)</span> <span class="title">AddRules</span><span class="params">(firewallRules []*lighthouse.FirewallRule)</span></span> &#123;</span><br><span class="line">credential := common.NewCredential(c.SecretId, c.SecretKey)</span><br><span class="line">cpf := profile.NewClientProfile()</span><br><span class="line">cpf.HttpProfile.Endpoint = endpoint</span><br><span class="line">client, _ := lighthouse.NewClient(credential, c.Region, cpf)</span><br><span class="line"></span><br><span class="line">request := lighthouse.NewCreateFirewallRulesRequest()</span><br><span class="line">request.InstanceId = common.StringPtr(c.InstaceId)</span><br><span class="line">request.FirewallRules = firewallRules</span><br><span class="line"></span><br><span class="line">response, err := client.CreateFirewallRules(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s"</span>, response.ToJsonString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取防火墙规则"><a href="#获取防火墙规则" class="headerlink" title="获取防火墙规则"></a>获取防火墙规则</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Client)</span> <span class="title">GetRules</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">credential := common.NewCredential(c.SecretId, c.SecretKey)</span><br><span class="line">cpf := profile.NewClientProfile()</span><br><span class="line">cpf.HttpProfile.Endpoint = endpoint</span><br><span class="line">client, _ := lighthouse.NewClient(credential, c.Region, cpf)</span><br><span class="line"></span><br><span class="line">request := lighthouse.NewDescribeFirewallRulesRequest()</span><br><span class="line"></span><br><span class="line">request.InstanceId = common.StringPtr(c.InstaceId)</span><br><span class="line"></span><br><span class="line">response, err := client.DescribeFirewallRules(request)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*errors.TencentCloudSDKError); ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"An API error has returned: %s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> response.ToJsonString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>在本地的 <code>~/.bashrc</code> 或者 <code>~/.zshrc</code>文件中设置一些 AKSK信息、实例 ID、region 信息等参数；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> TENCENTCLOUD_SECRET_ID=<span class="string">"AKiiiplQntjJbcMp1"</span></span><br><span class="line"><span class="built_in">export</span> TENCENTCLOUD_SECRET_KEY=<span class="string">"SKkkkiiwwlwjmmG5"</span></span><br><span class="line"><span class="built_in">export</span> TENCENTCLOUD_INSTANCE_ID=<span class="string">"lhins-qjxazjaa"</span></span><br><span class="line"><span class="built_in">export</span> TENCENTCLOUD_REGION=<span class="string">"ap-beijing"</span></span><br></pre></td></tr></table></figure><ul><li>设置好环境变量之后，再编译运行看下能否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ go build -o cfwctl</span><br><span class="line">$ chmod +x cfwctl</span><br><span class="line">$ cfwctl add</span><br><span class="line"></span><br><span class="line">my public ip is 193.191.231.82</span><br><span class="line">&#123;<span class="string">"Response"</span>:&#123;<span class="string">"RequestId"</span>:<span class="string">"30e71243-1793-112e-9e41-b310ec599b90"</span>&#125;&#125;%</span><br></pre></td></tr></table></figure><ul><li>如果是 arm64 的 OpenWrt 环境，在本地开发机上进行跨平台编译，然后将编译好的 cfwctl 二进制文件 scp 到路由器上，再添加 cron job 定时任务即可，这样就能自动定时更新防火墙规则来。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ CGO_ENABLED=0  GOOS=linux  GOARCH=arm64 go build -o cfwctl</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上次去北京出差，为了便捷地访问家里内网中的一些服务，就在腾
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="云服务器" scheme="https://blog.k8s.li/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python 处理 kindle 标注文本</title>
    <link href="https://blog.k8s.li/python-kindle.html"/>
    <id>https://blog.k8s.li/python-kindle.html</id>
    <published>2021-11-29T16:00:00.000Z</published>
    <updated>2021-12-22T00:56:04.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kindle-标注"><a href="#kindle-标注" class="headerlink" title="kindle 标注"></a>kindle 标注</h2><p>大学毕业之后不再像在校时那样能随便去图书馆看书，就从传统纸质书的阅转换到了 kindle 上来。这两年就一直习惯使用 kindle 来看书，读书过程中遇到一些不错的句子或段落往往会标注记录下来。这样时间一长，现在的 Kindle 上就积累了 共 189 本书和 3522 条笔记 😂。本人有个习惯就是会进行笔记整理，通过这些标注来回忆当时读书时的一些想法，整理一下读书笔记。Kindle 标注的文本都是以 txt 格式方式存储在 Kindle 的 <code>/documents/My Clippings.txt</code> 文件中。由于 txt 格式的文本数据阅读起来实在是太费劲了，于是之前参考了 <a href="https://github.com/cyang812/kindleNote" target="_blank" rel="noopener">kindleNote</a> 和 <a href="https://bookfere.com/tools#ClippingsFere" target="_blank" rel="noopener">书伴网 Clippings Fere 工具</a> 缝合了一个工具 <strong><a href="https://github.com/muzi502/kindle" target="_blank" rel="noopener">muzi502/kindle</a></strong>。用它来将 txt 格式的标注文本渲染成 html 的格式。这样每一本书就能有一个单独的 html 页面来展示标注的内容，阅读起来就十分方便。最近花了点时间重构了一下该工具，并新增了 svg 日历图的生成方式，本文就介绍一下这个工具的实现思路和方法。</p><h2 id="分隔"><a href="#分隔" class="headerlink" title="分隔"></a>分隔</h2><p>由于 Kindle 的标注文本有一定的规律可循，实现起来还是比较方便滴。大致思路就是先读取 Kindle 的标注文件 <code>My Clippings.txt</code>，然后根据分隔符 <code>==========</code> 分割每一个标注；每个标注包含着书名、标注时间、标注内容等信息，规律如下：</p><ul><li>第一行：书籍的名称以及作者，可以以半角括号来拆分出书名和作者；</li><li>第二行：标注的位置和时间，以 <code>|</code> 拆分出标注位置和标注时间；</li><li>第三行：空行，可以将这一行去除掉，即取出标注文件中所有的空行；</li><li>第四行：标注文本内容，Kindle 标注的正文是没有换行的，即便是连续标注了几段也都会压缩在一行里面；</li><li>第五行： 即分隔符<code>==========</code> ，所有的标注都是以它来进行分隔；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">娱乐至死 ([美]尼尔·波兹曼)</span><br><span class="line">- 您在位置 <span class="comment">#109-110的标注 | 添加于 2019年10月27日星期日 下午11:09:01</span></span><br><span class="line"></span><br><span class="line">电视需要的内容和其他媒体截然不同。电视无法表现政治哲学，电视的形式注定了它同政治哲学是水火不相容的。</span><br><span class="line">==========</span><br><span class="line">娱乐至死 ([美]尼尔·波兹曼)</span><br><span class="line">- 您在位置 <span class="comment">#110-112的标注 | 添加于 2019年10月27日星期日 下午11:09:19</span></span><br><span class="line"></span><br><span class="line">信息、内容，或者如果你愿意，可以称之为构成“今日新闻”的“素材”，在一个缺乏媒介的世界里是不存在的——是不能存在的。</span><br><span class="line">==========</span><br><span class="line">娱乐至死 ([美]尼尔·波兹曼)</span><br><span class="line">- 您在位置 <span class="comment">#114-115的标注 | 添加于 2019年10月27日星期日 下午11:09:52</span></span><br><span class="line"></span><br><span class="line">电报使无背景的信息能够以难以置信的速度跨越广阔的空间。</span><br><span class="line">==========</span><br><span class="line">通往奴役之路 (弗里德里希·奥古斯特·冯·哈耶克)</span><br><span class="line">- 您在位置 <span class="comment">#259-261的标注 | 添加于 2019年11月8日星期五 下午12:50:33</span></span><br><span class="line"></span><br><span class="line">在安排我们的事务时，应该尽可能多地运用自发的社会力量，而尽可能少地借助于强制，这个基本原则能够作千变万化的应用。深思熟虑地创造一种使竞争能尽可能地有益进行的体制，和被动地接受既定的制度，二者之间的差别尤其悬殊。</span><br><span class="line">==========</span><br><span class="line">通往奴役之路 (弗里德里希·奥古斯特·冯·哈耶克)</span><br><span class="line">- 您在位置 <span class="comment">#312-318的标注 | 添加于 2019年11月8日星期五 下午12:54:46</span></span><br><span class="line"></span><br><span class="line">尽管绝大部分的新思想，尤其是社会主义，并非起源于德国，但正是在德国它们得到完善，并在19世纪的最后25年和20世纪的最初25年，得到最充分的发展。现在，人们常常忽略了，德国在这一时期社会主义的理论和实际的发展中起了多么巨大的领导作用；在社会主义成为这个国家的一个严重问题以前的那一代，德国国会中已有一个很大的社会主义政党；并且在不久以前，社会主义学说的发展，几乎完全是在德国和奥地利进行的，以致于今天俄国人的讨论，在很大程度上是从德国人中止的地方进行的；绝大部分英国的社会主义者尚未意识到，他们才开始发现的大多数问题，德国社会主义者很早以前已彻底讨论过了。</span><br><span class="line">==========</span><br><span class="line">见识城邦·童年的消逝（媒介文化研究大师尼尔·波兹曼20年经典畅销作品） (尼尔·波兹曼)</span><br><span class="line">- 您在位置 <span class="comment">#536-539的标注 | 添加于 2019年11月21日星期四 上午6:47:26</span></span><br><span class="line"></span><br><span class="line">列奥·洛文塔尔（Leo Lowenthal）说道：“自从文艺复兴以来，关于人类本性的普遍哲学是建立在这样的构想之上的：每个个人都是离经叛道者。在很大程度上，个人的存在就在于坚持个性，反对社会的限制和规范要求。”</span><br><span class="line">==========</span><br></pre></td></tr></table></figure><ul><li>首先定义一个书籍列表，列表中的每个元素为一个字典，字典中记录的信息如下：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: book_name,</span><br><span class="line">    <span class="attr">"author"</span>: book_author,</span><br><span class="line">    <span class="attr">"url"</span>: book_url,</span><br><span class="line">    <span class="attr">"nums"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"marks"</span>: [],</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>每本书的标注列表</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"time"</span>: mark_time, </span><br><span class="line">    <span class="attr">"address"</span>: mark_address, </span><br><span class="line">    <span class="attr">"content"</span>: mark_content</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>转换后的 json 格式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"娱乐至死 "</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"尼尔·波兹曼"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"dd0875de349e84eb7e6a2402c64bd95a"</span>,</span><br><span class="line">    <span class="attr">"nums"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"marks"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年10月27日星期日 下午11:09:01"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #109-110的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"电视需要的内容和其他媒体截然不同。电视无法表现政治哲学，电视的形式注定了它同政治哲学是水火不相容的。"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年10月27日星期日 下午11:09:19"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #110-112的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"信息、内容，或者如果你愿意，可以称之为构成“今日新闻”的“素材”，在一个缺乏媒介的世界里是不存在的——是不能存在的。"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年10月27日星期日 下午11:09:52"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #114-115的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"电报使无背景的信息能够以难以置信的速度跨越广阔的空间。"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"通往奴役之路 "</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"弗里德里希·奥古斯特·冯·哈耶克"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"646a2a825b48c4c9df653a42aa72b702"</span>,</span><br><span class="line">    <span class="attr">"nums"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"marks"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年11月8日星期五 下午12:50:33"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #259-261的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"在安排我们的事务时，应该尽可能多地运用自发的社会力量，而尽可能少地借助于强制，这个基本原则能够作千变万化的应用。深思熟虑地创造一种使竞争能尽可能地有益进行的体制，和被动地接受既定的制度，二者之间的差别尤其悬殊。"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年11月8日星期五 下午12:54:46"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #312-318的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"尽管绝大部分的新思想，尤其是社会主义，并非起源于德国，但正是在德国它们得到完善，并在19世纪的最后25年和20世纪的最初25年，得到最充分的发展。现在，人们常常忽略了，德国在这一时期社会主义的理论和实际的发展中起了多么巨大的领导作用；在社会主义成为这个国家的一个严重问题以前的那一代，德国国会中已有一个很大的社会主义政党；并且在不久以前，社会主义学说的发展，几乎完全是在德国和奥地利进行的，以致于今天俄国人的讨论，在很大程度上是从德国人中止的地方进行的；绝大部分英国的社会主义者尚未意识到，他们才开始发现的大多数问题，德国社会主义者很早以前已彻底讨论过了。"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"见识城邦·童年的消逝"</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"尼尔·波兹曼"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"1e1c307ca9d857c047d33df2a808e557"</span>,</span><br><span class="line">    <span class="attr">"nums"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"marks"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"time"</span>: <span class="string">" 添加于 2019年11月21日星期四 上午6:47:26"</span>,</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"您在位置 #536-539的标注"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"列奥·洛文塔尔（Leo Lowenthal）说道：“自从文艺复兴以来，关于人类本性的普遍哲学是建立在这样的构想之上的：每个个人都是离经叛道者。在很大程度上，个人的存在就在于坚持个性，反对社会的限制和规范要求。”"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="txt-to-json"><a href="#txt-to-json" class="headerlink" title="txt to json"></a>txt to json</h2><p>有了上面的思路之后，我们就可以对 Kindle 的标注文本进行处理。先将 txt 格式的文本转换成 json 结构化的数据。然后再使用这个结构化的 json 进行后续的处理操作。对于文本的处理，选择 Python 比较合适。因为在 Python 中字符串对象有很多操作方法，比如分割、匹配、替换等等，都要比其他语言方便一些；以下就是具体实现的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义分隔符</span></span><br><span class="line">DELIMITER = <span class="string">u"==========\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照分隔符对所有标注进行分割，并存放在该数组中</span></span><br><span class="line">all_marks = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照书籍来对标注进行分组存放</span></span><br><span class="line">all_books = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数用于获取当前书籍在 all_books 列表中的索引</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_book_index</span><span class="params">(book_name)</span>:</span></span><br><span class="line">    <span class="string">"""get book's index"""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_books)):</span><br><span class="line">        <span class="keyword">if</span> all_books[i][<span class="string">"name"</span>] == book_name:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="comment"># 如果书籍并不存在，说明还没有插入该元素，就将该元素插入到最后一个元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义渲染处理标注文本的函数  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_clippings</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> all_marks</span><br><span class="line">    <span class="keyword">global</span> all_books</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以 utf-8 格式打开标注文件并并将内容读取到 content 变量中</span></span><br><span class="line">    <span class="keyword">with</span> open(file_name, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对读入的内容去除空行，即将 '\n\n' 替换为 '\n'，方便后续处理</span></span><br><span class="line">    content = content.replace(<span class="string">"\n\n"</span>, <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对去除空行的内容以分隔符进行分隔，得到的是一个列表，每个元素就是一个标注</span></span><br><span class="line">    all_marks = content.split(DELIMITER)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_marks)):</span><br><span class="line">        <span class="comment"># 以换行符进行分隔，将每个标注拆分成四个元素</span></span><br><span class="line">        mark = all_marks[i].split(<span class="string">"\n"</span>)</span><br><span class="line">        <span class="comment"># 如果该标注中元素的数量为 4 说明就是一个正确的标注，否则就是无效的</span></span><br><span class="line">        <span class="keyword">if</span> len(mark) == <span class="number">4</span>:</span><br><span class="line"></span><br><span class="line">          <span class="comment"># 对标注的第一个元素，即书名部分进行 md5 计算，用于将它设置为后续的 url 路径，以及 html 文件名</span></span><br><span class="line">            book_url = md5(mark[<span class="number">0</span>].encode(<span class="string">"utf-8"</span>)).hexdigest()</span><br><span class="line">            <span class="comment"># 去除掉书名中一些特殊的字符，用来拆分出简短的书名</span></span><br><span class="line">            book_info = re.split(<span class="string">r"[()&lt;&gt;|\[\]（）《》【】｜]\s*"</span>, mark[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># 获取书名，一般为第一个元素，目的是为了去除 kinlde 中文商店下载的又长又臭的书名</span></span><br><span class="line">            book_name = book_info[<span class="number">0</span>] <span class="keyword">if</span> str(book_info[<span class="number">0</span>]) != <span class="string">""</span> <span class="keyword">else</span> (mark[<span class="number">0</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 获取该书的作者</span></span><br><span class="line">            book_author = book_info[<span class="number">-2</span>] <span class="keyword">if</span> len(book_info) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">""</span></span><br><span class="line">            </span><br><span class="line">            mark_info = mark[<span class="number">1</span>].split(<span class="string">"|"</span>)</span><br><span class="line">  <span class="comment"># 获取该书的标记时间和标注位置</span></span><br><span class="line">            mark_time = mark_info[<span class="number">1</span>]</span><br><span class="line">            mark_address = mark_info[<span class="number">0</span>].strip(<span class="string">"- "</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 获取该标注的正文内容</span></span><br><span class="line">            mark_content = mark[<span class="number">2</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 查询该书的列表索引，将该标记插入到该书的 marks 列表中</span></span><br><span class="line">            book_index = get_book_index(book_name)</span><br><span class="line">            <span class="keyword">if</span> book_index == <span class="number">-1</span>:</span><br><span class="line">                all_books.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"name"</span>: book_name,</span><br><span class="line">                        <span class="string">"author"</span>: book_author,</span><br><span class="line">                        <span class="string">"url"</span>: book_url,</span><br><span class="line">                        <span class="string">"nums"</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="string">"marks"</span>: [],</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            all_books[book_index][<span class="string">"marks"</span>].append(</span><br><span class="line">                &#123;<span class="string">"time"</span>: mark_time, <span class="string">"address"</span>: mark_address, <span class="string">"content"</span>: mark_content&#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 更新该书的标记数量</span></span><br><span class="line">            all_books[book_index][<span class="string">"nums"</span>] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 使用 lambda 函数以标注数量为 key 对所有书籍进行倒序排序</span></span><br><span class="line">    all_books.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">"nums"</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 以下就是将 all_books 列表以 json 格式写入到一个 json 文件中，或许会有一些其他的用途，比如前端展示</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        json_str = json.dumps(all_books, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"clippings.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(json_str)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    file_path = <span class="string">"source.txt"</span> <span class="keyword">if</span> len(sys.argv) == <span class="number">1</span> <span class="keyword">else</span> sys.argv[<span class="number">1</span>]</span><br><span class="line">    render_clippings(file_path)</span><br></pre></td></tr></table></figure><h2 id="json-to-html"><a href="#json-to-html" class="headerlink" title="json to html"></a>json to html</h2><p>接下来再将上述得到的 json 内容写入到 html 文件中。渲染 html 的方式有两种，一种是通过 jinja2 的模版进行渲染，一种是通过字符串替换拼凑 html 内容。两种各有各的好处，jinjia2 实现起来比较优雅一些，但是会引入一个 jinjia2 的依赖；第二种方式就无任何依赖，适用性回好一些；下面就讲一下使用第二种方式的实现；</p><ul><li>将 html 内容按照元素的分布进行拆分，定义如下几个几个特殊的变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">HTML_HEAD = <span class="string">"""&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset="utf-8" /&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt; Kindle 读书笔记 &lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span></span><br><span class="line"><span class="string">&lt;link href="../style/css/bootstrap.min.css" rel="stylesheet" type="text/css" /&gt;</span></span><br><span class="line"><span class="string">&lt;link href="../style/css/bootstrap-theme.min.css" rel="stylesheet" type="text/css" /&gt;</span></span><br><span class="line"><span class="string">&lt;link href="../style/css/custom.css" rel="stylesheet" type="text/css" /&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">INDEX_TITLE = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;div class="container"&gt;</span></span><br><span class="line"><span class="string">&lt;header class="header col-md-12"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="page-header"&gt;</span></span><br><span class="line"><span class="string">                &lt;embed src="date.svg" type="image/svg+xml" /&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;&lt;small&gt;&lt;span class="glyphicon glyphicon-book" aria-hidden="true"&gt;&lt;/span&gt; Kindle 读书笔记 &lt;/small&gt; &lt;span class="badge"&gt;更新于 UPDATE &lt;/span&gt; &lt;span class="badge"&gt; 共 BOOKS_SUM 本书，SENTENCE_SUM 条笔记&lt;/span&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/header&gt;</span></span><br><span class="line"><span class="string">&lt;div class="col-md-12"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="list-group"&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">BOOK_TITLE = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;div class="container"&gt;</span></span><br><span class="line"><span class="string">&lt;header class="header col-md-12"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="page-header"&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;&lt;small&gt;&lt;span class="glyphicon glyphicon-book" aria-hidden="true"&gt;&lt;/span&gt;BookName&lt;/small&gt; &lt;span class="badge"&gt;&lt;/span&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/header&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;div class="col-md-2"&gt;</span></span><br><span class="line"><span class="string">&lt;ul class="nav nav-pills nav-stacked go-back"&gt;</span></span><br><span class="line"><span class="string">&lt;li role="presentation" class="active text-center"&gt;</span></span><br><span class="line"><span class="string">&lt;a href="../index.html" style="border-radius: 50%;"&gt;&lt;span class="glyphicon glyphicon-backward" aria-hidden="true"&gt;&lt;/span&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">MARK_CONTENT = <span class="string">"""</span></span><br><span class="line"><span class="string">    &lt;div class="col-md-12"&gt;</span></span><br><span class="line"><span class="string">&lt;article&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel panel-default"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel-body mk88"&gt;&lt;p&gt;SENTENCE_TXT</span></span><br><span class="line"><span class="string">                    &lt;/p&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel-footer text-right"&gt;</span></span><br><span class="line"><span class="string">&lt;span class="label label-primary"&gt;&lt;span class="glyphicon glyphicon-tag" aria-hidden="true"&gt;&lt;/span&gt; 标注&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span class="label label-default"&gt;&lt;span class="glyphicon glyphicon-bookmark" aria-hidden="true"&gt;&lt;/span&gt;SENTENCE_ADDR&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span class="label label-default"&gt;&lt;span class="glyphicon glyphicon-time" aria-hidden="true"&gt;&lt;/span&gt;SENTENCE_TIME&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/article&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">ITEM_CONTENT = <span class="string">"""          &lt;a href="HTML_URL" class="list-group-item"&gt;&lt;span class="glyphicon glyphicon-book" aria-hidden="true"&gt;&lt;/span&gt;HTML_FILE_NAME&lt;span class="glyphicon glyphicon-tag" aria-hidden="true"&gt;SENTENCE_COUNT&lt;/span&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">FOOTER_CONTENT = <span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>渲染 index.html 文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_index_html</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"index.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(HTML_HEAD.replace(<span class="string">"../"</span>, <span class="string">""</span>))</span><br><span class="line">        <span class="comment"># 替换书籍的总数量和标注的总数量</span></span><br><span class="line">        f.write(</span><br><span class="line">            INDEX_TITLE.replace(<span class="string">"SENTENCE_SUM"</span>, str(len(all_marks)))</span><br><span class="line">            .replace(<span class="string">"UPDATE"</span>, time.strftime(<span class="string">"%Y-%m-%d %H:%M"</span>, time.localtime()))</span><br><span class="line">            .replace(<span class="string">"BOOKS_SUM"</span>, str(len(all_books)))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据预先定义的标识字符替换每本书籍的书籍名、作者、标注数量、URL</span></span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> all_books:</span><br><span class="line">            f.write(</span><br><span class="line">                ITEM_CONTENT.replace(<span class="string">"HTML_URL"</span>, <span class="string">"books/"</span> + book[<span class="string">"url"</span>] + <span class="string">".html"</span>)</span><br><span class="line">                .replace(<span class="string">"HTML_FILE_NAME"</span>, book[<span class="string">"name"</span>] + <span class="string">" ["</span> + book[<span class="string">"author"</span>] + <span class="string">"]"</span>)</span><br><span class="line">                .replace(<span class="string">"SENTENCE_COUNT"</span>, str(book[<span class="string">"nums"</span>]))</span><br><span class="line">            )</span><br><span class="line">        f.write(FOOTER_CONTENT)</span><br></pre></td></tr></table></figure><ul><li>渲染 book 书籍页面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_books_html</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">"books"</span>):</span><br><span class="line">        shutil.rmtree(<span class="string">"books"</span>)</span><br><span class="line">    os.mkdir(<span class="string">"books"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_books)):</span><br><span class="line">        book_url = all_books[i][<span class="string">"url"</span>]</span><br><span class="line">        book_name = all_books[i][<span class="string">"name"</span>]</span><br><span class="line">        book_author = all_books[i][<span class="string">"author"</span>]</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"books/"</span> + book_url + <span class="string">".html"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(HTML_HEAD)</span><br><span class="line">            f.write(</span><br><span class="line">                BOOK_TITLE.replace(<span class="string">"BookName"</span>, book_name + <span class="string">" ["</span> + book_author + <span class="string">"]"</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(all_books[i][<span class="string">"marks"</span>])):</span><br><span class="line">                mark = all_books[i][<span class="string">"marks"</span>][j]</span><br><span class="line">                f.write(</span><br><span class="line">                    MARK_CONTENT.replace(<span class="string">"SENTENCE_TXT"</span>, mark[<span class="string">"content"</span>])</span><br><span class="line">                    .replace(<span class="string">"SENTENCE_ADDR"</span>, mark[<span class="string">"address"</span>])</span><br><span class="line">                    .replace(<span class="string">"SENTENCE_TIME"</span>, mark[<span class="string">"time"</span>])</span><br><span class="line">                )</span><br><span class="line">            f.write(FOOTER_CONTENT)</span><br></pre></td></tr></table></figure><h2 id="date-to-svg"><a href="#date-to-svg" class="headerlink" title="date to svg"></a>date to svg</h2><p>前段时间看到 yihong 大佬的 <strong><a href="https://github.com/yihong0618/GitHubPoster" target="_blank" rel="noopener">GitHubPoster</a></strong> 支持了 json 格式的数据，只要提供类似类似如下格式的数据，就可以生成相应的 svg 了。真的是一个很棒的特性，这样我们就可以根据每天标记的数量来生成一个对应的 svg 图了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"2019-05-28"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-06-10"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-07-18"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-07-23"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-07-24"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-07-29"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"2019-08-12"</span>: <span class="number">1</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">支持了自定义 json 的源数据，生成了某个 tg 现充群的群聊的 poster <a href="https://t.co/nhSe3qlVe0" target="_blank" rel="noopener">https://t.co/nhSe3qlVe0</a> <a href="https://t.co/bkijsFDtzC" target="_blank" rel="noopener">pic.twitter.com/bkijsFDtzC</a></p>&mdash; yihong0618 (@yihong0618) <a href="https://twitter.com/yihong0618/status/1466275108952051716?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 2, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><ul><li>生成 <code>date.json</code> 数据文件</li></ul><p>生成一个{日期: 数量} 格式的字典其实挺简单，不过对于 kindle 标注的时间格式需要稍微处理一下，转换成一个标准的时间格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_date_json</span><span class="params">()</span>:</span></span><br><span class="line">    all_dates = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_marks)):</span><br><span class="line">        mark = all_marks[i].split(<span class="string">"\n"</span>)</span><br><span class="line">        <span class="comment"># 如果一个标注有 4 行说明它就是一个正确的标注</span></span><br><span class="line">        <span class="keyword">if</span> len(mark) == <span class="number">4</span>:</span><br><span class="line">            <span class="comment"># 第二行就是标注的时间，以年月日关键字进行分隔，第一个元素就是年，第二个就是月，第三个就是日</span></span><br><span class="line">            date = re.split(<span class="string">r"[年月日]\s*"</span>,mark[<span class="number">1</span>].split(<span class="string">"|"</span>)[<span class="number">1</span>].split(<span class="string">" "</span>)[<span class="number">2</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 在 1-9 月前面补充一个 0</span></span><br><span class="line">            month = date[<span class="number">1</span>] <span class="keyword">if</span> len(date[<span class="number">1</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="string">"0"</span> + date[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在 1-9 日前面补充一个 0</span></span><br><span class="line">            day = date[<span class="number">2</span>] <span class="keyword">if</span> len(date[<span class="number">2</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="string">"0"</span> + date[<span class="number">2</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 最后拼凑成 2021-12-05 这样的时间格式</span></span><br><span class="line">            date = date[<span class="number">0</span>] + <span class="string">"-"</span> + month + <span class="string">"-"</span> + day</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果当前日期没有在字典中，则将它添加到字典中</span></span><br><span class="line">            <span class="keyword">if</span> date <span class="keyword">not</span> <span class="keyword">in</span> all_dates:</span><br><span class="line">                all_dates[date] = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 对天数的 value 值进行自增 1</span></span><br><span class="line">            all_dates[date] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将数据写入 json 文件当中</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        json_str = json.dumps(all_dates, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"date.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(json_str)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>生成好 json 格式的数据之后，接下来我们就使用 GitHubPoster 来生成相应的 svg 文件。由于 GitHubPoster 的依赖项太多，且还没有支持 docker 方式来运行，在本地安装也不是很方便，因此为了方便起见我们将它放在 GitHub action 中运行。这样只要每次更新标注文本的源文件就可以自动更新 html 页面并生成最新的 svg 图片了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">kindle</span> <span class="string">note</span> <span class="string">website</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gh-pages</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="number">3.6</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># 安装 github_poster 及其依赖</span></span><br><span class="line">          <span class="string">pip3</span> <span class="string">install</span> <span class="string">-U</span> <span class="string">github_poster</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 生成 html 文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">.html</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">python3</span> <span class="string">kindle.py</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># 生成 svg 文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">svg</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">github_poster</span> <span class="string">json</span> <span class="string">--json_file</span> <span class="string">date.json</span> <span class="string">--year</span> <span class="number">2021</span> <span class="string">--me</span> <span class="string">kindleReading</span> <span class="string">--background-color</span> <span class="string">'#ffffff'</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">OUT_FOLDER/json.svg</span> <span class="string">date.svg</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 设置 commit 信息为 GitHub action bot，并提交 commit 和 push 到 origin 上</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Config</span> <span class="string">git</span> <span class="string">user</span> <span class="string">and</span> <span class="string">user.email</span> <span class="string">and</span> <span class="string">push</span> <span class="string">commit</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">github-actions</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-am</span> <span class="string">"Auto build by GitHub Actions $(date)"</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">-f</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;kindle-标注&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用 apcupsd 完成 UPS 断电后 ESXi 稳妥关机方案</title>
    <link href="https://blog.k8s.li/apcupsd-on-openwrt-with-esxi.html"/>
    <id>https://blog.k8s.li/apcupsd-on-openwrt-with-esxi.html</id>
    <published>2021-10-24T16:00:00.000Z</published>
    <updated>2021-10-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="APC-UPS-BK650M2-CH"><a href="#APC-UPS-BK650M2-CH" class="headerlink" title="APC UPS BK650M2-CH"></a>APC UPS BK650M2-CH</h2><p>上个月还在杭州的时候，房东家里的空气开关出现了故障，导致每天停电十几次，我那一百多块钱捡来的垃圾 UPS 断电之后续命不到 5 分钟就凉凉了。来到上海换了新家后，准备花 500 元左右买个好一点的 UPS，给我的 NAS 服务器找个好伴侣。这次的 UPS 不再买一百块钱的垃圾货了，实在是太坑人了呜呜呜，那台垃圾 UPS 已经在闲鱼上 50 包邮卖掉了。</p><p>市面上 500 左右的畅销 UPS 无非就是施耐德 APC 的 <a href="https://www.apc.com/shop/cn/zh/products/APC-BACK-UPS-BK-650VA-4-2-USB-230V-USB-/P-BK650M2-CH" target="_blank" rel="noopener">BK650M2-CH</a> 和国产山特的 <a href="https://www.santak.com.cn/product/santak-tg-box-ups.html" target="_blank" rel="noopener">TG-BOX 600/850</a> 。两者价位差不太多，从配置上来看  <a href="https://www.santak.com.cn/product/santak-tg-box-ups.html" target="_blank" rel="noopener">TG-BOX 600/850</a> 稍微好一点。但考虑到 APC 的 apcupsd 在 Linux 平台上兼容性比较好，因此我最终还是选择了 <a href="https://www.apc.com/shop/cn/zh/products/APC-BACK-UPS-BK-650VA-4-2-USB-230V-USB-/P-BK650M2-CH" target="_blank" rel="noopener">BK650M2-CH</a> ；另一方面还是本人不太喜欢和信任国产货，被小粉红看到会不会被骂成恨国党（手动狗头。</p><p>之前在使用垃圾 UPS 的时候有过一个很 low 的 UPS 断电关机 NAS 的方案，就是通过 ping 的方式来判断是否停电，然后就预估个时间就断电关机。不过这种方案使用起来十分不方便，尤其是当网络抽风的时候，NAS 就无缘无故地关机了；或者有时候 UPS 电池用尽了，关机脚本还没有触发。因此还是需要通过 UPS 本身的串口协议来获取当前 UPS 的状态比较好一些，比用 ping 的方式高到不知道哪里去了。</p><h2 id="ESXi-USB-直通翻车"><a href="#ESXi-USB-直通翻车" class="headerlink" title="ESXi USB 直通翻车"></a>ESXi USB 直通翻车</h2><p>使用 UPS 自带的 USB 线缆插到 NAS 主机 USB 接口之后，ESXi 的 USB 设备列表里也能正确地识别到了该设备。但将该设备添加到 Linux 虚拟机上之后，apcupsd 却无法获取该 UPS 的设备信息，而且在内核日志中一直会出现 <code>USB disconnect</code> 的信息，emmm，怀疑是 ESXi 直通 USB 的问题，遂放弃。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[  124.759971] usb 1-2.1: USB disconnect, device number 4</span><br><span class="line">[  126.840674] usb 1-2.1: new full-speed USB device number 5 using uhci_hcd</span><br><span class="line">[  127.364001] usb 1-2.1: New USB device found, idVendor=051d, idProduct=0002, bcdDevice= 1.06</span><br><span class="line">[  127.364006] usb 1-2.1: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span><br><span class="line">[  127.364009] usb 1-2.1: Product: Back-UPS BK650M2-CH FW:294803G -292804G</span><br><span class="line">[  127.364011] usb 1-2.1: Manufacturer: American Power Conversion</span><br><span class="line">[  127.364013] usb 1-2.1: SerialNumber: 9B2118A06920</span><br><span class="line">[  127.403811] hid-generic 0003:051D:0002.0003: hiddev0,hidraw1: USB HID v1.10 Device [American Power Conversion Back-UPS BK650M2-CH FW:294803G -292804G ] on usb-0000:02:01.0-2.1/input0</span><br><span class="line">[  248.394259] usb 1-2.1: USB disconnect, device number 5</span><br><span class="line">[  250.589751] usb 1-2.1: new full-speed USB device number 6 using uhci_hcd</span><br><span class="line">[  251.123039] usb 1-2.1: New USB device found, idVendor=051d, idProduct=0002, bcdDevice= 1.06</span><br><span class="line">[  251.123044] usb 1-2.1: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span><br><span class="line">[  251.123048] usb 1-2.1: Product: Back-UPS BK650M2-CH FW:294803G -292804G</span><br><span class="line">[  251.123050] usb 1-2.1: Manufacturer: American Power Conversion</span><br><span class="line">[  251.123052] usb 1-2.1: SerialNumber: 9B2118A06920</span><br><span class="line">[  251.160223] hid-generic 0003:051D:0002.0004: hiddev0,hidraw1: USB HID v1.10 Device [American Power Conversion Back-UPS BK650M2-CH FW:294803G -292804G ] on usb-0000:02:01.0-2.1/input0</span><br><span class="line">[  268.621010] usb 1-2.1: USB disconnect, device number 6</span><br></pre></td></tr></table></figure><p>不幸 USB 直通给虚拟机的方案翻车了，于是想着要不将 USB 线缆连接到我的 R4S 软路由上🤔️。连接到软路由上要比在 ESXi 主机上好一些，这样在来电之后写的监控脚本也能检测到 UPS 已经通电了，这样就可以自动启动 NAS 主机以及上面的一些 VM。于是就琢磨了以下的方案，线路图如下：</p><p><img src="https://p.k8s.li/2021-10-25-apcupsd-on-openwrt-with-esxi.png" alt="image-20211025224325577"></p><p>我的 NAS 服务器、交换机、R4S 软路由的电源都连接到 UPS 上。R6300v2 通过无线桥接的方式连接到房东家的  Wi-Fi。无线桥接之后，R6300v2 就变成了一台”无线交换机”，连接到它的设备将会从房东家 Wi-Fi 路由器的 DHCP 那里获取到同一网段的 IP。R4S 的 WAN 口通过网线连接到 R6300v2 的 LAN 口上，这样 R4S 就能通过 R6300v2 连接到房东家的 Wi-Fi，从而连接到公网。</p><p>在这里 R6300v2 的电源未使用 UPS，而通过市电连接，因为停电之后估计房东家的 Wi-Fi 也连不上，连接到 UPS 电源意义不大，其实也用不多少电。断电之后，运行在 R4S 软路由上的 apcupsd 进程会探测到 UPS 电源处于 offline 的状态。等到 UPS 剩余电量还剩 30% 时（或者其他自定义指标）就触发自己定义的断电关机脚本。然后剩余 30% 的电量就供给 R4S 软路由使用至少 5 个小时，这段时间应该很快就能来电。等监测到 UPS 通电之后，再触发自定义的 UPS 来电启动脚本。</p><p>大致的流程梳理好之后，那么接下来就开始搞事情。</p><h2 id="apcupsd-on-openwrt"><a href="#apcupsd-on-openwrt" class="headerlink" title="apcupsd on openwrt"></a>apcupsd on openwrt</h2><p>首先就是在 R4S openwrt 上安装和配置 apcupsd，安装和配置的详细内容可参考几万字的官方手册 <a href="http://www.apcupsd.org/manual/" target="_blank" rel="noopener">apcupsd.org/manual</a> （劝退😂。</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>先将 USP 自带的那根 USB 线缆 RJ45 的那一头查到 UPS 的上，再将 USB 那一头插到路由器的 USB 口上。</p><ul><li>安装 apcupsd 以及 usbutils 等相关依赖包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:00:20]</span></span><br><span class="line">$ opkg update</span><br><span class="line">$ opkg install usbutils kmod-hid kmod-hid-generic kmod-usb-hid apcupsd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完之后，会在 /etc/apcupsd 目录下生成如下文件</span></span><br><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:01:32]</span></span><br><span class="line">$ tree /etc/apcupsd</span><br><span class="line">/etc/apcupsd</span><br><span class="line">├── apccontrol <span class="comment"># UPS 状态触发脚本</span></span><br><span class="line">├── apcupsd.conf <span class="comment"># apcupsd 配置文件</span></span><br><span class="line">├── apcupsd_mail.conf <span class="comment"># email 发送配置文件，断电都断网了，有它也没啥用呀</span></span><br><span class="line">├── changeme <span class="comment"># UPS 需要进行充电时触发的脚本</span></span><br><span class="line">├── commfailure <span class="comment"># 连接 UPS 设备失败后触发的脚本</span></span><br><span class="line">├── commok <span class="comment"># 连接 UPS 设备之后触发的脚本</span></span><br><span class="line">├── offbattery <span class="comment"># UPS 来电之后触发的脚本</span></span><br><span class="line">└── onbattery <span class="comment"># 断电之后 UPS 进入使用电池状态后触发的脚本</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>lsusb</code> 或者 <code>dmesg</code> 命令查看 USB 设备是否正常连接以及内核加载 USB 设备的信息。如果 USB 设备能正常识别到，那就没问题啦。如果没出现的话，那就重启大法好！看看重启之后能不能识别到 UPS 设备信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:04:29]</span></span><br><span class="line">$ lsusb</span><br><span class="line">Bus 005 Device 003: ID 051d:0002 American Power Conversion Uninterruptible Power Supply</span><br><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:04:29]</span></span><br><span class="line">$ dmesg</span><br><span class="line">[   64.485003] usb 5-1: new full-speed USB device number 2 using xhci-hcd</span><br><span class="line">[   64.669133] hid-generic 0003:051D:0002.0001: hiddev96,hidraw0: USB HID v1.10 Device [American Power Conversion Back-UPS BK650M2-CH FW:294803G -292804G ] on usb-xhci-hcd.0.auto-1/input0</span><br><span class="line">[ 1260.590529] usb 5-1: USB disconnect, device number 2</span><br><span class="line">[ 1261.285846] usb 5-1: new full-speed USB device number 3 using xhci-hcd</span><br><span class="line">[ 1261.468989] hid-generic 0003:051D:0002.0002: hiddev96,hidraw0: USB HID v1.10 Device [American Power Conversion Back-UPS BK650M2-CH FW:294803G -292804G ] on usb-xhci-hcd.0.auto-1/input0</span><br></pre></td></tr></table></figure><ul><li>修改 <code>/etc/default/apcupsd</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为不是使用 systemd 启动 apcupsd 的，需要将它修改为 yes</span></span><br><span class="line"><span class="attr">ISCONFIGURED</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><ul><li>配置 <code>/etc/apcupsd/apcupsd.conf</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 养成好习惯，先备份一下远配置文件</span></span><br><span class="line">$ cp /etc/apcupsd/apcupsd.conf&#123;,.bak&#125;</span><br><span class="line">$ vim /etc/apcupsd/apcupsd.conf</span><br><span class="line"><span class="comment"># 自定义你的 UPS 名称，使用默认的也可以</span></span><br><span class="line">UPSNAME BK650M2-CH</span><br><span class="line"><span class="comment"># 设置 UPS 的连接线缆为 USB 模式</span></span><br><span class="line">UPSCABLE usb</span><br><span class="line"><span class="comment"># 设置 UPS 的通讯模式为 USB 模式</span></span><br><span class="line">UPSTYPE usb</span><br><span class="line"><span class="comment"># DEVICE 这行需要注释掉或者去掉 /dev/ttyS0</span></span><br><span class="line"><span class="comment"># DEVICE /dev/ttyS0</span></span><br><span class="line">NETSERVER on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下三个参数定义了何时触发 doshutdown 关机事件</span></span><br><span class="line"><span class="comment"># 当剩余电池电量低于指定百分比</span></span><br><span class="line">BATTERYLEVEL 30</span><br><span class="line"><span class="comment"># 当UPS内部计算的电池剩余运行时间低于指定的分钟数  </span></span><br><span class="line">MINUTES 15</span><br><span class="line"><span class="comment"># 发生电源故障后，进入 UPS 电池模式时间</span></span><br><span class="line">TIMEOUT 0</span><br></pre></td></tr></table></figure><p>配置文件具体的参数信息可参考官方手册 <a href="http://www.apcupsd.org/manual/#configuration-directive-reference" target="_blank" rel="noopener">configuration-directive-reference</a>，一般情况下只需要配置上面我提到的那几个参数就可以，感兴趣的可以仔细阅读一些官方手册。</p><ul><li>开机自启</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/apcupsd <span class="built_in">enable</span></span><br><span class="line">$ /etc/init.d/apcupsd start</span><br></pre></td></tr></table></figure><h3 id="UPS-状态参数"><a href="#UPS-状态参数" class="headerlink" title="UPS 状态参数"></a>UPS 状态参数</h3><ul><li>使用 <code>apcaccess</code> 查看是否能连接到 UPS 设备，以下是正常通电时的信息：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:04:29]</span></span><br><span class="line">$ apcaccess</span><br><span class="line">APC      : 001,036,0860</span><br><span class="line">DATE     : 2021-10-24 21:02:51 +0800</span><br><span class="line">HOSTNAME : OpenWrt</span><br><span class="line">VERSION  : 3.14.14 (31 May 2016) unknown</span><br><span class="line">UPSNAME  : ups1</span><br><span class="line">CABLE    : USB Cable</span><br><span class="line">DRIVER   : USB UPS Driver</span><br><span class="line">UPSMODE  : Stand Alone</span><br><span class="line">STARTTIME: 2021-10-24 21:02:49 +0800</span><br><span class="line">MODEL    : Back-UPS BK650M2-CH</span><br><span class="line">STATUS   : ONLINE</span><br><span class="line">LINEV    : 224.0 Volts</span><br><span class="line">LOADPCT  : 14.0 Percent</span><br><span class="line">BCHARGE  : 100.0 Percent</span><br><span class="line">TIMELEFT : 46.8 Minutes</span><br><span class="line">MBATTCHG : 5 Percent</span><br><span class="line">MINTIMEL : 3 Minutes</span><br><span class="line">MAXTIME  : 0 Seconds</span><br><span class="line">SENSE    : Low</span><br><span class="line">LOTRANS  : 160.0 Volts</span><br><span class="line">HITRANS  : 278.0 Volts</span><br><span class="line">ALARMDEL : 30 Seconds</span><br><span class="line">BATTV    : 13.5 Volts</span><br><span class="line">LASTXFER : No transfers since turnon</span><br><span class="line">NUMXFERS : 0</span><br><span class="line">TONBATT  : 0 Seconds</span><br><span class="line">CUMONBATT: 0 Seconds</span><br><span class="line">XOFFBATT : N/A</span><br><span class="line">SELFTEST : NO</span><br><span class="line">BATTDATE : 2001-01-01</span><br><span class="line">NOMINV   : 220 Volts</span><br><span class="line">NOMBATTV : 12.0 Volts</span><br><span class="line">NOMPOWER : 390 Watts</span><br><span class="line">FIRMWARE : 294803G -292804G</span><br><span class="line">END APC  : 2021-10-24 21:04:36 +0800</span><br></pre></td></tr></table></figure><ul><li>尝试拔下 UPS 电源，断电之后的状态信息</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ OpenWrt in ~ [21:06:39]</span></span><br><span class="line">$ apcaccess</span><br><span class="line">APC      : 001,037,0899</span><br><span class="line">DATE     : 2021-10-24 21:05:33 +0800</span><br><span class="line">HOSTNAME : OpenWrt</span><br><span class="line">VERSION  : 3.14.14 (31 May 2016) unknown</span><br><span class="line">UPSNAME  : ups1</span><br><span class="line">CABLE    : USB Cable</span><br><span class="line">DRIVER   : USB UPS Driver</span><br><span class="line">UPSMODE  : Stand Alone</span><br><span class="line">STARTTIME: 2021-10-24 21:02:49 +0800</span><br><span class="line">MODEL    : Back-UPS BK650M2-CH</span><br><span class="line">STATUS   : ONBATT</span><br><span class="line">LINEV    : 0.0 Volts</span><br><span class="line">LOADPCT  : 15.0 Percent</span><br><span class="line">BCHARGE  : 100.0 Percent</span><br><span class="line">TIMELEFT : 46.8 Minutes</span><br><span class="line">MBATTCHG : 5 Percent</span><br><span class="line">MINTIMEL : 3 Minutes</span><br><span class="line">MAXTIME  : 0 Seconds</span><br><span class="line">SENSE    : Low</span><br><span class="line">LOTRANS  : 160.0 Volts</span><br><span class="line">HITRANS  : 278.0 Volts</span><br><span class="line">ALARMDEL : 30 Seconds</span><br><span class="line">BATTV    : 12.8 Volts</span><br><span class="line">LASTXFER : No transfers since turnon</span><br><span class="line">NUMXFERS : 1</span><br><span class="line">XONBATT  : 2021-10-24 21:05:33 +0800</span><br><span class="line">TONBATT  : 27 Seconds</span><br><span class="line">CUMONBATT: 27 Seconds</span><br><span class="line">XOFFBATT : N/A</span><br><span class="line">SELFTEST : NO</span><br><span class="line">BATTDATE : 2001-01-01</span><br><span class="line">NOMINV   : 220 Volts</span><br><span class="line">NOMBATTV : 12.0 Volts</span><br><span class="line">NOMPOWER : 390 Watts</span><br><span class="line">FIRMWARE : 294803G -292804G</span><br><span class="line">END APC  : 2021-10-24 21:06:00 +0800</span><br></pre></td></tr></table></figure><p>全部的 UPS 状态参数可参考官方手册 <a href="http://www.apcupsd.org/manual/#status-report-fields" target="_blank" rel="noopener">status-report-fields</a> ，不过对于我们来讲，以下几个参数比较重要：</p><table><thead><tr><th>参数</th><th>意义</th><th>来电</th><th>断电</th></tr></thead><tbody><tr><td>STATUS</td><td>UPS 状态</td><td>ONLINE</td><td>ONBATT</td></tr><tr><td>LINEV</td><td>接入电压</td><td>224.0 Volts</td><td>0.0 Volts</td></tr><tr><td>BCHARGE</td><td>电池剩余</td><td>100.0 Percent</td><td>&lt; 100.0 Percent</td></tr><tr><td>XONBATT</td><td>上次</td><td>N/A</td><td>~</td></tr><tr><td>TONBATT</td><td>当前电池使用时间</td><td>N/A</td><td>~</td></tr><tr><td>CUMONBATT</td><td>当前电池使用总时间</td><td>N/A</td><td>~</td></tr></tbody></table><h3 id="apccontrol"><a href="#apccontrol" class="headerlink" title="apccontrol"></a>apccontrol</h3><p><code>apccontrol</code> 里定义了 UPS 事件触发后要执行的操作，完整的内容可参考官方手册 <a href="http://www.apcupsd.org/manual/#customizing-event-handling" target="_blank" rel="noopener">apcupsd</a> 。对于我们来讲 <code>doshutdown</code> 这个事件是比较重要的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doshutdown</span><br><span class="line">When the UPS is running on batteries and one of the limits expires (time, run, load), this event is generated to cause the machine to shutdown.</span><br><span class="line"></span><br><span class="line">Default: Shuts down the system using shutdown -h or similar</span><br></pre></td></tr></table></figure><p>当出现如下事件的时候则会调用 doshutdown 后的执行内容：</p><ol><li>UPS 电池即将用尽</li><li>UPS 运行在电池模式下剩余时间低于所定义的 <code>MINUTES</code> 值</li><li>UPS 电池剩余百分比低于所定义的 <code>BATTERYLEVEL</code> 值</li><li>UPS. 运行在电池模式下所超出的时间 <code>TIMEOUT</code> 值</li></ol><blockquote><p>When one of the conditions listed below occurs, apcupsd issues a shutdown command by calling <code>/etc/apcupsd/apccontrol doshutdown</code>, which should perform a shutdown of your system using the system shutdown(8) command. You can modify the behavior as described in <a href="http://www.apcupsd.org/manual/#customizing-event-handling" target="_blank" rel="noopener">Customizing Event Handling</a>.</p><p>The conditions that trigger the shutdown can be any of the following:</p><ul><li>Running time on batteries have expired (<code>TIMEOUT</code>)</li><li>The battery runtime remaining is below the configured value (<code>BATTERYLEVEL</code>)</li><li>The estimated remaining runtime is below the configured value (<code>MINUTES</code>)</li><li>The UPS signals that the batteries are exhausted.</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   doshutdown)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"UPS <span class="variable">$&#123;2&#125;</span> initiated Shutdown Sequence"</span> | <span class="variable">$&#123;WALL&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"apcupsd UPS <span class="variable">$&#123;2&#125;</span> initiated shutdown"</span></span><br><span class="line">bash /opt/bin/shutdown_esxi.sh</span><br><span class="line">;;</span><br></pre></td></tr></table></figure><p>然后我们就可以在 doshutdown 里面加入我们要执行的关机脚本，比如 <code>shutdown_esxi.sh</code>。至于如何优雅地关闭 ESXi 主机，推荐使用 govc 这个 CLI 工具。不太建议直接 ssh 到 ESXi 主机，然后 /sbin/shudown.sh &amp;&amp; poweroff 一把梭子就完事儿了。这样一顿操作猛有可能会对我们的虚拟机造成一定的影响，我们可以通过 govc 或者 vim-cmd 命令对虚拟机进行挂起或者保存快照的操作，来保存虚拟机断电之前的状态，等所有虚拟机安全关机之后，再关闭 ESXi 主机，这样比较稳妥一点。以下两种关闭 ESXi 的方式任选一种即即可：</p><h2 id="govc"><a href="#govc" class="headerlink" title="govc"></a>govc</h2><p>由于我的 apcupsd 是运行在 R4S 软路由上，如果将关机脚本保存在 R4S 软路由上，可以使用 govc 这个工具，然后通过 ESXi 的 https API 来对虚拟机和 ESXi 主机进行相关操作。</p><ul><li>下载并安装安装 govc</li></ul><p>在 <a href="https://github.com/vmware/govmomi/releases" target="_blank" rel="noopener">vmware/govmomi/releases</a> 下载页面找到与自己 CPU 体系架构相匹配的下载地址，比如我的 aarch64 的 CPU 使用如下地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/vmware/govmomi/releases/download/v0.27.1/govc_Linux_arm64.tar.gz</span><br><span class="line">$ tar xf govc_Linux_arm64.tar.gz</span><br><span class="line">$ mv govc /usr/bin</span><br></pre></td></tr></table></figure><ul><li>配置 ESXi 连接信息，使用 <code>govc host.info</code> 命令查看是否能正常连接到 ESXi 主机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GOVC_URL=<span class="string">"https://root:passw0rd@esxi.yoi.li"</span></span><br><span class="line">$ <span class="built_in">export</span> GOVC_DATASTORE=<span class="string">"NVME"</span></span><br><span class="line"></span><br><span class="line">$ govc host.info</span><br><span class="line">Name:              hp-esxi.lan</span><br><span class="line">  Path:            /ha-datacenter/host/hp-esxi.lan/hp-esxi.lan</span><br><span class="line">  Manufacturer:    HPE</span><br><span class="line">  Logical CPUs:    6 CPUs @ 3000MHz</span><br><span class="line">  Processor <span class="built_in">type</span>:  Genuine Intel(R) CPU 0000 @ 3.00GHz</span><br><span class="line">  CPU usage:       960 MHz (5.3%)</span><br><span class="line">  Memory:          32613MB</span><br><span class="line">  Memory usage:    29512 MB (90.5%)</span><br><span class="line">  Boot time:       2021-10-24 13:57:04.396892 +0000 UTC</span><br><span class="line">  State:           connected</span><br></pre></td></tr></table></figure><ul><li>获取 ESXi 主机上虚拟机的列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ govc ls /ha-datacenter/vm</span><br><span class="line">/ha-datacenter/vm/NAS</span><br><span class="line">/ha-datacenter/vm/kube-control-02</span><br><span class="line">/ha-datacenter/vm/kube-control-03</span><br><span class="line">/ha-datacenter/vm/kube-node-01</span><br><span class="line">/ha-datacenter/vm/kube-registry-01</span><br><span class="line">/ha-datacenter/vm/WG0</span><br><span class="line">/ha-datacenter/vm/Windows</span><br><span class="line">/ha-datacenter/vm/OP</span><br><span class="line">/ha-datacenter/vm/Devbox</span><br><span class="line">/ha-datacenter/vm/kube-control-01</span><br></pre></td></tr></table></figure><ul><li>VM 的电源相关操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将虚拟机挂起</span></span><br><span class="line">$ govc vm.power -s NAS</span><br></pre></td></tr></table></figure><ul><li>在 VM 里执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先设置终端登录的用户名和密码</span></span><br><span class="line">$ <span class="built_in">export</span> GOVC_GUEST_LOGIN=<span class="string">"root:passw0rd"</span></span><br><span class="line"><span class="comment"># 先让缓冲区数据写入到磁盘，然后再使用 shutdown 安全地关机</span></span><br><span class="line">$ govc guest.run -vm NAS <span class="string">"sync &amp;&amp; shutdown -h now"</span></span><br></pre></td></tr></table></figure><ul><li>使用 esxcli 命令查看 VM 进程，以确保虚拟机真正的关闭了。只有当 esxcli vm process list 输出结果为空的时候，ESXi 上所有的 VM 才真正的退出，这时就可以放心大胆地关闭 ESXi 主机了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@esxi-debian-devbox ~</span><br><span class="line">╰─<span class="comment"># govc host.esxcli vm process list</span></span><br><span class="line">ConfigFile:   /vmfs/volumes/6118f30c-3e1989cb-77c4-b47af1db548c/NAS/NAS.vmx</span><br><span class="line">DisplayName:  NAS</span><br><span class="line">ProcessID:    0</span><br><span class="line">UUID:         56 4d 7a 57 4c 17 4e 68-07 25 03 5e 4b 0f 8c 96</span><br><span class="line">VMXCartelID:  1121973</span><br><span class="line">WorldID:      1121976</span><br><span class="line"></span><br><span class="line">ConfigFile:   /vmfs/volumes/6118f30c-3e1989cb-77c4-b47af1db548c/Devbox/Devbox.vmx</span><br><span class="line">DisplayName:  Devbox</span><br><span class="line">ProcessID:    0</span><br><span class="line">UUID:         56 4d 91 74 02 b7 b7 59-2b 48 e3 21 d2 a6 b2 9d</span><br><span class="line">VMXCartelID:  1122777</span><br><span class="line">WorldID:      1122778</span><br></pre></td></tr></table></figure><ul><li>关闭 ESXi 主机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过调用 esxcli 命令来关机</span></span><br><span class="line">$ govc host.esxcli system shutdown</span><br><span class="line"><span class="comment"># 通过 host.shutdown 来关机，不过翻车了</span></span><br><span class="line">╭─root@esxi-debian-devbox ~</span><br><span class="line">╰─<span class="comment"># govc host.shutdown -host "esxi.yoi.li"</span></span><br><span class="line">govc: no argument</span><br></pre></td></tr></table></figure><ul><li>关机脚本<code>shutdown_esxi.sh</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> GOVC_URL=<span class="string">"https://root:passw0rd@esxi.yoi.li"</span></span><br><span class="line"><span class="built_in">export</span> GOVC_DATASTORE=<span class="string">"NVME"</span></span><br><span class="line"><span class="built_in">export</span> GOVC_INSECURE=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> GOVC_GUEST_LOGIN=<span class="string">"root:passw0rd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># suspend all vms</span></span><br><span class="line">govc find . -<span class="built_in">type</span> m -runtime.powerState poweredOn | awk -F <span class="string">'/'</span> <span class="string">'&#123;print $NF&#125;'</span> \</span><br><span class="line">| grep -v NAS | xargs -L1 -&#123;&#125; govc vm.power -<span class="built_in">suspend</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># sync data to disk and shutdown vm</span></span><br><span class="line">govc vm.info NAS | grep -q poweredOn &amp;&amp; govc guest.run -vm NAS <span class="string">"sync &amp;&amp; shutdown -h now"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wait all vm exit</span></span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;12;i++)); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! esxcli vm process list | grep UUID; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    sleep 10</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">govc host.esxcli system shutdown</span><br></pre></td></tr></table></figure><ul><li>修改<code>/etc/apcupsd/apccontrol</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   doshutdown)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"UPS <span class="variable">$&#123;2&#125;</span> initiated Shutdown Sequence"</span> | <span class="variable">$&#123;WALL&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"apcupsd UPS <span class="variable">$&#123;2&#125;</span> initiated shutdown"</span></span><br><span class="line"><span class="string">"bash /opt/bin/shutdown_esxi.sh"</span></span><br><span class="line">;;</span><br></pre></td></tr></table></figure><h2 id="vim-cmd"><a href="#vim-cmd" class="headerlink" title="vim-cmd"></a>vim-cmd</h2><p>由于 vim-cmd 命令只能在 ESXi 主机上运行，因此我们需要将该关机脚本保存到 ESXI 主机上，或者通过 scp 的方式将该脚本传输到 ESXi 主机上，然后执行该脚本完成关机操作。</p><ul><li>修改<code>/etc/apcupsd/apccontrol</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   doshutdown)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"UPS <span class="variable">$&#123;2&#125;</span> initiated Shutdown Sequence"</span> | <span class="variable">$&#123;WALL&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"apcupsd UPS <span class="variable">$&#123;2&#125;</span> initiated shutdown"</span></span><br><span class="line">scp shutdown_esxi.sh root@esxi.yoi.li:/</span><br><span class="line">ssh root@esxi.yoi.li <span class="string">"sh /shutdown_esxi.sh"</span></span><br><span class="line">;;</span><br></pre></td></tr></table></figure><ul><li><code>shutdown_esxi.sh</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">LOG_PATH=/vmfs/volumes/NVME/.<span class="built_in">log</span>/suspend.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(TZ=UTC-8 date +%Y-%m-%d" "%H:%M:%S)</span>"</span> &gt;&gt; <span class="variable">$&#123;LOG_PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">poweroff_vms</span></span>()&#123;</span><br><span class="line">    <span class="keyword">for</span> vm <span class="keyword">in</span> $(vim-cmd vmsvc/getallvms | grep -E <span class="string">'NAS'</span> | awk <span class="string">'&#123;print $1&#125;'</span> | xargs); <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> vim-cmd vmsvc/power.getstate <span class="variable">$&#123;vm&#125;</span> | grep <span class="string">'Powered on'</span>; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"<span class="variable">$(TZ=UTC-8 date +%Y-%m-%d" "%H:%M:%S)</span> shutdown vm <span class="variable">$&#123;vm&#125;</span>"</span> &gt;&gt; <span class="variable">$&#123;LOG_PATH&#125;</span></span><br><span class="line">            vim-cmd vmsvc/power.shutdown <span class="variable">$&#123;vm&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">suspend_vms</span></span>()&#123;</span><br><span class="line">    <span class="keyword">for</span> vm <span class="keyword">in</span> $(vim-cmd vmsvc/getallvms | grep -Ev <span class="string">'NAS|Vmid'</span> | awk <span class="string">'&#123;print $1&#125;'</span> | xargs); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> vim-cmd vmsvc/power.getstate <span class="variable">$&#123;vm&#125;</span> | grep <span class="string">'Powered on'</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$(TZ=UTC-8 date +%Y-%m-%d" "%H:%M:%S)</span> suppend vm <span class="variable">$&#123;vm&#125;</span>"</span> &gt;&gt; <span class="variable">$&#123;LOG_PATH&#125;</span></span><br><span class="line">        vim-cmd vmsvc/power.suspend <span class="variable">$&#123;vm&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">suspend_vms</span><br><span class="line">poweroff_vms</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Poweroff at <span class="variable">$(TZ=UTC-8 date +%Y-%m-%d" "%H:%M:%S)</span>"</span> &gt;&gt; <span class="variable">$&#123;LOG_PATH&#125;</span></span><br><span class="line">/bin/host_shutdown.sh</span><br></pre></td></tr></table></figure><p>通过 ssh 的方式执行该脚本需要 ESXi 主机开启 ssh 服务并做好 ssh 免密登录，这部分内容可参考 <a href="https://kb.vmware.com/s/article/1002866?lang=zh_CN" target="_blank" rel="noopener">允许使用公钥/私钥身份验证对 ESXi/ESX 主机进行 SSH 访问</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.apcupsd.org/manual/" target="_blank" rel="noopener">apcupsd 官方文档</a></li><li><a href="https://wiki.debian.org/apcupsd" target="_blank" rel="noopener">apcupsd debian wiki</a></li><li><a href="https://linuxtoy.org/archives/howto-use-apcupsd-to-automatically-shutdown-system-during-outrage.html" target="_blank" rel="noopener">使用 apcupsd 实现 UPS 断电自动关机</a></li><li><a href="https://github.com/vmware/govmomi/blob/master/govc/USAGE.md" target="_blank" rel="noopener">govc usage</a></li><li><a href="https://gitbook.curiouser.top/origin/vsphere-govc.html" target="_blank" rel="noopener">vSphere go命令行管理工具govc</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;APC-UPS-BK650M2-CH&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="NAS" scheme="https://blog.k8s.li/tags/NAS/"/>
    
      <category term="垃圾佬" scheme="https://blog.k8s.li/tags/%E5%9E%83%E5%9C%BE%E4%BD%AC/"/>
    
      <category term="UPS" scheme="https://blog.k8s.li/tags/UPS/"/>
    
  </entry>
  
  <entry>
    <title>万字长文详解 PaaS toB 场景下 K8s 离线部署方案</title>
    <link href="https://blog.k8s.li/pass-tob-k8s-offline-deploy.html"/>
    <id>https://blog.k8s.li/pass-tob-k8s-offline-deploy.html</id>
    <published>2021-08-29T16:00:00.000Z</published>
    <updated>2021-08-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在企业私有云环境当中，出于对数据安全的考虑以及满足 <a href="http://www.djbh.net/" target="_blank" rel="noopener">网络安全等级保护</a> 的要求，往往会对内部环境中的服务器做出严格的访问限制。一般来讲生产环境都会禁止访问外部网络，开发人员要访问生产环境也必须通过堡垒机或者其他方式进行安全审计登录。在这种无网（无法访问公网）的环境中，想要部署好一个 K8s 集群并不是一件轻松的事儿。市面上 K8s 部署工具也多不胜数，对于离线部署的支持情况也各不相同：</p><table><thead><tr><th align="center">Item</th><th align="center">Language</th><th align="center">Star</th><th align="center">Fork</th><th align="left">离线部署支持情况</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/kubernetes/kops" target="_blank" rel="noopener">kops</a></td><td align="center">Golang</td><td align="center">13.2k</td><td align="center">4.1k</td><td align="left">不支持</td></tr><tr><td align="center"><a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">kubespray</a></td><td align="center">Ansible</td><td align="center">11.1k</td><td align="center">4.7k</td><td align="left">支持，需自行构建安装包</td></tr><tr><td align="center"><a href="https://github.com/easzlab/kubeasz" target="_blank" rel="noopener">kubeasz</a></td><td align="center">Ansible</td><td align="center">7.2k</td><td align="center">2.7k</td><td align="left">支持，需自行构建安装包</td></tr><tr><td align="center"><a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a></td><td align="center">Golang</td><td align="center">4.1k</td><td align="center">790</td><td align="left">支持，需付费充值会员</td></tr><tr><td align="center"><a href="https://github.com/rancher/rke" target="_blank" rel="noopener">RKE</a></td><td align="center">Golang</td><td align="center">2.5k</td><td align="center">480</td><td align="left">不支持，需自行安装 docker</td></tr><tr><td align="center"><a href="https://github.com/alibaba/sealer" target="_blank" rel="noopener">sealer</a></td><td align="center">Golang</td><td align="center">503</td><td align="center">112</td><td align="left">支持，源自 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a></td></tr><tr><td align="center"><a href="https://github.com/kubesphere/kubekey" target="_blank" rel="noopener">kubekey</a></td><td align="center">Golang</td><td align="center">471</td><td align="center">155</td><td align="left">部分支持，仅镜像可离线</td></tr></tbody></table><p>无网环境离线部署 K8s 往往是作为一个商业服务或者商业付费产品来出售（如 <a href="https://www.sealyun.com/" target="_blank" rel="noopener">sealos</a> ），很少有开源免费的解决方案；或者虽然提供了离线部署方案，但想要操作起来十分繁琐，很难顺畅地做到一键部署；又或者只支持部分离线部署，还有一部分资源需要在部署的时候通过公网获取。</p><p>针对上述问题，本文调研主流的 K8s 部署工具，并基于这些工具设计并实现一种从构建离线安装包到一键部署 K8s 集群全流程的解决方案，以满足在无网的环境中一键部署 K8s 集群的需求，比较适合基于 K8s 的 PaaS toB 产品使用。</p><h2 id="离线资源"><a href="#离线资源" class="headerlink" title="离线资源"></a>离线资源</h2><p>总体来讲部署一个 K8s 集群大致需要依赖如下三种资源：</p><ul><li>系统 OS 的 rpm/deb 包：如 docker-ce、containerd、ipvsadm、conntrack 等；</li><li>二进制文件：如 kubelet、kubectl、kubeadm、crictl 等；</li><li>组件容器镜像：如 kube-apiserver、kube-proxy、coredns、calico、flannel 等；</li></ul><h3 id="OS-packages"><a href="#OS-packages" class="headerlink" title="OS packages"></a>OS packages</h3><p>这类属于 OS 系统层面的依赖，根据不同系统或者支持的功能需要使用相应的包管理器安装相应的依赖包，大致分为如下几种：</p><ul><li>kubernetes 组件依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- conntrack           <span class="comment"># kube-proxy 依赖</span></span><br><span class="line">- ipset               <span class="comment"># kube-proxy 使用 ipvs 模式需要</span></span><br><span class="line">- ipvsadm             <span class="comment"># kube-proxy 使用 ipvs 模式需要</span></span><br><span class="line">- socat               <span class="comment"># 用于 port forwarding</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details/" target="_blank" rel="noopener">Implementation details</a>:</p><p>[Error] if conntrack, ip, iptables, mount, nsenter commands are not present in the command path<br>[warning] if ebtables, ethtool, socat, tc, touch, crictl commands are not present in the command path</p></blockquote><ul><li>部署依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- ebtables            <span class="comment"># kubeadm 依赖工具</span></span><br><span class="line">- ethtool             <span class="comment"># kubeadm 依赖工具</span></span><br><span class="line">- chrony              <span class="comment"># 时钟同步工具，部署前节点的时候必须一致，不然证书或者 CNI 插件会出现问题</span></span><br></pre></td></tr></table></figure><ul><li>CRI 容器运行运行时</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- containerd.io       <span class="comment"># 可单独安装/docker-ce 依赖</span></span><br><span class="line">- docker-ce           <span class="comment"># docker-ce</span></span><br><span class="line">- libseccomp          <span class="comment"># 安装 containerd 需要</span></span><br><span class="line">- nvidia-container-runtime <span class="comment"># 支持 GPU 时需要依赖</span></span><br></pre></td></tr></table></figure><ul><li>存储客户端依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- nfs-utils/nfs-common <span class="comment"># 创建基于 nfs 的 PV 需要</span></span><br><span class="line">- ceph-common          <span class="comment"># ceph 客户端安装包，创建基于 ceph 的 pv 需要</span></span><br><span class="line">- lvm2                 <span class="comment"># 创建基于 ceph 的 pv 需要</span></span><br><span class="line">- glusterfs-client     <span class="comment"># 创建基于 glusterfs 的 pv 需要</span></span><br><span class="line">- glusterfs-common     <span class="comment"># 创建基于 glusterfs 的 pv 需要</span></span><br><span class="line">- cifs-utils           <span class="comment"># 创建基于 cifs 的 pv 需要</span></span><br><span class="line">- fuse                 <span class="comment"># ceph 或者其他存储客户端依赖</span></span><br></pre></td></tr></table></figure><p>想要解决上面这些依赖项十分棘手，也是离线部署场景下最难的一部分，至今并没有一个成熟的方案实现这些依赖的离线部署，基本上所有的 k8s 部署工具都没有提供这些包的离线安装方式。对于这些包的依赖，目前主要有避免安装这些依赖和制作离线源这两种解决方案。</p><h4 id="sealos"><a href="#sealos" class="headerlink" title="sealos"></a>sealos</h4><p>在 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a> 中就极力避免使用包管理器来安装依赖，比如安装 containerd 时的依赖 libseccomp 使用的是编译好的 .so 文件的方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tar -tf kube1.20.0.tar.gz</span><br><span class="line">kube/</span><br><span class="line">kube/lib64/</span><br><span class="line">kube/lib64/README.md</span><br><span class="line">kube/lib64/libseccomp.so.2</span><br><span class="line">kube/lib64/libseccomp.so.2.3.1</span><br></pre></td></tr></table></figure><p>安装 docker 使用的二进制的方式，但 docker 官方文档中也明确说明<strong>不建议使用二进制的方式来安装 docker</strong>，应该使用发行版自带的包管理器来安装。</p><blockquote><p>If you want to try Docker or use it in a testing environment, but you’re not on a supported platform, you can try installing from static binaries. <strong>If possible, you should use packages built for your operating system</strong>, and use your operating system’s package management system to manage Docker installation and upgrades.</p><p><a href="https://docs.docker.com/engine/install/binaries/" target="_blank" rel="noopener">Install Docker Engine from binaries</a></p></blockquote><p>实际上任何部署工具都会对系统 rpm/deb 包都会有不同程度上的依赖，有一部分依赖可以像 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a>  这样通过某种方式去规避掉。但并不是所有的依赖都能规避的，比如提供挂载 PV 需要依赖的存储客户端（nfs-common/nfs-utils，lvm2，gluster-client）这些包，基本上是没有任何规避的途径，必须通过包管理器来安装才行。</p><p>当然如果这些前置的依赖项在部署工具之外手动解决或者让用户自行去解决，那么使用 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a>  这种轻量级的工具来部署 K8s 是比较合适的。但对于一些 PaaS toB 的产品而言，让用户自己去手动解决这些依赖恐怕不太好。站在客户的角度来考虑既然平台提供了这部分功能，就应该在部署的时候解决所有的依赖问题，而不是让我自己手动临时来解决。</p><h4 id="kubekey"><a href="#kubekey" class="headerlink" title="kubekey"></a>kubekey</h4><p>在 kubekey 中一些依赖项目则是要求用户自行安装，并没有提供离线安装的方式：</p><blockquote><ul><li>建议您使用干净的操作系统（不安装任何其他软件），否则可能会有冲突。</li><li>请确保每个节点的硬盘至少有 <strong>100G</strong>。</li><li>所有节点必须都能通过 <code>SSH</code> 访问。</li><li>所有节点时间同步。</li><li>所有节点都应使用 <code>sudo</code>/<code>curl</code>/<code>openssl</code>。</li></ul><p>KubeKey 能够同时安装 Kubernetes 和 KubeSphere。根据要安装的 Kubernetes 版本，需要安装的依赖项可能会不同。您可以参考下方列表，查看是否需要提前在您的节点上安装相关依赖项。</p><table><thead><tr><th align="left">依赖项</th><th align="left">Kubernetes 版本 ≥ 1.18</th><th align="left">Kubernetes 版本 &lt; 1.18</th></tr></thead><tbody><tr><td align="left"><code>socat</code></td><td align="left">必须</td><td align="left">可选但建议</td></tr><tr><td align="left"><code>conntrack</code></td><td align="left">必须</td><td align="left">可选但建议</td></tr><tr><td align="left"><code>ebtables</code></td><td align="left">可选但建议</td><td align="left">可选但建议</td></tr><tr><td align="left"><code>ipset</code></td><td align="left">可选但建议</td><td align="left">可选但建议</td></tr></tbody></table><p>备注</p><ul><li>在离线环境中，您可以使用私有包、RPM 包（适用于 CentOS）或者 Deb 包（适用于 Debian）来安装这些依赖项。</li><li>建议您事先创建一个操作系统镜像文件，并且安装好所有相关依赖项。这样，您便可以直接使用该镜像文件在每台机器上安装操作系统，提高部署效率，也不用担心任何依赖项问题。</li></ul><p>您的集群必须有一个可用的容器运行时。在离线环境中创建集群之前，您必须手动安装 Docker 或其他容器运行时。</p><p><a href="https://github.com/kubesphere/kubekey#requirements-and-recommendations" target="_blank" rel="noopener">Requirements and Recommendations</a></p></blockquote><h4 id="构建离线源"><a href="#构建离线源" class="headerlink" title="构建离线源"></a>构建离线源</h4><p>对于系统 rpm/deb 包的依赖，我们还是踏踏实实地使用包管理器来安装这些包较为妥当，因此我们有必要为这些依赖的 rpm/deb 包构建成离线源，部署的时候使用这个离线源来安装这些依赖。在 《<a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a>》一文中曾分析过制作和使用离线源这么难的原因：</p><blockquote><p>作为平台部署工具的开发者，始终被离线部署这个难题困扰着。在线的容器镜像和二进制文件比较好解决，因为这些资源是与 OS 无关的，只要下载下来放到安装包里，部署的时候启动一个 HTTP 服务器和镜像仓库服务提供这些资源的下载即可。</p><p>但是对于 yum/apt 之类的软件来讲并不那么简单：</p><ul><li>首先由于各个包之间的依赖关系比较复杂，并不能将它们直接下载下来；</li><li>其次即便下载下来之后也无法直接通过 yum/apt 的方式安装指定的软件包，虽然也可以使用 scp 的方式将这些包复制到部署节点，通过 rpm 或 dpkg 的方式来安装上，但这样并不是很优雅，而且通用性能也不是很好；</li><li>最后需要适配的 Linux 发行版和包管理器种类也有多种，而且有些包的包名或者版本号在不同的包管理之间也相差甚大，无法做到统一管理。</li><li>离线源同时适配适配 ARM64 和 AMD64 有一定的难度</li></ul></blockquote><p>好在文中也给出了一个比较通用的解决方案，即通过 Dockerfile 来构建离线源，具体的实现细节可以翻看《<a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a>》一文。使用这个方案可以解决 PaaS 或者 IaaS 层面的离线源制作的难题，同样也适用于我们部署 K8s 集群的场景，而且采用 Dockerfile 的方式来构建离线源可以完美地解决同时适配 arm64 和 amd64 的难题。</p><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><p>一些部署过程中需要的二进制文件，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- kubelet</span><br><span class="line">- kubeadm</span><br><span class="line">- kubectl</span><br><span class="line">- etcd            <span class="comment"># systemd 方式部署 etcd 时需要的安装包</span></span><br><span class="line">- crictl          <span class="comment"># k8s 官方的 CRI CLI 工具</span></span><br><span class="line">- calicoctl       <span class="comment"># calico 的 CLI 工具</span></span><br><span class="line">- helm            <span class="comment"># 安装 helm 需要的二进制安装包</span></span><br><span class="line">- nerdctl         <span class="comment"># containerd 的 CLI 工具</span></span><br><span class="line">- cni-plugins     <span class="comment"># CNI 插件</span></span><br><span class="line">- cuda            <span class="comment"># GPU 依赖</span></span><br><span class="line">- nvidia_driver   <span class="comment"># GPU 驱动</span></span><br></pre></td></tr></table></figure><h4 id="sealos-1"><a href="#sealos-1" class="headerlink" title="sealos"></a>sealos</h4><p>sealos 对二进制文件的处理比较好，全部打包在离线安装包里，部署的时候会分发到集群节点上，整个部署过程都无需访问公网。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tar -tf kube1.20.0.tar.gz</span><br><span class="line">kube/bin/kubelet</span><br><span class="line">kube/bin/kubectl</span><br><span class="line">kube/bin/conntrack</span><br><span class="line">kube/bin/kubeadm</span><br></pre></td></tr></table></figure><h4 id="kubekey-1"><a href="#kubekey-1" class="headerlink" title="kubekey"></a>kubekey</h4><p>在 kubekey 的源码当中，是将所有二进制文件的 URL 硬编码在代码当中的。如果在部署的时候需要根据部署环境来修改二进制文件的下载地址，比如从内网 nginx 服务器上下载，就需要修改这部分源码把 <code>https://kubernetes-release.pek3b.qingstor.com</code> 修改成内网地址，比如 <code>http://172.20.0.25:8080/files</code> ，然而在部署的时候重新编译 kubekey 的代码又必须能访问公网才行，这就很僵硬。所以以目前开源的 kubekey 来看，是没有办法做到无网环境中愉快地部署 k8s 的，可能商业版的支持（猜测。</p><ul><li><a href="https://github.com/kubesphere/kubekey/blob/master/pkg/kubernetes/preinstall/preinstall.go" target="_blank" rel="noopener">kubekey/blob/master/pkg/kubernetes/preinstall/preinstall.go</a></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FilesDownloadHTTP defines the kubernetes' binaries that need to be downloaded in advance and downloads them.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FilesDownloadHTTP</span><span class="params">(mgr *manager.Manager, filepath, version, arch <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">kkzone := os.Getenv(<span class="string">"KKZONE"</span>)</span><br><span class="line">etcd := files.KubeBinary&#123;Name: <span class="string">"etcd"</span>, Arch: arch, Version: kubekeyapiv1alpha1.DefaultEtcdVersion&#125;</span><br><span class="line">kubeadm := files.KubeBinary&#123;Name: <span class="string">"kubeadm"</span>, Arch: arch, Version: version&#125;</span><br><span class="line">kubelet := files.KubeBinary&#123;Name: <span class="string">"kubelet"</span>, Arch: arch, Version: version&#125;</span><br><span class="line">kubectl := files.KubeBinary&#123;Name: <span class="string">"kubectl"</span>, Arch: arch, Version: version&#125;</span><br><span class="line">kubecni := files.KubeBinary&#123;Name: <span class="string">"kubecni"</span>, Arch: arch, Version: kubekeyapiv1alpha1.DefaultCniVersion&#125;</span><br><span class="line">helm := files.KubeBinary&#123;Name: <span class="string">"helm"</span>, Arch: arch, Version: kubekeyapiv1alpha1.DefaultHelmVersion&#125;</span><br><span class="line"></span><br><span class="line">etcd.Path = fmt.Sprintf(<span class="string">"%s/etcd-%s-linux-%s.tar.gz"</span>, filepath, kubekeyapiv1alpha1.DefaultEtcdVersion, arch)</span><br><span class="line">kubeadm.Path = fmt.Sprintf(<span class="string">"%s/kubeadm"</span>, filepath)</span><br><span class="line">kubelet.Path = fmt.Sprintf(<span class="string">"%s/kubelet"</span>, filepath)</span><br><span class="line">kubectl.Path = fmt.Sprintf(<span class="string">"%s/kubectl"</span>, filepath)</span><br><span class="line">kubecni.Path = fmt.Sprintf(<span class="string">"%s/cni-plugins-linux-%s-%s.tgz"</span>, filepath, arch, kubekeyapiv1alpha1.DefaultCniVersion)</span><br><span class="line">helm.Path = fmt.Sprintf(<span class="string">"%s/helm"</span>, filepath)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> kkzone == <span class="string">"cn"</span> &#123;</span><br><span class="line">etcd.Url = fmt.Sprintf(<span class="string">"https://kubernetes-release.pek3b.qingstor.com/etcd/release/download/%s/etcd-%s-linux-%s.tar.gz"</span>, etcd.Version, etcd.Version, etcd.Arch)</span><br><span class="line">kubeadm.Url = fmt.Sprintf(<span class="string">"https://kubernetes-release.pek3b.qingstor.com/release/%s/bin/linux/%s/kubeadm"</span>, kubeadm.Version, kubeadm.Arch)</span><br><span class="line">kubelet.Url = fmt.Sprintf(<span class="string">"https://kubernetes-release.pek3b.qingstor.com/release/%s/bin/linux/%s/kubelet"</span>, kubelet.Version, kubelet.Arch)</span><br><span class="line">kubectl.Url = fmt.Sprintf(<span class="string">"https://kubernetes-release.pek3b.qingstor.com/release/%s/bin/linux/%s/kubectl"</span>, kubectl.Version, kubectl.Arch)</span><br><span class="line">kubecni.Url = fmt.Sprintf(<span class="string">"https://containernetworking.pek3b.qingstor.com/plugins/releases/download/%s/cni-plugins-linux-%s-%s.tgz"</span>, kubecni.Version, kubecni.Arch, kubecni.Version)</span><br><span class="line">helm.Url = fmt.Sprintf(<span class="string">"https://kubernetes-helm.pek3b.qingstor.com/linux-%s/%s/helm"</span>, helm.Arch, helm.Version)</span><br><span class="line">helm.GetCmd = mgr.DownloadCommand(helm.Path, helm.Url)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">etcd.Url = fmt.Sprintf(<span class="string">"https://github.com/coreos/etcd/releases/download/%s/etcd-%s-linux-%s.tar.gz"</span>, etcd.Version, etcd.Version, etcd.Arch)</span><br><span class="line">kubeadm.Url = fmt.Sprintf(<span class="string">"https://storage.googleapis.com/kubernetes-release/release/%s/bin/linux/%s/kubeadm"</span>, kubeadm.Version, kubeadm.Arch)</span><br><span class="line">kubelet.Url = fmt.Sprintf(<span class="string">"https://storage.googleapis.com/kubernetes-release/release/%s/bin/linux/%s/kubelet"</span>, kubelet.Version, kubelet.Arch)</span><br><span class="line">kubectl.Url = fmt.Sprintf(<span class="string">"https://storage.googleapis.com/kubernetes-release/release/%s/bin/linux/%s/kubectl"</span>, kubectl.Version, kubectl.Arch)</span><br><span class="line">kubecni.Url = fmt.Sprintf(<span class="string">"https://github.com/containernetworking/plugins/releases/download/%s/cni-plugins-linux-%s-%s.tgz"</span>, kubecni.Version, kubecni.Arch, kubecni.Version)</span><br><span class="line">helm.Url = fmt.Sprintf(<span class="string">"https://get.helm.sh/helm-%s-linux-%s.tar.gz"</span>, helm.Version, helm.Arch)</span><br><span class="line">getCmd := mgr.DownloadCommand(fmt.Sprintf(<span class="string">"%s/helm-%s-linux-%s.tar.gz"</span>, filepath, helm.Version, helm.Arch), helm.Url)</span><br><span class="line">helm.GetCmd = fmt.Sprintf(<span class="string">"%s &amp;&amp; cd %s &amp;&amp; tar -zxf helm-%s-linux-%s.tar.gz &amp;&amp; mv linux-%s/helm . &amp;&amp; rm -rf *linux-%s*"</span>, getCmd, filepath, helm.Version, helm.Arch, helm.Arch, helm.Arch)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外 kubekey 在安装 docker 时，是直接调用的 <a href="https://get.docker.com/" target="_blank" rel="noopener">docker 官方的脚本</a> 来安装，安装过程也必须访问公网才行。</p><ul><li><a href="https://github.com/kubesphere/kubekey/blob/master/pkg/container-engine/docker/docker.go" target="_blank" rel="noopener">kubekey/blob/master/pkg/container-engine/docker/docker.go</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">installDockerOnNode</span><span class="params">(mgr *manager.Manager, _ *kubekeyapiv1alpha1.HostCfg)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">dockerConfig, err := GenerateDockerConfig(mgr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">dockerConfigBase64 := base64.StdEncoding.EncodeToString([]<span class="keyword">byte</span>(dockerConfig))</span><br><span class="line">output, err1 := mgr.Runner.ExecuteCmd(fmt.Sprintf(<span class="string">"sudo -E /bin/sh -c \"if [ -z $(which docker) ] || [ ! -e /var/run/docker.sock ]; then curl https://kubernetes.pek3b.qingstor.com/tools/kubekey/docker-install.sh | sh &amp;&amp; systemctl enable docker; if [ ! -f /etc/docker/daemon.json ]; then mkdir -p /etc/docker &amp;&amp; echo %s | base64 -d &gt; /etc/docker/daemon.json; fi; systemctl daemon-reload &amp;&amp; systemctl restart docker; fi\""</span>, dockerConfigBase64), <span class="number">0</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(errors.WithStack(err1), fmt.Sprintf(<span class="string">"Failed to install docker:\n%s"</span>, output))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 docker 官方的安装脚本来安装 docker 是有一个明显的问题就是：没有版本控制，不能指定 docker 的版本，每次安装的 docker 版本都是最新的 stable 版本。没有版本控制就会导致不同时间部署的集群或者加入的节点，docker 版本可能就不一样，在这里可能会埋下一些坑，可能会带来一定的维护成本或者将来升级时遇到问题。</p><p>编译过 kubernetes 组件的可能都知道 k8s 源码当中存在一个 <a href="https://github.com/kubernetes/kubernetes/blob/master/build/dependencies.yaml" target="_blank" rel="noopener">build/dependencies.yaml</a> 的文件，里面记录的是 k8s 组件与其他组件 (如 docker, etcd, coredns, cni, pause) 所匹配的最佳版本。</p><blockquote><p>On each of your nodes, install the Docker for your Linux distribution as per <a href="https://docs.docker.com/engine/install/#server" target="_blank" rel="noopener">Install Docker Engine</a>. You can find the latest validated version of Docker in this <a href="https://git.k8s.io/kubernetes/build/dependencies.yaml" target="_blank" rel="noopener">dependencies</a> file.</p></blockquote><ul><li><a href="https://github.com/kubernetes/kubernetes/blob/release-1.20/build/dependencies.yaml" target="_blank" rel="noopener">kubernetes/blob/release-1.20/build/dependencies.yaml</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="comment"># zeitgeist (https://github.com/kubernetes-sigs/zeitgeist) was inspired by</span></span><br><span class="line">  <span class="comment"># (and now replaces) the cmd/verifydependencies tool to verify external</span></span><br><span class="line">  <span class="comment"># dependencies across the repo.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># The zeitgeist dependencies.yaml file format is intended to be</span></span><br><span class="line">  <span class="comment"># backwards-compatible with the original tooling.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># In instances where the file format may change across versions, this meta</span></span><br><span class="line">  <span class="comment"># dependency check exists to ensure we're pinned to a known good version.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># ref: https://github.com/kubernetes/kubernetes/pull/98845</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Docker</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"docker"</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">19.03</span></span><br><span class="line">    <span class="attr">refPaths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">vendor/k8s.io/system-validators/validators/docker_validator.go</span></span><br><span class="line">      <span class="attr">match:</span> <span class="string">latestValidatedDockerVersion</span></span><br></pre></td></tr></table></figure><p>以 1.20.x 版本的 k8s 为例，它所依赖的 docker 版本为 19.03，而现在最新的 docker 版本如 20.10.8，并不是 K8s 官方所建议的最佳版本。总之，我们在部署 K8s 时，可以参考 <a href="https://github.com/kubernetes/kubernetes/blob/master/build/dependencies.yaml" target="_blank" rel="noopener">build/dependencies.yaml</a> 来确定与 K8s 相关的组件应该选择哪一个最佳的版本，而不是随便装一个最新的版本就完事儿了。</p><h4 id="kubespray"><a href="#kubespray" class="headerlink" title="kubespray"></a>kubespray</h4><p>在 kubespray 中，所有二进制文件的 URL 都是通过变量的方式定义的，想要做到离线部署十分简单，只需要通过 ansible 变量优先级的特性，将它们在 group_vars 通过 overrides 的方式覆盖即可。比如这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Download URLs</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubeadm"</span></span><br></pre></td></tr></table></figure><h3 id="images"><a href="#images" class="headerlink" title="images"></a>images</h3><p>一些如 kube-proxy、kube-apiserver、coredns、calico 组件镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">k8s.gcr.io/kube-apiserver:v1.20.7</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.20.7</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.20.7</span><br><span class="line">k8s.gcr.io/kube-registry-proxy:0.4</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.20.7</span><br><span class="line">k8s.gcr.io/pause:3.3</span><br><span class="line">k8s.gcr.io/coredns:1.7.0</span><br><span class="line">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64:1.8.3</span><br><span class="line">k8s.gcr.io/dns/k8s-dns-node-cache:1.17.1</span><br></pre></td></tr></table></figure><h4 id="sealos-2"><a href="#sealos-2" class="headerlink" title="sealos"></a>sealos</h4><p>sealos 将这些镜像使用 docker save 的方式打包成一个 tar 包，在部署的时候使用 docker/ctr load 的方式将镜像导入到容器运行时的存储目录当中，源码如下：</p><ul><li><a href="https://github.com/fanux/sealos/blob/develop/install/send.go" target="_blank" rel="noopener">fanux/sealos/blob/develop/install/send.go</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SendPackage is send new pkg to all nodes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *SealosUpgrade)</span> <span class="title">SendPackage</span><span class="params">()</span></span> &#123;</span><br><span class="line">all := <span class="built_in">append</span>(u.Masters, u.Nodes...)</span><br><span class="line">pkg := path.Base(u.NewPkgUrl)</span><br><span class="line"><span class="comment">// rm old sealos in package avoid old version problem. if sealos not exist in package then skip rm</span></span><br><span class="line"><span class="keyword">var</span> kubeHook <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> For120(Version) &#123;</span><br><span class="line"><span class="comment">// TODO update need load modprobe -- br_netfilter modprobe -- bridge.</span></span><br><span class="line"><span class="comment">// https://github.com/fanux/cloud-kernel/issues/23</span></span><br><span class="line">kubeHook = fmt.Sprintf(<span class="string">"cd /root &amp;&amp; rm -rf kube &amp;&amp; tar zxvf %s  &amp;&amp; cd /root/kube/shell &amp;&amp; rm -f ../bin/sealos &amp;&amp; (ctr -n=k8s.io image import ../images/images.tar || true) &amp;&amp; cp -f ../bin/* /usr/bin/ "</span>, pkg)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">kubeHook = fmt.Sprintf(<span class="string">"cd /root &amp;&amp; rm -rf kube &amp;&amp; tar zxvf %s  &amp;&amp; cd /root/kube/shell &amp;&amp; rm -f ../bin/sealos &amp;&amp; (docker load -i ../images/images.tar || true) &amp;&amp; cp -f ../bin/* /usr/bin/ "</span>, pkg)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PkgUrl = SendPackage(pkg, all, <span class="string">"/root"</span>, <span class="literal">nil</span>, &amp;kubeHook)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方式加载镜像有一个比较明显的限制就是 kube-apiserver 的 admission 准入控制中不能加入 <code>AlwaysPullImages</code> 参数。不然与这些镜像相关的 pod 重新调度或者重启之后会重新从源镜像仓库拉取镜像，在无网或者网络限制的环境中可能无法拉取镜像导致这些 Pod 启动失败，从而导致集群异常。</p><p>而在多租户场景下，出于安全的考虑  <code>AlwaysPullImages</code> 准入控制往往是要开启的。因此 sealos 可能并不适用于多租户或者对此有要求的环境中（最常见的就是 PaaS 平台）。</p><blockquote><p>该准入控制器会修改每一个新创建的 Pod 的镜像拉取策略为 Always 。 这在多租户集群中是有用的，这样用户就可以放心，他们的私有镜像只能被那些有凭证的人使用。 如果没有这个准入控制器，一旦镜像被拉取到节点上，任何用户的 Pod 都可以通过已了解到的镜像的名称（假设 Pod 被调度到正确的节点上）来使用它，而不需要对镜像进行任何授权检查。 当启用这个准入控制器时，总是在启动容器之前拉取镜像，这意味着需要有效的凭证。</p></blockquote><h4 id="kubekey-2"><a href="#kubekey-2" class="headerlink" title="kubekey"></a>kubekey</h4><p><a href="https://kubesphere.io/docs/installing-on-linux/introduction/air-gapped-installation/" target="_blank" rel="noopener">kubekey 官方的文档</a> 中有提到组件镜像离线部署的方式，不过十分繁琐(劝退😂)，在 <a href="https://github.com/kubesphere/kubekey/issues/597" target="_blank" rel="noopener">Offline installation is too troublesome #597</a> 中也有人吐槽这个问题。不过目前 kubekey 开发团队已经在重构这部分内容了，至于结果如何，只能等了。</p><h4 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h4><p>在私有云环境中，企业一般都会有自己的镜像仓库（比如 harbor ）用于存放业务组件镜像或者一些其他平台依赖的镜像。再加上 Docker Hub 自从去年开始就加入了 pull 镜像次数的限制，如果直接使用 Docker Hub 上面的镜像来部署集群，很有可能会因为 <a href="https://www.docker.com/increase-rate-limit" target="_blank" rel="noopener">429 toomanyrequests</a> 或者一些网络原因导致拉取镜像失败。因此对于 k8s 集群部署而言，建议使用内部自己的镜像仓库，而非公网上镜像仓库。如果没有的话可以使用 harbor 或者 docker registry 在本地部署一个镜像仓库。我们将部署依赖的镜像导入到已经存在的镜像仓库中，部署的时候从该镜像仓库拉取即可。</p><h2 id="部署工具选择"><a href="#部署工具选择" class="headerlink" title="部署工具选择"></a>部署工具选择</h2><p>上面简单梳理了一下部署 k8s 集群过程中所依赖的的在线资源，以及如何将它们制作成离线资源的一些分析。上面提及的部署工具各有各的优缺点，针对以下两种不同的场景可以选择不同的部署工具。</p><h3 id="sealos-3"><a href="#sealos-3" class="headerlink" title="sealos"></a>sealos</h3><p>如果仅仅是部署一个简单的 k8s 集群，对集群没有太多定制化的需求，那么使用 <a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a> 可能是最佳的选择，只不过它是收费的，<a href="https://www.sealyun.com/" target="_blank" rel="noopener">需要充值会员</a> 😂。</p><blockquote><h3 id="现在开始-￥99-￥69-年"><a href="#现在开始-￥99-￥69-年" class="headerlink" title="现在开始 ￥99 ￥69/年"></a>现在开始 <del>￥99</del> ￥69/年</h3><p>欢迎成为年费会员，任意下载所有版本软件包!</p><blockquote><p>@F-liuhui 离线包居然要收费？那还是开源项目吗？</p></blockquote><p>开源与付费不冲突，100%开源 100%付费</p><p><a href="https://www.sealyun.com/" target="_blank" rel="noopener">sealyun.com</a></p></blockquote><p>如果动手能力强的话，可以根据 selaos 离线安装包的目录结构使用 GitHub Actions 来构建，实现起来也不是很难。只不过砸别人饭碗的事儿还是不做为好，因此我们应该选择另一种方案来实现，这样也能避免一些商业纠纷问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ tar -tf kube1.20.0.tar.gz</span><br><span class="line">kube/</span><br><span class="line">kube/lib64/</span><br><span class="line">kube/lib64/README.md</span><br><span class="line">kube/lib64/libseccomp.so.2</span><br><span class="line">kube/lib64/libseccomp.so.2.3.1</span><br><span class="line">kube/shell/</span><br><span class="line">kube/shell/containerd.sh</span><br><span class="line">kube/shell/init.sh</span><br><span class="line">kube/shell/master.sh</span><br><span class="line">kube/README.md</span><br><span class="line">kube/bin/</span><br><span class="line">kube/bin/kubelet</span><br><span class="line">kube/bin/kubectl</span><br><span class="line">kube/bin/conntrack</span><br><span class="line">kube/bin/kubeadm</span><br><span class="line">kube/bin/kubelet-pre-start.sh</span><br><span class="line">kube/conf/</span><br><span class="line">kube/conf/kubeadm.yaml</span><br><span class="line">kube/conf/kubelet.service</span><br><span class="line">kube/conf/calico.yaml</span><br><span class="line">kube/conf/10-kubeadm.conf</span><br><span class="line">kube/conf/net/</span><br><span class="line">kube/conf/net/calico.yaml</span><br><span class="line">kube/containerd/</span><br><span class="line">kube/containerd/README.md</span><br><span class="line">kube/containerd/cri-containerd-cni-linux-amd64.tar.gz</span><br><span class="line">kube/images/</span><br><span class="line">kube/images/images.tar</span><br><span class="line">kube/images/README.md</span><br></pre></td></tr></table></figure><h3 id="kubekey-3"><a href="#kubekey-3" class="headerlink" title="kubekey"></a>kubekey</h3><p>由于 kubekey 部署时二进制文件需要公网获取，docker 无法离线部署以及需要手动安装一些前置依赖，没有办法做到完整的离线部署，因此离线部署的方案也就直接放弃掉了，抽空他们提个 Issue 或 PR 看看能否支持这部分 😅。</p><h3 id="kubespray-1"><a href="#kubespray-1" class="headerlink" title="kubespray"></a>kubespray</h3><p>如果想找一个即开源又免费的离线部署方案，或者对集群部署有特殊的要求，比如基于 K8s 的 PaaS toB 产品，需要在部署时安装平台本身需要的一些依赖（如存储客户端、GPU 驱动等）。那么不妨先看一下 kubernetes-sig 社区的 <a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">kubespray</a> 如何 🤔，主要的特性如下：</p><ul><li>支持的 10 种 CNI 插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- cni-plugins v0.9.1</span><br><span class="line">- calico v3.17.4</span><br><span class="line">- canal (given calico/flannel versions)</span><br><span class="line">- cilium v1.9.9</span><br><span class="line">- flanneld v0.14.0</span><br><span class="line">- kube-ovn v1.7.1</span><br><span class="line">- kube-router v1.3.0</span><br><span class="line">- multus v3.7.2</span><br><span class="line">- ovn4nfv v1.1.0</span><br><span class="line">- weave v2.8.1</span><br></pre></td></tr></table></figure><ul><li>支持 3 种容器运行时以及 <a href="https://github.com/kubernetes-sigs/kubespray/blob/master/docs/kata-containers.md" target="_blank" rel="noopener">Kata Containers</a> 还有 nvidia-gpu-device-plugin 等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- docker v20.10</span><br><span class="line">- containerd v1.4.6</span><br><span class="line">- cri-o v1.21</span><br></pre></td></tr></table></figure><ul><li>适配了 10 种 Linux 发行版，覆盖了绝大多数私有云场景</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- Flatcar Container Linux by Kinvolk</span><br><span class="line">- Debian Buster, Jessie, Stretch, Wheezy</span><br><span class="line">- Ubuntu 16.04, 18.04, 20.04</span><br><span class="line">- CentOS/RHEL 7, 8</span><br><span class="line">- Fedora 33, 34</span><br><span class="line">- Fedora CoreOS (see fcos Note)</span><br><span class="line">- openSUSE Leap 15.x/Tumbleweed</span><br><span class="line">- Oracle Linux 7, 8</span><br><span class="line">- Alma Linux 8</span><br><span class="line">- Amazon Linux 2</span><br></pre></td></tr></table></figure><ul><li>丰富的插件和扩展</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 工具类</span></span><br><span class="line">- helm</span><br><span class="line">- krew</span><br><span class="line">- nerdctl</span><br><span class="line"></span><br><span class="line"><span class="comment">## 一些 controller 和 provisioner</span></span><br><span class="line">- ambassador: v1.5</span><br><span class="line">- cephfs-provisioner v2.1.0-k8s1.11</span><br><span class="line">- rbd-provisioner v2.1.1-k8s1.11</span><br><span class="line">- cert-manager v0.16.1</span><br><span class="line">- coredns v1.8.0</span><br><span class="line">- ingress-nginx v0.43.0</span><br></pre></td></tr></table></figure><ul><li>依赖的文件和镜像支持离线部署 <a href="https://github.com/kubernetes-sigs/kubespray/blob/master/docs/offline-environment.md" target="_blank" rel="noopener">Offline environment</a></li></ul><p>kubespray 对所有的依赖资源都做到了离线下载的支持：比如所有依赖文件的 URL 都通过变量的方式来定义，而非 kubekey 那样硬编码在代码中；所有镜像的 repo 和 tag 都是通过变量的方式来定义。这样的好处就是在部署的时候可以根据客户环境的的镜像仓库地址和文件服务器的 URL 地址来填写相应的参数，无需通过公网来获取。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Registry overrides</span></span><br><span class="line"><span class="attr">kube_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_host &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">gcr_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_host &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">docker_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_host &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">quay_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; registry_host &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/kubeadm"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="comment"># etcd is optional if you **DON'T** use etcd_deployment=host</span></span><br><span class="line"><span class="attr">etcd_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/etcd/etcd-<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>-linux-amd64.tar.gz"</span></span><br><span class="line"><span class="attr">cni_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/cni/cni-plugins-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>-<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>.tgz"</span></span><br><span class="line"><span class="attr">crictl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/cri-tools/crictl-<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="comment"># If using Calico</span></span><br><span class="line"><span class="attr">calicoctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; files_repo &#125;&#125;</span>/kubernetes/calico/<span class="template-variable">&#123;&#123; calico_ctl_version &#125;&#125;</span>/calicoctl-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>和上述几种部署工具对比不难发现，kubespray 灵活性和可扩展性要领先其他工具（支持 10 种 CNI、10种 Linux  发行版、3 种 CRI、以及多种插件和扩展）并在参数层面上做到了离线部署的支持。因此我们首先选用 kubespray 作为集群部署的底层工具。</p><p>还有一个问题就是 kubespray 虽然在参数配置上支持离线部署，但是从制作离线安装包到一键部署，目前为止还未有一个完整的实现方案。因此需要为 kubespray 设计一套从离线安装包的构建到集群一键部署的流程和方案，为此我们新建一个名为 <a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">kubeplay</a> 的 repo 来完成这部分内容。</p><p>另外值得一提的是 kubesphere 早期的版本 v2.x 使用也是 kubespray 部署的 k8s，至今 ks-installer 代码中仍残留着 <a href="https://github.com/kubesphere/ks-installer/commits/master/roles/download/tasks" target="_blank" rel="noopener">部分 kubespray 的代码</a> ，到了 3.0 的时候开始使用自研的 kubekey 来部署 K8s 了。</p><blockquote><p>基于 Ansible 的安装程序具有大量软件依赖性，例如 Python。KubeKey 是使用 Go 语言开发的，可以消除在各种环境中出现的问题，从而提高安装成功率。</p><p><a href="https://github.com/kubesphere/kubekey/blob/master/README_zh-CN.md" target="_blank" rel="noopener">README_zh-CN.md</a></p></blockquote><p>不过 ansible 的依赖问题当时为什么没有考虑采用容器化的方式运行 kubespray 🤔，至于 ansible 的性能问题也不是没有优化的余地。</p><h2 id="kubeplay"><a href="#kubeplay" class="headerlink" title="kubeplay"></a><a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">kubeplay</a></h2><p>kubeplay 这个项目主要是实现 K8s 离线安装包的构建和一键部署功能，目前只适配了 kubespray，等到后面会适配一些其他部署工具如 kubekey。</p><h3 id="打包方式"><a href="#打包方式" class="headerlink" title="打包方式"></a>打包方式</h3><p>由于部署依赖的二进制文件和组件镜像大都存放在 GitHub 、Docker Hub、gcr.io（Google Container Registry）、quay.io 这些国外的平台上，在国内环境获取这些资源是有一定的网络限制。而 GitHub 托管的 runner 运行在国外的机房当中，可以很顺畅地获取这些资源。因此我们选择使用 GitHub Actions 来进行离线安装包的构建。</p><p>像 selos 那样将安装包存放在阿里云 OSS 上，在国内能十分顺畅地高速下载，收费也是理所当然。但我们的方案是 100% 开源 100% 免费，每个人都可以 fork 代码到自己的 repo，根据自己的需求进行构建。因此选择 GitHub 来构建和存放我们的安装包是最合适的选择，这样也不用去额外考虑安装包下载的问题。至于从 GitHub 上下载安装包慢的问题，那应该由使用者自行去解决，而非本方案所关心的问题。</p><blockquote><p>Q：如何摆脱网络的依赖来创建个 Docker 的 image 呢，我觉得这个是 Docker 用户自己的基本权利？</p><p>A：这个基本权利我觉得还是要问 GFW ，国外的开发人员是非常难理解有些他们认为跟水电一样普及的基础设施在某些地方还是很困难的。</p><p>此处引用 <a href="http://dockone.io/article/722" target="_blank" rel="noopener">DockOne技术分享（二十四）：容器和IaaS：谁动了谁的奶酪</a></p></blockquote><p>选择好的构建场所为 GitHub Actions 之后我们再将这些离线资源进行拆分，目的是为了实现各个离线资源之间的解耦，这样做灵活性更好一些，比如能够适配多种 OS、支持多个 k8s 版本等。主要拆分成如下几个模块。</p><table><thead><tr><th>模块</th><th>Repo</th><th>用途</th><th>运行/使用方式</th></tr></thead><tbody><tr><td>compose</td><td><a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">kubeplay</a></td><td>用于部署 nginx 和 registry 服务</td><td>nerdctl compose</td></tr><tr><td>os-tools</td><td><a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">kubeplay</a></td><td>部署 compose 时的一些依赖工具</td><td>二进制安装</td></tr><tr><td>os-packages</td><td><a href="https://github.com/k8sli/os-packages" target="_blank" rel="noopener">os-packages</a></td><td>提供 rpm/deb 离线源</td><td>nginx 提供 http 方式下载</td></tr><tr><td>kubespray</td><td><a href="https://github.com/k8sli/kubespray" target="_blank" rel="noopener">kubespray</a></td><td>用于部署/扩缩容 k8s 集群</td><td>容器或者 pod</td></tr><tr><td>kubespray-files</td><td><a href="https://github.com/k8sli/kubespray" target="_blank" rel="noopener">kubespray</a></td><td>提供二进制文件依赖</td><td>nginx 提供 http 方式下载</td></tr><tr><td>kubespray-images</td><td><a href="https://github.com/k8sli/kubespray" target="_blank" rel="noopener">kubespray</a></td><td>提供组件镜像</td><td>registry 提供镜像下载</td></tr></tbody></table><p>拆分完成之后，我们最终还是需要将它们组合成一个完成的离线安装包。为了减少维护成本，我们将每个模块的构建操作都放在 Dockerfile 中，即 <code>All in Dockerfile</code> 🤣。这样每个模块的 GitHub Actions 流水线最终交付的都是一个镜像，然后镜像都推送到  <code>ghcr.io</code> 上，这样就解决了模块间产物传递以及镜像缓存的问题。最终通过一个最终的 <a href="https://github.com/k8sli/kubeplay/blob/main/Dockerfile" target="_blank" rel="noopener">Dockerfile</a> 将这些模块的镜像全部 COPY 到一个镜像当中，只要打包这个最终的镜像为离线安装包即可；另一个好处就使用 buildx 构建这些离线资源就原生支持多 CPU 体系架构，能够同时适配 amd64 和 arm64 体系架构，这样 arm64 也能愉快地玩耍了，真是一举两得。</p><p>下面就详细讲解每个模块的功能以及是如何打包的：</p><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>compose 模块里面主要运两个服务： 用于提供文件下载的 nginx 和组件镜像拉取的 registry。这两个我们依旧是容器化以类似 docker-compose 的方式来部署，而所依赖的也只有两个镜像和一些配置文件而已。</p><ul><li><a href="https://github.com/k8sli/kubeplay/blob/main/compose.yaml" target="_blank" rel="noopener">kubeplay/blob/main/compose.yaml</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.20-alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./resources/nginx:/usr/share/nginx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/compose/certs/domain.crt:/etc/nginx/conf.d/domain.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/compose/certs/domain.key:/etc/nginx/conf.d/domain.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/compose/nginx.conf:/etc/nginx/conf.d/default.conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 443 端口反向代理 registr 的 5000 端口，仅用于 pull 镜像</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2.7.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./resources/registry:/var/lib/registry</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># 只允许本地 5000 端口 push 镜像</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:5000:5000</span></span><br></pre></td></tr></table></figure><p>这两个镜像我们使用 skopeo copy 的方式保存为 tar 包，部署的时候 load 到容器运行时的存储中。</p><blockquote><p>Q：为什么要用 skopeo 而不是 docker？</p><p>A：因为 Dockerfile 构建过程中不支持运行 docker 命令 save 镜像</p></blockquote><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest as downloader</span><br><span class="line"><span class="keyword">ARG</span> SKOPEO_VERSION=v1.<span class="number">4.0</span></span><br><span class="line"><span class="keyword">ARG</span> NGINX_VERSION=<span class="number">1.20</span>-alpine</span><br><span class="line"><span class="keyword">ARG</span> RERGISRRY_VERSION=<span class="number">2.7</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /tools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk --no-cache add wget ca-certificates \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -k https://github.com/k8sli/skopeo/releases/download/v1.4.0/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> -O /tools/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /tools/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ln -s /tools/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> /usr/bin/skopeo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /images</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag nginx:<span class="variable">$&#123;NGINX_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://docker.io/library/nginx:<span class="variable">$&#123;NGINX_VERSION&#125;</span> docker-archive:nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag registry:<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://docker.io/library/registry:<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span> docker-archive:registry-<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span>.tar</span></span><br></pre></td></tr></table></figure><p>在部署的时候我们使用 nerdctl compose 的方式启动即可，使用方式有点类似于 docker-compose。</p><blockquote><p>Q: 为什么不用 docker 和 docker-compose</p><p>A：K8s 去 docker 是大势所趋，选择 containerd 更符合主流发展方向</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将镜像 load 进 containerd 存储</span></span><br><span class="line">$ find <span class="variable">$&#123;IMAGES_DIR&#125;</span> -<span class="built_in">type</span> f -name <span class="string">'*.tar'</span> | xargs -L1 nerdctl load -i</span><br><span class="line"><span class="comment"># nerdctl compose 启动 nginx 和 registry</span></span><br><span class="line">$ nerdctl compose -f compose.yaml up</span><br></pre></td></tr></table></figure><h3 id="os-packages"><a href="#os-packages" class="headerlink" title="os-packages"></a>os-packages</h3><p>这部分是 rpm/deb 离线源的构建，其详细的过程和原理可以参考我之前写的博客 《<a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a>》，下面只列举一下 CentOS7 离线源的构建配置：</p><ul><li><a href="https://github.com/k8sli/os-packages/blob/main/build/Dockerfile.os.centos7" target="_blank" rel="noopener">Dockerfile</a></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7.9</span>.<span class="number">2009</span> as os-centos7</span><br><span class="line"><span class="keyword">ARG</span> OS_VERSION=<span class="number">7</span></span><br><span class="line"><span class="keyword">ARG</span> DOCKER_MIRROR_URL=<span class="string">"https://download.docker.com"</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_TOOLS=<span class="string">"yum-utils createrepo epel-release wget"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建工具，配置 docker 官方 yum 源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -q -y <span class="variable">$&#123;BUILD_TOOLS&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum-config-manager --add-repo <span class="variable">$&#123;DOCKER_MIRROR_URL&#125;</span>/linux/centos/docker-ce.repo \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum makecache</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /centos/<span class="variable">$OS_VERSION</span>/os</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> packages.yaml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=mikefarah/yq:4.11.1 /usr/bin/yq /usr/bin/yq</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据配置文件解析该 OS 需要构建的包，并获取这些包的下载 url</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yq <span class="built_in">eval</span> <span class="string">'.common[],.yum[],.centos7[],.kubespray.common[],.kubespray.yum[]'</span> packages.yaml &gt; packages.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sort -u packages.list | xargs repotrack --urls | sort -u &gt; packages.urls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 wget 的方式下载 rpm 包，使用 createrepo 创建 repo 索引文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -x -P <span class="variable">$&#123;ARCH&#125;</span> -i packages.urls \</span></span><br><span class="line"><span class="bash">    &amp;&amp; createrepo -d <span class="variable">$&#123;ARCH&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将构建的内容 COPY 成单独的一层</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=os-centos7 /centos /centos</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/k8sli/os-packages/blob/main/packages.yaml" target="_blank" rel="noopener">packages.yaml</a> 配置文件</li></ul><p>这个是需要安装包的配置文件，可以根据平台或者客户的一些要求配置上不同的包</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kubespray:</span></span><br><span class="line">  <span class="attr">common:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rsync</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">socat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">unzip</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">e2fsprogs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xfsprogs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ebtables</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bash-completion</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ipvsadm</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ipset</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">conntrack</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">yum:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nss</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">libselinux-python</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">device-mapper-libs</span></span><br><span class="line">  <span class="attr">apt:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python-apt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python3-apt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">aufs-tools</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apt-transport-https</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">software-properties-common</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cifs-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lsof</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lvm2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sshpass</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">vim</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">wget</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ethtool</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net-tools</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rsync</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chrony</span></span><br><span class="line"></span><br><span class="line"><span class="attr">yum:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfs-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yum-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">createrepo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">epel-release</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nc</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">httpd-tools</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apt:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfs-common</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apt-transport-https</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ca-certificates</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gnupg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lsb-release</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">aptitude</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dpkg-dev</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gnupg2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">netcat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apache2-utils</span></span><br><span class="line"></span><br><span class="line"><span class="attr">centos7:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">containerd.io-1.4.6</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ubuntu:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">containerd.io=1.4.6-1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">debian10:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">containerd.io=1.4.6-1</span></span><br></pre></td></tr></table></figure><blockquote><p>对于 toB 产品，建议将下面这些常见的运维调试工具（如 tcpdump, strace, lsof, net-tools 等）也构建在离线源中。这样也不至于在客户的环境中排查问题的时候机器上连个 tcpdump 都没有，尤其是在无网的环境中，如果没有这些常用的运维工具，排查问题将会十分棘手。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tools:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">bash-completion</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chrony</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cifs-utils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dstat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">e2fsprogs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ebtables</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">expect</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">gdb</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">htop</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">iftop</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">iotop</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ipset</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ipvsadm</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">jq</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lsof</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lvm2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ncdu</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net-tools</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nethogs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nload</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ntpdate</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openssl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pciutils</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">psmisc</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rsync</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">smartmontools</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">socat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sshpass</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">strace</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sysstat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tcpdump</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">telnet</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tmux</span></span><br></pre></td></tr></table></figure><h3 id="kubespray-2"><a href="#kubespray-2" class="headerlink" title="kubespray"></a>kubespray</h3><p>kubespray 是部署 K8s 集群、增加节点、删除节点、移除集群等涉及对集群操作的主要工具。我们依旧采用容器化的方式运行 kubespray，主要有以下场景会用到 kubespray：</p><ul><li>在部署工具运行节点，使用 nerdctl 来运行 kubespray 容器部署  K8s 集群</li><li>K8s 集群部署完毕后，以 Job pod 的方式运行部署另一个 K8s 集群，实现多集群部署的基本能力</li><li>K8s 集群部署完毕后，以 Job pod 的方式运行 kubespray 对该集群集群节点进行扩缩容</li></ul><p>Job pod 方式对集群进行扩缩容的设计的是为了从一定程度上解决部署大规模集群时 ansible 性能问题。即我们一开始不必就部署一个上千节点的集群，而是先把一个规模较小的集群部署起来，然后通过创建批量的 Job 的方式运行 kubespray 再将集群慢慢扩容起来，比如扩容到上千台节点。</p><p>kubespray 官方的 Dockerfile 构建出来的镜像有 1.4GB，实在是太大了，因此我们需要优化一下，减少镜像大小</p><ul><li>kubespray BASE 镜像</li></ul><p>首先构建一个 base 镜像，对于不经常变动的内容我们把它封装在一个 base 镜像里，只有当相关依赖更新了才需要重新构建这个 base 镜像，<code>Dockerfile.base</code> 如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3</span> as builder</span><br><span class="line"><span class="keyword">ARG</span> KUBE_VERSION=v1.<span class="number">21.3</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> tests/requirements.txt tests/requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'shellcheck-py==0.7.2.1'</span> &gt;&gt; requirements.txt \</span></span><br><span class="line"><span class="bash">    &amp;&amp; grep -E <span class="string">'^yamllint|^ansible-lint'</span> tests/requirements.txt &gt;&gt; requirements.txt \</span></span><br><span class="line"><span class="bash">    &amp;&amp; pip3 install --user -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -O /root/.<span class="built_in">local</span>/bin/kubectl -q https://dl.k8s.io/<span class="variable">$&#123;KUBE_VERSION&#125;</span>/bin/linux/<span class="variable">$&#123;ARCH&#125;</span>/kubectl \</span></span><br><span class="line"><span class="bash">&amp;&amp; chmod a+x /root/.<span class="built_in">local</span>/bin/kubectl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3</span>-slim</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> DEBIAN_FRONTEND=noninteractive apt-get update -y -qq \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y -qq --no-install-recommends \</span></span><br><span class="line"><span class="bash">        ca-certificates libssl-dev openssh-client sshpass curl gnupg2 rsync \</span></span><br><span class="line"><span class="bash">        jq moreutils vim iputils-ping wget tcpdump xz-utils \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /root/.<span class="built_in">local</span> /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /kubespray</span></span><br></pre></td></tr></table></figure><ul><li><a href="">kubespray 镜像</a></li></ul><p>FROM 的 base 镜像就使用我们刚刚构建好的镜像，相关依赖已经在 base 镜像中安装好了，这里构建的时候只需要把 repo 源码复制到 /kubespray 目录下即可，内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> BASE_IMAGE=ghcr.io/k8sli/kubespray-base</span><br><span class="line"><span class="keyword">ARG</span> BASE_IMAGE_VERSION=latest</span><br><span class="line"><span class="keyword">FROM</span> $BASE_IMAGE:$BASE_IMAGE_VERSION</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /kubespray</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br></pre></td></tr></table></figure><ul><li>kubespray 集群部署入口 <code>run.sh</code></li></ul><p>将集群部署、增加节点、删除节点、删除集群等操作封装成一个入口的脚本，提供外部工具调用该脚本，不然外部调用的时候直接运行 <code>ansible-playbook</code> 命令实在是不太方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">TYPE=<span class="variable">$1</span></span><br><span class="line">NODES=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">KUBE_ROOT=<span class="string">"<span class="variable">$(cd "$(dirname "$0")</span>"</span> &amp;&amp; <span class="built_in">pwd</span>)<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;TYPE:=deploy-cluster&#125;</span></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;ANSIBLE_FORKS:=10&#125;</span></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;BECOME_USER:=root&#125;</span></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;ANSIBLE_LOG_FORMAT:=yaml&#125;</span></span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;INVENTORY:=$&#123;KUBE_ROOT&#125;</span>/config/inventory&#125;</span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;ENV_FILE:=$&#123;KUBE_ROOT&#125;</span>/config/env.yml&#125;</span></span><br><span class="line"><span class="string">: <span class="variable">$&#123;INSTALL_STEPS_FILE:=$&#123;KUBE_ROOT&#125;</span>/config/.install_steps&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export ANSIBLE_STDOUT_CALLBACK=<span class="variable">$&#123;ANSIBLE_LOG_FORMAT&#125;</span></span></span><br><span class="line"><span class="string">export ANSIBLE_ARGS="</span>-f <span class="variable">$&#123;ANSIBLE_FORKS&#125;</span> --become --become-user=<span class="variable">$&#123;BECOME_USER&#125;</span> -i <span class="variable">$&#123;INVENTORY&#125;</span> -e @<span class="variable">$&#123;ENV_FILE&#125;</span><span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># Set logging colors</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NORMAL_COL=<span class="variable">$(tput sgr0)</span></span></span><br><span class="line"><span class="string">RED_COL=<span class="variable">$(tput setaf 1)</span></span></span><br><span class="line"><span class="string">WHITE_COL=<span class="variable">$(tput setaf 7)</span></span></span><br><span class="line"><span class="string">GREEN_COL=<span class="variable">$(tput setaf 76)</span></span></span><br><span class="line"><span class="string">YELLOW_COL=<span class="variable">$(tput setaf 202)</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">debuglog()&#123; printf "</span><span class="variable">$&#123;WHITE_COL&#125;</span>%s<span class="variable">$&#123;NORMAL_COL&#125;</span>\n<span class="string">" "</span><span class="variable">$@</span><span class="string">"; &#125;</span></span><br><span class="line"><span class="string">infolog()&#123; printf "</span><span class="variable">$&#123;GREEN_COL&#125;</span>✔ %s<span class="variable">$&#123;NORMAL_COL&#125;</span>\n<span class="string">" "</span><span class="variable">$@</span><span class="string">"; &#125;</span></span><br><span class="line"><span class="string">warnlog()&#123; printf "</span><span class="variable">$&#123;YELLOW_COL&#125;</span>➜ %s<span class="variable">$&#123;NORMAL_COL&#125;</span>\n<span class="string">" "</span><span class="variable">$@</span><span class="string">"; &#125;</span></span><br><span class="line"><span class="string">errorlog()&#123; printf "</span><span class="variable">$&#123;RED_COL&#125;</span>✖ %s<span class="variable">$&#123;NORMAL_COL&#125;</span>\n<span class="string">" "</span><span class="variable">$@</span><span class="string">"; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set -eo pipefail</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [[ ! -f <span class="variable">$&#123;INVENTORY&#125;</span> ]]; then</span></span><br><span class="line"><span class="string">  errorlog "</span><span class="variable">$&#123;INVENTORY&#125;</span> file is missing, please check the inventory file is exists<span class="string">"</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deploy_cluster()&#123;</span></span><br><span class="line"><span class="string">:</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">main()&#123;</span></span><br><span class="line"><span class="string">  case <span class="variable">$TYPE</span> in</span></span><br><span class="line"><span class="string">    deploy-cluster)</span></span><br><span class="line"><span class="string">      infolog "</span><span class="comment">######  start deploy kubernetes cluster  ######"</span></span><br><span class="line">      deploy_cluster</span><br><span class="line">      infolog <span class="string">"######  kubernetes cluster successfully installed  ######"</span></span><br><span class="line">      ;;</span><br><span class="line">    remove-cluster)</span><br><span class="line">      infolog <span class="string">"######  start remove kubernetes cluster  ######"</span></span><br><span class="line">      <span class="keyword">if</span> ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/reset.yml &gt;/dev/stdout 2&gt;/dev/stderr; <span class="keyword">then</span></span><br><span class="line">        rm -f <span class="variable">$&#123;INSTALL_STEP_FILE&#125;</span></span><br><span class="line">        infolog <span class="string">"######  kubernetes cluster successfully removed ######"</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      ;;</span><br><span class="line">    add-node)</span><br><span class="line">      check_nodename</span><br><span class="line">      infolog <span class="string">"######  start add worker to kubernetes cluster  ######"</span></span><br><span class="line">      ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> --<span class="built_in">limit</span>=<span class="string">"<span class="variable">$&#123;NODES&#125;</span>"</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/playbooks/10-scale-nodes.yml &gt;/dev/stdout 2&gt;/dev/stderr</span><br><span class="line">      ;;</span><br><span class="line">    remove-node)</span><br><span class="line">      check_nodename</span><br><span class="line">      infolog <span class="string">"######  start remove worker from kubernetes cluster  ######"</span></span><br><span class="line">      ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> -e node=<span class="string">"<span class="variable">$&#123;NODES&#125;</span>"</span> -e reset_nodes=<span class="literal">true</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/remove-node.yml &gt;/dev/stdout 2&gt;/dev/stderr</span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      errorlog <span class="string">"unknow [TYPE] parameter: <span class="variable">$&#123;TYPE&#125;</span>"</span></span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><ul><li>分层部署 <a href="https://github.com/k8sli/kubespray/tree/main/playbooks" target="_blank" rel="noopener">playbooks</a></li></ul><p>不同于 kubespray 官方使用一个完整的 <a href="https://github.com/kubernetes-sigs/kubespray/blob/master/cluster.yml" target="_blank" rel="noopener">cluster.yaml</a> 来完成整个 K8s 集群的部署，我们在这里引入了分层部署的特性。即将集群部署分成若干个相互独立的 playbook，然后在各个 playbook 里引入我们增加的 roles 以及二开内容。这样的好处就是能和 kubespray 上游的代码保持相互独立，在 rebase 或者 cherry-pick 上游最新的代码能够避免出现冲突的现象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">playbooks</span><br><span class="line">├── 00-default-ssh-config.yml    <span class="comment"># 配置 ssh 连接</span></span><br><span class="line">├── 01-cluster-bootstrap-os.yml  <span class="comment"># 初始化集群节点</span></span><br><span class="line">├── 02-cluster-etcd.yml          <span class="comment"># 部署 etcd 集群</span></span><br><span class="line">├── 03-cluster-kubernetes.yml    <span class="comment"># 部署 k8s master 和 node</span></span><br><span class="line">├── 04-cluster-network.yml       <span class="comment"># 部署 CNI 插件</span></span><br><span class="line">├── 05-cluster-apps.yml          <span class="comment"># 部署一些 addon 组件如 coredns</span></span><br><span class="line">└── 10-scale-nodes.yml           <span class="comment"># 增删节点</span></span><br></pre></td></tr></table></figure><p>分层部署的时候通过一个文件来记录已经部署成功的步骤，这样如果本次因为一些原因导致部署失败（如网络中断），那么下次重新部署的时候会跳过已经部署好的步骤，从失败的地方继续部署，以提升整体的部署效率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deploy_cluster</span></span>()&#123;</span><br><span class="line">  touch <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span></span><br><span class="line">  STEPS=<span class="string">"00-default-ssh-config 01-cluster-bootstrap-os 02-cluster-etcd 03-cluster-kubernetes 04-cluster-network 05-cluster-apps"</span></span><br><span class="line">  <span class="keyword">for</span> step <span class="keyword">in</span> <span class="variable">$&#123;STEPS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! grep -q <span class="string">"<span class="variable">$&#123;step&#125;</span>"</span> <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span>; <span class="keyword">then</span></span><br><span class="line">      infolog <span class="string">"start deploy <span class="variable">$&#123;step&#125;</span>"</span></span><br><span class="line">      <span class="keyword">if</span> ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/playbooks/<span class="variable">$&#123;step&#125;</span>.yml; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;step&#125;</span> &gt;&gt; <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span></span><br><span class="line">        infolog <span class="string">"<span class="variable">$&#123;step&#125;</span> successfully installed"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        errorlog <span class="string">"<span class="variable">$&#123;step&#125;</span> installation failed"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      warnlog <span class="string">"<span class="variable">$&#123;step&#125;</span> is already installed, so skipped..."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件和镜像"><a href="#文件和镜像" class="headerlink" title="文件和镜像"></a>文件和镜像</h3><p>我们需要提取出 kubespray 部署的时候依赖的文件和镜像，生成一个文件列表和镜像列表，然后根据这些列表下载并构建到一个镜像里。</p><ul><li>文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Download URLs</span></span><br><span class="line"><span class="attr">kubelet_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubelet"</span></span><br><span class="line"><span class="attr">kubectl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubectl"</span></span><br><span class="line"><span class="attr">kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/storage.googleapis.com/kubernetes-release/release/<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>/bin/linux/<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>/kubeadm"</span></span><br><span class="line"><span class="attr">etcd_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/coreos/etcd/releases/download/<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>/etcd-<span class="template-variable">&#123;&#123; etcd_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">cni_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containernetworking/plugins/releases/download/<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>/cni-plugins-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>-<span class="template-variable">&#123;&#123; cni_version &#125;&#125;</span>.tgz"</span></span><br><span class="line"><span class="attr">calicoctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calicoctl/releases/download/<span class="template-variable">&#123;&#123; calico_ctl_version &#125;&#125;</span>/calicoctl-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_crds_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/projectcalico/calico/archive/<span class="template-variable">&#123;&#123; calico_version &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">crictl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/kubernetes-sigs/cri-tools/releases/download/<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>/crictl-<span class="template-variable">&#123;&#123; crictl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">helm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/get.helm.sh/helm-<span class="template-variable">&#123;&#123; helm_version &#125;&#125;</span>-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">nerdctl_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/containerd/nerdctl/releases/download/v<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>/nerdctl-<span class="template-variable">&#123;&#123; nerdctl_version &#125;&#125;</span>-<span class="template-variable">&#123;&#123; ansible_system | lower &#125;&#125;</span>-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>.tar.gz"</span></span><br><span class="line"><span class="attr">patched_kubeadm_download_url:</span> <span class="string">"<span class="template-variable">&#123;&#123; download_url &#125;&#125;</span>/github.com/k8sli/kubernetes/releases/download/<span class="template-variable">&#123;&#123; kubeadm_patch_version &#125;&#125;</span>/kubeadm-linux-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>在构建安装包的时候，将 download_url 变量设置为 <code>https://</code> ，在部署的时候将 <code>download_url</code> 设置为内网 文件服务器服务器的 URL，比如 <code>https://172.20.0.25:8080/files</code>，这样就可以实现文件构建和部署使用的统一，节省维护成本。</p><ul><li>镜像</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define image repo and tag overwrite role/download/default/main.yml</span></span><br><span class="line"><span class="attr">pod_infra_image_tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; pod_infra_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">pod_infra_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/pause"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kube_proxy_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/kube-proxy"</span></span><br><span class="line"><span class="attr">kube_apiserver_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/kube-apiserver"</span></span><br><span class="line"><span class="attr">kube_scheduler_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/kube-scheduler"</span></span><br><span class="line"><span class="attr">kube_controller_manager_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/kube-controller-manager"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">coredns_image_tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; coredns_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">dnsautoscaler_image_tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dnsautoscaler_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">coredns_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_image_repo &#125;&#125;</span>/coredns"</span></span><br><span class="line"><span class="attr">dnsautoscaler_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_image_repo &#125;&#125;</span>/cluster-proportional-autoscaler-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Full image name for generate images list</span></span><br><span class="line"><span class="attr">kube_proxy_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_proxy_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kube_apiserver_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_apiserver_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kube_scheduler_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_scheduler_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">kube_controller_manager_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; kube_controller_manager_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; kube_version &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">coredns_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; coredns_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; coredns_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">dnsautoscaler_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; dnsautoscaler_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; dnsautoscaler_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">nginx_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; nginx_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; nginx_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">pod_infra_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; pod_infra_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; pod_infra_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_policy_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; calico_policy_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; calico_policy_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_cni_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; calico_cni_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; calico_cni_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">calico_node_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; calico_node_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; calico_node_image_tag &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">flannel_image_name:</span> <span class="string">"<span class="template-variable">&#123;&#123; flannel_image_repo &#125;&#125;</span>:<span class="template-variable">&#123;&#123; flannel_image_tag &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><ul><li><code>generate.sh</code> 列表生成脚本</li></ul><p>我们根据上面 group_vars 中定义的版本号和一些参数，使用脚本的方式自动生成一个文件列表和镜像列表，构建的时候根据这些列表来下载所需要的文件和镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">SCRIPT_PATH=$(<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>); <span class="built_in">pwd</span>)</span><br><span class="line">REPO_PATH=<span class="string">"<span class="variable">$&#123;SCRIPT_PATH%/build&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">: <span class="variable">$&#123;IMAGE_ARCH:="amd64"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;ANSIBLE_ARCHITECTURE:="x86_64"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;DOWNLOAD_YML:="config/group_vars/all/download.yml"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ARCH used in convert &#123;%- if image_arch != 'amd64' -%&#125;-&#123;&#123; image_arch &#125;&#125;&#123;%- endif -%&#125; to &#123;&#123;arch&#125;&#125;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;IMAGE_ARCH&#125;</span>"</span> != <span class="string">"amd64"</span> ]]; <span class="keyword">then</span> ARCH=<span class="string">"-<span class="variable">$&#123;IMAGE_ARCH&#125;</span>"</span>; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cat &gt; /tmp/generate.sh &lt;&lt; EOF</span><br><span class="line">arch=<span class="variable">$&#123;ARCH&#125;</span></span><br><span class="line">download_url=https:/</span><br><span class="line">image_arch=<span class="variable">$&#123;IMAGE_ARCH&#125;</span></span><br><span class="line">ansible_system=linux</span><br><span class="line">ansible_architecture=<span class="variable">$&#123;ANSIBLE_ARCHITECTURE&#125;</span></span><br><span class="line">registry_project=library</span><br><span class="line">registry_domain=localhost</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate all component version by $DOWNLOAD_YML</span></span><br><span class="line">grep <span class="string">'_version:'</span> <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| sed <span class="string">'s/: /=/g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> | tr -d <span class="string">' '</span> &gt;&gt; /tmp/generate.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate download files url list</span></span><br><span class="line">grep <span class="string">'_download_url:'</span> <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| sed <span class="string">'s/: /=/g;s/ //g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g;s/|lower//g;s/^.*_url=/echo /g'</span> &gt;&gt; /tmp/generate.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate download images list</span></span><br><span class="line">grep -E <span class="string">'_image_tag:|_image_repo:|_image_name:'</span> <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| sed <span class="string">"s#&#123;%- if image_arch != 'amd64' -%&#125;-&#123;&#123; image_arch &#125;&#125;&#123;%- endif -%&#125;#&#123;&#123;arch&#125;&#125;#g"</span> \</span><br><span class="line">| sed <span class="string">'s/: /=/g;s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> | tr -d <span class="string">' '</span> &gt;&gt; /tmp/generate.sh</span><br><span class="line"></span><br><span class="line">grep <span class="string">'_image_name:'</span> <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| cut -d <span class="string">':'</span> -f1 | sed <span class="string">'s/^/echo $/g'</span> &gt;&gt; /tmp/generate.sh</span><br></pre></td></tr></table></figure><p>为了同时支持 amd64 和 arm64 的 CPU 架构，需要为两种架构各自生成列表，需要特殊处理一下。在这里踩的一个坑就是不同的组件镜像的命名方法千差万别，大致可以分为如下四种情况：</p><ul><li>像 kube-apiserver 这些 k8s 组件的镜像，镜像名称和镜像 tag 是不需要加上 CPU 体系架构的；</li><li>cluster-proportional-autoscaler 的镜像则是在镜像的名称后面加上了 CPU 体系架构的名称如 cluster-proportional-autoscaler-amd64，cluster-proportional-autoscaler-arm64；</li><li>flannel 则是将 CPU 体系架构名称定义在镜像 tag 后面比如 <code>flannel:v0.14.0-amd64</code>；</li><li>还有 calico 更奇葩，amd64 架构的镜像不需要加体系架构的名称如 <code>calico/cni:v3.18.4</code>，而 arm64 的则必须要在镜像 tag 后面带上 CPU 体系架构比如 <code>calico/cni:v3.18.4-arm64</code>；</li></ul><p><img src="https://p.k8s.li/2021-08-31-pass-tob-k8s-offline-deploy-2.jpeg" alt=""></p><p>在这里需要强调一下，文件列表和镜像列表一定要使用自动化的方式来管理，切勿手动更新，这样能节省大量的维护成本，不然的话每次都手动去更新这些列表成本实在是太高了，而且特别容易出出错或者遗漏某个组件。</p><h3 id="kubespray-files"><a href="#kubespray-files" class="headerlink" title="kubespray-files"></a>kubespray-files</h3><p>我们将 kubespray 部署所依赖的二进制文件构建在一个名为 kubespray-files 的镜像当中：</p><ul><li>生成的文件列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">https://get.helm.sh/helm-v3.6.3-linux-amd64.tar.gz</span><br><span class="line">https://github.com/containerd/nerdctl/releases/download/v0.8.1/nerdctl-0.8.1-linux-amd64.tar.gz</span><br><span class="line">https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">https://github.com/coreos/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">https://github.com/k8sli/kubernetes/releases/download/v1.21.3-patch-1.0/kubeadm-linux-amd64</span><br><span class="line">https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz</span><br><span class="line">https://github.com/projectcalico/calico/archive/v3.18.4.tar.gz</span><br><span class="line">https://github.com/projectcalico/calicoctl/releases/download/v3.18.4/calicoctl-linux-amd64</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.21.3/bin/linux/amd64/kubeadm</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.21.3/bin/linux/amd64/kubectl</span><br><span class="line">https://storage.googleapis.com/kubernetes-release/release/v1.21.3/bin/linux/amd64/kubelet</span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest as files</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add wget ca-certificates</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /build</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> build/kubespray-files/files_*.list /build/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed <span class="string">'/#/d'</span> *<span class="variable">$&#123;ARCH&#125;</span>.list &gt; all_files.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -x -P /files -i all_files.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=files /files /files</span></span><br></pre></td></tr></table></figure><ul><li>构建后的目录结构，通过目录层级的方式保留原有的 URL 地址，维护和使用起来比较方便</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">files/</span><br><span class="line">├── get.helm.sh</span><br><span class="line">│   └── helm-v3.6.3-linux-amd64.tar.gz</span><br><span class="line">├── github.com</span><br><span class="line">│   ├── containerd</span><br><span class="line">│   │   └── nerdctl</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.8.1</span><br><span class="line">│   │                   └── nerdctl-0.8.1-linux-amd64.tar.gz</span><br><span class="line">│   ├── containernetworking</span><br><span class="line">│   │   └── plugins</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v0.9.1</span><br><span class="line">│   │                   └── cni-plugins-linux-amd64-v0.9.1.tgz</span><br><span class="line">│   ├── coreos</span><br><span class="line">│   │   └── etcd</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v3.4.13</span><br><span class="line">│   │                   └── etcd-v3.4.13-linux-amd64.tar.gz</span><br><span class="line">│   ├── k8sli</span><br><span class="line">│   │   └── kubernetes</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v1.21.3-patch-1.0</span><br><span class="line">│   │                   └── kubeadm-linux-amd64</span><br><span class="line">│   ├── kubernetes-sigs</span><br><span class="line">│   │   └── cri-tools</span><br><span class="line">│   │       └── releases</span><br><span class="line">│   │           └── download</span><br><span class="line">│   │               └── v1.21.0</span><br><span class="line">│   │                   └── crictl-v1.21.0-linux-amd64.tar.gz</span><br><span class="line">│   └── projectcalico</span><br><span class="line">│       ├── calico</span><br><span class="line">│       │   └── archive</span><br><span class="line">│       │       └── v3.18.4.tar.gz</span><br><span class="line">│       └── calicoctl</span><br><span class="line">│           └── releases</span><br><span class="line">│               └── download</span><br><span class="line">│                   └── v3.18.4</span><br><span class="line">│                       └── calicoctl-linux-amd64</span><br><span class="line">└── storage.googleapis.com</span><br><span class="line">    └── kubernetes-release</span><br><span class="line">        └── release</span><br><span class="line">            └── v1.21.3</span><br><span class="line">                └── bin</span><br><span class="line">                    └── linux</span><br><span class="line">                        └── amd64</span><br><span class="line">                            ├── kubeadm</span><br><span class="line">                            ├── kubectl</span><br><span class="line">                            └── kubelet</span><br></pre></td></tr></table></figure><h3 id="kubespray-images"><a href="#kubespray-images" class="headerlink" title="kubespray-images"></a>kubespray-images</h3><p>我们同样将 kubespray 部署所需要的组件镜像构建在一个名为 kubespray-images 的镜像当中：</p><ul><li>镜像列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">library/calico-cni:v3.18.4</span><br><span class="line">library/calico-kube-controllers:v3.18.4</span><br><span class="line">library/calico-node:v3.18.4</span><br><span class="line">library/calico-pod2daemon-flexvol:v3.18.4</span><br><span class="line">library/cluster-proportional-autoscaler-amd64:1.8.3</span><br><span class="line">library/coredns:v1.8.0</span><br><span class="line">library/flannel:v0.14.0-amd64</span><br><span class="line">library/kube-apiserver:v1.21.3</span><br><span class="line">library/kube-controller-manager:v1.21.3</span><br><span class="line">library/kube-proxy:v1.21.3</span><br><span class="line">library/kube-scheduler:v1.21.3</span><br><span class="line">library/nginx:1.19</span><br><span class="line">library/pause:3.3</span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><p>在 Dockerfile 里完成所有镜像的下载，并使用 《<a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a>》文中提到的骚操作，利用 registry 存储复用相同 layer 的特性，将 skopeo sync 下载的镜像转换成 registry 存储的结构。这样在部署的时候直接把这个 registry 存储目录挂载进 registry 容器的 <code>/var/lib/registry</code> 即可。特点是性能方面无论是构建和部署，都比常规使用 docker save 和 docker load 的方式要快至少 5 到 10 倍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.12 as images</span><br><span class="line">ARG SKOPEO_VERSION=v1.4.0</span><br><span class="line">ARG YQ_VERSION=v4.11.2</span><br><span class="line">RUN ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span><br><span class="line">    &amp;&amp; apk --no-cache add bash wget ca-certificates \</span><br><span class="line">    &amp;&amp; wget -q -k https://github.com/mikefarah/yq/releases/download/<span class="variable">$&#123;YQ_VERSION&#125;</span>/yq_linux_<span class="variable">$&#123;ARCH&#125;</span> -O /usr/<span class="built_in">local</span>/bin/yq \</span><br><span class="line">    &amp;&amp; wget -q -k https://github.com/k8sli/skopeo/releases/download/<span class="variable">$&#123;SKOPEO_VERSION&#125;</span>/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> -O /usr/<span class="built_in">local</span>/bin/skopeo \</span><br><span class="line">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/*</span><br><span class="line"></span><br><span class="line">WORKDIR /build</span><br><span class="line">COPY build/kubespray-images/*  /build/</span><br><span class="line">RUN ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span><br><span class="line">    &amp;&amp; IMAGE_ARCH=<span class="variable">$&#123;ARCH&#125;</span> bash build.sh</span><br><span class="line"></span><br><span class="line">FROM scratch</span><br><span class="line">COPY --from=images /build/docker /docker</span><br></pre></td></tr></table></figure><ul><li>images_origin.yaml 镜像配置文件</li></ul><p>考虑到有将镜像导入到已经存在的镜像仓库中的场景，这里我们需要修改一下镜像仓库的 repo。因为 <code>library</code> 这个 repo 在 harbor 中是默认自带的，在导入到 harbor 的过程中也不需要创建一些额外的 project ，所以将所有镜像的 repo 全部统一为 <code>library</code> 更通用一些。</p><p>这里用一个 yaml 配置文件来记录原镜像地址和 library 镜像的地址的对应关系。比如上游的 <code>k8s.gcr.io/kube-apiserver</code> 映射为 <code>library/kube-apiserver</code>， <code>quay.io/calico/node</code> 映射为 <code>library/calico-node</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># kubeadm core images</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-apiserver</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/kube-apiserver</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-controller-manager</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/kube-controller-manager</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-proxy</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/kube-proxy</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-scheduler</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/kube-scheduler</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/coredns/coredns</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/coredns</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/pause</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/pause</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubernetes addons</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/dns/k8s-dns-node-cache</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/k8s-dns-node-cache</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/cluster-proportional-autoscaler-amd64</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/cpa/cluster-proportional-autoscaler-arm64</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/cluster-proportional-autoscaler-arm64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network plugin</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/cni</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-cni</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/node</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-node</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/kube-controllers</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-kube-controllers</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/pod2daemon-flexvol</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-pod2daemon-flexvol</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/typha</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/calico-typha</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/coreos/flannel</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/flannel</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx for daemonset and offline</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">docker.io/library/nginx</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/nginx</span></span><br></pre></td></tr></table></figure><h3 id="kubeplay-1"><a href="#kubeplay-1" class="headerlink" title="kubeplay"></a>kubeplay</h3><p>kubeplay 部署的代码主要是由一些 shell 脚本和配置文件构成，用于完成 nginx 服务和 registry 服务的部署，以及最后调用 kubespray 来完成集群部署。</p><ul><li>代码结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubeplay/</span><br><span class="line">├── Dockerfile          <span class="comment"># 构建完整安装包的 Dockerfile</span></span><br><span class="line">├── compose.yaml        <span class="comment"># compose 启动配置 yaml 文件</span></span><br><span class="line">├── config</span><br><span class="line">│   ├── compose</span><br><span class="line">│   │   └── nginx.conf  <span class="comment"># nginx 配置文件</span></span><br><span class="line">│   └── rootCA.cnf      <span class="comment"># 生成镜像仓库证书用到的 openssl 配置文件</span></span><br><span class="line">├── config-sample.yaml  <span class="comment"># 主配置文件</span></span><br><span class="line">├── install.sh          <span class="comment"># 安装操作然后</span></span><br><span class="line">└── library             <span class="comment"># 一些 shell 函数库</span></span><br></pre></td></tr></table></figure><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest as downloader</span><br><span class="line"><span class="keyword">ARG</span> SKOPEO_VERSION=v1.<span class="number">4.0</span></span><br><span class="line"><span class="keyword">ARG</span> YQ_VERSION=v4.<span class="number">11.2</span></span><br><span class="line"><span class="keyword">ARG</span> NERDCTL_VERSION=<span class="number">0.11</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ARG</span> NGINX_VERSION=<span class="number">1.20</span>-alpine</span><br><span class="line"><span class="keyword">ARG</span> RERGISRRY_VERSION=<span class="number">2.7</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">ARG</span> KUBESPRAY_VERSION=latest</span><br><span class="line"><span class="keyword">ARG</span> KUBESPRAY_IMAGE=ghcr.io/k8sli/kubespray</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载部署时需要的工具，如 yq、skopeo、nerdctl-fullsss</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /tools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk --no-cache add wget ca-certificates \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -k https://github.com/mikefarah/yq/releases/download/<span class="variable">$&#123;YQ_VERSION&#125;</span>/yq_linux_<span class="variable">$&#123;ARCH&#125;</span>  -O /tools/yq-linux-<span class="variable">$&#123;ARCH&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -k https://github.com/k8sli/skopeo/releases/download/v1.4.0/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> -O /tools/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -q -k https://github.com/containerd/nerdctl/releases/download/v<span class="variable">$&#123;NERDCTL_VERSION&#125;</span>/nerdctl-full-<span class="variable">$&#123;NERDCTL_VERSION&#125;</span>-linux-<span class="variable">$&#123;ARCH&#125;</span>.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod a+x /tools/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ln -s /tools/skopeo-linux-<span class="variable">$&#123;ARCH&#125;</span> /usr/bin/skopeo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一些镜像，如 nginx、registry、kubespray</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /images</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ARCH=$(uname -m | sed <span class="string">'s/x86_64/amd64/;s/aarch64/arm64/'</span>) \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag nginx:<span class="variable">$&#123;NGINX_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://docker.io/library/nginx:<span class="variable">$&#123;NGINX_VERSION&#125;</span> docker-archive:nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag registry:<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://docker.io/library/registry:<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span> docker-archive:registry-<span class="variable">$&#123;RERGISRRY_VERSION&#125;</span>.tar \</span></span><br><span class="line"><span class="bash">    &amp;&amp; skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --override-arch <span class="variable">$&#123;ARCH&#125;</span> --additional-tag kubespray:<span class="variable">$&#123;KUBESPRAY_VERSION&#125;</span> \</span></span><br><span class="line"><span class="bash">       docker://<span class="variable">$&#123;KUBESPRAY_IMAGE&#125;</span>:<span class="variable">$&#123;KUBESPRAY_VERSION&#125;</span> docker-archive:kubespray-<span class="variable">$&#123;KUBESPRAY_VERSION&#125;</span>.tar</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"> <span class="comment"># 将其它模块中的内容复制到 scratch 镜像中，构建的时候导出为 local 方式</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=downloader /tools /resources/nginx/tools</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=downloader /images /resources/images</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=<span class="variable">$&#123;OS_PACKAGES_IMAGE&#125;</span>:<span class="variable">$&#123;OS_PACKAGE_REPO_TAG&#125;</span> / /resources/nginx</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=<span class="variable">$&#123;KUBESPRAY_FILES_IMAGE&#125;</span>:<span class="variable">$&#123;KUBESPRAY_REPO_TAG&#125;</span> / /resources/nginx</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=<span class="variable">$&#123;KUBESPRAY_IMAGES_IMAGE&#125;</span>:<span class="variable">$&#123;KUBESPRAY_REPO_TAG&#125;</span> / /resources/registry</span></span><br></pre></td></tr></table></figure><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>由于最终的构建涉及多个模块和 repo，其流程比较复杂，详细的代码可参考源码 <a href="https://github.com/k8sli/kubeplay/blob/main/.github/workflows/build.yaml" target="_blank" rel="noopener">build.yaml</a> ，在这里只讲几个关键的部分</p><ul><li>checkout repo，将 kubespray 和 os-packages repo clone 到工作目录</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-package:</span></span><br><span class="line">    <span class="comment"># 以 tag 的事件触发构建流水线</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">startsWith(github.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># fetch all git repo tag for define image tag</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">kubespray</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">kubespray</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;/kubespray</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">os-packages</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">os-packages</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;/os-packages</span></span><br></pre></td></tr></table></figure><ul><li>获取 kubespray 和 os-packages 的 repo tag，根据它来确定 os-packages, kubespray-files, kubespray-images 这个三个镜像的 tag，并生成一个 All in One 的 Dockerfile 用于完成后续安装包的构建。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一些组件的版本和变量传递给 Dockerfile</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">for</span> <span class="string">build</span> <span class="string">images</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">git</span> <span class="string">describe</span> <span class="string">--tags</span> <span class="string">--always</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/IMAGE_TAG=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">    <span class="string">cd</span> <span class="string">kubespray</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">describe</span> <span class="string">--tags</span> <span class="string">--always</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/KUBESPRAY_VERSION=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">..</span></span><br><span class="line">    <span class="string">cd</span> <span class="string">os-packages</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">describe</span> <span class="string">--tags</span> <span class="string">--always</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/OS_PACKAGE_REPO_TAG=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span> <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">..</span></span><br><span class="line">    <span class="string">cp</span> <span class="string">-rf</span> <span class="string">kubespray/config</span> <span class="string">config/kubespray</span> <span class="string">&amp;&amp;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">kubespray</span> <span class="string">os-packages</span></span><br><span class="line"></span><br><span class="line">    <span class="string">source</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">""</span> <span class="string">&gt;&gt;</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">"COPY --from=$&#123;OS_PACKAGES_IMAGE&#125;:$&#123;OS_PACKAGE_REPO_TAG&#125; / /resources/nginx"</span> <span class="string">&gt;&gt;</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">"COPY --from=$&#123;KUBESPRAY_FILES_IMAGE&#125;:$&#123;KUBESPRAY_VERSION&#125; / /resources/nginx"</span> <span class="string">&gt;&gt;</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">"COPY --from=$&#123;KUBESPRAY_IMAGES_IMAGE&#125;:$&#123;KUBESPRAY_VERSION&#125; / /resources/registry"</span> <span class="string">&gt;&gt;</span> <span class="string">Dockerfile</span></span><br><span class="line"></span><br><span class="line">    <span class="string">sed</span> <span class="string">-n</span> <span class="string">'s|image: nginx:|NGINX_VERSION=|p'</span> <span class="string">compose.yaml</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">' '</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">sed</span> <span class="string">-n</span> <span class="string">'s|image: registry:|RERGISRRY_VERSION=|p'</span> <span class="string">compose.yaml</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">' '</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>outputs: type=local,dest=./</code> 构建镜像到本地目录而非 push 到 registry</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">kubeplay</span> <span class="string">image</span> <span class="string">to</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">docker/build-push-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">platforms:</span> <span class="string">linux/amd64,linux/arm64</span></span><br><span class="line">    <span class="attr">build-args:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">NGINX_VERSION=$&#123;&#123;</span> <span class="string">env.NGINX_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">RERGISRRY_VERSION=$&#123;&#123;</span> <span class="string">env.RERGISRRY_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">KUBESPRAY_IMAGE=$&#123;&#123;</span> <span class="string">env.KUBESPRAY_IMAGE</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">KUBESPRAY_VERSION=$&#123;&#123;</span> <span class="string">env.KUBESPRAY_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">outputs:</span> <span class="string">type=local,dest=./</span></span><br></pre></td></tr></table></figure><ul><li>打包并上传安装包到 GitHub release 存储</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">for</span> <span class="string">upload</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">rm</span> <span class="string">-rf</span> <span class="string">linux_&#123;amd64,arm64&#125;/&#123;Dockerfile,LICENSE&#125;</span></span><br><span class="line">    <span class="string">mv</span> <span class="string">linux_amd64</span> <span class="string">kubeplay</span></span><br><span class="line">    <span class="string">tar</span> <span class="string">-I</span> <span class="string">pigz</span> <span class="string">-cf</span> <span class="string">kubeplay-$&#123;IMAGE_TAG&#125;-linux-amd64.tar.gz</span> <span class="string">kubeplay</span> <span class="string">--remove-files</span></span><br><span class="line">    <span class="string">mv</span> <span class="string">linux_arm64</span> <span class="string">kubeplay</span></span><br><span class="line">    <span class="string">tar</span> <span class="string">-I</span> <span class="string">pigz</span> <span class="string">-cf</span> <span class="string">kubeplay-$&#123;IMAGE_TAG&#125;-linux-arm64.tar.gz</span> <span class="string">kubeplay</span> <span class="string">--remove-files</span></span><br><span class="line">    <span class="string">sha256sum</span> <span class="string">kubeplay-$&#123;IMAGE_TAG&#125;-linux-&#123;amd64,arm64&#125;.tar.gz</span> <span class="string">&gt;</span> <span class="string">sha256sum.txt</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span> <span class="string">and</span> <span class="string">upload</span> <span class="string">packages</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">files:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">sha256sum.txt</span></span><br><span class="line">      <span class="string">kubeplay-$&#123;&#123;</span> <span class="string">env.IMAGE_TAG</span> <span class="string">&#125;&#125;-linux-amd64.tar.gz</span></span><br><span class="line">      <span class="string">kubeplay-$&#123;&#123;</span> <span class="string">env.IMAGE_TAG</span> <span class="string">&#125;&#125;-linux-arm64.tar.gz</span></span><br></pre></td></tr></table></figure><p>由此一个完整的离线安装包就构建完成了，接下来再讲一下安装流程</p><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>在 <a href="https://github.com/k8sli/kubeplay/releases" target="_blank" rel="noopener">GitHub release 页面</a> 将我们的离线安装包下载到本地，需要根据 CPU 架构的类型选择相应的安装包。</p><p><img src="https://p.k8s.li/2021-08-24-offline-deploy-k8s-1.png" alt="image"></p><p>下载完成之后再将安装包通过 scp 或者其他方式上传到内网的部署节点上，部署的文档可参考 <a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">README</a> 。过程十分简单：只需要填写好 <code>config.yaml</code> 配置文件然后执行 <code>bash install.sh</code> 即可完成 K8s 集群的一键部署。</p><p>下面从源码而非 README 文档的角度来讲一下部署流程的实现细节</p><h3 id="安装包结构"><a href="#安装包结构" class="headerlink" title="安装包结构"></a>安装包结构</h3><ul><li>配置文件 <code>config.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx 端口和 registry 域名配置参数</span></span><br><span class="line"><span class="attr">compose:</span></span><br><span class="line">  <span class="comment"># Compose bootstrap node ip, default is local internal ip</span></span><br><span class="line">  <span class="attr">internal_ip:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.25</span></span><br><span class="line">  <span class="comment"># Nginx http server bind port for download files and packages</span></span><br><span class="line">  <span class="attr">nginx_http_port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment"># Registry domain for CRI runtime download images</span></span><br><span class="line">  <span class="attr">registry_domain:</span> <span class="string">kube.registry.local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubespray 参数</span></span><br><span class="line"><span class="attr">kubespray:</span></span><br><span class="line">  <span class="comment"># Kubernetes version by default, only support v1.20.6</span></span><br><span class="line">  <span class="attr">kube_version:</span> <span class="string">v1.21.3</span></span><br><span class="line">  <span class="comment"># For deploy HA cluster you must configure a external apiserver access ip</span></span><br><span class="line">  <span class="attr">external_apiserver_access_ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="comment"># Set network plugin to calico with vxlan mode by default</span></span><br><span class="line">  <span class="attr">kube_network_plugin:</span> <span class="string">calico</span></span><br><span class="line">  <span class="comment">#Container runtime, only support containerd if offline deploy</span></span><br><span class="line">  <span class="attr">container_manager:</span> <span class="string">containerd</span></span><br><span class="line">  <span class="comment"># Now only support host if use containerd as CRI runtime</span></span><br><span class="line">  <span class="attr">etcd_deployment_type:</span> <span class="string">host</span></span><br><span class="line">  <span class="comment"># Settings for etcd event server</span></span><br><span class="line">  <span class="attr">etcd_events_cluster_setup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">etcd_events_cluster_enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群节点 ssh 登录 inventory 配置</span></span><br><span class="line"><span class="comment"># Cluster nodes inventory info</span></span><br><span class="line"><span class="attr">inventory:</span></span><br><span class="line">  <span class="attr">all:</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">ansible_port:</span> <span class="number">22</span></span><br><span class="line">      <span class="attr">ansible_user:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">ansible_ssh_pass:</span> <span class="string">Password</span></span><br><span class="line">      <span class="comment"># ansible_ssh_private_key_file: /kubespray/config/id_rsa</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">      <span class="attr">node1:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.21</span></span><br><span class="line">      <span class="attr">node2:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.22</span></span><br><span class="line">      <span class="attr">node3:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.23</span></span><br><span class="line">      <span class="attr">node4:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.24</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="attr">kube_control_plane:</span></span><br><span class="line">        <span class="attr">hosts:</span></span><br><span class="line">          <span class="attr">node1:</span></span><br><span class="line">          <span class="attr">node2:</span></span><br><span class="line">          <span class="attr">node3:</span></span><br><span class="line">      <span class="attr">kube_node:</span></span><br><span class="line">        <span class="attr">hosts:</span></span><br><span class="line">          <span class="attr">node1:</span></span><br><span class="line">          <span class="attr">node2:</span></span><br><span class="line">          <span class="attr">node3:</span></span><br><span class="line">          <span class="attr">node4:</span></span><br><span class="line">      <span class="attr">etcd:</span></span><br><span class="line">        <span class="attr">hosts:</span></span><br><span class="line">          <span class="attr">node1:</span></span><br><span class="line">          <span class="attr">node2:</span></span><br><span class="line">          <span class="attr">node3:</span></span><br><span class="line">      <span class="attr">k8s_cluster:</span></span><br><span class="line">        <span class="attr">children:</span></span><br><span class="line">          <span class="attr">kube_control_plane:</span></span><br><span class="line">          <span class="attr">kube_node:</span></span><br><span class="line">      <span class="attr">gpu:</span></span><br><span class="line">        <span class="attr">hosts:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="attr">calico_rr:</span></span><br><span class="line">        <span class="attr">hosts:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些默认的配置，一般情况下无需修改</span></span><br><span class="line"><span class="comment">### Default parameters ###</span></span><br><span class="line"><span class="comment">## This filed not need config, will auto update,</span></span><br><span class="line"><span class="comment">## if no special requirement, do not modify these parameters.</span></span><br><span class="line"><span class="attr">default:</span></span><br><span class="line">  <span class="comment"># NTP server ip address or domain, default is internal_ip</span></span><br><span class="line">  <span class="attr">ntp_server:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">internal_ip</span></span><br><span class="line">  <span class="comment"># Registry ip address, default is internal_ip</span></span><br><span class="line">  <span class="attr">registry_ip:</span> <span class="string">internal_ip</span></span><br><span class="line">  <span class="comment"># Offline resource url for download files, default is internal_ip:nginx_http_port</span></span><br><span class="line">  <span class="attr">offline_resources_url:</span> <span class="string">internal_ip:nginx_http_port</span></span><br><span class="line">  <span class="comment"># Use nginx and registry provide all offline resources</span></span><br><span class="line">  <span class="attr">offline_resources_enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Image repo in registry</span></span><br><span class="line">  <span class="attr">image_repository:</span> <span class="string">library</span></span><br><span class="line">  <span class="comment"># Kubespray container image for deploy user cluster or scale</span></span><br><span class="line">  <span class="attr">kubespray_image:</span> <span class="string">"kubespray"</span></span><br><span class="line">  <span class="comment"># Auto generate self-signed certificate for registry domain</span></span><br><span class="line">  <span class="attr">generate_domain_crt:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># For nodes pull image, use 443 as default</span></span><br><span class="line">  <span class="attr">registry_https_port:</span> <span class="number">443</span></span><br><span class="line">  <span class="comment"># For push image to this registry, use 5000 as default, and only bind at 127.0.0.1</span></span><br><span class="line">  <span class="attr">registry_push_port:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment"># Set false to disable download all container images on all nodes</span></span><br><span class="line">  <span class="attr">download_container:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>安装包目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">kubeplay/</span><br><span class="line">.</span><br><span class="line">├── compose.yaml                 <span class="comment"># compose 配置文件</span></span><br><span class="line">├── config</span><br><span class="line">│   ├── compose</span><br><span class="line">│   │   └── nginx.conf           <span class="comment"># nginx 配置文件</span></span><br><span class="line">│   ├── kubespray</span><br><span class="line">│   │   ├── env.yml</span><br><span class="line">│   │   ├── group_vars           <span class="comment"># kubespray group_vars  配置文件</span></span><br><span class="line">│   │   └── inventory.ini</span><br><span class="line">│   └── rootCA.cnf               <span class="comment"># openssl 配置文件</span></span><br><span class="line">├── config-sample.yaml           <span class="comment"># 主配置文件</span></span><br><span class="line">├── install.sh                   <span class="comment"># 安装包入口脚本</span></span><br><span class="line">├── library</span><br><span class="line">└── resources                    <span class="comment"># 所有离线资源</span></span><br><span class="line">    ├── images</span><br><span class="line">    │   ├── kubespray-v2.16.tar  <span class="comment"># kubespray 镜像</span></span><br><span class="line">    │   ├── nginx-1.20-alpine.tar<span class="comment"># nginx 镜像</span></span><br><span class="line">    │   └── registry-2.7.1.tar   <span class="comment"># registry 镜像</span></span><br><span class="line">    ├── nginx                    <span class="comment"># rpm/deb 包以及一些二进制文件</span></span><br><span class="line">    │   ├── centos               <span class="comment"># centos rpm 包</span></span><br><span class="line">    │   ├── debian               <span class="comment"># debian deb 包</span></span><br><span class="line">    │   ├── files                <span class="comment"># 一些二进制文件</span></span><br><span class="line">    │   ├── repos                <span class="comment"># yum/apt 配置文件</span></span><br><span class="line">    │   ├── tools                <span class="comment"># 一些部署时依赖的工具</span></span><br><span class="line">    │   └── ubuntu               <span class="comment"># ubuntu deb 包</span></span><br><span class="line">    └── registry</span><br><span class="line">        └── docker               <span class="comment"># 组件镜像 registry 存储目录</span></span><br></pre></td></tr></table></figure><h3 id="compose-节点"><a href="#compose-节点" class="headerlink" title="compose 节点"></a>compose 节点</h3><p>需要单独划分出一个节点用户部署 nginx 和镜像仓库服务，并在该节点上运行 kubespray 来部署 K8s 集群。大致流程的代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deploy_compose</span></span>()&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$&#123;ID&#125;</span> <span class="keyword">in</span></span><br><span class="line">    Debian|debian)</span><br><span class="line">      system::debian::config_repo</span><br><span class="line">      ;;</span><br><span class="line">    CentOS|centos)</span><br><span class="line">      system::centos::disable_selinux</span><br><span class="line">      system::centos::config_repo</span><br><span class="line">      ;;</span><br><span class="line">    Ubuntu|ubuntu)</span><br><span class="line">      system::ubuntu::config_repo</span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      errorlog <span class="string">"Not support system: <span class="variable">$&#123;ID&#125;</span>"</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  system::disable_firewalld</span><br><span class="line">  system::install_pkgs</span><br><span class="line">  common::install_tools</span><br><span class="line">  common::rudder_config</span><br><span class="line">  common::update_hosts</span><br><span class="line">  common::generate_domain_certs</span><br><span class="line">  common::load_images</span><br><span class="line">  common::compose_up</span><br><span class="line">  common::health_check</span><br><span class="line">  system::install_chrony</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$&#123;INSTALL_TYPE&#125;</span> <span class="keyword">in</span></span><br><span class="line">    all)</span><br><span class="line">      deploy_compose</span><br><span class="line">      common::push_kubespray_image</span><br><span class="line">      common::run_kubespray <span class="string">"bash /kubespray/run.sh deploy-cluster"</span></span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      echowarn <span class="string">"unknow [TYPE] parameter: <span class="variable">$&#123;INSTALL_TYPE&#125;</span>"</span></span><br><span class="line">      common::usage</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><ul><li>首先初始化节点，关闭防火墙和 <code>SELinux</code></li><li>配置部署节点 yum/apt 离线源</li><li>安装一些部署依赖包，如 chrony、 libseccomp  等</li><li>安装一些工具如 yq, skopeo, kubectl 等</li><li>安装 nerdctl-full (containerd)</li><li>使用 nerdctl load -i 的方式导入nginx, registry, kubespray 镜像</li><li>使用 yq 渲染配置文件，生成 kubespray 需要的 env 文件和 inventory 文件</li><li>生成镜像仓库域名证书并将自签证书添加到主机的 CA trust 信任当中</li><li>在 <code>/etc/hosts</code> 中添加镜像仓库域名 hosts 映射</li><li>使用 nerdctl compose 启动 nginx 和 registry 服务</li><li>部署时钟同步服务 chrony</li><li>检查各个服务的状态</li><li>最后使用 nerdctl run 启动 kubespray 容器来部署 k8s 集群</li></ul><h3 id="kubespray-3"><a href="#kubespray-3" class="headerlink" title="kubespray"></a>kubespray</h3><p>部署的流程上基本上和 kubespray 官方大体一致，只不过我们引入里分层部署的特性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">deploy_cluster</span></span>()&#123;</span><br><span class="line">  touch <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span></span><br><span class="line">  STEPS=<span class="string">"00-default-ssh-config 01-cluster-bootstrap-os 02-cluster-etcd 03-cluster-kubernetes 04-cluster-network 05-cluster-apps"</span></span><br><span class="line">  <span class="keyword">for</span> step <span class="keyword">in</span> <span class="variable">$&#123;STEPS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! grep -q <span class="string">"<span class="variable">$&#123;step&#125;</span>"</span> <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span>; <span class="keyword">then</span></span><br><span class="line">      infolog <span class="string">"start deploy <span class="variable">$&#123;step&#125;</span>"</span></span><br><span class="line">      <span class="keyword">if</span> ansible-playbook <span class="variable">$&#123;ANSIBLE_ARGS&#125;</span> <span class="variable">$&#123;KUBE_ROOT&#125;</span>/playbooks/<span class="variable">$&#123;step&#125;</span>.yml; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$&#123;step&#125;</span> &gt;&gt; <span class="variable">$&#123;INSTALL_STEPS_FILE&#125;</span></span><br><span class="line">        infolog <span class="string">"<span class="variable">$&#123;step&#125;</span> successfully installed"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        errorlog <span class="string">"<span class="variable">$&#123;step&#125;</span> installation failed"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      warnlog <span class="string">"<span class="variable">$&#123;step&#125;</span> is already installed, so skipped..."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置堡垒机 ssh 登录（可选）</li><li>配置节点 yum/apt 源为 nginx 服务提供的源</li><li>将自签的域名证书添加到主机的 CA trust 信任当中</li><li>在 <code>/etc/hosts</code> 中添加镜像仓库域名 hosts 映射</li><li>关闭防火墙，安装时钟同步服务，进行同步时钟</li><li>初始化集群节点，安装部署依赖</li><li>安装容器运行时，下载文件和组件镜像</li><li>部署 etcd 集群</li><li>部署 K8s 集群</li><li>部署 CNI 插件</li><li>安装一些额外的 addon 组件如 (coredns)</li></ul><p>至此整个打包和部署流程就完毕了，下面再讲几个打包/部署常见的问题</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="kubeadm-证书"><a href="#kubeadm-证书" class="headerlink" title="kubeadm 证书"></a>kubeadm 证书</h3><p>通过修改 kubeadm 源码的方式将证书续命到 10 年，开启 <code>kubeadm_patch_enabled</code> 参数部署时就将 kubeadm 替换为修改后的 kubeadm。关于 kubeadm 的修改和构建和参考我之前写过的《<a href="https://blog.k8s.li/build-k8s-binary-by-github-actions.html">使用 GitHub Actions 编译 kubernetes 组件</a>》。</p><ul><li><a href="https://github.com/k8sli/kubespray/blob/main/roles/cluster/download/tasks/main.yml" target="_blank" rel="noopener">roles/cluster/download/tasks/main.yml</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Relpace</span> <span class="string">kubeadm</span> <span class="string">binary</span> <span class="string">file</span> <span class="string">as</span> <span class="string">patched</span> <span class="string">version</span></span><br><span class="line">  <span class="attr">get_url:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">"<span class="template-variable">&#123;&#123; patched_kubeadm_download_url &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">"<span class="template-variable">&#123;&#123; bin_dir &#125;&#125;</span>/kubeadm"</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="number">0755</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kubeadm</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">kubeadm_patch_enabled</span> <span class="string">|</span> <span class="string">default(true)</span> <span class="string">|</span> <span class="string">bool</span></span><br></pre></td></tr></table></figure><h3 id="镜像缓存"><a href="#镜像缓存" class="headerlink" title="镜像缓存"></a>镜像缓存</h3><p>os-packages, kubespray-base, kubespray-files, kubespray-images 这四个镜像在构建的时候都会采用 md5 值的方式校验是否需要重新构建镜像，这样能够大大提升 CI 的执行效率，下面以 kubespray-base 这个镜像为例介绍其原理和实现：</p><ul><li>在构建镜像前会有一个 md5 计算和校验的步骤，将与该镜像紧密相关的文件内容进行汇总并生成 md5 值，并将这个值得以 label 的方式保存在镜像的元数据信息当中。如果该值与上个最新的镜像中的 md5 值相等，那么就不需要重新构建该镜像，只需要进行 retag 即可。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">for</span> <span class="string">build</span> <span class="string">images</span></span><br><span class="line">  <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">git</span> <span class="string">describe</span> <span class="string">--tags</span> <span class="string">--always</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/IMAGE_TAG=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">git</span> <span class="string">branch</span> <span class="string">--show-current</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/BRANCH_NAME=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">git</span> <span class="string">branch</span> <span class="string">--show-current</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/master/latest/;s/main/latest/;s/^/IMAGE_TAG_BY_BRANCH=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">sed</span> <span class="string">-n</span> <span class="string">'s/^kube_version: /KUBE_VERSION=/p'</span> <span class="string">roles/kubespray-defaults/defaults/main.yaml</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">cat</span> <span class="string">build/kubespray-base/Dockerfile</span> <span class="string">requirements.txt</span> <span class="string">tests/requirements.txt</span> <span class="string">.github/workflows/build.yaml</span> <span class="string">\</span></span><br><span class="line">    <span class="string">|</span> <span class="string">md5sum</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\ -'</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/BASE_MD5=md5-/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">    <span class="string">source</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">if</span> <span class="string">skopeo</span> <span class="string">inspect</span> <span class="string">docker://$&#123;BASE_IMAGE_REPO&#125;:$&#123;BRANCH_NAME&#125;</span> <span class="string">&gt;</span> <span class="string">mainfest.json;</span> <span class="string">then</span></span><br><span class="line">      <span class="string">jq</span> <span class="string">-r</span> <span class="string">'.Labels.BASE_MD5'</span> <span class="string">mainfest.json</span> <span class="string">|</span> <span class="string">sed</span> <span class="string">'s/^/LATEST_BASE_MD5=/'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">else</span></span><br><span class="line">      <span class="string">echo</span> <span class="string">'LATEST_BASE_MD5=null'</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">    <span class="string">fi</span></span><br></pre></td></tr></table></figure><ul><li>如果当前md5 的值与最新的 md5 值相等，就重新生成一个新的 Dockerfile 来进行镜像 retag 的操作。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Replace</span> <span class="string">Dockerfile</span> <span class="string">if</span> <span class="string">MD5</span> <span class="string">not</span> <span class="string">update</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_MD5</span> <span class="string">==</span> <span class="string">env.LATEST_BASE_MD5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">"FROM $<span class="template-variable">&#123;&#123; env.BASE_IMAGE_REPO &#125;&#125;</span>:$<span class="template-variable">&#123;&#123; env.BASE_MD5 &#125;&#125;</span>"</span> <span class="string">&gt;</span> <span class="string">build/kubespray-base/Dockerfile</span></span><br></pre></td></tr></table></figure><ul><li>构建镜像并将 md5 值作为 labels 填充到镜像的元数据信息当中。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">kubespray-base</span> <span class="string">images</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">docker/build-push-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">push:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event_name</span> <span class="string">!=</span> <span class="string">'pull_request'</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">build/kubespray-base/Dockerfile</span></span><br><span class="line">    <span class="attr">platforms:</span> <span class="string">linux/amd64,linux/arm64</span></span><br><span class="line">    <span class="attr">cache-from:</span> <span class="string">type=local,src=/tmp/.buildx-cache</span></span><br><span class="line">    <span class="attr">cache-to:</span> <span class="string">type=local,dest=/tmp/.buildx-cache-new</span></span><br><span class="line">    <span class="attr">build-args:</span> <span class="string">KUBE_VERSION=$&#123;&#123;</span> <span class="string">env.KUBE_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="string">BASE_MD5=$&#123;&#123;</span> <span class="string">env.BASE_MD5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_IMAGE_REPO</span> <span class="string">&#125;&#125;:$&#123;&#123;</span> <span class="string">env.IMAGE_TAG</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_IMAGE_REPO</span> <span class="string">&#125;&#125;:$&#123;&#123;</span> <span class="string">env.BASE_MD5</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_IMAGE_REPO</span> <span class="string">&#125;&#125;:$&#123;&#123;</span> <span class="string">env.BRANCH_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="string">$&#123;&#123;</span> <span class="string">env.BASE_IMAGE_REPO</span> <span class="string">&#125;&#125;:$&#123;&#123;</span> <span class="string">env.IMAGE_TAG_BY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>使用这种方式的好处就在于在不需要构建镜像的时候能大幅度提升 CI 的运行效率。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://blog.k8s.li/pass-platform-release.html">云原生 PaaS 产品发布&amp;部署方案</a></li><li><a href="https://mp.weixin.qq.com/s/7hKkdBUXHFZt5q3KbpmU6Q" target="_blank" rel="noopener">政采云基于 sealer 的私有化业务交付实践</a></li><li><a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a></li><li><a href="https://blog.k8s.li/deploy-k8s-by-kubespray.html">使用 Kubespray 本地开发测试部署 kubernetes 集群</a></li><li><a href="https://blog.k8s.li/select-registry-images.html">什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</a></li><li><a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在企业私有云环境当中，出于对数据安全的考虑以及满足 &lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="k8s" scheme="https://blog.k8s.li/tags/k8s/"/>
    
      <category term="PaaS" scheme="https://blog.k8s.li/tags/PaaS/"/>
    
      <category term="toB" scheme="https://blog.k8s.li/tags/toB/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Actions 编译 kubernetes 组件</title>
    <link href="https://blog.k8s.li/build-k8s-binary-by-github-actions.html"/>
    <id>https://blog.k8s.li/build-k8s-binary-by-github-actions.html</id>
    <published>2021-08-25T16:00:00.000Z</published>
    <updated>2021-08-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 kubernetes 过程中由于某些需求往往要修改一下 k8s 官方的源码，然后重新编译才行。本文就以修改 kubeadm 生成证书为默认 10 年为例，来讲解如何使用 GitHub Actions 来编译和发布生成的二进制文件。</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h3 id="clone-repo"><a href="#clone-repo" class="headerlink" title="clone repo"></a>clone repo</h3><p>将 kubernetes 官方源码 fork 到自己的 repo 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/k8sli/kubernetes.git</span><br><span class="line">$ <span class="built_in">cd</span> kubernetes</span><br><span class="line">$ git remote add upstream https://github.com/kubernetes/kubernetes.git</span><br><span class="line">$ git fetch --all</span><br><span class="line">$ git checkout upstream/release-1.21</span><br><span class="line">$ git checkout -B kubeadm-1.21</span><br></pre></td></tr></table></figure><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><ul><li><code>.github/workflows/kubeadm.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">kubeadm</span> <span class="string">binary</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tag:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'v*'</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">    <span class="comment"># 这里我们选择以 tag 的方式惩触发 job 的运行</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">startsWith(github.ref,</span> <span class="string">'refs/tags/'</span><span class="string">)</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">kubeadm</span> <span class="string">binary</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># 运行 build/run.sh 构建脚本来编译相应平台上的二进制文件</span></span><br><span class="line">          <span class="string">build/run.sh</span> <span class="string">make</span> <span class="string">kubeadm</span> <span class="string">KUBE_BUILD_PLATFORMS=linux/amd64</span></span><br><span class="line">          <span class="string">build/run.sh</span> <span class="string">make</span> <span class="string">kubeadm</span> <span class="string">KUBE_BUILD_PLATFORMS=linux/arm64</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 构建好的二进制文件存放在 _output/dockerized/bin/ 中</span></span><br><span class="line">      <span class="comment"># 我们根据二进制目标文件的系统名称+CPU体系架构名称进行命名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">for</span> <span class="string">upload</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">_output/dockerized/bin/linux/amd64/kubeadm</span> <span class="string">kubeadm-linux-amd64</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">_output/dockerized/bin/linux/arm64/kubeadm</span> <span class="string">kubeadm-linux-arm64</span></span><br><span class="line">          <span class="string">sha256sum</span> <span class="string">kubeadm-linux-&#123;amd64,arm64&#125;</span> <span class="string">&gt;</span> <span class="string">sha256sum.txt</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 使用 softprops/action-gh-release 来将构建产物上传到 GitHub release 当中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span> <span class="string">and</span> <span class="string">upload</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">files:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">sha256sum.txt</span></span><br><span class="line">            <span class="string">kubeadm-linux-amd64</span></span><br><span class="line">            <span class="string">kubeadm-linux-arm64</span></span><br></pre></td></tr></table></figure><ul><li><code>build/run.sh</code></li></ul><blockquote><p>: Run a command in a build docker container. Common invocations:</p><ul><li><code>build/run.sh make</code>: Build just linux binaries in the container. Pass options and packages as necessary.</li><li><code>build/run.sh make cross</code>: Build all binaries for all platforms. To build only a specific platform, add <code>KUBE_BUILD_PLATFORMS=&lt;os&gt;/&lt;arch&gt;</code></li><li><code>build/run.sh make kubectl KUBE_BUILD_PLATFORMS=darwin/amd64</code>: Build the specific binary for the specific platform (<code>kubectl</code> and <code>darwin/amd64</code> respectively in this example)</li><li><code>build/run.sh make test</code>: Run all unit tests</li><li><code>build/run.sh make test-integration</code>: Run integration test</li><li><code>build/run.sh make test-cmd</code>: Run CLI tests</li></ul></blockquote><h3 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h3><ul><li><code>cmd/kubeadm/app/constants/constants.go</code></li></ul><p>找到 <code>CertificateValidity</code> 变量将它在 375 天后面加个 0，就将证书续命为 10 年了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// CertificateValidity defines the validity for all the signed certificates generated by kubeadm</span></span><br><span class="line">-CertificateValidity = time.Hour * <span class="number">24</span> * <span class="number">365</span></span><br><span class="line">+CertificateValidity = time.Hour * <span class="number">24</span> * <span class="number">3650</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// CACertAndKeyBaseName defines certificate authority base name</span></span><br><span class="line"> CACertAndKeyBaseName = <span class="string">"ca"</span></span><br></pre></td></tr></table></figure><ul><li><code>git diff</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/.github/workflows/kubeadm.yaml b/.github/workflows/kubeadm.yaml</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..376f37c0edf</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/.github/workflows/kubeadm.yaml</span><br><span class="line">@@ -0,0 +1,37 @@</span><br><span class="line">+---</span><br><span class="line">+name: Build kubeadm binary image</span><br><span class="line">+</span><br><span class="line">+on:</span><br><span class="line">+  push:</span><br><span class="line">+    tag:</span><br><span class="line">+      - <span class="string">'v*'</span></span><br><span class="line">+<span class="built_in">jobs</span>:</span><br><span class="line">+  build:</span><br><span class="line">+    runs-on: ubuntu-20.04</span><br><span class="line">+    <span class="keyword">if</span>: startsWith(github.ref, <span class="string">'refs/tags/'</span>)</span><br><span class="line">+    steps:</span><br><span class="line">+      - name: Checkout</span><br><span class="line">+        uses: actions/checkout@v2</span><br><span class="line">+</span><br><span class="line">+      - name: Build kubeadm binary</span><br><span class="line">+        shell: bash</span><br><span class="line">+        run: |</span><br><span class="line">+          build/run.sh make kubeadm KUBE_BUILD_PLATFORMS=linux/amd64</span><br><span class="line">+          build/run.sh make kubeadm KUBE_BUILD_PLATFORMS=linux/arm64</span><br><span class="line">+</span><br><span class="line">+      - name: Prepare <span class="keyword">for</span> upload</span><br><span class="line">+        shell: bash</span><br><span class="line">+        run: |</span><br><span class="line">+          mv _output/dockerized/bin/linux/amd64/kubeadm kubeadm-linux-amd64</span><br><span class="line">+          mv _output/dockerized/bin/linux/arm64/kubeadm kubeadm-linux-arm64</span><br><span class="line">+          sha256sum kubeadm-linux-&#123;amd64,arm64&#125; &gt; sha256sum.txt</span><br><span class="line">+</span><br><span class="line">+      - name: Release and upload packages</span><br><span class="line">+        uses: softprops/action-gh-release@v1</span><br><span class="line">+        env:</span><br><span class="line">+          GITHUB_TOKEN: <span class="variable">$&#123;&#123; secrets.GITHUB_TOKEN &#125;</span>&#125;</span><br><span class="line">+        with:</span><br><span class="line">+          files: |</span><br><span class="line">+            sha256sum.txt</span><br><span class="line">+            kubeadm-linux-amd64</span><br><span class="line">+            kubeadm-linux-arm64</span><br><span class="line">diff --git a/cmd/kubeadm/app/constants/constants.go b/cmd/kubeadm/app/constants/constants.go</span><br><span class="line">index aed3a713020..08a24d237f8 100644</span><br><span class="line">--- a/cmd/kubeadm/app/constants/constants.go</span><br><span class="line">+++ b/cmd/kubeadm/app/constants/constants.go</span><br><span class="line">@@ -46,7 +46,7 @@ const (</span><br><span class="line"> TempDirForKubeadm = <span class="string">"tmp"</span></span><br><span class="line"></span><br><span class="line"> // CertificateValidity defines the validity <span class="keyword">for</span> all the signed certificates generated by kubeadm</span><br><span class="line">-CertificateValidity = time.Hour * 24 * 365</span><br><span class="line">+CertificateValidity = time.Hour * 24 * 3650</span><br><span class="line"></span><br><span class="line"> // CACertAndKeyBaseName defines certificate authority base name</span><br><span class="line"> CACertAndKeyBaseName = <span class="string">"ca"</span></span><br></pre></td></tr></table></figure><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><p>在分支上完成修改之后，我们将这个修改 cherry-pick 到其他的 tag 上面去，下面以 v1.21.4 为例子：在 v1.21.4 tag 的基础之上将上述的修改 cherry-pick 过来，重新打上新的 tag。</p><ul><li>获取上述修改的 commit id</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ COMMIT_ID=$(git rev-parse HEAD)</span><br></pre></td></tr></table></figure><ul><li>checkout 到 v1.21.4 这个 tag 上</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout v1.21.4</span><br><span class="line">Note: checking out <span class="string">'v1.21.4'</span>.</span><br><span class="line"></span><br><span class="line">You are <span class="keyword">in</span> <span class="string">'detached HEAD'</span> state. You can look around, make experimental</span><br><span class="line">changes and commit them, and you can discard any commits you make <span class="keyword">in</span> this</span><br><span class="line">state without impacting any branches by performing another checkout.</span><br><span class="line"></span><br><span class="line">If you want to create a new branch to retain commits you create, you may</span><br><span class="line"><span class="keyword">do</span> so (now or later) by using -b with the checkout <span class="built_in">command</span> again. Example:</span><br><span class="line"></span><br><span class="line">HEAD is now at 3cce4a82b44 Release commit <span class="keyword">for</span> Kubernetes v1.21.4</span><br></pre></td></tr></table></figure><ul><li>将修改 cherry-pick 到当前 tag 上</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick <span class="variable">$COMMIT_ID</span></span><br><span class="line">[detached HEAD baadbe03458] Update kubeadm CertificateValidity time to ten years</span><br><span class="line"> Date: Tue Aug 24 16:32:49 2021 +0800</span><br><span class="line"> 2 files changed, 38 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 .github/workflows/kubeadm.yaml</span><br></pre></td></tr></table></figure><ul><li>重新打上新的 tag，如 <code>v1.21.4-patch-1.0</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.21.4-patch-1.0 -f</span><br><span class="line">Updated tag <span class="string">'v1.21.4-patch-1.0'</span> (was 70bcbd6de6c)</span><br></pre></td></tr></table></figure><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-1.png" alt="image-20210826020226785"></p><ul><li>将 tag push 到 repo 中触发 workflow</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags -f</span><br><span class="line">Enumerating objects: 17, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (17/17), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (9/9), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (10/10), 1.13 KiB | 192.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 10 (delta 7), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (7/7), completed with 7 <span class="built_in">local</span> objects.</span><br><span class="line">To github.com:k8sli/kubernetes.git</span><br><span class="line"> + c2a633e07ec...baadbe03458 v1.21.4-patch-1.0 -&gt; v1.21.4-patch-1.0 (forced update)</span><br></pre></td></tr></table></figure><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-2.png" alt="image-20210826020837194"></p><ul><li>整个构建过程大概需要 7 分钟左右，效率还是蛮高的。</li></ul><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-3.png" alt="image-20210826021451447"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面只展示了以一个 tag 为单位进行构建的流程，想要构建其他版本的 kubeadm ，可以按照同样的流程和方法来完成。其实写一个 shell 脚本来处理也是十分简单，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 commit ID</span></span><br><span class="line">: <span class="variable">$&#123;COMMIT:="48e4b4c7c62a84ab4ec363588721011b73ee77e6"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义需要重新编译的版本号</span></span><br><span class="line">: <span class="variable">$&#123;TAGS:="v1.22.1 v1.22.0 v1.21.4 v1.21.3 v1.20.10 v1.19.14 v1.18.10"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> <span class="variable">$&#123;TAGS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    git reset --hard <span class="variable">$&#123;tag&#125;</span></span><br><span class="line">    git cherry-pick <span class="variable">$&#123;COMMIT&#125;</span></span><br><span class="line">    git tag <span class="variable">$&#123;tag&#125;</span>-patch-1.0</span><br><span class="line">    git push origin <span class="variable">$&#123;tag&#125;</span>-patch-1.0</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://p.k8s.li/2021-08-25-build-k8s-binary-by-github-actions-5.png" alt="image-20210827021756974"></p><p>使用 GitHub Actions 的好处就是能够为我们解决代码管理和产物管理，构建好的二进制文件存放在 GitHub release 当中，下载和使用起来十分方便，不用在自己搞一台单独的机器或者存储服务器，节省很多人力维护成本。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在使用 kubernetes
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="k8s" scheme="https://blog.k8s.li/tags/k8s/"/>
    
      <category term="GitHub" scheme="https://blog.k8s.li/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>使用 kubeplay 来离线部署 kubernetes 集群</title>
    <link href="https://blog.k8s.li/deploy-k8s-by-kubeplay.html"/>
    <id>https://blog.k8s.li/deploy-k8s-by-kubeplay.html</id>
    <published>2021-08-25T16:00:00.000Z</published>
    <updated>2021-08-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/k8sli/kubeplay" target="_blank" rel="noopener">kubeplay</a> 是基于 <a href="https://github.com/k8sli/kubespray" target="_blank" rel="noopener">kubespray</a> 实现的离线部署 kuberneres 集群的工具</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>包含所有依赖，一条命令即可完成离线安装</li><li>支持 amd64 和 arm64 CPU 架构</li><li>kubeadm 生成的证书有效期调整为 10 年</li><li>去 docker 化部署，无缝迁移至 containerd 作为容器运行时</li><li>适用于 toB 私有化场景，可离线安装平台所依赖的 rpm/deb 包（如存储客户端）</li><li>多集群部署，支持在 kubernetes 集群中以 Job Pod 方式部署 kubernetes 集群</li><li>使用 GitHub Actions 构建离线安装包，无需充值会员，100% 开源 100% 免费</li></ul><h3 id="组件版本"><a href="#组件版本" class="headerlink" title="组件版本"></a>组件版本</h3><table><thead><tr><th>addon</th><th>version</th><th>用途</th></tr></thead><tbody><tr><td>kubernetes</td><td>v1.21.3</td><td>kubernetes</td></tr><tr><td>containerd</td><td>v1.4.6</td><td>容器运行时</td></tr><tr><td>etcd</td><td>v3.4.13</td><td>etcd 服务</td></tr><tr><td>crictl</td><td>v1.21.0</td><td>CRI CLI 工具</td></tr><tr><td>pause</td><td>3.3</td><td>pause 容器镜像</td></tr><tr><td>cni-plugins</td><td>v0.9.1</td><td>CNI 插件</td></tr><tr><td>calico</td><td>v3.18.4</td><td>calico</td></tr><tr><td>autoscaler</td><td>1.8.3</td><td>DNS 自动扩缩容</td></tr><tr><td>coredns</td><td>v1.8.0</td><td>集群 DNS 服务</td></tr><tr><td>flannel</td><td>v0.14.0</td><td>flannel</td></tr><tr><td>nginx</td><td>1.19</td><td>node 节点反向代理 APIserver</td></tr><tr><td>canel</td><td>calico/flannel</td><td>集成 calico 和 flannel</td></tr><tr><td>helm</td><td>v3.6.3</td><td>helm CLI 工具</td></tr><tr><td>nerdctl</td><td>0.8.0</td><td>containerd CLI 工具</td></tr><tr><td>nerdctl-full</td><td>0.11.0</td><td>containerd 工具全家桶</td></tr><tr><td>registry</td><td>v2.7.1</td><td>提供镜像下载服务</td></tr><tr><td>skopeo</td><td>v1.4.0</td><td>镜像搬运工具</td></tr></tbody></table><h3 id="支持-OS"><a href="#支持-OS" class="headerlink" title="支持 OS"></a>支持 OS</h3><table><thead><tr><th>distribution</th><th>version</th><th>arch</th></tr></thead><tbody><tr><td>CentOS</td><td>7.9</td><td>amd64/arm64</td></tr><tr><td>Debian</td><td>10</td><td>amd64/arm64</td></tr><tr><td>Ubuntu</td><td>20.04</td><td>amd64/arm6</td></tr></tbody></table><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>在部署工具运行节点使用 <a href="https://github.com/containerd/nerdctl" target="_blank" rel="noopener">nerdctl compose</a> 启动 nginx 和 registry 容器，分别提供离线资源下载和镜像分发服务。</p><h3 id="kubespray"><a href="#kubespray" class="headerlink" title="kubespray"></a>kubespray</h3><p>使用 kubernetes 社区的 <a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">kubespray</a> 作为集群部署的功能，部署过程中所依赖的资源从 compose 节点获取。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>在 GitHub 的 release 页面 <a href="https://github.com/k8sli/kubeplay/releases" target="_blank" rel="noopener">k8sli/kubeplay/releases</a> 下载对应的离线安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sha256sum                                    <span class="comment"># 安装包 sha256sum 校验文件</span></span><br><span class="line">kubeplay-v0.1.0-alpha.1-linux-amd64.tar.gz   <span class="comment"># 适用于 amd64 CPU 体系架构</span></span><br><span class="line">kubeplay-v0.1.0-alpha.1-linux-arm64.tar.gz   <span class="comment"># 适用于 arm64 CPU 体系架构</span></span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xpf kubeplay-v0.1.0-alpha.1-linux-amd64.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> kubeplay</span><br><span class="line">$ vi config.yaml</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>config.yaml</code> 配置文件主要分为如下几个部分</p><ul><li>compose：nginx 和 registry 部署节点信息</li><li>kubespray：kubespray 部署配置</li><li>invenory：kubernetes 集群节点 ssh 登录信息</li><li>default：一些默认的参数</li></ul><h4 id="compose-1"><a href="#compose-1" class="headerlink" title="compose"></a>compose</h4><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>internal_ip</td><td>部署节点内网访问 IP</td><td>192.168.10.11</td></tr><tr><td>nginx_http_port</td><td>部署 nginx 服务暴露的端口</td><td>8080</td></tr><tr><td>registry_domain</td><td>部署 registry 镜像仓库服务的域名</td><td>kube.registry.local</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">compose:</span></span><br><span class="line">  <span class="comment"># Compose bootstrap node ip, default is local internal ip</span></span><br><span class="line">  <span class="attr">internal_ip:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.25</span></span><br><span class="line">  <span class="comment"># Nginx http server bind port for download files and packages</span></span><br><span class="line">  <span class="attr">nginx_http_port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment"># Registry domain for CRI runtime download images</span></span><br><span class="line">  <span class="attr">registry_domain:</span> <span class="string">kube.registry.local</span></span><br></pre></td></tr></table></figure><h4 id="kubespray-1"><a href="#kubespray-1" class="headerlink" title="kubespray"></a>kubespray</h4><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>kube_version</td><td>kubernetes 版本号</td><td>v1.21.3</td></tr><tr><td>external_apiserver_access_ip</td><td>集群APIserver外部访问 IP</td><td>192.168.10.100</td></tr><tr><td>kube_network_plugin</td><td>选用 CNI 网络插件名称</td><td>calico</td></tr><tr><td>container_manager</td><td>容器运行时</td><td>containerd</td></tr><tr><td>etcd_deployment_type</td><td>etcd 部署方式</td><td>host</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kubespray:</span></span><br><span class="line">  <span class="comment"># Kubernetes version by default, only support v1.20.6</span></span><br><span class="line">  <span class="attr">kube_version:</span> <span class="string">v1.21.3</span></span><br><span class="line">  <span class="comment"># For deploy HA cluster you must configure a external apiserver access ip</span></span><br><span class="line">  <span class="attr">external_apiserver_access_ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="comment"># Set network plugin to calico with vxlan mode by default</span></span><br><span class="line">  <span class="attr">kube_network_plugin:</span> <span class="string">calico</span></span><br><span class="line">  <span class="comment">#Container runtime, only support containerd if offline deploy</span></span><br><span class="line">  <span class="attr">container_manager:</span> <span class="string">containerd</span></span><br><span class="line">  <span class="comment"># Now only support host if use containerd as CRI runtime</span></span><br><span class="line">  <span class="attr">etcd_deployment_type:</span> <span class="string">host</span></span><br><span class="line">  <span class="comment"># Settings for etcd event server</span></span><br><span class="line">  <span class="attr">etcd_events_cluster_setup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">etcd_events_cluster_enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="inventory"><a href="#inventory" class="headerlink" title="inventory"></a>inventory</h4><p>inventory 为 kubernetes 集群节点的 ssh 登录配置，支持 yaml, json, ini 三种格式。</p><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>ansible_port</td><td>主机 ssh 登录端口号</td><td>22</td></tr><tr><td>ansible_user</td><td>主机 ssh 登录用户名</td><td></td></tr><tr><td>ansible_ssh_pass</td><td>主机 ssh 登录密码</td><td></td></tr><tr><td>ansible_ssh_private_key_file</td><td>如果使用 private key 登录</td><td>必须为<code>/kubespray/config/id_rsa</code></td></tr><tr><td>ansible_host</td><td>节点 IP</td><td></td></tr></tbody></table><ul><li>yaml 格式</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Cluster nodes inventory info</span></span><br><span class="line"><span class="attr">inventory:</span></span><br><span class="line">  <span class="attr">all:</span></span><br><span class="line">    <span class="attr">vars:</span></span><br><span class="line">      <span class="attr">ansible_port:</span> <span class="number">22</span></span><br><span class="line">      <span class="attr">ansible_user:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">ansible_ssh_pass:</span> <span class="string">Password</span></span><br><span class="line">      <span class="comment"># ansible_ssh_private_key_file: /kubespray/config/id_rsa</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">      <span class="attr">node1:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.21</span></span><br><span class="line">      <span class="attr">node2:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.22</span></span><br><span class="line">      <span class="attr">node3:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.23</span></span><br><span class="line">      <span class="attr">node4:</span></span><br><span class="line">        <span class="attr">ansible_host:</span> <span class="number">172.20</span><span class="number">.0</span><span class="number">.24</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="attr">kube_control_plane:</span></span><br><span class="line">        <span class="attr">hosts:</span></span><br><span class="line">          <span class="attr">node1:</span></span><br><span class="line">          <span class="attr">node2:</span></span><br><span class="line">          <span class="attr">node3:</span></span><br><span class="line">      <span class="attr">kube_node:</span></span><br><span class="line">        <span class="attr">hosts:</span></span><br><span class="line">          <span class="attr">node1:</span></span><br><span class="line">          <span class="attr">node2:</span></span><br><span class="line">          <span class="attr">node3:</span></span><br><span class="line">          <span class="attr">node4:</span></span><br><span class="line">      <span class="attr">etcd:</span></span><br><span class="line">        <span class="attr">hosts:</span></span><br><span class="line">          <span class="attr">node1:</span></span><br><span class="line">          <span class="attr">node2:</span></span><br><span class="line">          <span class="attr">node3:</span></span><br><span class="line">      <span class="attr">k8s_cluster:</span></span><br><span class="line">        <span class="attr">children:</span></span><br><span class="line">          <span class="attr">kube_control_plane:</span></span><br><span class="line">          <span class="attr">kube_node:</span></span><br><span class="line">      <span class="attr">gpu:</span></span><br><span class="line">        <span class="attr">hosts:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="attr">calico_rr:</span></span><br><span class="line">        <span class="attr">hosts:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>json 格式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">inventory: |</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"all"</span>: &#123;</span><br><span class="line">      <span class="attr">"vars"</span>: &#123;</span><br><span class="line">        <span class="attr">"ansible_port"</span>: <span class="number">22</span>,</span><br><span class="line">        <span class="attr">"ansible_user"</span>: <span class="string">"root"</span>,</span><br><span class="line">        <span class="attr">"ansible_ssh_pass"</span>: <span class="string">"Password"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"hosts"</span>: &#123;</span><br><span class="line">        <span class="attr">"node1"</span>: &#123;</span><br><span class="line">          <span class="attr">"ansible_host"</span>: <span class="string">"172.20.0.21"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"node2"</span>: &#123;</span><br><span class="line">          <span class="attr">"ansible_host"</span>: <span class="string">"172.20.0.22"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"node3"</span>: &#123;</span><br><span class="line">          <span class="attr">"ansible_host"</span>: <span class="string">"172.20.0.23"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"node4"</span>: &#123;</span><br><span class="line">          <span class="attr">"ansible_host"</span>: <span class="string">"172.20.0.24"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"children"</span>: &#123;</span><br><span class="line">        <span class="attr">"kube_control_plane"</span>: &#123;</span><br><span class="line">          <span class="attr">"hosts"</span>: &#123;</span><br><span class="line">            <span class="attr">"node1"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"node2"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"node3"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"kube_node"</span>: &#123;</span><br><span class="line">          <span class="attr">"hosts"</span>: &#123;</span><br><span class="line">            <span class="attr">"node1"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"node2"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"node3"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"node4"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"etcd"</span>: &#123;</span><br><span class="line">          <span class="attr">"hosts"</span>: &#123;</span><br><span class="line">            <span class="attr">"node1"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"node2"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"node3"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"k8s_cluster"</span>: &#123;</span><br><span class="line">          <span class="attr">"children"</span>: &#123;</span><br><span class="line">            <span class="attr">"kube_control_plane"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"kube_node"</span>: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"gpu"</span>: &#123;</span><br><span class="line">          <span class="attr">"hosts"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"calico_rr"</span>: &#123;</span><br><span class="line">          <span class="attr">"hosts"</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>ini 格式</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">inventory: |</span><br><span class="line">  <span class="section">[all:vars]</span></span><br><span class="line">  ansible_port=22</span><br><span class="line">  ansible_user=root</span><br><span class="line">  ansible_ssh_pass=Password</span><br><span class="line">  <span class="comment">#ansible_ssh_private_key_file=/kubespray/config/id_rsa</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[all]</span></span><br><span class="line">  kube-control-01 ansible_host=172.20.0.21</span><br><span class="line">  kube-control-02 ansible_host=172.20.0.23</span><br><span class="line">  kube-control-03 ansible_host=172.20.0.22</span><br><span class="line">  kube-node-01 ansible_host=172.20.0.24</span><br><span class="line"></span><br><span class="line">  <span class="section">[bastion]</span></span><br><span class="line">  <span class="comment"># bastion-01 ansible_host=x.x.x.x ansible_user=some_user</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[kube_control_plane]</span></span><br><span class="line">  kube-control-01</span><br><span class="line">  kube-control-02</span><br><span class="line">  kube-control-03</span><br><span class="line"></span><br><span class="line">  <span class="section">[etcd]</span></span><br><span class="line">  kube-control-01</span><br><span class="line">  kube-control-02</span><br><span class="line">  kube-control-03</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="section">[kube_node]</span></span><br><span class="line">  kube-control-01</span><br><span class="line">  kube-control-02</span><br><span class="line">  kube-control-03</span><br><span class="line">  kube-node-01</span><br><span class="line"></span><br><span class="line">  <span class="section">[calico_rr]</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[k8s_cluster:children]</span></span><br><span class="line">  kube_control_plane</span><br><span class="line">  kube_node</span><br><span class="line">  calico_rr</span><br></pre></td></tr></table></figure><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>以下几个默认的参数在没有特殊要求的情况下不建议修改，直接保持默认即可。<code>ntp_server</code> 参数为默认值时会自动替换成 compose 中的 <code>internal_ip</code> 值；<code>registry_ip</code> 和 <code>offline_resources_url</code> 这两个参数会根据 compose 中的参数自动生成无需修改。</p><table><thead><tr><th>参数</th><th>说明</th><th align="center">示例</th></tr></thead><tbody><tr><td>ntp_server</td><td>ntp 时钟同步服务器域名或 IP</td><td align="center">-</td></tr><tr><td>registry_ip</td><td>镜像仓库节点 IP</td><td align="center">-</td></tr><tr><td>offline_resources_url</td><td>提供离线资源下载的 URL 地址</td><td align="center">-</td></tr><tr><td>offline_resources_enabled</td><td>是否为离线部署</td><td align="center">true</td></tr><tr><td>generate_domain_crt</td><td>是否为镜像仓库域名生成自签证书</td><td align="center">true</td></tr><tr><td>image_repository</td><td>镜像仓库的 repo 或 project</td><td align="center">library</td></tr><tr><td>registry_https_port</td><td>镜像仓库的端口号，该端口已禁止 PUSH 镜像</td><td align="center">443</td></tr><tr><td>registry_push_port</td><td>用于 PUSH 镜像的 registry 端口号</td><td align="center">5000</td></tr><tr><td>download_container</td><td>是否在所有节点 pull 下所有组件的镜像</td><td align="center">false</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default:</span></span><br><span class="line">  <span class="comment"># NTP server ip address or domain, default is internal_ip</span></span><br><span class="line">  <span class="attr">ntp_server:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">internal_ip</span></span><br><span class="line">  <span class="comment"># Registry ip address, default is internal_ip</span></span><br><span class="line">  <span class="attr">registry_ip:</span> <span class="string">internal_ip</span></span><br><span class="line">  <span class="comment"># Offline resource url for download files, default is internal_ip:nginx_http_port</span></span><br><span class="line">  <span class="attr">offline_resources_url:</span> <span class="string">internal_ip:nginx_http_port</span></span><br><span class="line">  <span class="comment"># Use nginx and registry provide all offline resources</span></span><br><span class="line">  <span class="attr">offline_resources_enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Image repo in registry</span></span><br><span class="line">  <span class="attr">image_repository:</span> <span class="string">library</span></span><br><span class="line">  <span class="comment"># Kubespray container image for deploy user cluster or scale</span></span><br><span class="line">  <span class="attr">kubespray_image:</span> <span class="string">"kubespray"</span></span><br><span class="line">  <span class="comment"># Auto generate self-signed certificate for registry domain</span></span><br><span class="line">  <span class="attr">generate_domain_crt:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># For nodes pull image, use 443 as default</span></span><br><span class="line">  <span class="attr">registry_https_port:</span> <span class="number">443</span></span><br><span class="line">  <span class="comment"># For push image to this registry, use 5000 as default, and only bind at 127.0.0.1</span></span><br><span class="line">  <span class="attr">registry_push_port:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment"># Set false to disable download all container images on all nodes</span></span><br><span class="line">  <span class="attr">download_container:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash install.sh</span><br></pre></td></tr></table></figure><h3 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash install.sh add-node <span class="variable">$NODE_NAMES</span></span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash install.sh remove-node <span class="variable">$NODE_NAME</span></span><br></pre></td></tr></table></figure><h3 id="移除集群"><a href="#移除集群" class="headerlink" title="移除集群"></a>移除集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash install.sh remove-cluster</span><br></pre></td></tr></table></figure><h3 id="移除所有组件"><a href="#移除所有组件" class="headerlink" title="移除所有组件"></a>移除所有组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash install.sh remove</span><br></pre></td></tr></table></figure><h2 id="未完后续补充"><a href="#未完后续补充" class="headerlink" title="未完后续补充"></a>未完后续补充</h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="k8s" scheme="https://blog.k8s.li/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>搬砖常用的 shell 片段记录</title>
    <link href="https://blog.k8s.li/shell-snippet.html"/>
    <id>https://blog.k8s.li/shell-snippet.html</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2021-09-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然间看到了 <a href="https://izsk.me/" target="_blank" rel="noopener"><strong>Z.S.K.’s Records</strong></a> 大佬的一篇博客 《<a href="https://izsk.me/2021/03/21/shell-funny-snippet/" target="_blank" rel="noopener">有趣的Shell Snippet</a>》，突发奇想也准备写篇文章来记录一下常用的一些 shell 代码。</p><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><h3 id="展开"><a href="#展开" class="headerlink" title="{} 展开"></a>{} 展开</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;hack,build&#125;</span><br><span class="line">hack build</span><br></pre></td></tr></table></figure><h3 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h3><blockquote><p><a href="http://cn.linux.vbird.org/linux_basic/0320bash_2.php#variable_other" target="_blank" rel="noopener">http://cn.linux.vbird.org/linux_basic/0320bash_2.php#variable_other</a></p><p>我们将这部份作个总结说明一下：</p><table><thead><tr><th>变量配置方式</th><th>说明</th></tr></thead><tbody><tr><td>${变量#关键词} ${变量##关键词}</td><td>若变量内容从头开始的数据符合『关键词』，则将符合的最短数据删除 若变量内容从头开始的数据符合『关键词』，则将符合的最长数据删除</td></tr><tr><td>${变量%关键词} ${变量%%关键词}</td><td>若变量内容从尾向前的数据符合『关键词』，则将符合的最短数据删除 若变量内容从尾向前的数据符合『关键词』，则将符合的最长数据删除</td></tr><tr><td>${变量/旧字符串/新字符串} ${变量//旧字符串/新字符串}</td><td>若变量内容符合『旧字符串』则『第一个旧字符串会被新字符串取代』 若变量内容符合『旧字符串』则『全部的旧字符串会被新字符串取代』</td></tr></tbody></table></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ image=<span class="string">"library/nginx:1.19"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如要获取镜像的 tag 常用的是 echo 然后 awk/cut 的方式</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;image&#125;</span> | awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span> 方式</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以直接使用 bash 内置的变量替换功能，截取特定字符串</span></span><br><span class="line">$ image_name=<span class="variable">$&#123;image%%:*&#125;</span></span><br><span class="line">$ image_tag=<span class="variable">$&#123;image##*:&#125;</span></span><br><span class="line">$ image_repo=<span class="variable">$&#123;image%%/*&#125;</span></span><br></pre></td></tr></table></figure><h3 id="变量配置方式"><a href="#变量配置方式" class="headerlink" title="变量配置方式"></a>变量配置方式</h3><table><thead><tr><th>变量配置方式</th><th>str 没有配置</th><th>str 为空字符串</th><th>str 已配置非为空字符串</th></tr></thead><tbody><tr><td>var=${str-expr}</td><td>var=expr</td><td>var=</td><td>var=$str</td></tr><tr><td>var=${str:-expr}</td><td>var=expr</td><td>var=expr</td><td>var=$str</td></tr><tr><td>var=${str+expr}</td><td>var=</td><td>var=expr</td><td>var=expr</td></tr><tr><td>var=${str:+expr}</td><td>var=</td><td>var=</td><td>var=expr</td></tr><tr><td>var=${str=expr}</td><td>str=expr var=expr</td><td>str 不变 var=</td><td>str 不变 var=$str</td></tr><tr><td>var=${str:=expr}</td><td>str=expr var=expr</td><td>str=expr var=expr</td><td>str 不变 var=$str</td></tr><tr><td>var=${str?expr}</td><td>expr 输出至 stderr</td><td>var=</td><td>var=$str</td></tr><tr><td>var=${str:?expr}</td><td>expr 输出至 stderr</td><td>expr 输出至 stderr</td><td>var=$str</td></tr></tbody></table><h3 id="判断字符串中是否包含子串"><a href="#判断字符串中是否包含子串" class="headerlink" title="判断字符串中是否包含子串"></a>判断字符串中是否包含子串</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 ** 匹配</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;var&#125;</span>"</span> == *<span class="string">"<span class="variable">$&#123;sub_string&#125;</span>"</span>* ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"sub_string is in var."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 bash 内置的 =~ 判断</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$&#123;sub_string&#125;</span>"</span> =~ <span class="string">"<span class="variable">$&#123;var&#125;</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"sub_string is in var."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><h3 id="安装-docker-ce"><a href="#安装-docker-ce" class="headerlink" title="安装 docker-ce"></a>安装 docker-ce</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">$ bash get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>另外可通过传入 DRY_RUN 的参数来输出际会执行的内容，这个输出的内容可以用来配置 docker-ce 的源，而不安装 docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ DRY_RUN=1 sh ./get-docker.sh --mirror Aliyun &gt; install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executing docker install script, commit: 7cae5f8b0decc17d6571f9f52eb840fbc13b2737</span></span><br><span class="line">apt-get update -qq &gt;/dev/null</span><br><span class="line">DEBIAN_FRONTEND=noninteractive apt-get install -y -qq apt-transport-https ca-certificates curl &gt;/dev/null</span><br><span class="line">curl -fsSL <span class="string">"https://mirrors.aliyun.com/docker-ce/linux/debian/gpg"</span> | apt-key add -qq - &gt;/dev/null</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/debian buster stable"</span> &gt; /etc/apt/sources.list.d/docker.list</span><br><span class="line">apt-get update -qq &gt;/dev/null</span><br><span class="line">apt-get install -y -qq --no-install-recommends docker-ce &gt;/dev/null</span><br><span class="line">DEBIAN_FRONTEND=noninteractive apt-get install -y -qq docker-ce-rootless-extras &gt;/dev/null</span><br></pre></td></tr></table></figure><h3 id="安装-helm"><a href="#安装-helm" class="headerlink" title="安装 helm"></a>安装 helm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash</span><br></pre></td></tr></table></figure><h3 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="sed-grep-awk"><a href="#sed-grep-awk" class="headerlink" title="sed/grep/awk"></a>sed/grep/awk</h2><h3 id="匹配行的下一行插入"><a href="#匹配行的下一行插入" class="headerlink" title="匹配行的下一行插入"></a>匹配行的下一行插入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">"/kube-node/a <span class="variable">$&#123;ip&#125;</span>"</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="输出两个匹配行之间的内容"><a href="#输出两个匹配行之间的内容" class="headerlink" title="输出两个匹配行之间的内容"></a>输出两个匹配行之间的内容</h3><p>在不使用 yq 或者 jq 的情况下，需要输出 <code>downloads</code> 列表中的所有内容，即 <code>download:</code> 和 <code>download_defaults:</code>之间的内容</p><ul><li><a href="https://github.com/kubernetes-sigs/kubespray/blob/master/roles/download/defaults/main.yml" target="_blank" rel="noopener">download.yml</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dashboard_image_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_image_repo &#125;&#125;</span>/kubernetesui/dashboard-<span class="template-variable">&#123;&#123; image_arch &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">dashboard_image_tag:</span> <span class="string">"v2.2.0"</span></span><br><span class="line"><span class="attr">dashboard_metrics_scraper_repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; docker_image_repo &#125;&#125;</span>/kubernetesui/metrics-scraper"</span></span><br><span class="line"><span class="attr">dashboard_metrics_scraper_tag:</span> <span class="string">"v1.0.6"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">downloads:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_enabled &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">container:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_image_repo &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_image_tag &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">sha256:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_digest_checksum|default(None) &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube_control_plane</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboard_metrics_scrapper:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_enabled &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">container:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_metrics_scraper_repo &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_metrics_scraper_tag &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">sha256:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_digest_checksum|default(None) &#125;&#125;</span>"</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube_control_plane</span></span><br><span class="line"></span><br><span class="line"><span class="attr">download_defaults:</span></span><br><span class="line">  <span class="attr">container:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">file:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">None</span></span><br></pre></td></tr></table></figure><p>可使用 sed 的方式进行匹配输出 <code>sed -n &#39;/$VAR1/,/$VAR2/p&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -n <span class="string">'/^downloads:/,/download_defaults:/p'</span></span><br></pre></td></tr></table></figure><h3 id="奇偶行合并"><a href="#奇偶行合并" class="headerlink" title="奇偶行合并"></a>奇偶行合并</h3><p>接着上一个问题，通过 <code>sed -n &quot;s/repo: //p;s/tag: //p&quot;</code> 匹配出镜像的 repo 和 tag，但一个完整的镜像的格式是 <code>repo:tag</code>，因此需要将 repo 和 tag 行进行合并。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_image_repo &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_image_tag &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">repo:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_metrics_scraper_repo &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">tag:</span> <span class="string">"<span class="template-variable">&#123;&#123; dashboard_metrics_scraper_tag &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>可使用 <code>sed &#39;N;s#\n# #g&#39;</code> 进行奇偶行合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/^downloads:/,/download_defaults:/p'</span> <span class="variable">$&#123;REPO_ROOT_DIR&#125;</span>/<span class="variable">$&#123;DOWNLOAD_YML&#125;</span> \</span><br><span class="line">| sed -n <span class="string">"s/repo: //p;s/tag: //p"</span> | tr -d <span class="string">' '</span> | sed <span class="string">'s/&#123;&#123;/$&#123;/g;s/&#125;&#125;/&#125;/g'</span> \</span><br><span class="line">| sed <span class="string">'N;s#\n# #g'</span> | tr <span class="string">' '</span> <span class="string">':'</span> | sed <span class="string">'s/^/echo /g'</span> &gt;&gt; <span class="variable">$&#123;TEMP_DIR&#125;</span>/generate.sh</span><br></pre></td></tr></table></figure><h3 id="去除换行符"><a href="#去除换行符" class="headerlink" title="去除换行符"></a>去除换行符</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">':a;N;$!ba;s/\n/ /g'</span></span><br></pre></td></tr></table></figure><h3 id="统计匹配行行数"><a href="#统计匹配行行数" class="headerlink" title="统计匹配行行数"></a>统计匹配行行数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -i | grep sshd | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># grep 通过 -c 参数即可统计匹配行，不需要使用 wc 来统计</span></span><br><span class="line">$ lsof -i | grep -c sshd</span><br></pre></td></tr></table></figure><h3 id="匹配-IPv4-地址"><a href="#匹配-IPv4-地址" class="headerlink" title="匹配 IPv4 地址"></a>匹配 IPv4 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ egrep --only-matching -E <span class="string">'([[:digit:]]&#123;1,3&#125;\.)&#123;3&#125;[[:digit:]]&#123;1,3&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="统计-nginx-日志同-IP-访问次数并排序"><a href="#统计-nginx-日志同-IP-访问次数并排序" class="headerlink" title="统计 nginx 日志同 IP 访问次数并排序"></a>统计 nginx 日志同 IP 访问次数并排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat access.log | awk <span class="string">'&#123;d[$1]++&#125; END &#123;for (i in d) print d[i],i&#125;'</span> | sort -nr | head</span><br><span class="line"></span><br><span class="line"><span class="comment"># d 是一个字典，以$1 第一列作为key，value每次累加</span></span><br><span class="line"><span class="comment"># END 指处理完所有行，再执行后面的逻辑</span></span><br><span class="line"><span class="comment"># for(i in d)遍历d并打印key和value</span></span><br></pre></td></tr></table></figure><h3 id="统计-TCP-连接情况"><a href="#统计-TCP-连接情况" class="headerlink" title="统计 TCP 连接情况"></a>统计 TCP 连接情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ss -nat | awk <span class="string">'NR&gt;1 &#123;d[$1]++&#125; END &#123;for (i in d) print d[i],i&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NR&gt;1 去除第一行</span></span><br><span class="line"><span class="comment"># &#123;d[$1]++&#125; 对第一列元素进行累加计数</span></span><br><span class="line"><span class="comment"># &#123;for (i in d) print d[i],i&#125; 打印出数组的元素和出现的次数</span></span><br></pre></td></tr></table></figure><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="将镜像构建到本地目录"><a href="#将镜像构建到本地目录" class="headerlink" title="将镜像构建到本地目录"></a>将镜像构建到本地目录</h3><p>和 <code>FROM scratch</code>搭配起来使用，就可以将构建产物 build 到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ DOCKER_BUILDKIT=1 docker build -o <span class="built_in">type</span>=<span class="built_in">local</span>,dest=<span class="variable">$PWD</span> -f Dockerfile .</span><br></pre></td></tr></table></figure><p>比如使用 Dockerfile 构建 skopeo 静态链接文件</p><ul><li>Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nixos/nix:<span class="number">2.3</span>.<span class="number">11</span> as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /build</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> nix build -f nix</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /build/result/bin/skopeo /skopeo</span></span><br></pre></td></tr></table></figure><ul><li>build</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_BUILDKIT=1 docker build -o <span class="built_in">type</span>=<span class="built_in">local</span>,dest=<span class="variable">$PWD</span> .</span><br></pre></td></tr></table></figure><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><ul><li>获取集群中所有 pod 运行需要的镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -A -o=custom-columns=<span class="string">'IMAGE:spec.containers[*].image'</span> | tr <span class="string">','</span> <span class="string">'\n'</span> | sort -u</span><br></pre></td></tr></table></figure><ul><li>获取所有 namespace 的 events 日志并按照时间戳排序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get events --all-namespaces -o wide --sort-by=.metadata.creationTimestamp</span><br></pre></td></tr></table></figure><ul><li>导出一个 namespaces 下所有 pod 的日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -n kube-system | awk <span class="string">'&#123;print $1&#125;'</span> | xargs -L1 -I &#123;&#125; bash -c <span class="string">"kubectl -n kube-system logs &#123;&#125; &gt; &#123;&#125;.log"</span></span><br></pre></td></tr></table></figure><ul><li>导出 k8s 组件的 pod 日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -n kube-system | grep -E <span class="string">"kube-apiserver|kube-controller|kube-proxy|kube-scheduler|coredns"</span> | awk <span class="string">'&#123;print $1&#125;'</span> | xargs -L1 -I &#123;&#125; sh -c <span class="string">"kubectl -n kube-system logs &#123;&#125; &gt; &#123;&#125;.log"</span></span><br></pre></td></tr></table></figure><ul><li>获取集群中节点的 IP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes -o jsonpath=<span class="string">'&#123; $.items[*].status.addresses[?(@.type=="InternalIP")].address &#125;'</span></span><br></pre></td></tr></table></figure><ul><li>获取所有 Pod 的 IP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o jsonpath=<span class="string">'&#123; $.items[*].status.podIP &#125;'</span></span><br></pre></td></tr></table></figure><ul><li>获取所有 node 节点的子网信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes -o jsonpath=<span class="string">'&#123;.items[*].spec.podCIDR&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>获取所有 service 的 IP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc --no-headers --all-namespaces -o jsonpath=<span class="string">'&#123;$.items[*].spec.clusterIP&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>根据 CPU/RAM 占用排序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cpu</span></span><br><span class="line">kubectl top pods --all-namespaces | sort --reverse --key 3 --numeric</span><br><span class="line"><span class="comment"># memory</span></span><br><span class="line">kubectl top pods --all-namespaces | sort --reverse --key 4 --numeric</span><br></pre></td></tr></table></figure><h2 id="yq-jq"><a href="#yq-jq" class="headerlink" title="yq/jq"></a>yq/jq</h2><h3 id="yq-根据某个-key-获取某个-value"><a href="#yq-根据某个-key-获取某个-value" class="headerlink" title="yq 根据某个 key 获取某个 value"></a>yq 根据某个 key 获取某个 value</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker registry for offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">docker.io/library/registry</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># helm chartmuseum for offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">ghcr.io/helm/chartmuseum</span></span><br><span class="line">  <span class="attr">dest:</span> <span class="string">library/chartmuseum</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yq <span class="built_in">eval</span> <span class="string">'.[]|select(.dest=="library/chartmuseum") | .src'</span> images_origin.yaml</span><br></pre></td></tr></table></figure><h3 id="替换数组中的元素"><a href="#替换数组中的元素" class="headerlink" title="替换数组中的元素"></a>替换数组中的元素</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.20-alpine</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./resources/nginx:/usr/share/nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:5000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx_http_port=<span class="string">"<span class="variable">$&#123;NGINX_HTTP_PORT&#125;</span>:8080"</span> yq <span class="built_in">eval</span> --inplace <span class="string">'.services.nginx.ports[0] = strenv(nginx_http_port)'</span> <span class="variable">$&#123;COMPOSE_YAML_FILE&#125;</span></span><br><span class="line">registry_https_port=<span class="string">"<span class="variable">$&#123;REGISTRY_HTTPS_PORT&#125;</span>:443"</span> yq <span class="built_in">eval</span> --inplace <span class="string">'.services.nginx.ports[1] = strenv(registry_https_port)'</span> <span class="variable">$&#123;COMPOSE_YAML_FILE&#125;</span></span><br><span class="line">registry_push_port=<span class="string">"<span class="variable">$&#123;REGISTRY_PUSH_PORT&#125;</span>:5000"</span> yq <span class="built_in">eval</span> --inplace <span class="string">'.services.nginx.ports[2] = strenv(registry_push_port)'</span> <span class="variable">$&#123;COMPOSE_YAML_FILE&#125;</span></span><br></pre></td></tr></table></figure><h3 id="jq-遍历-json-数组-列表元素"><a href="#jq-遍历-json-数组-列表元素" class="headerlink" title="jq 遍历 json 数组/列表元素"></a>jq 遍历 json 数组/列表元素</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pmd_name <span class="keyword">in</span> $(kubectl <span class="variable">$&#123;KUBECONFIG_ARG&#125;</span> get cpm --no-headers | cut -d <span class="string">' '</span> -f1); <span class="keyword">do</span></span><br><span class="line">    CPMD_NAME=<span class="string">"<span class="variable">$&#123;pmd_name&#125;</span>"</span></span><br><span class="line">    JSON=<span class="string">"<span class="variable">$&#123;RCTL_TMP_PATH&#125;</span>/<span class="variable">$&#123;pmd_name&#125;</span>.json"</span></span><br><span class="line">    kubectl <span class="variable">$&#123;KUBECONFIG_ARG&#125;</span> get cpm <span class="variable">$&#123;pmd_name&#125;</span> -o jsonpath=<span class="string">'&#123;.spec&#125;'</span> &gt; <span class="variable">$&#123;JSON&#125;</span></span><br><span class="line">    ((moudles_num=$(jq <span class="string">'.modules|length'</span> <span class="variable">$&#123;JSON&#125;</span>)-1))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 <span class="variable">$&#123;moudles_num&#125;</span>); <span class="keyword">do</span></span><br><span class="line">        ((addons_num=$(jq <span class="string">".modules[<span class="variable">$&#123;i&#125;</span>].addons|length"</span> <span class="variable">$&#123;JSON&#125;</span>)-1))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> $(seq 0 <span class="variable">$&#123;addons_num&#125;</span>); <span class="keyword">do</span></span><br><span class="line">            addon_name=$(jq -r <span class="string">".modules[<span class="variable">$&#123;i&#125;</span>].addons[<span class="variable">$&#123;j&#125;</span>].name"</span> <span class="variable">$&#123;JSON&#125;</span>)</span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;CHART_NAME&#125;</span>"</span> = <span class="string">"<span class="variable">$&#123;addon_name&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                PATCH_DATA=$(jq -c <span class="string">".modules[<span class="variable">$&#123;i&#125;</span>].addons[<span class="variable">$&#123;j&#125;</span>].version = \"<span class="variable">$&#123;VERSION&#125;</span>\""</span> <span class="variable">$&#123;JSON&#125;</span>)</span><br><span class="line">                <span class="built_in">break</span> 3</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="判断两个版本号大小"><a href="#判断两个版本号大小" class="headerlink" title="判断两个版本号大小"></a>判断两个版本号大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">printf</span> <span class="string">"%s\\n%s\\n"</span> v1.21 <span class="variable">$&#123;kube_version%.*&#125;</span> | sort --check=quiet --version-sort; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$&#123;coredns_version&#125;</span>;<span class="keyword">else</span> <span class="built_in">echo</span> -n <span class="variable">$&#123;coredns_version/v/&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="查看-x509-证书"><a href="#查看-x509-证书" class="headerlink" title="查看 x509 证书"></a>查看 x509 证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -noout -text -<span class="keyword">in</span> ca.cert</span><br></pre></td></tr></table></figure><h3 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">stat</span> -c <span class="string">'%s'</span> file</span><br></pre></td></tr></table></figure><h3 id="获取本机-IP"><a href="#获取本机-IP" class="headerlink" title="获取本机 IP"></a>获取本机 IP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ip r get 1 | awk <span class="string">'NR==1 &#123;print $NF&#125;'</span></span><br><span class="line">$ ip r get 1 | sed <span class="string">"s/uid.*//g"</span> | awk <span class="string">'NR==1 &#123;print $NF&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>一些 shell 脚本中常用的函数</p><h3 id="tar-进度条"><a href="#tar-进度条" class="headerlink" title="tar 进度条"></a>tar 进度条</h3><p>避免 tar 解压文件的时候污染终端，建议使用进度条的方式展示解压过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">untar</span></span>() &#123;</span><br><span class="line">  file_size=$(<span class="built_in">stat</span> -c <span class="string">'%s'</span> <span class="variable">$1</span>)</span><br><span class="line">  block_size=$(expr <span class="variable">$file_size</span> / 51200); block_size=$(expr <span class="variable">$block_size</span> + 1)</span><br><span class="line">  tar_info=<span class="string">"Untar <span class="variable">$1</span> progress:"</span></span><br><span class="line">  tar --blocking-factor=<span class="variable">$block_size</span> --checkpoint=1 --checkpoint-action=ttyout=<span class="string">"<span class="variable">$&#123;tar_info&#125;</span> %u%  \r"</span> -xpf <span class="variable">$1</span> -C <span class="variable">$2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则匹配-IP"><a href="#正则匹配-IP" class="headerlink" title="正则匹配 IP"></a>正则匹配 IP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># regular match ip</span></span><br><span class="line"><span class="function"><span class="title">match_ip</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> INPUT_IPS=$*</span><br><span class="line">    <span class="built_in">local</span> IPS=<span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> ! <span class="built_in">echo</span> <span class="variable">$&#123;INPUT_IPS&#125;</span> | egrep --only-matching -E <span class="string">'([[:digit:]]&#123;1,3&#125;\.)&#123;3&#125;[[:digit:]]&#123;1,3&#125;-[[:digit:]]&#123;1,3&#125;'</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">        IPS=<span class="string">"<span class="variable">$(echo $&#123;INPUT_IPS&#125; | egrep --only-matching -E '([[:digit:]]&#123;1,3&#125;\.)</span>&#123;3&#125;[[:digit:]]&#123;1,3&#125;' | tr '\n' ' ')"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ip_prefix=<span class="string">"<span class="variable">$(echo $&#123;INPUT_IPS&#125; | egrep --only-matching -E '([[:digit:]]&#123;1,3&#125;\.)</span>&#123;3&#125;[[:digit:]]&#123;1,3&#125;-[[:digit:]]&#123;1,3&#125;' | cut -d '.' -f1-3)"</span></span><br><span class="line">        ip_suffix=<span class="string">"<span class="variable">$(echo $&#123;INPUT_IPS&#125; | egrep --only-matching -E '([[:digit:]]&#123;1,3&#125;\.)</span>&#123;3&#125;[[:digit:]]&#123;1,3&#125;-[[:digit:]]&#123;1,3&#125;' | cut -d '.' -f4 | tr '-' ' ')"</span></span><br><span class="line">        <span class="keyword">for</span> suffix <span class="keyword">in</span> $(seq <span class="variable">$&#123;ip_suffix&#125;</span>); <span class="keyword">do</span> IPS=<span class="string">"<span class="variable">$&#123;IPS&#125;</span> <span class="variable">$&#123;ip_prefix&#125;</span>.<span class="variable">$&#123;suffix&#125;</span>"</span>; <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;IPS&#125;</span> | egrep --only-matching -E <span class="string">'([[:digit:]]&#123;1,3&#125;\.)&#123;3&#125;[[:digit:]]&#123;1,3&#125;'</span> | tr <span class="string">'\n'</span> <span class="string">' '</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ssh-登录配置"><a href="#ssh-登录配置" class="headerlink" title="ssh 登录配置"></a>ssh 登录配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">  StrictHostKeyChecking no</span><br><span class="line">    UserKnownHostsFile=/dev/null</span><br><span class="line">    ForwardAgent yes</span><br><span class="line">    ServerAliveInterval 10</span><br><span class="line">    ServerAliveCountMax 10000</span><br><span class="line">    TCPKeepAlive no</span><br><span class="line">    ControlMaster auto</span><br><span class="line">    ControlPath ~/.ssh/session/%h-%p-%r</span><br><span class="line">    ControlPersist 12h</span><br><span class="line"></span><br><span class="line">Host nas</span><br><span class="line">    Hostname 172.20.0.10</span><br><span class="line">    Port 22</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/<span class="built_in">local</span>-node.pem</span><br><span class="line"></span><br><span class="line">Host 172.20.0.*</span><br><span class="line">    Port 22</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/<span class="built_in">local</span>-node.pem</span><br><span class="line"></span><br><span class="line">Host *github.com</span><br><span class="line">    Hostname github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/github_muzi.pem</span><br></pre></td></tr></table></figure><ul><li><code>StrictHostKeyChecking no</code>：略过 HostKey 检查，避免出现 <a href="https://superuser.com/questions/125324/how-can-i-avoid-sshs-host-verification-for-known-hosts" target="_blank" rel="noopener">How can I avoid SSH’s host verification for known hosts?</a></li></ul><h3 id="ssh-密码登录"><a href="#ssh-密码登录" class="headerlink" title="ssh 密码登录"></a>ssh 密码登录</h3><p>日常工作中常常需要 ssh 登录到机房的一些虚拟机上，又因为不同的机器密码不同，遂使用该脚本 ssh 登录到节点上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IP=<span class="variable">$&#123;1&#125;</span></span><br><span class="line">CMD=<span class="variable">$&#123;2&#125;</span></span><br><span class="line">USER=root</span><br><span class="line">ARGS=<span class="string">"-o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=12h -o ConnectionAttempts=100"</span></span><br><span class="line">PASSWORDS=<span class="string">"admin123456 test123456 centos1234"</span></span><br><span class="line">ssh-keygen -R <span class="variable">$&#123;1&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">PASS=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> pass <span class="keyword">in</span> <span class="variable">$&#123;PASSWORDS&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> sshpass -p <span class="variable">$&#123;pass&#125;</span> ssh <span class="variable">$&#123;ARGS&#125;</span> <span class="variable">$&#123;USER&#125;</span>@<span class="variable">$&#123;IP&#125;</span> <span class="string">"hostname"</span>; <span class="keyword">then</span> PASS=<span class="variable">$&#123;pass&#125;</span>; <span class="built_in">break</span> ; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">sshpass -p <span class="variable">$&#123;PASS&#125;</span> ssh <span class="variable">$&#123;ARGS&#125;</span> <span class="variable">$&#123;USER&#125;</span>@<span class="variable">$&#123;IP&#125;</span> <span class="variable">$&#123;CMD&#125;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h3 id="脚本中统计函数耗时"><a href="#脚本中统计函数耗时" class="headerlink" title="脚本中统计函数耗时"></a>脚本中统计函数耗时</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">reset_global_timer</span></span>() &#123;</span><br><span class="line"><span class="built_in">export</span> SEC0=$(date --utc +%s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reset_function_timer</span></span>()&#123;</span><br><span class="line">    <span class="built_in">export</span> SEC1=$(date --utc +%s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">running_time()</span><br><span class="line">&#123;</span><br><span class="line">    SEC2=$(date --utc +%s); DIFFSEC=$((<span class="variable">$&#123;SEC2&#125;</span> - <span class="variable">$&#123;SEC1&#125;</span>)); <span class="built_in">printf</span> <span class="string">"\nSection Time: <span class="variable">$(date +%H:%M:%S -ud @$&#123;DIFFSEC&#125;)</span>\n"</span></span><br><span class="line">    SEC2=$(date --utc +%s); DIFFSEC=$((<span class="variable">$&#123;SEC2&#125;</span> - <span class="variable">$&#123;SEC0&#125;</span>)); <span class="built_in">printf</span> <span class="string">"Elapsed Time: <span class="variable">$(date +%H:%M:%S -ud @$&#123;DIFFSEC&#125;)</span>\n\n"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reset_global_timer</span><br><span class="line">reset_function_timer</span><br><span class="line">running_time</span><br></pre></td></tr></table></figure><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><ul><li>dpkg 获取系统已经安装的包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg-query -W -f=<span class="string">'$&#123;binary:Package&#125;=$&#123;Version&#125;\n'</span></span><br></pre></td></tr></table></figure><ul><li>获取 CPU 架构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARCHITECTURE=$(uname -m)</span><br><span class="line">host_architecture=$(dpkg --<span class="built_in">print</span>-architecture)</span><br></pre></td></tr></table></figure><h3 id="替换系统-OS-源"><a href="#替换系统-OS-源" class="headerlink" title="替换系统 OS 源"></a>替换系统 OS 源</h3><p> 使用华为云 yum 源</p><ul><li>CentOS 7</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.huaweicloud.com/repository/conf/CentOS-7-anon.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装华为云 EPEL 源</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line">sed -i <span class="string">"s/#baseurl/baseurl/g"</span> /etc/yum.repos.d/epel.repo</span><br><span class="line">sed -i <span class="string">"s/metalink/#metalink/g"</span> /etc/yum.repos.d/epel.repo</span><br><span class="line">sed -i <span class="string">"s@https\?://download.fedoraproject.org/pub@https://mirrors.huaweicloud.com@g"</span> /etc/yum.repos.d/epel.repo</span><br></pre></td></tr></table></figure><ul><li>Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">'s/deb.debian.org/mirrors.huaweicloud.com/g'</span> /etc/apt/sources.list</span><br><span class="line">$ sed -i <span class="string">'s|security.debian.org/debian-security|mirrors.huaweicloud.com/debian-security|g'</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><ul><li>Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">'s/archive.ubuntu.com/mirrors.huaweicloud.com/g'</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><ul><li>Alpine</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/main/"</span> &gt; /etc/apk/repositories</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"http://mirrors.huaweicloud.com/alpine/latest-stable/community/"</span> &gt;&gt; /etc/apk/repositories</span><br></pre></td></tr></table></figure><h3 id="CA-证书信任"><a href="#CA-证书信任" class="headerlink" title="CA 证书信任"></a>CA 证书信任</h3><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ update-ca-trust force-enable</span><br><span class="line">$ cp domain.crt /etc/pki/ca-trust/<span class="built_in">source</span>/anchors/domain.crt</span><br><span class="line">$ update-ca-trust</span><br></pre></td></tr></table></figure><ul><li>Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp domain.crt /usr/share/ca-certificates/domain.crt</span><br><span class="line">$ <span class="built_in">echo</span> domain.crt &gt;&gt; /etc/ca-certificates.conf</span><br><span class="line">$ update-ca-certificates</span><br></pre></td></tr></table></figure><ul><li>Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp domain.crt /usr/<span class="built_in">local</span>/share/ca-certificates/domain.crt</span><br><span class="line">$ update-ca-certificates</span><br></pre></td></tr></table></figure><h3 id="Git-操作"><a href="#Git-操作" class="headerlink" title="Git 操作"></a>Git 操作</h3><h4 id="修改历史-commit-信息"><a href="#修改历史-commit-信息" class="headerlink" title="修改历史 commit 信息"></a>修改历史 commit 信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter <span class="string">'</span></span><br><span class="line"><span class="string">OLD_EMAIL="github-actions@github.com"</span></span><br><span class="line"><span class="string">CORRECT_NAME="github-actions"</span></span><br><span class="line"><span class="string">CORRECT_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">'</span> --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure><h4 id="获取当前-repo-的最新-git-tag"><a href="#获取当前-repo-的最新-git-tag" class="headerlink" title="获取当前 repo 的最新 git tag"></a>获取当前 repo 的最新 git tag</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git describe --tags --always</span><br></pre></td></tr></table></figure><h4 id="删除-remote-repo-中的-tag"><a href="#删除-remote-repo-中的-tag" class="headerlink" title="删除 remote repo 中的 tag"></a>删除 remote repo 中的 tag</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push --delete origin tag_name</span><br><span class="line"><span class="comment"># 删除所有</span></span><br><span class="line">$ git tag -l | xargs -L1 -I &#123;&#125; git push --delete origin &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="govc"><a href="#govc" class="headerlink" title="govc"></a>govc</h2><ul><li>批量还原快照</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">: <span class="variable">$&#123;SP_NAME:="init"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;NODES:="kube-control-01 kube-control-02 kube-control-03 kube-node-01"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> <span class="variable">$&#123;NODES&#125;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> govc snapshot.revert -vm <span class="variable">$&#123;node&#125;</span> <span class="variable">$&#123;SP_NAME&#125;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;node&#125;</span> snapshot revert successfully"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  govc vm.info <span class="variable">$&#123;node&#125;</span> | grep -q poweredOn || govc vm.power -on <span class="variable">$&#123;node&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/dylanaraps/pure-bash-bible" target="_blank" rel="noopener">pure-bash-bible</a></li><li><a href="http://cn.linux.vbird.org/linux_basic/0320bash_2.php#variable_other" target="_blank" rel="noopener">鸟哥 Linux 私房菜</a></li><li><a href="https://mozillazg.com/2018/01/jq-use-examples-cookbook.html" target="_blank" rel="noopener">jq 常用操作</a></li><li><a href="https://lyyao09.github.io/2019/08/02/tools/The-usage-of-yq-read-write/" target="_blank" rel="noopener">YAML处理工具yq之读写篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;偶然间看到了 &lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://blog.k8s.li/tags/Linux/"/>
    
      <category term="Bash" scheme="https://blog.k8s.li/tags/Bash/"/>
    
      <category term="shell" scheme="https://blog.k8s.li/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>镜像搬运工 skopeo</title>
    <link href="https://blog.k8s.li/skopeo.html"/>
    <id>https://blog.k8s.li/skopeo.html</id>
    <published>2021-07-10T16:00:00.000Z</published>
    <updated>2021-07-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搬砖工具"><a href="#搬砖工具" class="headerlink" title="搬砖工具"></a>搬砖工具</h2><p>作为公司内部 PaaS toB 产品的打包发布人员，容器镜像对我们打工人而言就像是工地上的砖头 🧱，而我的一部分工作就是将这些砖头在各个仓库之间搬来搬去，最终将这些砖头打包放在产品的安装包中，形成一个完整的 PaaS 产品安装包。</p><p>而选择一个好的搬砖工具能节省我们大量的人力和 CPU 算力，在日常开发工作中我们也常常会使用 docker push 和 docker pull 来推拉镜像，虽然本地 push &amp;&amp; pull 一个镜像并不是什么难事儿，但对于一些特定的场景如产品打包发布流水线中，还继续再使用 docker 这个笨重的工具来推拉镜像的话，是十分费时费力的，具体的原理可以参考我之前写的博客《<a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生🤔</a>》。</p><p>自从 Kubernetes 1.20 之后，K8s 社区也弃用了 Docker 作为容器运行时，docker-shim 相关的代码将在 kubelet 中不再维护，随后掀起了一波去 docker 的浪潮。那么现在有没有一种能够替代 docker-cli 的工具来传输镜像呢？今天给大家介绍一个能够完全替代 docker-cli 来搬运镜像的工具：skopeo。这玩意儿比 docker-cli 高到不知道哪里去了！</p><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>官方的安装方式参考安装文档即可 <a href="https://github.com/containers/skopeo/blob/main/install.md" target="_blank" rel="noopener">https://github.com/containers/skopeo/blob/main/install.md</a></p><p>由于我的 VPS 机器是 Ubuntu 1804 的 OS ，配置 apt 源并没成功，当场翻车。在官方的 Makefile 里只提供了在 nixos 下构建静态连接的方式，其他 Linux 发相版只能使用动态链接的方式来编译。但动态链接的方式通用性太差，比如在 ubuntu 18.04 上使用动态链接编译的 skopeo 只能在 ubuntu 上使用，无法在 centos 上使用。因为动态链接编译的二进制文件在不同的 OS 上所依赖的库文件是不一样的。所以还是另辟蹊径，亲自编译一个。</p><ul><li>Clone repo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ SKOPEO_VERSION=v1.3.0</span><br><span class="line">$ git <span class="built_in">clone</span> --branch <span class="variable">$&#123;SKOPEO_VERSION&#125;</span> https://github.com/containers/skopeo</span><br><span class="line">$ <span class="built_in">cd</span> skopeo</span><br></pre></td></tr></table></figure><ul><li>docker  build</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ BUILD_IMAGE=nixos/nix:2.3.12</span><br><span class="line">$ docker run --rm -t -v <span class="variable">$PWD</span>:/build <span class="variable">$&#123;BUILD_IMAGE&#125;</span> \</span><br><span class="line">sh -c <span class="string">"cd /build &amp;&amp; nix build -f nix &amp;&amp; cp ./result/bin/skopeo skopeo"</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>nixos/nix:2.3.12</code> 来构建静态链接的 skopeo 二进制文件需要完整构建 skopeo 所有的依赖，比如 glibc、systemd、golang 等，所以构建十分耗时。在一台 4c8G 的机器上构建用了将近半个小时，在 GitHub Action 的 runner 机器上构建需要将近<a href="https://github.com/k8sli/skopeo/actions/runs/1010266302" target="_blank" rel="noopener">一个小时</a>。</li></ul><p><img src="https://p.k8s.li/skopeo-github-action-build.png" alt="img"></p><ul><li>使用 GitHub Action 构建</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">build</span> <span class="string">static</span> <span class="string">binary</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">BUILD_IMAGE:</span> <span class="string">"nixos/nix:2.3.12"</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">static</span> <span class="string">binary</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">run</span> <span class="string">--rm</span> <span class="string">-t</span> <span class="string">-v</span> <span class="string">$PWD:/build</span> <span class="string">--name</span> <span class="string">builder</span> <span class="string">$&#123;BUILD_IMAGE&#125;</span> <span class="string">\</span></span><br><span class="line">          <span class="string">sh</span> <span class="string">-c</span> <span class="string">"cd /build &amp;&amp; nix build -f nix &amp;&amp; cp ./result/bin/skopeo skopeo-linux-amd64"</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">files:</span> <span class="string">skopeo-linux-amd64</span></span><br></pre></td></tr></table></figure><p>不过也可以使用 go build 的方式构建出静态链接的二进制文件，如下 <code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.14</span>-buster as skopeo-builder</span><br><span class="line"><span class="keyword">ARG</span> SKOPEO_VERSION=v1.<span class="number">2.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y -qq libdevmapper-dev libgpgme11-dev</span></span><br><span class="line"><span class="keyword">ENV</span> GOPATH=/</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /src/github.com/containers/skopeo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git <span class="built_in">clone</span> --branch <span class="variable">$&#123;SKOPEO_VERSION&#125;</span> https://github.com/containers/skopeo . \</span></span><br><span class="line"><span class="bash"> &amp;&amp; CGO_ENABLE=0 GO111MODULE=on go build -mod=vendor <span class="string">"-buildmode=pie"</span> -ldflags <span class="string">'-extldflags "-static"'</span> -gcflags <span class="string">""</span> \</span></span><br><span class="line"><span class="bash"> -tags <span class="string">"exclude_graphdriver_devicemapper exclude_graphdriver_btrfs containers_image_openpgp"</span> -o /usr/bin/skopeo ./cmd/skopeo</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.12</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=skopeo-builder /usr/bin/skopeo /usr/bin/skopeo</span></span><br><span class="line"><span class="comment"># FROM scratch</span></span><br><span class="line"><span class="comment"># COPY --from=skopeo-builder /usr/bin/skopeo /skopeo</span></span><br><span class="line"><span class="comment"># DOCKER_BUILDKIT=1 docker build -o type=local,dest=$PWD -f Dockerfile .</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/k8sli/skopeo/blob/main/.github/workflows/build-static-binary.yaml" target="_blank" rel="noopener">通过 GitHub Action 来编译</a></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">build</span> <span class="string">static</span> <span class="string">binary</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'v*'</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">BUILDER_IMAGE:</span> <span class="string">ghcr.io/k8sli/nixos-nix:v2.3.12</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-linux-amd64:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">ARCH:</span> <span class="string">"amd64"</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">QEMU</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-qemu-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Docker</span> <span class="string">Buildx</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-buildx-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">skopeo</span> <span class="string">binary</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">DIGEST=$(skopeo</span> <span class="string">--insecure-policy</span> <span class="string">--override-arch</span> <span class="string">$&#123;ARCH&#125;</span> <span class="string">inspect</span> <span class="string">docker://$&#123;BUILDER_IMAGE&#125;</span> <span class="string">|</span> <span class="string">jq</span> <span class="string">-r</span> <span class="string">'.Digest'</span><span class="string">)</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">run</span> <span class="string">--rm</span> <span class="string">-t</span> <span class="string">-v</span> <span class="string">$PWD:/build</span> <span class="string">$&#123;BUILDER_IMAGE&#125;@$&#123;DIGEST&#125;</span> <span class="string">\</span></span><br><span class="line">          <span class="string">sh</span> <span class="string">-c</span> <span class="string">"cd /build &amp;&amp; nix build -f nix &amp;&amp; cp ./result/bin/skopeo skopeo-linux-$<span class="template-variable">&#123;&#123; env.ARCH &#125;&#125;</span>"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binary</span> <span class="string">artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">skopeo-linux-$&#123;&#123;</span> <span class="string">env.ARCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">skopeo-binary-$&#123;&#123;</span> <span class="string">github.run_number</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">env.ARCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build-linux-arm64:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">ARCH:</span> <span class="string">"arm64"</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">QEMU</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-qemu-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Docker</span> <span class="string">Buildx</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-buildx-action@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">skopeo</span> <span class="string">binary</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">DIGEST=$(skopeo</span> <span class="string">--insecure-policy</span> <span class="string">--override-arch</span> <span class="string">$&#123;ARCH&#125;</span> <span class="string">inspect</span> <span class="string">docker://$&#123;BUILDER_IMAGE&#125;</span> <span class="string">|</span> <span class="string">jq</span> <span class="string">-r</span> <span class="string">'.Digest'</span><span class="string">)</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">run</span> <span class="string">--rm</span> <span class="string">-t</span> <span class="string">-v</span> <span class="string">$PWD:/build</span> <span class="string">$&#123;BUILDER_IMAGE&#125;@$&#123;DIGEST&#125;</span> <span class="string">\</span></span><br><span class="line">          <span class="string">sh</span> <span class="string">-c</span> <span class="string">"cd /build &amp;&amp; nix build -f nix &amp;&amp; cp ./result/bin/skopeo skopeo-linux-$<span class="template-variable">&#123;&#123; env.ARCH &#125;&#125;</span>"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binary</span> <span class="string">artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">skopeo-linux-$&#123;&#123;</span> <span class="string">env.ARCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">skopeo-binary-$&#123;&#123;</span> <span class="string">github.run_number</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">env.ARCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">[build-linux-amd64,build-linux-arm64]</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">artifact</span> <span class="string">from</span> <span class="string">build-linux-amd64</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/download-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">skopeo-binary-$&#123;&#123;</span> <span class="string">github.run_number</span> <span class="string">&#125;&#125;-amd64</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">artifact</span> <span class="string">from</span> <span class="string">build-linux-arm64</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/download-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">skopeo-binary-$&#123;&#123;</span> <span class="string">github.run_number</span> <span class="string">&#125;&#125;-arm64</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span> <span class="string">and</span> <span class="string">upload</span> <span class="string">binary</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">files:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">skopeo-linux-amd64</span></span><br><span class="line">            <span class="string">skopeo-linux-arm64</span></span><br></pre></td></tr></table></figure><h2 id="上手体验"><a href="#上手体验" class="headerlink" title="上手体验"></a>上手体验</h2><ul><li>copy：复制一个镜像从 A 到 B，这里的 A 和 B 可以为本地 docker 镜像或者 registry 上的镜像；</li><li>inspect：查看一个镜像的 manifest 或者 image config 详细信息；</li><li>delete：删除一个镜像 tag，可以是本地 docker 镜像或者 registry 上的镜像；</li><li>list-tags：列出一个 registry 上某个镜像的所有 tag；</li><li>login：登录到某个 registry，和 docker login 类似；</li><li>logout： 退出已经登录到某个 registry 的 auth 信息，和 docker logout 类似；</li><li>manifest-digest：几圈一个文件的 sha256sum 值；</li><li>standalone-sign、standalone-verify 这两个是和镜像加密相关的，使用的不是很多；</li><li>sync：同步一个镜像从 A 到 B，感觉和 copy 一样，但 sync 支持的参数更多，功能更强大；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">completion             generate the autocompletion script <span class="keyword">for</span> the specified shell</span><br><span class="line">copy                   Copy an IMAGE-NAME from one location to another</span><br><span class="line">delete                 Delete image IMAGE-NAME</span><br><span class="line"><span class="built_in">help</span>                   Help about any <span class="built_in">command</span></span><br><span class="line">inspect                Inspect image IMAGE-NAME</span><br><span class="line">list-tags              List tags <span class="keyword">in</span> the transport/repository specified by the REPOSITORY-NAME</span><br><span class="line">login                  Login to a container registry</span><br><span class="line"><span class="built_in">logout</span>                 Logout of a container registry</span><br><span class="line">manifest-digest        Compute a manifest digest of a file</span><br><span class="line">standalone-sign        Create a signature using <span class="built_in">local</span> files</span><br><span class="line">standalone-verify      Verify a signature using <span class="built_in">local</span> files</span><br><span class="line">sync                   Synchronize one or more images</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>command-timeout：命令超时时间</li><li>debug：开启 debug 模式，输出详细的日志</li><li>insecure-policy： 使用非安全的 policy，如果没有配置 policy 的话，需要加上该参数</li><li>override-arch：处理镜像时覆盖客户端 CPU 体系架构，如在 amd64 的机器上用 skopeo 处理 arm64 的镜像</li><li>override-os： 处理镜像时覆盖客户端 OS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Flags:</span><br><span class="line">      --<span class="built_in">command</span>-timeout duration   timeout <span class="keyword">for</span> the <span class="built_in">command</span> execution</span><br><span class="line">      --debug                      <span class="built_in">enable</span> debug output</span><br><span class="line">  -h, --<span class="built_in">help</span>                       <span class="built_in">help</span> <span class="keyword">for</span> skopeo</span><br><span class="line">      --insecure-policy            run the tool without any policy check</span><br><span class="line">      --override-arch ARCH         use ARCH instead of the architecture of the machine <span class="keyword">for</span> choosing images</span><br><span class="line">      --override-os OS             use OS instead of the running OS <span class="keyword">for</span> choosing images</span><br><span class="line">      --override-variant VARIANT   use VARIANT instead of the running architecture variant <span class="keyword">for</span> choosing images</span><br><span class="line">      --policy string              Path to a trust policy file</span><br><span class="line">      --registries.d DIR           use registry configuration files <span class="keyword">in</span> DIR (e.g. <span class="keyword">for</span> container signature storage)</span><br><span class="line">      --tmpdir string              directory used to store temporary files</span><br><span class="line">  -v, --version                    Version <span class="keyword">for</span> Skopeo</span><br></pre></td></tr></table></figure><p>一下是我在使用 skopeo 命令时候的一些参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="IMAGE-NAMES-镜像格式🤔️"><a href="#IMAGE-NAMES-镜像格式🤔️" class="headerlink" title="IMAGE NAMES 镜像格式🤔️"></a>IMAGE NAMES 镜像格式🤔️</h3><p>在使用 skopeo 之前，我们首先要知道在命令行中镜像的格式，下面是官方详细的文档格式。无论我们的 src 镜像还是 dest 镜像都要满足以下格式才可以。</p><blockquote><p>Most commands refer to container images, using a <em>transport<em><code>:</code></em>details</em> format. The following formats are supported:</p></blockquote><blockquote><p><strong>containers-storage:*</strong>docker-reference* An image located in a local containers/storage image store. Both the location and image store are specified in /etc/containers/storage.conf. (Backend for Podman, CRI-O, Buildah and friends)</p></blockquote><blockquote><p><strong>dir:*</strong>path* An existing local directory <em>path</em> storing the manifest, layer tarballs and signatures as individual files. This is a non-standardized format, primarily useful for debugging or noninvasive container inspection.</p></blockquote><blockquote><p><strong>docker://*</strong>docker-reference* An image in a registry implementing the “Docker Registry HTTP API V2”. By default, uses the authorization state in either <code>$XDG_RUNTIME_DIR/containers/auth.json</code>, which is set using <code>(skopeo login)</code>. If the authorization state is not found there, <code>$HOME/.docker/config.json</code> is checked, which is set using <code>(docker login)</code>.</p></blockquote><blockquote><p><strong>docker-archive:*</strong>path<strong>***[</strong>:<em>*<em>docker-reference</em>] An image is stored in the <code>docker save</code> formatted file. *docker-reference</em> is only used when creating such a file, and it must not contain a digest.</p></blockquote><blockquote><p><strong>docker-daemon:*</strong>docker-reference* An image <em>docker-reference</em> stored in the docker daemon internal storage. <em>docker-reference</em> must contain either a tag or a digest. Alternatively, when reading images, the format can be docker-daemon:algo:digest (an image ID).</p></blockquote><blockquote><p><strong>oci:*</strong>path<strong><em>:</em></strong>tag* An image <em>tag</em> in a directory compliant with “Open Container Image Layout Specification” at <em>path</em>.</p></blockquote><p>需要注意的是，这几种镜像的名字，对应着镜像存在的方式，不同存在的方式对镜像的 layer 处理的方式也不一样，比如 <code>docker://</code> 这种方式是存在 registry 上的，<code>docker-daemon:</code> 是存在本地 docker pull 下来的，再比如 <code>docker-archive</code> 是通过 docker save 出来的镜像。同一个镜像有这几种存在的方式就像水分子有气体、液体、固体一样。可以这样去理解，他们表述的都是同一个镜像，只不过是存在的方式不一样而已。</p><p>IMAGE NAMES（镜像格式）examplecontainers-storage:containers-storage:dir:dir:/PATHdocker://docker://k8s.gcr.io/kube-apiserver:v1.17.5docker-daemon:docker-daemon:alpine:latestdocker-archive:docker-archive:alpine.tar (docker save)oci:oci:alpine:latest</p><h3 id="skopeo-login"><a href="#skopeo-login" class="headerlink" title="skopeo login"></a>skopeo login</h3><p>在使用 skopeo 前如果 src 或 dest 镜像是在 registry 中的，如果非 public 的镜像需要相应的 auth 认证，可以使用 docker login 或者 skopeo login 的方式登录到 registry，生成如下格式的 registry 登录配置文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ jq "." ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"auths"</span>: &#123;</span><br><span class="line">    <span class="attr">"https://index.docker.io/v1/"</span>: &#123;</span><br><span class="line">      <span class="attr">"auth"</span>: <span class="string">"d2sdwdaqWMasss7bSVlJFpmQE43Sw=="</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"HttpHeaders"</span>: &#123;</span><br><span class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"Docker-Client/19.03.5 (linux)"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"experimental"</span>: <span class="string">"enabled"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skopeo-copy"><a href="#skopeo-copy" class="headerlink" title="skopeo copy"></a>skopeo copy</h3><blockquote><p>Copy an IMAGE-NAME from one location to another</p></blockquote><blockquote><p>将一个镜像从 A 复制到 B</p></blockquote><p>注意一下，这里的 location 就是指的上面提到的 <code>IMAGE NAMES</code> ，也就是说 <code>skopeo copy src dest</code> 可以有6*6=36 种组合！比如我可以将一个镜像从一个 registry 复制到另一个 registry：<code>skopeo copy docker://IMAGE_NAME docker://IMAGE_NAME</code>；或者将一个镜像从 registry 中复制到一个本地目录 <code>skopeo copy docker://k8s.gcr.io/pause:3.3 dir:pause:3.3</code></p><ul><li>从 regsitry A 到 registry B 复制镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo copy docker://k8s.gcr.io/kube-apiserver:v1.17.5 docker://hub.k8s.li/kube-apiserver:v1.17.5 --dest-authfile /root/.docker/config.json</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob 597de8ba0c30 <span class="keyword">done</span></span><br><span class="line">Copying blob e13a88fa950c <span class="keyword">done</span></span><br><span class="line">Copying config f640481f6d <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><blockquote><p>skopeo 输出的日志显示是 Copying blob 597de8ba0c30 done.可以看到 skopeo 是直接从 registry 中 copy 镜像 layer 的 blob 文件，传输是镜像在 registry 中存储的原始格式。</p></blockquote><ul><li>将镜像从 registry 复制到本地目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo copy docker://k8s.gcr.io/pause:3.3 dir:pause:3.3</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob aeab776c4837 <span class="keyword">done</span></span><br><span class="line">Copying config 0184c1613d <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">$ tree pause:3.3</span><br><span class="line">pause:3.3</span><br><span class="line">├── 0184c1613d92931126feb4c548e5da11015513b9e4c104e7305ee8b53b50a9da</span><br><span class="line">├── aeab776c48375e1a61810a0a5f59e982e34425ff505a01c2b57dcedc6799c17b</span><br><span class="line">├── manifest.json</span><br><span class="line">└── version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像的 manifest 文件</span></span><br><span class="line"></span><br><span class="line">$ jq <span class="string">'.'</span> pause:3.3/manifest.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"schemaVersion"</span>: 2,</span><br><span class="line">  <span class="string">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">  <span class="string">"config"</span>: &#123;</span><br><span class="line">    <span class="string">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 743,</span><br><span class="line">    <span class="string">"digest"</span>: <span class="string">"sha256:0184c1613d92931126feb4c548e5da11015513b9e4c104e7305ee8b53b50a9da"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"layers"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">      <span class="string">"size"</span>: 296517,</span><br><span class="line">      <span class="string">"digest"</span>: <span class="string">"sha256:aeab776c48375e1a61810a0a5f59e982e34425ff505a01c2b57dcedc6799c17b"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 manifest 文件查看镜像的 image config 文件</span></span><br><span class="line"></span><br><span class="line">$ jq <span class="string">'.'</span> pause:3.3/0184c1613d92931126feb4c548e5da11015513b9e4c104e7305ee8b53b50a9da</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">  <span class="string">"config"</span>: &#123;</span><br><span class="line">    <span class="string">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"Entrypoint"</span>: [</span><br><span class="line">      <span class="string">"/pause"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"WorkingDir"</span>: <span class="string">"/"</span>,</span><br><span class="line">    <span class="string">"OnBuild"</span>: null</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"created"</span>: <span class="string">"2020-05-02T09:46:29.068489061Z"</span>,</span><br><span class="line">  <span class="string">"history"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"created"</span>: <span class="string">"2020-05-02T09:46:29.068489061Z"</span>,</span><br><span class="line">      <span class="string">"created_by"</span>: <span class="string">"ARG ARCH"</span>,</span><br><span class="line">      <span class="string">"comment"</span>: <span class="string">"buildkit.dockerfile.v0"</span>,</span><br><span class="line">      <span class="string">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"created"</span>: <span class="string">"2020-05-02T09:46:29.068489061Z"</span>,</span><br><span class="line">      <span class="string">"created_by"</span>: <span class="string">"ADD bin/pause-amd64 /pause # buildkit"</span>,</span><br><span class="line">      <span class="string">"comment"</span>: <span class="string">"buildkit.dockerfile.v0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"created"</span>: <span class="string">"2020-05-02T09:46:29.068489061Z"</span>,</span><br><span class="line">      <span class="string">"created_by"</span>: <span class="string">"ENTRYPOINT [\"/pause\"]"</span>,</span><br><span class="line">      <span class="string">"comment"</span>: <span class="string">"buildkit.dockerfile.v0"</span>,</span><br><span class="line">      <span class="string">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">  <span class="string">"rootfs"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">    <span class="string">"diff_ids"</span>: [</span><br><span class="line">      <span class="string">"sha256:48a5e87615149095fad57d5db80f2cd9728b5562900eccb32842a45e8e8a61ae"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将镜像从 registry 复制到本地目录，以 OCI 格式保存</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo copy docker://k8s.gcr.io/pause:3.3 oci:images</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob aeab776c4837 <span class="keyword">done</span></span><br><span class="line">Copying config fa5df7713f <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">$ tree images</span><br><span class="line">images</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 3450ba84b8fbfd12cbf58710c0b5678f4311a888d4d5c42b053faefa1af4f8be</span><br><span class="line">│       ├── aeab776c48375e1a61810a0a5f59e982e34425ff505a01c2b57dcedc6799c17b</span><br><span class="line">│       └── fa5df7713fc78f96e377d236b353d33815073105bbacd381e50705e576ce4da5</span><br><span class="line">├── index.json</span><br><span class="line">└── oci-layout</span><br></pre></td></tr></table></figure><ul><li>替代 docker push 功能，将镜像从 docker 本地存储 push 到 registry 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo copy docker-daemon:alpine:3.12 docker://hub.k8s.li/library/alpine:3.12</span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob 32f366d666a5 <span class="keyword">done</span></span><br><span class="line">Copying config 13621d1b12 <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><h3 id="skopeo-sync"><a href="#skopeo-sync" class="headerlink" title="skopeo sync"></a>skopeo sync</h3><p>Skopeo sync 的功能基本上等同于阿里云的 <a href="https://github.com/AliyunContainerService/image-syncer" target="_blank" rel="noopener">image-syncer</a> 工具，不过个人觉着 skopeo 要比 image-syncer 更强大，灵活性更强一些，汝还在使用 image-syncer 的话，强烈建议你使用 skopeo sync 替代它😂。</p><ul><li>skopeo sync 镜像同步文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">registry.example.com:</span></span><br><span class="line">    <span class="attr">images:</span></span><br><span class="line">        <span class="attr">busybox:</span> <span class="string">[]</span></span><br><span class="line">        <span class="attr">redis:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"1.0"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"2.0"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"sha256:111111"</span></span><br><span class="line">    <span class="attr">images-by-tag-regex:</span></span><br><span class="line">        <span class="attr">nginx:</span> <span class="string">^1\.13\.[12]-alpine-perl$</span></span><br><span class="line">    <span class="attr">credentials:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">john</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">this</span> <span class="string">is</span> <span class="string">a</span> <span class="string">secret</span></span><br><span class="line">    <span class="attr">tls-verify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cert-dir:</span> <span class="string">/home/john/certs</span></span><br><span class="line"><span class="attr">quay.io:</span></span><br><span class="line">    <span class="attr">tls-verify:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">images:</span></span><br><span class="line">        <span class="attr">coreos/etcd:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">latest</span></span><br></pre></td></tr></table></figure><ul><li>Image-syncer 镜像同步配置文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># registry 登录配置</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"quay.io":</span> <span class="string">&#123;</span>        <span class="string">//</span> <span class="string">This</span> <span class="string">"registry"</span> <span class="string">or</span> <span class="string">"registry/namespace"</span> <span class="string">string</span> <span class="string">should</span> <span class="string">be</span> <span class="string">the</span> <span class="string">same</span> <span class="string">as</span> <span class="string">registry</span> <span class="string">or</span> <span class="string">registry/namespace</span> <span class="string">used</span> <span class="string">below</span> <span class="string">in</span> <span class="string">"images"</span> <span class="string">field.</span></span><br><span class="line">                            <span class="string">//</span> <span class="string">The</span> <span class="string">format</span> <span class="string">of</span> <span class="string">"registry/namespace"</span> <span class="string">will</span> <span class="string">be</span> <span class="string">more</span> <span class="string">prior</span> <span class="string">matched</span> <span class="string">than</span> <span class="string">"registry"</span></span><br><span class="line">        <span class="attr">"username":</span> <span class="string">"xxx"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"password":</span> <span class="string">"xxxxxxxxx"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"insecure":</span> <span class="literal">true</span>         <span class="string">//</span> <span class="string">"insecure"</span> <span class="string">field</span> <span class="string">needs</span> <span class="string">to</span> <span class="string">be</span> <span class="literal">true</span> <span class="string">if</span> <span class="string">this</span> <span class="string">registry</span> <span class="string">is</span> <span class="string">a</span> <span class="string">http</span> <span class="string">service,</span> <span class="string">default</span> <span class="string">value</span> <span class="string">is</span> <span class="literal">false</span><span class="string">,</span> <span class="string">version</span> <span class="string">of</span> <span class="string">image-syncer</span> <span class="string">need</span> <span class="string">to</span> <span class="string">be</span> <span class="string">later</span> <span class="string">than</span> <span class="string">v1.0.1</span> <span class="string">to</span> <span class="string">support</span> <span class="string">this</span> <span class="string">field</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"registry.cn-beijing.aliyuncs.com":</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">"username":</span> <span class="string">"xxx"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"password":</span> <span class="string">"xxxxxxxxx"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"registry.hub.docker.com":</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">"username":</span> <span class="string">"xxx"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"password":</span> <span class="string">"xxxxxxxxxx"</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"quay.io/coreos":</span> <span class="string">&#123;</span>     <span class="string">//</span> <span class="string">"registry/namespace"</span> <span class="string">format</span> <span class="string">is</span> <span class="string">supported</span> <span class="string">after</span> <span class="string">v1.0.3</span> <span class="string">of</span> <span class="string">image-syncer</span></span><br><span class="line">        <span class="attr">"username":</span> <span class="string">"abc"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"password":</span> <span class="string">"xxxxxxxxx"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">"insecure":</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="comment"># 镜像配置</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"quay.io/coreos/kube-rbac-proxy":</span> <span class="string">"quay.io/ruohe/kube-rbac-proxy"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"xxxx"</span><span class="string">:"xxxxx",</span></span><br><span class="line">    <span class="string">"xxx/xxx/xx:tag1,tag2,tag3"</span><span class="string">:"xxx/xxx/xx"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>将镜从 registry A 同步到 registry B</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo sync --src docker --dest docker k8s.gcr.io/pause:3.3 hub.k8s.li</span><br><span class="line">INFO[0000] Tag presence check                            imagename=<span class="string">"k8s.gcr.io/pause:3.3"</span> tagged=<span class="literal">true</span></span><br><span class="line">INFO[0000] Copying image tag 1/1                         from=<span class="string">"docker://k8s.gcr.io/pause:3.3"</span> to=<span class="string">"docker://hub.k8s.li/pause:3.3"</span></span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob aeab776c4837 <span class="keyword">done</span></span><br><span class="line">Copying config 0184c1613d <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">INFO[0000] Synced 1 images from 1 sources</span><br></pre></td></tr></table></figure><ul><li>将一个镜像从 registry 中同步到本地目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo sync --src docker --dest dir k8s.gcr.io/pause:3.3 images</span><br><span class="line">images</span><br><span class="line">└── pause:3.3</span><br><span class="line">    ├── 0184c1613d92931126feb4c548e5da11015513b9e4c104e7305ee8b53b50a9da</span><br><span class="line">    ├── aeab776c48375e1a61810a0a5f59e982e34425ff505a01c2b57dcedc6799c17b</span><br><span class="line">    ├── manifest.json</span><br><span class="line">    └── version</span><br></pre></td></tr></table></figure><ul><li>将镜像从本地目录同步到 registry 中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo sync --src dir --dest docker images hub.k8s.li</span><br><span class="line">INFO[0000] Copying image ref 1/1                         from=<span class="string">"dir:images/pause:3.3"</span> to=<span class="string">"docker://hub.k8s.li/pause:3.3"</span></span><br><span class="line">Getting image <span class="built_in">source</span> signatures</span><br><span class="line">Copying blob aeab776c4837 [--------------------------------------] 0.0b / 0.0b</span><br><span class="line">Copying config 0184c1613d <span class="keyword">done</span></span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">INFO[0002] Synced 1 images from 1 sources</span><br></pre></td></tr></table></figure><h3 id="skopeo-inspect"><a href="#skopeo-inspect" class="headerlink" title="skopeo inspect"></a>skopeo inspect</h3><p>这个命令可以查看一个镜像的 image config 或者 manifests 文件，和 docker inspect 命令差不多。不加 –raw 参数默认是查看镜像的 image config 文件，加上 –raw 参数就是查看镜像的 manifest 文件。</p><ul><li>查看 docker 本地存储中的一个镜像的 image config 文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo inspect docker-daemon:alpine:latest</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Name"</span>: <span class="string">"docker.io/library/alpine"</span>,</span><br><span class="line">    <span class="attr">"Digest"</span>: <span class="string">"sha256:ab84514e85b179ff569fd0042969b04f68812f23e187a927cb84664b417e0d3e"</span>,</span><br><span class="line">    <span class="attr">"RepoTags"</span>: [],</span><br><span class="line">    <span class="attr">"Created"</span>: <span class="string">"2021-04-14T19:19:49.594730611Z"</span>,</span><br><span class="line">    <span class="attr">"DockerVersion"</span>: <span class="string">"19.03.12"</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">    <span class="attr">"Os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">    <span class="attr">"Layers"</span>: [</span><br><span class="line">        <span class="string">"sha256:32f366d666a541852cad754ee1cdb53a736110b550f0c2d5a46bc5ba519896b6"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">        <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看 registry 中一个镜像的 manifests 文件，可以通过这种方式来判断镜像是否存在</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">skopeo inspect docker://alpine:latest --raw | jq '.'</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"manifests"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:1775bebec23e1f3ce486989bfc9ff3c4e951690df84aa9f926497d82f2ffca9d"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:1f66b8f3041ef8575260056dedd437ed94e7bfeea142ee39ff0d795f94ff2287"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"arm"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="attr">"variant"</span>: <span class="string">"v6"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:8d99168167baa6a6a0d7851b9684625df9c1455116a9601835c2127df2aaa2f5"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"arm"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="attr">"variant"</span>: <span class="string">"v7"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:53b74ddfc6225e3c8cc84d7985d0f34666e4e8b0b6892a9b2ad1f7516bc21b54"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"arm64"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="attr">"variant"</span>: <span class="string">"v8"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:52a197664c8ed0b4be6d3b8372f1d21f3204822ba432583644c9ce07f7d6448f"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"386"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:b421672fe4e74a3c7eff2775736e854d69e8d38b2c337063f8699de9c408ddd3"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"ppc64le"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:8a22269106a31264874cc3a719c1e280e76d42dff1fa57bd9c7fe68dab574023"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"s390x"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">528</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.list.v2+json"</span>,</span><br><span class="line">  <span class="attr">"schemaVersion"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skopeo-delete"><a href="#skopeo-delete" class="headerlink" title="skopeo delete"></a>skopeo delete</h3><p>使用这个命令可以删除镜像 tag。需要注意的是，通过  registry API 来删除镜像的 tag 仅仅是删除了 tag 对 manifests 文件的引用，并非真正将镜像删除掉。如果想要删除镜像的 layer 还是需要通过 registry GC 的方式，可参考之前写过的一篇博客《<a href="https://blog.k8s.li/registry-gc.html">docker registry GC 原理分析</a>》</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo delete docker:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;pause:3.2 --debug</span><br><span class="line">DEBU[0000] Returning credentials from &#x2F;home&#x2F;release&#x2F;.docker&#x2F;config.json</span><br><span class="line">DEBU[0000] Using registries.d directory &#x2F;etc&#x2F;containers&#x2F;registries.d for sigstore configuration</span><br><span class="line">DEBU[0000]  No signature storage configuration found for hub.k8s.li&#x2F;library&#x2F;pause:3.2</span><br><span class="line">DEBU[0000] Looking for TLS certificates and private keys in &#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;hub.k8s.li&#x2F;library</span><br><span class="line">DEBU[0000] Loading registries configuration &quot;&#x2F;etc&#x2F;containers&#x2F;registries.conf&quot;</span><br><span class="line">DEBU[0000] GET https:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;v2&#x2F;</span><br><span class="line">DEBU[0000] Ping https:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;v2&#x2F; status 401</span><br><span class="line">DEBU[0000] GET https:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;v2&#x2F;library&#x2F;pause&#x2F;manifests&#x2F;3.2</span><br><span class="line">DEBU[0000] DELETE https:&#x2F;&#x2F;hub.k8s.li&#x2F;library&#x2F;v2&#x2F;library&#x2F;pause&#x2F;manifests&#x2F;sha256:4a1c4b21597c1b4415bdbecb28a3296c6b5e23ca4f9feeb599860a1dac6a0108</span><br></pre></td></tr></table></figure><h3 id="skopeo-list-tags"><a href="#skopeo-list-tags" class="headerlink" title="skopeo list-tags"></a>skopeo list-tags</h3><p>这个命令可用于列出 registry 上的某个镜像的所有 tag ，使用标准的 registry API 来获取镜像 tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ skopeo list-tags docker:&#x2F;&#x2F;k8s.gcr.io&#x2F;pause</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Repository&quot;: &quot;k8s.gcr.io&#x2F;pause&quot;,</span><br><span class="line">    &quot;Tags&quot;: [</span><br><span class="line">        &quot;0.8.0&quot;,</span><br><span class="line">        &quot;1.0&quot;,</span><br><span class="line">        &quot;2.0&quot;,</span><br><span class="line">        &quot;3.0&quot;,</span><br><span class="line">        &quot;3.1&quot;,</span><br><span class="line">        &quot;3.2&quot;,</span><br><span class="line">        &quot;3.3&quot;,</span><br><span class="line">        &quot;3.4.1&quot;,</span><br><span class="line">        &quot;3.5&quot;,</span><br><span class="line">        &quot;go&quot;,</span><br><span class="line">        &quot;latest&quot;,</span><br><span class="line">        &quot;test&quot;,</span><br><span class="line">        &quot;test2&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>一下给出几个 skopeo 工具的最佳实践 😊</p><h3 id="镜像同步"><a href="#镜像同步" class="headerlink" title="镜像同步"></a>镜像同步</h3><p>假如给你一个镜像列表，如 <a href="https://github.com/kubesphere/ks-installer/blob/master/scripts/images-list.txt。如何将它快速地从一个" target="_blank" rel="noopener">https://github.com/kubesphere/ks-installer/blob/master/scripts/images-list.txt。如何将它快速地从一个</a> registry 同步到另一个 registry 中呢？还是 skopeo copy 走起！</p><ul><li>images-list.txt</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">##k8s-images</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.20.6</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.20.6</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.20.6</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.20.6</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.19.8</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.19.8</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.19.8</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.19.8</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.19.9</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.19.9</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.19.9</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.19.9</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.18.8</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.18.8</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.18.8</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.18.8</span><br><span class="line">kubesphere&#x2F;kube-apiserver:v1.17.9</span><br><span class="line">kubesphere&#x2F;kube-scheduler:v1.17.9</span><br><span class="line">kubesphere&#x2F;kube-proxy:v1.17.9</span><br><span class="line">kubesphere&#x2F;kube-controller-manager:v1.17.9</span><br><span class="line">kubesphere&#x2F;pause:3.1</span><br><span class="line">kubesphere&#x2F;pause:3.2</span><br><span class="line">kubesphere&#x2F;etcd:v3.4.13</span><br><span class="line">calico&#x2F;cni:v3.16.3</span><br><span class="line">calico&#x2F;kube-controllers:v3.16.3</span><br><span class="line">calico&#x2F;node:v3.16.3</span><br><span class="line">calico&#x2F;pod2daemon-flexvol:v3.16.3</span><br><span class="line">calico&#x2F;typha:v3.16.3</span><br><span class="line">kubesphere&#x2F;flannel:v0.12.0</span><br><span class="line">coredns&#x2F;coredns:1.6.9</span><br><span class="line">kubesphere&#x2F;k8s-dns-node-cache:1.15.12</span><br><span class="line">openebs&#x2F;provisioner-localpv:2.10.1</span><br><span class="line">openebs&#x2F;linux-utils:2.10.0</span><br><span class="line">kubesphere&#x2F;nfs-client-provisioner:v3.1.0-k8s1.11</span><br><span class="line">##csi-images</span><br><span class="line">csiplugin&#x2F;csi-neonsan:v1.2.0</span><br><span class="line">csiplugin&#x2F;csi-neonsan-ubuntu:v1.2.0</span><br><span class="line">csiplugin&#x2F;csi-neonsan-centos:v1.2.0</span><br><span class="line">csiplugin&#x2F;csi-provisioner:v1.5.0</span><br><span class="line">csiplugin&#x2F;csi-attacher:v2.1.1</span><br><span class="line">csiplugin&#x2F;csi-resizer:v0.4.0</span><br><span class="line">csiplugin&#x2F;csi-snapshotter:v2.0.1</span><br><span class="line">csiplugin&#x2F;csi-node-driver-registrar:v1.2.0</span><br><span class="line">csiplugin&#x2F;csi-qingcloud:v1.2.0</span><br><span class="line">##kubesphere-images</span><br><span class="line">kubesphere&#x2F;ks-apiserver:v3.1.1</span><br><span class="line">kubesphere&#x2F;ks-console:v3.1.1</span><br><span class="line">kubesphere&#x2F;ks-controller-manager:v3.1.1</span><br><span class="line">kubesphere&#x2F;ks-installer:v3.1.1</span><br><span class="line">kubesphere&#x2F;kubectl:v1.20.0</span><br><span class="line">kubesphere&#x2F;kubectl:v1.19.0</span><br><span class="line">redis:5.0.12-alpine</span><br><span class="line">alpine:3.14</span><br><span class="line">haproxy:2.0.22-alpine</span><br><span class="line">nginx:1.14-alpine</span><br><span class="line">minio&#x2F;minio:RELEASE.2019-08-07T01-59-21Z</span><br><span class="line">minio&#x2F;mc:RELEASE.2019-08-07T23-14-43Z</span><br><span class="line">mirrorgooglecontainers&#x2F;defaultbackend-amd64:1.4</span><br><span class="line">kubesphere&#x2F;nginx-ingress-controller:v0.35.0</span><br><span class="line">osixia&#x2F;openldap:1.3.0</span><br><span class="line">csiplugin&#x2F;snapshot-controller:v3.0.3</span><br><span class="line">kubesphere&#x2F;kubefed:v0.7.0</span><br><span class="line">kubesphere&#x2F;tower:v0.2.0</span><br><span class="line">kubesphere&#x2F;prometheus-config-reloader:v0.42.1</span><br><span class="line">kubesphere&#x2F;prometheus-operator:v0.42.1</span><br><span class="line">prom&#x2F;alertmanager:v0.21.0</span><br><span class="line">prom&#x2F;prometheus:v2.26.0</span><br><span class="line">prom&#x2F;node-exporter:v0.18.1</span><br><span class="line">kubesphere&#x2F;ks-alerting-migration:v3.1.0</span><br><span class="line">jimmidyson&#x2F;configmap-reload:v0.3.0</span><br><span class="line">kubesphere&#x2F;notification-manager-operator:v1.0.0</span><br><span class="line">kubesphere&#x2F;notification-manager:v1.0.0</span><br><span class="line">kubesphere&#x2F;metrics-server:v0.4.2</span><br><span class="line">kubesphere&#x2F;kube-rbac-proxy:v0.8.0</span><br><span class="line">kubesphere&#x2F;kube-state-metrics:v1.9.7</span><br><span class="line">openebs&#x2F;provisioner-localpv:2.3.0</span><br><span class="line">thanosio&#x2F;thanos:v0.18.0</span><br><span class="line">grafana&#x2F;grafana:7.4.3</span><br><span class="line">##kubesphere-logging-images</span><br><span class="line">kubesphere&#x2F;elasticsearch-oss:6.7.0-1</span><br><span class="line">kubesphere&#x2F;elasticsearch-curator:v5.7.6</span><br><span class="line">kubesphere&#x2F;fluentbit-operator:v0.5.0</span><br><span class="line">kubesphere&#x2F;fluentbit-operator:migrator</span><br><span class="line">kubesphere&#x2F;fluent-bit:v1.6.9</span><br><span class="line">elastic&#x2F;filebeat:6.7.0</span><br><span class="line">kubesphere&#x2F;kube-auditing-operator:v0.1.2</span><br><span class="line">kubesphere&#x2F;kube-auditing-webhook:v0.1.2</span><br><span class="line">kubesphere&#x2F;kube-events-exporter:v0.1.0</span><br><span class="line">kubesphere&#x2F;kube-events-operator:v0.1.0</span><br><span class="line">kubesphere&#x2F;kube-events-ruler:v0.2.0</span><br><span class="line">kubesphere&#x2F;log-sidecar-injector:1.1</span><br><span class="line">docker:19.03</span><br><span class="line">##istio-images</span><br><span class="line">istio&#x2F;pilot:1.6.10</span><br><span class="line">istio&#x2F;proxyv2:1.6.10</span><br><span class="line">jaegertracing&#x2F;jaeger-agent:1.17</span><br><span class="line">jaegertracing&#x2F;jaeger-collector:1.17</span><br><span class="line">jaegertracing&#x2F;jaeger-es-index-cleaner:1.17</span><br><span class="line">jaegertracing&#x2F;jaeger-operator:1.17.1</span><br><span class="line">jaegertracing&#x2F;jaeger-query:1.17</span><br><span class="line">kubesphere&#x2F;kiali:v1.26.1</span><br><span class="line">kubesphere&#x2F;kiali-operator:v1.26.1</span><br><span class="line">##kubesphere-devops-images</span><br><span class="line">kubesphere&#x2F;ks-jenkins:2.249.1</span><br><span class="line">jenkins&#x2F;jnlp-slave:3.27-1</span><br><span class="line">kubesphere&#x2F;s2ioperator:v3.1.0</span><br><span class="line">kubesphere&#x2F;s2irun:v2.1.1</span><br><span class="line">kubesphere&#x2F;builder-base:v3.1.0</span><br><span class="line">kubesphere&#x2F;builder-nodejs:v3.1.0</span><br><span class="line">kubesphere&#x2F;builder-maven:v3.1.0</span><br><span class="line">kubesphere&#x2F;builder-go:v3.1.0</span><br><span class="line">kubesphere&#x2F;s2i-binary:v2.1.0</span><br><span class="line">kubesphere&#x2F;tomcat85-java11-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;tomcat85-java11-runtime:v2.1.0</span><br><span class="line">kubesphere&#x2F;tomcat85-java8-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;tomcat85-java8-runtime:v2.1.0</span><br><span class="line">kubesphere&#x2F;java-11-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;java-8-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;java-8-runtime:v2.1.0</span><br><span class="line">kubesphere&#x2F;java-11-runtime:v2.1.0</span><br><span class="line">kubesphere&#x2F;nodejs-8-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;nodejs-6-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;nodejs-4-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;python-36-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;python-35-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;python-34-centos7:v2.1.0</span><br><span class="line">kubesphere&#x2F;python-27-centos7:v2.1.0</span><br><span class="line">##openpitrix-images</span><br><span class="line">kubespheredev&#x2F;openpitrix-jobs:v3.1.1</span><br><span class="line">##weave-scope-images</span><br><span class="line">weaveworks&#x2F;scope:1.13.0</span><br><span class="line">##kubeedge-images</span><br><span class="line">kubeedge&#x2F;cloudcore:v1.6.2</span><br><span class="line">kubesphere&#x2F;edge-watcher:v0.1.0</span><br><span class="line">kubesphere&#x2F;kube-rbac-proxy:v0.5.0</span><br><span class="line">kubesphere&#x2F;edge-watcher-agent:v0.1.0</span><br><span class="line">##example-images-images</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-productpage-v1:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-reviews-v1:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-reviews-v2:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-reviews-v3:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-details-v1:1.16.2</span><br><span class="line">kubesphere&#x2F;examples-bookinfo-ratings-v1:1.16.3</span><br><span class="line">busybox:1.31.1</span><br><span class="line">joosthofman&#x2F;wget:1.0</span><br><span class="line">kubesphere&#x2F;netshoot:v1.0</span><br><span class="line">nginxdemos&#x2F;hello:plain-text</span><br><span class="line">wordpress:4.8-apache</span><br><span class="line">mirrorgooglecontainers&#x2F;hpa-example:latest</span><br><span class="line">java:openjdk-8-jre-alpine</span><br><span class="line">fluent&#x2F;fluentd:v1.4.2-2.0</span><br><span class="line">perl:latest</span><br></pre></td></tr></table></figure><ul><li>sync.sh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">GREEN_COL=<span class="string">"\\033[32;1m"</span></span><br><span class="line">RED_COL=<span class="string">"\\033[1;31m"</span></span><br><span class="line">NORMAL_COL=<span class="string">"\\033[0;39m"</span></span><br><span class="line">SOURCE_REGISTRY=<span class="variable">$1</span></span><br><span class="line">TARGET_REGISTRY=<span class="variable">$2</span></span><br><span class="line">: <span class="variable">$&#123;IMAGES_LIST_FILE:="images-list.txt"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;TARGET_REGISTRY:="hub.k8s.li"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;SOURCE_REGISTRY:="docker.io"&#125;</span></span><br><span class="line"></span><br><span class="line">BLOBS_PATH=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">REPO_PATH=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">CURRENT_NUM=0</span><br><span class="line">ALL_IMAGES=<span class="string">"<span class="variable">$(sed -n '/#/d;s/:/:/p' $&#123;IMAGES_LIST_FILE&#125; | sort -u)</span>"</span></span><br><span class="line">TOTAL_NUMS=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;ALL_IMAGES&#125;</span>"</span> | wc -l)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">skopeo_copy</span></span>() &#123;</span><br><span class="line"> <span class="keyword">if</span> skopeo copy --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> \</span><br><span class="line"> --override-arch amd64 --override-os linux -q docker://<span class="variable">$1</span> docker://<span class="variable">$2</span>; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$GREEN_COL</span> Progress: <span class="variable">$&#123;CURRENT_NUM&#125;</span>/<span class="variable">$&#123;TOTAL_NUMS&#125;</span> sync <span class="variable">$1</span> to <span class="variable">$2</span> successful <span class="variable">$NORMAL_COL</span>"</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$RED_COL</span> Progress: <span class="variable">$&#123;CURRENT_NUM&#125;</span>/<span class="variable">$&#123;TOTAL_NUMS&#125;</span> sync <span class="variable">$1</span> to <span class="variable">$2</span> failed <span class="variable">$NORMAL_COL</span>"</span></span><br><span class="line"> <span class="built_in">exit</span> 2</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> <span class="variable">$&#123;ALL_IMAGES&#125;</span>; <span class="keyword">do</span></span><br><span class="line"> <span class="built_in">let</span> CURRENT_NUM=<span class="variable">$&#123;CURRENT_NUM&#125;</span>+1</span><br><span class="line"> skopeo_copy <span class="variable">$&#123;SOURCE_REGISTRY&#125;</span>/<span class="variable">$&#123;image&#125;</span> <span class="variable">$&#123;TARGET_REGISTRY&#125;</span>/<span class="variable">$&#123;image&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><code>bash sync.sh docker.io ``localhost:5000</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ bash sync.sh docker.io localhost:5000</span><br><span class="line">Progress: 1/143 sync docker.io/alpine:3.14 to localhost:5000/alpine:3.14 successful</span><br><span class="line">Progress: 2/143 sync docker.io/busybox:1.31.1 to localhost:5000/busybox:1.31.1 successful</span><br><span class="line">Progress: 3/143 sync docker.io/calico/cni:v3.16.3 to localhost:5000/calico/cni:v3.16.3 successful</span><br><span class="line">Progress: 4/143 sync docker.io/calico/kube-controllers:v3.16.3 to localhost:5000/calico/kube-controllers:v3.16.3 successful</span><br><span class="line">Progress: 141/143 sync docker.io/thanosio/thanos:v0.18.0 to localhost:5000/thanosio/thanos:v0.18.0 successful</span><br><span class="line">Progress: 142/143 sync docker.io/weaveworks/scope:1.13.0 to localhost:5000/weaveworks/scope:1.13.0 successful</span><br><span class="line">Progress: 143/143 sync docker.io/wordpress:4.8-apache to localhost:5000/wordpress:4.8-apache successful</span><br></pre></td></tr></table></figure><h3 id="使用-registry-存储特性"><a href="#使用-registry-存储特性" class="headerlink" title="使用 registry 存储特性"></a>使用 registry 存储特性</h3><p>将镜像从 registry 中同步到本地目录，使用 registry 存储的特性，将本地目录中的镜像转换成 registry 存储的格式。这样子的好处就是可以去除一些 skopeo dir 中重复的 layers，减少镜像的总大小。具体的原理可以参考我之前写过的 《<a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a>》</p><ul><li>sync.sh</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">GREEN_COL=<span class="string">"\\033[32;1m"</span></span><br><span class="line">RED_COL=<span class="string">"\\033[1;31m"</span></span><br><span class="line">NORMAL_COL=<span class="string">"\\033[0;39m"</span></span><br><span class="line">SOURCE_REGISTRY=<span class="variable">$1</span></span><br><span class="line">TARGET_REGISTRY=<span class="variable">$2</span></span><br><span class="line">IMAGES_DIR=<span class="variable">$2</span></span><br><span class="line">: <span class="variable">$&#123;IMAGES_DIR:="images"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;IMAGES_LIST_FILE:="images-list.txt"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;TARGET_REGISTRY:="hub.k8s.li"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;SOURCE_REGISTRY:="docker.io"&#125;</span></span><br><span class="line">BLOBS_PATH=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">REPO_PATH=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line">CURRENT_NUM=0</span><br><span class="line">ALL_IMAGES=<span class="string">"<span class="variable">$(sed -n '/#/d;s/:/:/p' $&#123;IMAGES_LIST_FILE&#125; | sort -u)</span>"</span></span><br><span class="line">TOTAL_NUMS=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;ALL_IMAGES&#125;</span>"</span> | wc -l)</span><br><span class="line"><span class="function"><span class="title">skopeo_sync</span></span>() &#123;</span><br><span class="line"> <span class="keyword">if</span> skopeo sync --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> \</span><br><span class="line"> --override-arch amd64 --override-os linux --src docker --dest dir <span class="variable">$1</span> <span class="variable">$2</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$GREEN_COL</span> Progress: <span class="variable">$&#123;CURRENT_NUM&#125;</span>/<span class="variable">$&#123;TOTAL_NUMS&#125;</span> sync <span class="variable">$1</span> to <span class="variable">$2</span> successful <span class="variable">$NORMAL_COL</span>"</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">"<span class="variable">$RED_COL</span> Progress: <span class="variable">$&#123;CURRENT_NUM&#125;</span>/<span class="variable">$&#123;TOTAL_NUMS&#125;</span> sync <span class="variable">$1</span> to <span class="variable">$2</span> failed <span class="variable">$NORMAL_COL</span>"</span></span><br><span class="line"> <span class="built_in">exit</span> 2</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">convert_images</span></span>() &#123;</span><br><span class="line"> rm -rf <span class="variable">$&#123;IMAGES_DIR&#125;</span>; mkdir -p <span class="variable">$&#123;IMAGES_DIR&#125;</span></span><br><span class="line"> <span class="keyword">for</span> image <span class="keyword">in</span> <span class="variable">$&#123;ALL_IMAGES&#125;</span>; <span class="keyword">do</span></span><br><span class="line"> <span class="built_in">let</span> CURRENT_NUM=<span class="variable">$&#123;CURRENT_NUM&#125;</span>+1</span><br><span class="line"> image_name=<span class="variable">$&#123;image%%:*&#125;</span></span><br><span class="line"> image_tag=<span class="variable">$&#123;image##*:&#125;</span></span><br><span class="line"> image_repo=<span class="variable">$&#123;image%%/*&#125;</span></span><br><span class="line"> skopeo_sync <span class="variable">$&#123;SOURCE_REGISTRY&#125;</span>/<span class="variable">$&#123;image&#125;</span> <span class="variable">$&#123;IMAGES_DIR&#125;</span>/<span class="variable">$&#123;image_repo&#125;</span></span><br><span class="line"> manifest=<span class="string">"<span class="variable">$&#123;IMAGES_DIR&#125;</span>/<span class="variable">$&#123;image&#125;</span>/manifest.json"</span></span><br><span class="line"> manifest_sha256=$(sha256sum <span class="variable">$&#123;manifest&#125;</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"> mkdir -p <span class="variable">$&#123;BLOBS_PATH&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line"> ln -f <span class="variable">$&#123;manifest&#125;</span> <span class="variable">$&#123;BLOBS_PATH&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br><span class="line"> <span class="comment"># make image repositories dir</span></span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/&#123;_uploads,_layers,_manifests&#125;</span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line"> <span class="comment"># create image tag manifest link file</span></span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line"> <span class="comment"># link image layers file to registry blobs dir</span></span><br><span class="line"> <span class="keyword">for</span> layer <span class="keyword">in</span> $(sed <span class="string">'/v1Compatibility/d'</span> <span class="variable">$&#123;manifest&#125;</span> | grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span>); <span class="keyword">do</span></span><br><span class="line"> mkdir -p <span class="variable">$&#123;BLOBS_PATH&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line"> mkdir -p <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;layer&#125;</span>"</span> &gt; <span class="variable">$&#123;REPO_PATH&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span>/link</span><br><span class="line"> ln -f <span class="variable">$&#123;IMAGES_DIR&#125;</span>/<span class="variable">$&#123;image&#125;</span>/<span class="variable">$&#123;layer&#125;</span> <span class="variable">$&#123;BLOBS_PATH&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convert_images</span><br></pre></td></tr></table></figure><ul><li>install.sh</li></ul><p>使用这个脚本将 registry 存储中的镜像转换成 skopeo dir 的方式，然后再将镜像同步到 registry 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">REGISTRY_DOMAIN=<span class="string">"harbor.k8s.li"</span></span><br><span class="line">REGISTRY_PATH=<span class="string">"/var/lib/registry"</span></span><br><span class="line"><span class="comment"># 切换到 registry 存储主目录下</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;REGISTRY_PATH&#125;</span></span><br><span class="line"><span class="function"><span class="title">gen_skopeo_dir</span></span>() &#123;</span><br><span class="line">   <span class="comment"># 定义 registry 存储的 blob 目录 和 repositories 目录，方便后面使用</span></span><br><span class="line">    BLOB_DIR=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">    REPO_DIR=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line">    <span class="comment"># 定义生成 skopeo 目录</span></span><br><span class="line">    SKOPEO_DIR=<span class="string">"docker/skopeo"</span></span><br><span class="line">    <span class="comment"># 通过 find 出 current 文件夹可以得到所有带 tag 的镜像，因为一个 tag 对应一个 current 目录</span></span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> $(find <span class="variable">$&#123;REPO_DIR&#125;</span> -<span class="built_in">type</span> d -name <span class="string">"current"</span>); <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 根据镜像的 tag 提取镜像的名字</span></span><br><span class="line">        name=$(<span class="built_in">echo</span> <span class="variable">$&#123;image&#125;</span> | awk -F <span class="string">'/'</span> <span class="string">'&#123;print $5"/"$6":"$9&#125;'</span>)</span><br><span class="line">        link=$(cat <span class="variable">$&#123;image&#125;</span>/link | sed <span class="string">'s/sha256://'</span>)</span><br><span class="line">        mfs=<span class="string">"<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;link:0:2&#125;</span>/<span class="variable">$&#123;link&#125;</span>/data"</span></span><br><span class="line">        <span class="comment"># 创建镜像的硬链接需要的目录</span></span><br><span class="line">        mkdir -p <span class="string">"<span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>"</span></span><br><span class="line">        <span class="comment"># 硬链接镜像的 manifests 文件到目录的 manifest 文件</span></span><br><span class="line">        ln <span class="variable">$&#123;mfs&#125;</span> <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>/manifest.json</span><br><span class="line">        <span class="comment"># 使用正则匹配出所有的 sha256 值，然后排序去重</span></span><br><span class="line">        layers=$(grep -Eo <span class="string">"\b[a-f0-9]&#123;64&#125;\b"</span> <span class="variable">$&#123;mfs&#125;</span> | sort -n | uniq)</span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> <span class="variable">$&#123;layers&#125;</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="comment"># 硬链接 registry 存储目录里的镜像 layer 和 images config 到镜像的 dir 目录</span></span><br><span class="line">            ln <span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;name&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">sync_image</span></span>() &#123;</span><br><span class="line">    <span class="comment"># 使用 skopeo sync 将 dir 格式的镜像同步到 harbor</span></span><br><span class="line">    <span class="keyword">for</span> project <span class="keyword">in</span> $(ls <span class="variable">$&#123;SKOPEO_DIR&#125;</span>); <span class="keyword">do</span></span><br><span class="line">        skopeo sync --insecure-policy --src-tls-verify=<span class="literal">false</span> --dest-tls-verify=<span class="literal">false</span> \</span><br><span class="line">        --src dir --dest docker <span class="variable">$&#123;SKOPEO_DIR&#125;</span>/<span class="variable">$&#123;project&#125;</span> <span class="variable">$&#123;REGISTRY_DOMAIN&#125;</span>/<span class="variable">$&#123;project&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">gen_skopeo_dir</span><br></pre></td></tr></table></figure><h3 id="从-registry-存储中-select-出镜像"><a href="#从-registry-存储中-select-出镜像" class="headerlink" title="从 registry 存储中 select 出镜像"></a>从 registry 存储中 select 出镜像</h3><p>先将镜像同步到一个 registry 中，再将镜像从 registry 存储中捞出来。这个 registry 可以当作一个镜像存储的池子，我们使用 Linux 中硬链接的特性将镜像<code>&quot;复制&quot;</code>一份出来，然后再打一个 tar 包。这样做的好处就是每次打包镜像的时候都能复用历史的镜像数据，而且性能极快。具体的原理可以参考我之前的博客《<a href="https://blog.k8s.li/select-registry-images.html">什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</a>》</p><ul><li>先将镜像同步到一个固定的 registry 中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash sync.sh docker.io localhost:5000</span><br></pre></td></tr></table></figure><ul><li>再使用该脚本将镜像从 registry 存储中捞出来</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line">IMAGES_LIST=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">REGISTRY_PATH=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line">OUTPUT_DIR=<span class="string">"<span class="variable">$3</span>"</span></span><br><span class="line">BLOB_DIR=<span class="string">"docker/registry/v2/blobs/sha256"</span></span><br><span class="line">REPO_DIR=<span class="string">"docker/registry/v2/repositories"</span></span><br><span class="line">rm -rf <span class="variable">$&#123;OUTPUT_DIR&#125;</span>; mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> $(find <span class="variable">$&#123;IMAGES_LIST&#125;</span> -<span class="built_in">type</span> f -name <span class="string">"*.list"</span> | xargs grep -Ev <span class="string">'^#|^/'</span> | grep <span class="string">':'</span>); <span class="keyword">do</span></span><br><span class="line">    image_tag=<span class="variable">$&#123;image##*:&#125;</span></span><br><span class="line">    image_name=<span class="variable">$&#123;image%%:*&#125;</span></span><br><span class="line">    tag_link=<span class="variable">$&#123;REGISTRY_PATH&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line">    manifest_sha256=$(sed <span class="string">'s/sha256://'</span> <span class="variable">$&#123;tag_link&#125;</span>)</span><br><span class="line">    manifest=<span class="variable">$&#123;REGISTRY_PATH&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">    ln -f <span class="variable">$&#123;manifest&#125;</span> <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;manifest_sha256:0:2&#125;</span>/<span class="variable">$&#123;manifest_sha256&#125;</span>/data</span><br><span class="line">    <span class="comment"># make image repositories dir</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/&#123;_uploads,_layers,_manifests&#125;</span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class="line">    mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span></span><br><span class="line">    <span class="comment"># create image tag manifest link file</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/current/link</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;manifest_sha256&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_manifests/tags/<span class="variable">$&#123;image_tag&#125;</span>/index/sha256/<span class="variable">$&#123;manifest_sha256&#125;</span>/link</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> $(sed <span class="string">'/v1Compatibility/d'</span> <span class="variable">$&#123;manifest&#125;</span> | grep -Eo <span class="string">'\b[a-f0-9]&#123;64&#125;\b'</span> | sort -u); <span class="keyword">do</span></span><br><span class="line">        mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        mkdir -p <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span></span><br><span class="line">        ln -f <span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;BLOB_DIR&#125;</span>/<span class="variable">$&#123;layer:0:2&#125;</span>/<span class="variable">$&#123;layer&#125;</span>/data</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"sha256:<span class="variable">$&#123;layer&#125;</span>"</span> &gt; <span class="variable">$&#123;OUTPUT_DIR&#125;</span>/<span class="variable">$&#123;REPO_DIR&#125;</span>/<span class="variable">$&#123;image_name&#125;</span>/_layers/sha256/<span class="variable">$&#123;layer&#125;</span>/link</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生🤔</a></li><li><a href="https://blog.k8s.li/registry-gc.html">docker registry GC 原理分析</a></li><li><a href="https://blog.k8s.li/docker-registry-to-harbor.html">docker registry 迁移至 harbor</a></li><li><a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a></li><li><a href="https://blog.k8s.li/skopeo-to-registry.html">如何使用 registry 存储的特性</a></li><li><a href="https://blog.k8s.li/select-registry-images.html">什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;搬砖工具&quot;&gt;&lt;a href=&quot;#搬砖工具&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="镜像" scheme="https://blog.k8s.li/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="skopeo" scheme="https://blog.k8s.li/tags/skopeo/"/>
    
  </entry>
  
  <entry>
    <title>云原生 PaaS 产品发布&amp;部署方案</title>
    <link href="https://blog.k8s.li/pass-platform-release.html"/>
    <id>https://blog.k8s.li/pass-platform-release.html</id>
    <published>2021-06-09T16:00:00.000Z</published>
    <updated>2021-06-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>对于一款基于 kubernetes 的容器云平台来讲，它需要给用户提供资源调度、服务编排、应用部署、监控日志、配置管理、镜像构建、CI/CD、存储和网络管理等功能。一个 PaaS 产品想要实现这些面面俱全的功能并不是一件轻松的事儿。从软件研发流程上来讲，不同于传统的单体应用或客户端应用，容器云平台本从底层的 Kubernetes 集群部署到上层的用户应用部署，所涉及到的技术栈十分复杂，最终导致平台的开发流程变得十分繁琐。</p><p>当然业界也有一些主流解决方案，比如平台组件容器化部署，以及使用微服务架构将平台拆分成若干个独立的模块，比如监控告警模块、应用管理模块、多集群管理模块等等。使用微服务架构可以解决容器云平台本身的复杂性，将平台拆分成单独的模块进行独立开发和部署，这样可以让某一特定的团队专门负责该模块的开发。</p><p>而使用微服务架构之后，也引入了新的问题：组件数量多了、对应模块开发人员多了、产品代码仓库多了、组件镜像多了、部署变得复杂了等。一个很好的例子就是 <a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">ks-installer</a>  这个开源项目，里面包含了 20 多个组件和 140 多个容器镜像。想要管理这么多的组件和镜像绝非易事儿，个人认为这需要从产品发布和平台部署两个维度去解决众多组件管理的难题，因此本文就梳理了个人在 PaaS 容器云平台产品发布和部署方面的一些经验总结。</p><h2 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a>术语定义</h2><p>本文中会有一些专业术语，在这先解释一下：</p><table><thead><tr><th><strong>术语</strong></th><th>定义</th></tr></thead><tbody><tr><td>Platform/平台</td><td>即平台，本文指基于 kubernetes 的 PaaS 容器云平台</td></tr><tr><td>Addon/组件</td><td>某个独立的模块，一个 PaaS 容器云平台由多个组件构成</td></tr><tr><td>Chart/Charts</td><td>指一个或多个 Helm Chart，里面包含定义组件部署所需要的 manifests 文件</td></tr><tr><td>Helm</td><td>部署组件 Charts 所使用的命令行工具</td></tr><tr><td>Release/发布</td><td>收集产品所包含所有组件的部署需要的文件和镜像列表到 git repo</td></tr><tr><td>Package/打包</td><td>根据发布流程中收集过来的部署文件和镜像列表将它们打包成离线安装包</td></tr><tr><td>helm-controller</td><td>基于 Helm 开发的控制器，用于部署平台组件</td></tr><tr><td>标准产品</td><td>指 PaaS 容器云平台本身，无任何定制化开发</td></tr><tr><td>OEM 产品</td><td>基于标准产品二次开发或使用 OEM 补丁包定制化开发的二开产品</td></tr><tr><td>Jenkins 流水线</td><td>Release 自动化打包发布产品包使用的工具</td></tr><tr><td>platform-release</td><td>产品发布专用的 git repo，收集和管理各个组件发布相关的配置</td></tr><tr><td>PR/MR</td><td>Pull Request / Merge Request</td></tr></tbody></table><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>对于一个基于 kubernetes 的 PaaS 平台来讲，整个平台的部署可以大致划分为平台底层的 Kubernetes 集群部署和平台组件的部署这两部分。比如 Kubesphere 3.x 这个产品，kubernetes 集群部署工具是使用 Golang 开发的  <a href="https://github.com/kubesphere/kubekey" target="_blank" rel="noopener">kubekey</a>，平台组件部署工具是使用 Ansible 开发的 <a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">ks-installer</a>。</p><p>个人认为 Kubesphere 的部署流程是比较合理的。平台底层的 Kubernetes 集群部署做的很简单（一个二进制可执行文件），平台组件部署工具依赖的也仅仅是一个已经部署好的 Kubernetes 集群和一个存储 StorageClass。这样就可以实现平台组件的部署与底层 Kubernetes 集群部署的解耦，使得平台组件可以部署在一个已经部署好的 kubernetes 集群中，比如 AKS。同时对于用户来讲，平台组件的部署也变得十分简单，只需要几条 kubectl 命令就能轻松完成。</p><p>因此在设计部署方案时，结合客户的需求，我们对部署方案做出如下几点要求：</p><ul><li>需要做到离线部署，即私有化部署时不能依赖任何在线的资源；</li><li>平台底层 Kubernetes 集群部署与平台组件部署进行解耦；</li><li>平台组件部署仅仅依赖于一个已经部署好的 Kubernetes 集群和存储 StorageClass；</li><li>平台组件部署的方式做到统一，比如 Helm Chart 部署；</li><li>尽量将上层的组件放到平台组件里，不要放在 Kubernetes 集群部署中，比如负载均衡器、持久化存储、镜像仓库等；</li></ul><p>为了满足以上几点部署的需求，我们又将整个平台的部署拆分成三部分，在产品发布的时候会使用 Jenkins 流水线自动化构建出对应的离线安装包：</p><ul><li>offline-resources：部署 nginx 服务和镜像仓库服务用于提供离线安装依赖的所有资源；</li><li>Kubernetes：基于 Kubespray 使用 offline-resources 提供的资源部署 Kubernetes 集群；</li><li>platform：在 Kubernetes 集群之上部署我们的 PaaS 容器云平台；</li></ul><p>Kubernetes 集群部署和平台部署是相互分开的，两者在部署的层面尽量地做到了解耦，发布的时候也做到了解耦，这样就可以避免 K8s 部署工具里更新一个镜像而又要将平台安装包跟着一起更新的情况。</p><p>两者可以作为独立的产品进行交付，而没有和我们的 PaaS 平台绑定在一起。因为公司内的其他团队也有 K8s 集群部署的需求，这样也能将我们的 K8s 集群部署工具单独交付给其他团队使用。平台组件多集群部署的工具，也是没有和平台自身绑定在一起。只要是部署在 K8s 上并且组件使用 Helm Chart 部署，都可以使用这个工具来实现多集群部署和更新。</p><h3 id="offline-resources-服务"><a href="#offline-resources-服务" class="headerlink" title="offline-resources 服务"></a>offline-resources 服务</h3><p>offline-resources  即离线资源服务，这一步很简单：就一个安装包，解压后修改配置文件，然后执行一条 <code>bash install.sh</code> 命令就能安装完成。由于在 Kubernetes 集群部署层面我们已经去除对 Docker 容器运行时的依赖，offline-resources 服务同样也要考虑去除对 Docker 的依赖。因此我们选择了 Containerd 官方的 CLI 工具 <a href="https://github.com/containerd/nerdctl" target="_blank" rel="noopener">nerdctl</a> ，使用 nerdctl-full 的安装包来配置好 Containerd 运行时所需的依赖，并使用 nerdctl compose 方式一键启动 Nginx 和镜像仓库服务。后续的 Kubernetes 集群部署和平台组件部署都会依赖 offline-resources 提供的 rpm/deb 包、二进制文件、容器镜像等资源。</p><h3 id="Kubernetes-集群部署"><a href="#Kubernetes-集群部署" class="headerlink" title="Kubernetes 集群部署"></a>Kubernetes 集群部署</h3><p>Kubernetes 集群部署采用的是 Kubernetes 社区的 <a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">Kubespray</a>，因为它比较适用于私有化交付的场景，相关特性如下：</p><ul><li>支持的 K8s 从 1.19.0～1.21.1 的所有版本；</li><li>支持 10 种主流的 Linux 发行版和公有云 Linux 发行版；</li><li>支持 10 种 CNI 插件；</li><li>支持 4 种容器运行时 (Docker, Containerd, CRI-O, Kata)。</li></ul><p>我们对 Kubespray 进行了二次开发，加入了离线部署需要适配的内容，比如配置系统 OS 的 yum/apt 的源为 offline-resources 服务所提供的源；将镜像仓库的域名 CA 证书在节点进行信任；将集群部署拆分成若干个子步骤；一些平台自身 self-host 特性等。</p><p>同时我们又对 Kubespray 进行容器化封装，在部署的时候会使用脚本调用 nerdctl CLI 工具来运行 Kubespray 容器，只需要传入集群节点 inventory 文件和一个集群配置文件就能一键完成 Kubernetes 集群部署。集群部署完成之后会将集群的一些信息如镜像仓库的域名、CA 证书、负载均衡 VIP 等信息保存为一个 system-info 的 configmap 为后续的平台部署使用。</p><h3 id="平台组件部署"><a href="#平台组件部署" class="headerlink" title="平台组件部署"></a>平台组件部署</h3><p>平台组件部署我们并没有像 <a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">ks-installer</a> 那样为每一个组件都单独写一个 Ansible 的 roles，然后 controller 通过调用 ansible-playbook 来部署这些组件。而是将所有平台组件的部署方式都统一成为 Helm Chart，没有对任何组件做特殊处理。在安装的时候使用 Helm CLI 或者基于 Helm SDK 开发的 helm controller 来将所有的平台组件进行统一的部署和更新。这样在发布的时候对这些组件也能通过 git repo 做到统一的管理。这样的设计对一些 OEM 定制化开发或者增量补丁包的发布也十分友好。</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>介绍完了平台部署的整体流程后我们再来谈一下发布流水线是如下设计和实现的。</p><p>根据内部产品版本迭代的流程要求，发布流水线大致可以划分为如下几部分：</p><ul><li>RD 在发布前一天完成冒烟测试，并在内部 DevOps 平台构建组件镜像和打 repo tag；</li><li>本次发布如有增删组件的情况，组件负责人提交 PR/MR 到发布 repo 修改发布配置；</li><li>RD 冒烟完成和所有准备工组就绪之后，PM 通知发布人员开始发布；</li><li>发布人员执行流水线任务，自动化收集组件最新的 repo tag，并发送群消息通知组件 Onwer 确认；</li><li>组件 repo tag 确认完毕之后，合并 PR/MR 到发布分支，自动化收集组件的 Chart 文件；</li><li>根据收集的 Chart 文件更新镜像列表和平台组件部署配置文件，以及检查镜像列表中的镜像是否存在；</li><li>将收集的 Chart 和镜像列表等文件提交 PR/MR 合并到发布分支；</li><li>剩下的就是打包了，打包可以看作是发布的收尾环节，将产品打包成离线安装包并上传到存储服务器；</li></ul><h3 id="offline-resources-安装包发布"><a href="#offline-resources-安装包发布" class="headerlink" title="offline-resources 安装包发布"></a>offline-resources 安装包发布</h3><p>对于平台部署而言，依赖的在线资源主要分为以下三种：</p><ul><li>第一类：一些 OS 依赖的包，比如用包管理器安装 Containerd, ceph-common, nfs-utils 等</li><li>第二类：二进制文件：比如 Kubelet, Kubeadm, Kubectl, CNI，还有一些工具类如 Helm, Skopeo 等</li><li>第三类：容器镜像，比如 kube-apiserver, CoreDNS, 平台组件镜像等</li></ul><p>对于这三种在线的资源，我们都统一成 Docker build 的方式，使用与之对应的自动化工具进行构建。</p><ul><li>对于第一种，我们采用配置文件 + Dockerfile 的方式进行一键构建出所有依赖的 yum/apt 包，制作成离线源。具体的实现细节可以参考我之前的博客 <a href="https://blog.k8s.li/make-offline-mirrors.html">使用 docker build 制作 yum/apt 离线源</a>；</li><li>对于第二种，我们会根据部署的配置文件自动生成一个在线的文件列表，并放到 Dockerfile 里进行构建下载；</li><li>对于第三种，我们也是根据部署的配置文件生成一些镜像列表，在一个 Dockerfile  里将镜像打包出来。</li></ul><p>最后我们将所有的 Dockerfile 合并成一个 all-in-one 的 Dockerfile，并使用 Docker 的多阶段构建和  <code>BUILDKIT</code>  的特性充分利用了构建缓存，使得构建效率比非 Docker build 的方式提高了很多。</p><h3 id="K8s-部署安装包发布"><a href="#K8s-部署安装包发布" class="headerlink" title="K8s 部署安装包发布"></a>K8s 部署安装包发布</h3><p>由于 Kubernetes 集群部署涉及的研发人员只有五六个，因此将发布流程涉及的十分轻量。大致可以分为如下几步：</p><ul><li>发布人员执行发布流水线，流水线根据部署的源码生成镜像列表和文件列表，若两者更新了就自动提交 PR/MR 到发布分支；</li><li>研发人员 review PR/MR 检查生成的镜像列表和文件列表是否正确。因为镜像列表和文件列表就是集群部署里所有组件的版本，可以根据这些列表判断组件版本是否正确；</li><li>流水线自动检查镜像列表中的镜像是否存在，流水线成功之后，repo 负责人合并 PR/MR；</li><li>合并完成 MR 之后，会打上相应版本的 repo tag，为后续补丁包发布使用；</li><li>流水线构建 Kubespray 镜像推送到公司内部的镜像仓库，并将镜像追加到镜像列表中；</li><li>流水线调用 offline-resources 构建工具，根据镜像列表打包镜像、根据文件列表下载二进制文件、根据配置文件打包离线安装依赖的 rpm/deb 包；</li><li>复制配置文件和 install.sh 脚本到安装包内，将上述内容打包成一个安装包，并上传至存储服务器；</li><li>发送群消息通知流水线发布完成。</li></ul><h3 id="平台安装包发布流程"><a href="#平台安装包发布流程" class="headerlink" title="平台安装包发布流程"></a>平台安装包发布流程</h3><p>由于平台组件数量比较多，所涉及的研发人员也较多，为了提高发布效率和团队整体的研发效率，我们将所有平台组件都统一使用 Helm Chart 的方式来部署。使用 Helm Chart 的好处就在于这些文件都是声明式的，组件的版本可以定义在这些 Chart.yaml 文件中，为后续维护平台各个组件的版本提供了便利。</p><p>为了管理这些平台组建的 Charts 文件，我们将所有组件部署的 Chart 使用自动化的工具统一收集到一个 Git repo 中，利用 Git 作为声明基础设施与应用程序的单一事实来源。使用 git tag 的方式管理和记录平台的版本和各个组件的版本；使用 git diff 的方式做差异比较，为增量的补丁包发布提供了便利；使用分支的方式来管理不同的 OEM 定制化开发项目。</p><h4 id="发布配置"><a href="#发布配置" class="headerlink" title="发布配置"></a>发布配置</h4><p>以下这些文件和目录记录了如何使用 git repo 来管理平台组件的：</p><table><thead><tr><th>目录/文件</th><th>作用</th><th>更新方式</th></tr></thead><tbody><tr><td>addons</td><td>用于存放平台组件部署需要的 Helm Chart</td><td>根据 repos 目录下的配置文件自动更新</td></tr><tr><td>repos</td><td>用于存放平台组件 git  repo 配置，根据它来收集组件指定 repo 指定版本号的 Chart 文件</td><td>增删组件需要手动添加相应配置，组件版本号自动更新</td></tr><tr><td>images</td><td>用于存放平台所需镜像的列表</td><td>根据 addons 目录下的组件自动更新</td></tr><tr><td>scripts</td><td>用于存放一些部署依赖脚本文件</td><td>手动更新或自动从其他 repo 中收集</td></tr><tr><td>configs</td><td>用于存放平台或组件需要的配置文件</td><td>手动更新或自动从其他 repo 中收集</td></tr><tr><td>version.yml</td><td>记录平台组件版本</td><td>根据组件 Chart 中的 version 自动更新</td></tr><tr><td>install.sh</td><td>平台安装脚本</td><td>手动更新</td></tr></tbody></table><p>Git Repo 的目录结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ tree platform-release</span><br><span class="line">platform-release</span><br><span class="line">├── addons</span><br><span class="line">│   ├── cyclone</span><br><span class="line">│   │   ├── Chart.yaml</span><br><span class="line">│   │   ├── templates</span><br><span class="line">│   │   └── values.yaml</span><br><span class="line">│   ├── mongo</span><br><span class="line">│   │   ├── Chart.yaml</span><br><span class="line">│   │   ├── templates</span><br><span class="line">│   │   └── values.yaml</span><br><span class="line">│   ├── rook-ceph</span><br><span class="line">│   │   ├── Chart.yaml</span><br><span class="line">│   │   ├── crds</span><br><span class="line">│   │   ├── templates</span><br><span class="line">│   │   └── values.yaml</span><br><span class="line">│   └── swagger-ui</span><br><span class="line">│       ├── Chart.yaml</span><br><span class="line">│       ├── templates</span><br><span class="line">│       └── values.yaml</span><br><span class="line">├── configs</span><br><span class="line">│   ├── mongo-config-secret.yaml.j2</span><br><span class="line">│   ├── platform-config.yaml.j2</span><br><span class="line">│   └── platform-info.yaml.j2</span><br><span class="line">├── env.yml</span><br><span class="line">├── images</span><br><span class="line">│   ├── images_app_store.list</span><br><span class="line">│   ├── images_base.list</span><br><span class="line">│   ├── images_extra.list</span><br><span class="line">│   └── images_platform.list</span><br><span class="line">├── install.sh</span><br><span class="line">├── repos</span><br><span class="line">│   ├── app.yaml</span><br><span class="line">│   ├── auth.yaml</span><br><span class="line">│   ├── common.yaml</span><br><span class="line">│   ├── devops.yaml</span><br><span class="line">│   ├── insight.yaml</span><br><span class="line">│   ├── net.yaml</span><br><span class="line">│   ├── resource.yaml</span><br><span class="line">│   └── web.yaml</span><br><span class="line">└── scripts</span><br><span class="line"></span><br><span class="line">    └── init.sh</span><br></pre></td></tr></table></figure><h4 id="修改-repo-配置文件"><a href="#修改-repo-配置文件" class="headerlink" title="修改 repo 配置文件"></a>修改 repo 配置文件</h4><p>版本发布前，如果有增删组件的情况，需要对应组件的负责人修改自己负责模块的发布配置文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub 上repo 的名称，如：muzi502/xxx</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">repositoryFullName:</span> <span class="string">muzi502/cyclone</span></span><br><span class="line">  <span class="comment"># 组件的最新 tag</span></span><br><span class="line">  <span class="attr">currentTag:</span> <span class="string">v0.5.3</span></span><br><span class="line">  <span class="comment"># 从指定 repo 拉取 helm chart 的目录</span></span><br><span class="line">  <span class="attr">chartPaths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">manifests/cyclone</span>       <span class="comment"># 拉取 chart 的路径，可以配置多条</span></span><br><span class="line">  <span class="attr">targetChartPath:</span> <span class="string">addons</span></span><br></pre></td></tr></table></figure><p>比如<code>repos/devops.yaml</code> 中用于配置收集流水线组件的 helm Chart。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">A</span> <span class="string">set</span> <span class="string">of</span> <span class="string">files</span> <span class="string">to</span> <span class="string">collect.</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">collect</span> <span class="string">set</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">repositoryFullName:</span> <span class="string">muzi502/cyclone</span></span><br><span class="line">  <span class="attr">baseVersion:</span> <span class="string">v1.2</span></span><br><span class="line">  <span class="attr">currentTag:</span> <span class="string">v1.2.0</span></span><br><span class="line">  <span class="attr">chartPaths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">manifests/cyclone</span></span><br><span class="line">  <span class="attr">targetChartPath:</span> <span class="string">addons</span></span><br></pre></td></tr></table></figure><p>这一步只需要添加一次即可，后续无增删组件的情况无需再关心这些配置，配置中的 repo 版本也会使用自动化的工具来完成自动更新，无需手动维护，这样能减少研发们的维护成本。</p><h4 id="更新组件-repo-版本"><a href="#更新组件-repo-版本" class="headerlink" title="更新组件 repo 版本"></a>更新组件 repo 版本</h4><p>发布前置工作都完成之后，PM 会通知发布人员开始发布。因为参数化构建和 Job 集中式管理等强依赖的特性其他 CI 工具无法很好地替代，目前我们的发布流水线依旧是使用的 Jenkins 。</p><p>发布人员在 Jenkins 上执行发布流水线的任务，流水线中首先使用自动化工具解析 repo 配置文件，根据组件打 repo tag 时候的 message 信息收集最新的 tag 版本号。收集完毕之后发布流水线自动提交一个 PR/MR 到 repo 的发布分支。并通自动发送群消息通知让所有 repo 的负责人确认收集到的 repo tag 是否正确。确认无误之后，将 PR/MR 自动合并到发布分支。</p><h4 id="更新组件-Chart-文件"><a href="#更新组件-Chart-文件" class="headerlink" title="更新组件 Chart 文件"></a>更新组件 Chart 文件</h4><p>更新完组件 repo 的 tag 之后，这样就能确定本次发布需要到哪些 repo 的哪个 repo tag 下去收集组件部署的 Chart 文件，在这一步会使用自动化工具，根据 repos 目录下的配置文件，收集对应组件的 Chart 文件到发布 repo 的指定目录下，一般默认为 addons 目录。</p><h4 id="更新组件版本配置文件"><a href="#更新组件版本配置文件" class="headerlink" title="更新组件版本配置文件"></a>更新组件版本配置文件</h4><p>根据收集到的组件 Chart 版本号更新 <code>version.yml</code>这个组件版本配置文件中对应的版本，部署的时候会根据这个文件去部署哪些组件以及部署组件的版本是什么。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">modules:</span> <span class="comment"># 模块列表，一个平台可以有多个 modules</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="comment"># 模块名</span></span><br><span class="line">    <span class="attr">description:</span> <span class="comment"># 模块的描述信息</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="comment"># 是否启用模块</span></span><br><span class="line">    <span class="attr">addons:</span> <span class="comment"># 模块中的组件列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="comment"># 组件的名称， 必须和组件名以及 Chart.yaml name 保持一致</span></span><br><span class="line">      <span class="attr">description:</span> <span class="comment"># 组件的描述信息</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="comment"># 是否启用模块</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="comment"># 组件运行的 namespace</span></span><br><span class="line">      <span class="attr">version:</span> <span class="comment"># 组件的版本号，必须和 repo tag Chart.yaml version 保持一致</span></span><br></pre></td></tr></table></figure><h4 id="更新平台镜像列表"><a href="#更新平台镜像列表" class="headerlink" title="更新平台镜像列表"></a>更新平台镜像列表</h4><p>使用 Helm Template 渲染出原生的 K8s YAML内容，使用 grep 过滤出平台组件部署所需要的镜像，并将输出的结果重定向到 <code>images/images_platform.list</code> 文件中，这些镜像是部署部署组件必须用到的镜像。另外还有三种其他的镜像如下：</p><ul><li>images_extra.list：一些额外的镜像第三方镜像。</li><li>images_base.list：一些平台 DevOps 组件用到的 base 镜像，比如 golang, nodejs, maven 等。</li><li>images_app_store.list： 平台应用商店中应用部署需要的镜像，比如 Wordpress，GitLab，Harbor 等。</li></ul><p>处理这些镜像列表时也很简单，即使用 find 查找各个组件 Chart 中的 images_xxx.list 文件，将这些镜像统一合并到 images 目录下对应的文件中。</p><p>在发布 repo 中这些镜像列表都是自动化完成了，并且禁止个人手动在发布 repo 中进行更新，这样能避免一些人为的低级错误，比如镜像版本错误。我们使用这种方式来管理平台所需要的 200 多个镜像，很少因为镜像列表的错误而导致发布事故，极大地提高了版本发布的效率。</p><h4 id="提交收集产物"><a href="#提交收集产物" class="headerlink" title="提交收集产物"></a>提交收集产物</h4><p>上述步骤都完成之后会将这些收集的文件提交一个 PR/MR 到发布 repo，发布 repo 会触发一个额外的流水线去检查镜像列表中的镜像是否存在于内部的镜像仓库中，如果不存在则会发送群消息通知研发准备好镜像。</p><p>等镜像都准备完毕之后，会将这个 PR/MR 合并到发布 repo 相应的分支。合并完 PR/MR 之后至此研发需要参与的发布流程已经完毕，repo 的发布分支无需再修改其他的内容，这时会给当前发布分支的最新 commit 打上一个 repo tag，repo tag 的名称就是产品的版本号，比如 <code>v2.10.2</code> 。</p><p>到此为止完成了发布环节的绝大多数任务，剩下的只有打包安装包这个收尾工作。</p><h4 id="打包流程"><a href="#打包流程" class="headerlink" title="打包流程"></a>打包流程</h4><p>以上发布流程需要众多研发来参与确保发布环节收集到的组件 Chart 和镜像是正确的，收集完成这些文件之后就继续进行打包操作。打包的目的是将产品部署依赖的文件和镜像打包在一起，制作成一个离线安装包。打包流程很简单，大致可分为三部分：</p><ul><li>打包 Helm Chart</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p charts &amp;&amp; rm -rf charts/* || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> $(find <span class="variable">$&#123;ADDONS_PATH&#125;</span> -<span class="built_in">type</span> f | sed -n <span class="string">'s/Chart.yaml//p'</span>); <span class="keyword">do</span> helm package <span class="variable">$&#123;dir&#125;</span> -d charts; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">chown -R 10000:10000 charts &amp;&amp; tar -cpvf charts.tar.gz charts</span><br></pre></td></tr></table></figure><ul><li>打包镜像</li></ul><p>根据 images 目录下的镜像列表将镜像同步到一个指定的 Registry 中，为了提升打包效率，这个 Registry 长期保留。然后使用硬连接的方式将镜像文件直接从这个 Registry 存储目录中直接提取出来，并打包成一个 tar 格式的文件放到产品安装包中。关于镜像同步的详细原理和一些之前做的优化可以参考 <a href="https://blog.k8s.li/overlay2-on-package-pipline.html">overlay2 在打包发布流水线中的应用</a> 和 <a href="https://blog.k8s.li/select-registry-images.html">什么？发布流水线中镜像“同步”速度又提升了 15 倍 ！</a>这两篇文章。</p><ul><li>打包上传</li></ul><p>镜像和组件 Chart 都打包完成之后，再将一些安装脚本和配置文件复制到安装包中。最后将这些内容一并打包在一起，并将它上传特性的存储服务器上。之后会有专门的测试团队来对打出来安装包进行测试，测试通过之后就可以对外发布交付给客户使用。</p><h4 id="发布-release-分支"><a href="#发布-release-分支" class="headerlink" title="发布 release 分支"></a>发布 release 分支</h4><p>至此平台组件发布流程到此完毕，当一个正式的版本发布完成之后，我们会采用 Kubernetes 社区版本管理的方式给发布 repo 创建一个 release 分支，比如 release-2.10 分支。后续所有的补丁包和一些 OEM 定制化开发的项目都会基于这种 release 分支来进行开发。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h3><p>为了适配这套发布流程，我们将 Kubernetes 集群部署和平台组部署将所使用的镜像收敛到 library 和 release 两个 project：</p><ul><li>对于开源的镜像，即直接使用 docker.io、k8s.gcr.io、quay.io 这些官方 registry 中的镜像，将会统一使用 library 这个 project，比如 <code>library/nginx:1.19.0</code>。</li><li>对于平台组件自身的镜像，如自研组件使用自己的 Dockerfile build 出来的镜像则统一使用 release 这个 project，比如 <code>release/cyclone:v1.2.0</code> 。</li></ul><p>release project 中的镜像是我们平台组件的镜像，能很方便地知道该镜像来自哪个组件以及是如何构建的。但将一些上游官方的镜像统一到 library 这个 project 之后，就很难知道该镜像的原镜像是什么了。比如 <code>library/coredns:1.7.0</code> 这个镜像，仅仅通过这个名字很难辨别出它是来自 docker.io 还是 k8s.gcr.io。因此为了解决这类问题和方便追溯上游原镜像，我们使用了统一的镜像同步配置文件来处理这种转换关系，在打包发布的时候我们会将这些镜像进行自动地转换和处理，这样避免了很多手动 push 镜像的麻烦和使用镜像错误的问题。</p><ul><li>images_origin.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># kubeadm core images</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-apiserver</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/kube-apiserver</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-controller-manager</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/kube-controller-manager</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-proxy</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/kube-proxy</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/kube-scheduler</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/kube-scheduler</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/coredns</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/coredns</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/pause</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/pause</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubernetes addons</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/dns/k8s-dns-node-cache</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/k8s-dns-node-cache</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">k8s.gcr.io/cpa/cluster-proportional-autoscaler-amd64</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/cluster-proportional-autoscaler-amd64</span></span><br><span class="line"><span class="comment"># network plugin</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/cni</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/calico-cni</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/kube-controllers</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/calico-kube-controllers</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/node</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/calico-node</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/calico/typha</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/calico-typha</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">quay.io/coreos/flannel</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/flannel</span></span><br><span class="line"><span class="comment"># nginx for daemonset and offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">docker.io/library/nginx</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/nginx</span></span><br><span class="line"><span class="comment"># docker registry for offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">docker.io/library/registry</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/registry</span></span><br><span class="line"><span class="comment"># helm chartmuseum for offline resources</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">ghcr.io/helm/chartmuseum</span></span><br><span class="line"> <span class="attr">dest:</span> <span class="string">library/chartmuseum</span></span><br><span class="line"><span class="comment"># yq eval -j images.yml | jq -r '.[]|select(.dest=="'"$&#123;image&#125;"'") | .src'</span></span><br></pre></td></tr></table></figure><h3 id="补丁包管理"><a href="#补丁包管理" class="headerlink" title="补丁包管理"></a>补丁包管理</h3><p>产品的正式版本在发布不久之后，在客户使用的过程中如果发现新的 bug 或者客户提出一些新的需求。我们这时会基于这些需求发布一个热更新补丁包，而不是发布一个新版本。因为热更新补丁包所涉及修改的组件比较少，需要参与的研发人员也比较少，这样能够节省很多人力成本。同时采用补丁包的方式进行热更新能够保障客户环境的稳定运行，平台稳定性也能够得到保障。</p><p>在发布流程中我们曾提到，发布过程中会给 repo 打上一个产品版本的 tag，比如 <code>v2.10.2</code>，在这里需要强调一下，<strong>这版本号特别重要。</strong>后续所有的补丁包发布都会强依赖于此版本号，因此我们会在 repo 的保护 tag 里将这种正式发布的 repo tag 进行锁定保护起来，禁止<code>--force</code> 方式覆盖。在部署的时候，这个版本号也会以 configmap 的方式记录起来，用于在前端 web 页面上展示平台版本和后续安装补丁包时进行版本校验。</p><p>补丁包发布的频率也是蛮高的，从去年五月份到现在一年左右的时间里，自己负责的补丁包发布数量大约有 50 个左右，平均每周一个。同一个版本或 OEM 项目，补丁包发布的数量也大不相同（少则三四个，多则十七八个）。当补丁包的数量越来越多时，就需要一套机制来管理这些复杂环境的补丁包。不然的话版本发布将会变得十分混乱，导致客户生产环境安装上错误版本的组件，由此可能导致生产事故。</p><p>因此在设计补丁包发布方案的时候，我们依旧和标准产品的发布流程结合起来，使用 git repo tag + 分支的方式来管理这些补丁包的发布工作。整体的发布流程如下：</p><ul><li>PM 安排研发人员修复组件 bug；</li><li>组件负责人完成冒烟测试，并在内部 DevOps 平台打镜像和 repo tag；</li><li>组件负责人修改发布 repo 中 addons 目录下对应组件的 chart 文件；</li><li>PM 通知发布人员开始发布补丁包；</li><li>发布人员运行流水线任务自动化打补丁包；</li><li>测试人员验证补丁包的质量；</li></ul><p>在打包补丁包的时候我们采用 git diff 的方式，将本次补丁包发布所修改的组件 Chart 文件筛选出来，只对这些修改的组件进行打包操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chart <span class="keyword">in</span> $(git diff --name-only --diff-filter=AM --ignore-space-at-eol --ignore-space-change <span class="variable">$&#123;DENPENDENCY_VERSION&#125;</span> <span class="variable">$&#123;NEW_VERSION&#125;</span> <span class="variable">$&#123;ADDONS_PATH&#125;</span> | sed -n <span class="string">'s/Chart.yaml//p'</span> | sort -u );<span class="keyword">do</span> cp -rf <span class="variable">$&#123;chart&#125;</span> <span class="variable">$&#123;HOTFIX_YAML_DIR&#125;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>对于一些 OEM 项目，我们会基于产品版本的分支创建一个与该 OEM 产品相对应的发布分支，如 <code>release-2.10/muzi502</code>，即代表 muzi502 这个客户使用的产品版本是基于 2.10 版本的。在这个分支上我们基于上述步骤进行 OEM 补丁包的发布。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="PaaS" scheme="https://blog.k8s.li/tags/PaaS/"/>
    
      <category term="toB" scheme="https://blog.k8s.li/tags/toB/"/>
    
  </entry>
  
  <entry>
    <title>2021 五一假期环太湖骑行之旅</title>
    <link href="https://blog.k8s.li/taihu.html"/>
    <id>https://blog.k8s.li/taihu.html</id>
    <published>2021-05-29T16:00:00.000Z</published>
    <updated>2021-05-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>调休两天终于迎来了五天的五一假期，实际上仅仅放了一天假期，也有网友调侃到 <strong>人们 996 连续工作 12 天从而换取 5 天假期去纪念这个工人获得 8 小时工作制的节日</strong>。</p><p>春节的时候就地过年没有回家，独自一人在杭州呆了 7 天，这 7 天一直宅在家里看书和追番，甚至连小区的门都没出去过。为了不让宝贵的五一假期烂在家里，在 4 月初的时候就开始计划环太湖的骑行之旅。</p><p>记得上一次长远的骑行还是高考完的那个暑假，也是独自一人从家骑车去北京，来回用了五天时间。简单估计了一下从杭州骑行到太湖，然后环太湖骑行一周，总的路程大概 520 公里，也正好五天的时间。等到回来的时候如果身体吃不消再调休几天也没啥大碍。于是，一个环太湖骑行的计划慢慢在脑中酝酿了，那么开始回顾这段骑行之旅吧：</p><h2 id="准备篇"><a href="#准备篇" class="headerlink" title="准备篇"></a>准备篇</h2><p>山地车是去年刚来杭州时就买的，在闲鱼上花了 800 块钱买的 2012 款 GIANT 捷安特 ATX770-D，到现在也是有些年头了。上下班骑行用了一年多也没啥大毛病，这一年间就后轮塔基里的轴承坏了一次，自己买来工具拆开给轴承补上缺损的珠子并上好黄油密封就修好了。</p><p><img src="https://p.k8s.li/20210501_021308214_iOS.jpg" alt=""></p><p>在五月的最后两周一直在准备骑行的装备，把后轮的外胎换了一条新的，因为旧的磨损太严重了，中间部分基本磨平了，如果不换掉的话保不准这一路会爆胎。另外又准备了两条内胎以应对爆胎的情况。又买了一个二氧化碳充气泵和 4 瓶二氧化碳补气瓶，以及多功能扳手。将这一些维修工具全部放到了车架的三角包里面。</p><p>另外在此强烈推荐车架上挂的三角包。它的空间放下修车常用的工具和一条内胎绰绰有余，这样即便是一到两天的短途骑行也能带齐装备轻装上阵，唯一不足的就是要牺牲掉水壶位。</p><p>为了放下后座架的驼包，又花了三十多块钱买了后车架，将驼包固定在上面。驼包里面带的东西还蛮多的：几件换洗的衣服、雨衣和雨伞、充电宝、毛巾纸巾等。水没有带太多，在路上随便买着喝就行。</p><h2 id="出发篇"><a href="#出发篇" class="headerlink" title="出发篇"></a>出发篇</h2><p>出发前天晚上一直睡不着，脑子实在是太兴奋了，这种感觉就像是高中放寒暑假的前天晚上一样，终于可以痛快地放松一下了。五一当天早上 8 点起床的，本计划着 6 点起床出发的，因为早上凉快车少比较适合骑行。收拾一下装备下楼准备出发，离开小区没多久后就发现：我艹，保命头盔没带！这怎么能行，于是屁颠颠地返回家里拿头盔。虽然头盔是几十块钱的破烂货，但关键时刻还是能保小命一条滴，还是要戴上滴。</p><p>第一天准备先骑行到湖州，因为临近太湖的城市中，湖州是距离杭州最近的一个，正好可以把湖州当作环太湖骑行的出发点，最终再返回这里。从地图上看，杭州到太湖适合骑行的的最佳路线就是沿着笤（tiao）溪旁的公路直达湖州，我们这里暂定它条路为笤溪路。只要进入到这条沿溪公路基本上无需导航和地图就能到达湖州，而且这条路上的路绿灯特别少，车辆相对于国道和省道也少很多，路边有大片的绿化带树林可以遮阴，以及临近水边空气质量和湿度都十分安逸。</p><p><img src="https://p.k8s.li/20210501_031349626_iOS.jpg" alt=""></p><p><img src="https://p.k8s.li/20210501_040031464_iOS.jpg" alt=""></p><h2 id="Day-1-杭州-–-gt-湖州-–-gt-长兴"><a href="#Day-1-杭州-–-gt-湖州-–-gt-长兴" class="headerlink" title="Day 1 杭州 –&gt; 湖州 –&gt; 长兴"></a>Day 1 杭州 –&gt; 湖州 –&gt; 长兴</h2><p>大概上午九点左右就进入到笤溪路，当时随身携带的一瓶矿泉水也一口闷喝完了。后面一直沿着这条路骑行路两个小时依旧没有在路边找到任何一家超市，十分僵硬。只好看地图找到德清县的一个小乡镇，于是绕道这个这个小乡镇里买水和吃饭。中午吃完饭之后感觉实在是太热，扰扰头发现头发好长，大概有三个月没有理发 🥲，是我太懒了，平时很少在意这件事儿。这么热的天头发头顶着这么长也不是个好办法，于是在路边随便找路一家理发点剪短了头发。</p><ul><li>理完发之后已经中午十二点半了，应该找个地方稍作休息一下。于是还是返回到笤溪路，在路边的绿化带树林里找到路个合适的大石头。将随身携带的换洗衣服当作枕头，雨衣在石头上一摊就是个简易的小床了，躺着休息一个半小时再出发。</li></ul><p><img src="https://p.k8s.li/20210501_050737596_iOS.jpg" alt=""></p><ul><li>在笤溪路路边的绿化带树林里有特别多的大树被风吹断，心疼树树 🥺</li></ul><p><img src="https://p.k8s.li/20210501_064702113_iOS.jpg" alt=""></p><ul><li>到了下午五点左右到达湖州的太湖风景区，拍摄地点为湖滨路附近的公园</li></ul><p><img src="https://p.k8s.li/20210501_092945406_iOS.jpg" alt=""></p><p>在景区休息了半个多小时之后，天已经快黑了，原本准备当晚住在湖州，但发现附近五公里内的酒价格普遍在 3k～5k 之间。毕竟是临近太湖风景区，而且是五一黄金周，价格高的离谱可不是咱这种韭菜和低端人口能够享受的 🥲。于是在搜一下十公里外的城区，虽然价格能够接受。但要骑行十多公里，而且在城区骑行红绿灯特别多，十分浪费时间。第二天早上又得骑行十多公里返回环太湖公路，感觉来回二十多公里还不如往前面接着骑行，在远一点的地方找一个合适的酒店住下。于是在地图上发现长兴火车站距离太湖十分近，火车站附近肯定有酒店。于是接着找了距离环太湖路最近的酒店。距离当前地点二十公里左右，如果现在骑行的话，一小时左右应该就能骑到酒店。应该没问题，因为天已经快黑了，不再赶紧骑行的话将要夜间骑行，很不安全。</p><p>于是当时做了一个很蠢的决定，继续骑行，忘记了吃晚饭。本来午饭吃的就比较少，也没有及时补充能量，体力已经快到达了极限。于是在体力不堪的情况下又继续骑行了二十公里。到达长兴火车站附近后，距离酒店就不到两公里的路程了。令我意想不到的是，刚过火车站不久后，就出突然出现头晕恶心的不适。停下来歇息了半个小时才缓过来，以至于最后的两周里基本上是推着车子走了半个小时才到的酒店。到达酒店已经八点半了，已经快九个小时没吃东西了，感觉特别累、全身无力。</p><p>把车子推到房间里简单洗漱了一下，就去楼下的夜市吃点饭。点了一盘凉拌黄瓜和干锅包菜，没想到等了半个小时……</p><p>吃完饭后在超市买了几瓶水和水果，回到房间看了一集 <a href="">BBC：冰冻星球·如履薄冰</a> 纪录片就睡着了。</p><p><img src="https://p.k8s.li/20210501_141353000_iOS.png" alt=""></p><h2 id="Day-2-长兴-–-gt-无锡-–-gt-苏州"><a href="#Day-2-长兴-–-gt-无锡-–-gt-苏州" class="headerlink" title="Day 2 长兴 –&gt; 无锡 –&gt; 苏州"></a>Day 2 长兴 –&gt; 无锡 –&gt; 苏州</h2><p>第二天早上七点半起床，在楼下的早餐店吃早饭，也是酒店附赠的一顿早餐。在酒店们口发现了很多驴友的山地车和公路车，估计他们昨晚也是在这里休息的。吃完饭之后收拾东西出发，下一站是苏州，本想着要去无锡，但由于时间缘故还是不去无锡了，今天要骑行 150 多公里到达苏州的西山风景区。</p><p><img src="https://p.k8s.li/20210502_004340465_iOS.jpg" alt=""></p><p>刚刚出来酒店门口到达 302 国道后就发现今天天气十分不妙，逆风！骑行起来特别费劲，平均时速只能维持在 18公里/小时，只能奋力骑行了。中午的时候到达了宜兴的一个小镇，在那里吃了顿午饭，之后继续骑行到了无锡市的十八湾湿地公园，在公园里的一个湖边休息了一个小时候就继续骑行。到达无锡之后没有继续沿着太湖公路骑行，而是选择了最短的路线到达苏州西山风景区。</p><p><img src="https://p.k8s.li/20210502_010036044_iOS.jpg" alt=""></p><p>晚上到达西山风景区已经八点左右了，到达凤凰台景点所在的小岛之后，在景区里的一家饭店吃顿晚饭，一个人三菜一汤吃得特别饱。之后又继续骑行到西山风景区里面的一家民宿。在美团上订的价格是 108¥ 一个大床大间。</p><p><img src="https://p.k8s.li/20210502_110411190_iOS.jpg" alt=""></p><h2 id="Day-3-太湖风景区-–-gt-苏州城区"><a href="#Day-3-太湖风景区-–-gt-苏州城区" class="headerlink" title="Day 3 太湖风景区 –&gt; 苏州城区"></a>Day 3 太湖风景区 –&gt; 苏州城区</h2><p>早上七点半起床，将驼包从山地车上卸了下来放在了房间里。今天上午只在西山风景区玩儿，不需要带这些行李，这样在山里骑行起来也能放飞自我。</p><ul><li>去的第一个景点是林屋洞，价格是 50¥，在林屋洞山上的一座塔的内部拍摄太湖沿岸的风景</li></ul><p><img src="https://p.k8s.li/20210503_005522469_iOS.jpg" alt=""></p><p>上午的时候就在西山风景区沿着湖边骑行玩儿了一圈，退房之后也十二点多了，于是在附近的一家兰州拉面吃了顿蛋炒饭。</p><ul><li>随后又骑行到太湖周边休息一段时间</li></ul><p><img src="https://p.k8s.li/20210503_044026640_iOS.jpg" alt=""></p><p>下午继续骑行，三号号和四号这两晚定的民宿在平江历史街区附近。从西山风景区到那里大概有 65 公里的骑行路程。下午五点左右到达住的地方。价格是 512¥ 两晚，感觉还是比较贵的，而且是三人间，凑活住两晚吧。其实本人对和陌生人合住并不是很介意，还是能接受。在我大学刚毕业之后，也是住在公司附近的一家民宿。当时一个不到十五平米的房间里，两个上下铺的床，和四个人住一块。虽然十分拥挤也又很多不便，但价格十分便宜，每个月 300¥ 包所有费用，十分适合当时刚毕业手无分文的我。</p><ul><li>晚上的时候自己一个人去吃了顿海底捞火锅，总感觉在外面自己一个人吃饭十分尴尬 😅 。如今毕业也快两年了，这两年基本上是独自一个人生活的，这种独处的感觉也慢慢适应了，也越来越享受这种独处的生活了。</li></ul><p><img src="https://p.k8s.li/20210503_114832550_iOS.jpg" alt=""></p><ul><li>平江历史街区夜景</li></ul><p><img src="https://p.k8s.li/20210503_124849278_iOS.jpg" alt=""></p><ul><li>平江历史街区夜景</li></ul><p><img src="https://p.k8s.li/20210503_125244682_iOS.jpg" alt=""></p><h2 id="Day-4-苏州游玩"><a href="#Day-4-苏州游玩" class="headerlink" title="Day 4 苏州游玩"></a>Day 4 苏州游玩</h2><p>早上七点半就起床了，上午游玩的第一站是留园，预定的是早上 8 点到 9 点的门票，早上下起了丝丝细雨，感觉天气不太好。在留园逛完之后又去了狮子林，感觉这两个园子还可以，景区的人并不是特别多。</p><p><img src="https://p.k8s.li/20210504_010754779_iOS.jpg" alt=""></p><p>本想着下午去拙政园，但当天已经没有门票了，只能预定到五号上午的。于是下午就去了虎丘风景区。</p><p><img src="https://p.k8s.li/20210504_084847466_iOS.jpg" alt=""></p><ul><li>虎丘风景区附近</li></ul><p><img src="https://p.k8s.li/20210504_085354580_iOS.jpg" alt=""></p><p><img src="https://p.k8s.li/20210504_085413326_iOS.jpg" alt=""></p><h2 id="Day-5-苏州-–-gt-湖州"><a href="#Day-5-苏州-–-gt-湖州" class="headerlink" title="Day 5 苏州 –&gt; 湖州"></a>Day 5 苏州 –&gt; 湖州</h2><p>早上八点就出发去了拙政园，在里面逛的时间比较长，等到十点半的时候才从里面出来。</p><p><img src="https://p.k8s.li/20210505_010850949_iOS.jpg" alt=""></p><ul><li>感觉这棵树特别像人的手 🖐️ 🤔️</li></ul><p><img src="https://p.k8s.li/20210505_011052002_iOS.jpg" alt=""></p><p>逛完拙政园之后已经快十一点了，回到住的地方收拾完行李，在附近的一家素食餐厅吃了顿午饭。之后继续骑行，准备返回了，晚上准备住在湖州。</p><p><img src="https://p.k8s.li/20210505_082143685_iOS.jpg" alt=""></p><ul><li>下午五点半的时候到达湖州滨湖大道，再次来到了出发点，环太湖骑行总算顺利结束了，只剩下明天一天返回杭州的路程了。明天到家后再在家休息一天，因此给 TL 申请了两天年假，也很顺利滴批准了。</li></ul><p><img src="https://p.k8s.li/20210505_093503000_iOS.png" alt=""></p><ul><li>滨湖大道旁的公园，湖边夕阳西下的景色</li></ul><p><img src="https://p.k8s.li/20210505_095106128_iOS.jpg" alt=""></p><h2 id="Day-6-湖州-–-gt-杭州"><a href="#Day-6-湖州-–-gt-杭州" class="headerlink" title="Day 6 湖州 –&gt; 杭州"></a>Day 6 湖州 –&gt; 杭州</h2><p>最后一天就是从湖州返回杭州了，还是沿着原路返回，下午临近六点顺利到达杭州。</p><p>感觉这几天吃的太多了 😤</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>住宿</td><td>866</td></tr><tr><td>门票</td><td>295</td></tr><tr><td>食物</td><td>750</td></tr><tr><td>其他</td><td>182</td></tr><tr><td>总计</td><td>2093</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;调休两天终于迎来了五天的五一假期，实际上仅仅放了一天假期，
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.k8s.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="骑行" scheme="https://blog.k8s.li/tags/%E9%AA%91%E8%A1%8C/"/>
    
  </entry>
  
</feed>
